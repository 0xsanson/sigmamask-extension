{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Provider, Web3Provider } from \"@ethersproject/providers\";\nimport { createModuleLogger } from \"@metamask/utils\";\n\nimport { projectLogger } from \"./logger\";\nimport type {\n  PrepareUserOperationRequest,\n  SignUserOperationRequest,\n  SmartContractAccount,\n  UpdateUserOperationRequest,\n} from \"@metamask/user-operation-controller\";\nimport { signUserOperation } from \"./ecdsa\";\nimport {\n  getCallData,\n  getDummySignature,\n  getInitCode,\n  getNonce,\n  getSender,\n} from \"./SimpleAccount\";\nimport {\n  getDummyPaymasterAndData,\n  getPaymasterAndData,\n} from \"./VerifyingPaymaster\";\n\nconst log = createModuleLogger(projectLogger, \"simple-account-snap\");\n\nexport class SimpleSmartContractAccount implements SmartContractAccount {\n  #bundler: string;\n\n  #entrypoint: string;\n\n  #owner: string;\n\n  #paymasterAddress?: string;\n\n  #privateKey: string;\n\n  #provider: Provider;\n\n  #salt: string;\n\n  #simpleAccountFactory: string;\n\n  constructor({\n    bundler,\n    entrypoint,\n    owner,\n    paymasterAddress,\n    privateKey,\n    provider,\n    salt,\n    simpleAccountFactory,\n  }: {\n    bundler: string;\n    entrypoint: string;\n    owner: string;\n    paymasterAddress?: string;\n    privateKey: string;\n    provider: Provider;\n    salt: string;\n    simpleAccountFactory: string;\n  }) {\n    this.#bundler = bundler;\n    this.#entrypoint = entrypoint;\n    this.#owner = owner;\n    this.#paymasterAddress = paymasterAddress;\n    this.#privateKey = privateKey;\n    this.#provider = new Web3Provider(provider as any);\n    this.#salt = salt;\n    this.#simpleAccountFactory = simpleAccountFactory;\n  }\n\n  async prepareUserOperation(request: PrepareUserOperationRequest) {\n    log(\"Received user operation request\");\n\n    const { data, to, value } = request;\n\n    const potentialInitCode = getInitCode(\n      this.#owner,\n      this.#salt,\n      this.#simpleAccountFactory\n    );\n\n    const sender = await getSender(\n      potentialInitCode,\n      this.#provider,\n      this.#entrypoint\n    );\n\n    const callData = getCallData(to, value, data);\n    const code = await this.#provider.getCode(sender);\n    const isDeployed = Boolean(code) && code !== \"0x\";\n    const initCode = isDeployed ? undefined : potentialInitCode;\n    const nonce = await getNonce(sender, isDeployed, this.#provider);\n    const bundler = this.#bundler;\n    const dummySignature = getDummySignature();\n    const dummyPaymasterAndData = getDummyPaymasterAndData(\n      this.#paymasterAddress\n    );\n\n    return {\n      bundler,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      initCode,\n      sender,\n      nonce,\n    };\n  }\n\n  async updateUserOperation(request: UpdateUserOperationRequest) {\n    log(\"Received paymaster request\", {\n      paymasterAddress: this.#paymasterAddress,\n    });\n\n    const { userOperation } = request;\n    const paymasterAddress = this.#paymasterAddress;\n\n    const paymasterAndData = paymasterAddress\n      ? await getPaymasterAndData(\n          paymasterAddress,\n          0,\n          0,\n          userOperation,\n          this.#privateKey,\n          this.#provider,\n          this.#entrypoint\n        )\n      : undefined;\n\n    if (!paymasterAddress) {\n      log(\"Skipping paymaster\");\n    }\n\n    return { paymasterAndData };\n  }\n\n  async signUserOperation(request: SignUserOperationRequest) {\n    log(\"Received user operation signature request\");\n\n    const { chainId, userOperation } = request;\n\n    const signature = await signUserOperation(\n      userOperation,\n      this.#entrypoint,\n      chainId,\n      this.#privateKey\n    );\n\n    return {\n      signature,\n    };\n  }\n}\n"]}