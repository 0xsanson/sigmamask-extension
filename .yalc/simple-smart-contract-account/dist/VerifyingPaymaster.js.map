{"version":3,"file":"VerifyingPaymaster.js","sourceRoot":"","sources":["../src/VerifyingPaymaster.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,4CAAqD;AACrD,wDAAoD;AACpD,qDAAiD;AAEjD,qCAA6D;AAE7D,4FAAkE;AAClE,2CAA8C;AAC9C,mCAAmC;AAGnC,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,qBAAqB,CAAC,CAAC;AAErE,SAAsB,mBAAmB,CACvC,gBAAwB,EACxB,UAAkB,EAClB,UAAkB,EAClB,aAA4B,EAC5B,UAAkB,EAClB,QAAkB,EAClB,UAAkB;;QAElB,MAAM,0BAA0B,GAAG,IAAI,oBAAQ,CAC7C,gBAAgB,EAChB,iCAAqB,EACrB,QAAQ,CACT,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,0BAA0B,CAAC,OAAO,CACnD,aAAa,EACb,UAAU,EACV,UAAU,EACV,EAAE,IAAI,EAAE,UAAU,EAAE,CACrB,CAAC;QAEF,GAAG,CAAC,8CAA8C,EAAE,IAAI,CAAC,CAAC;QAE1D,MAAM,SAAS,GAAG,MAAM,IAAA,gBAAQ,EAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAEnD,GAAG,CAAC,oCAAoC,EAAE,SAAS,CAAC,CAAC;QAErD,MAAM,IAAI,GACR,gBAAgB;YAChB,IAAA,gCAAc,EACZ,qBAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CACvE;YACD,IAAA,gCAAc,EAAC,SAAS,CAAC,CAAC;QAE5B,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;QAEtC,MAAM,OAAO,GAAG,MAAM,mBAAmB,CACvC,aAAa,EACb,IAAI,EACJ,0BAA0B,EAC1B,UAAU,CACX,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACzD,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CAAA;AAjDD,kDAiDC;AAED,SAAgB,wBAAwB,CACtC,gBAAyB;IAEzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACtB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,sBAAsB,GAAG,IAAA,gCAAc,EAC3C,qBAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACrD,CAAC;IAEF,OAAO,GAAG,gBAAgB,GAAG,sBAAsB,GAAG,IAAA,gCAAc,EAClE,2BAAe,CAChB,EAAE,CAAC;AACN,CAAC;AAdD,4DAcC;AAED,SAAe,mBAAmB,CAChC,aAA4B,EAC5B,gBAAwB,EACxB,iBAA2B,EAC3B,UAAkB;;QAElB,MAAM,iBAAiB,mCAAQ,aAAa,KAAE,gBAAgB,GAAE,CAAC;QAEjE,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,UAAU,CAAC,uBAAuB,CACvE,iBAAiB,EACjB,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,EACpB,CAAC,EACD,EAAE,IAAI,EAAE,UAAU,EAAE,CACrB,CAAC;QAEF,MAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAY,CAAC;QACvD,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAE1C,GAAG,CAAC,wCAAwC,EAAE;YAC5C,YAAY;YACZ,KAAK,EAAE,CAAC,MAAM;SACf,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CAAC;IACjB,CAAC;CAAA","sourcesContent":["import { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { stripHexPrefix } from \"ethereumjs-util\";\n\nimport { createModuleLogger, projectLogger } from \"./logger\";\nimport type { UserOperation } from \"@metamask/user-operation-controller\";\nimport VerifyingPaymasterABI from \"./abi/VerifyingPaymaster.json\";\nimport { DUMMY_SIGNATURE } from \"./constants\";\nimport { signHash } from \"./ecdsa\";\nimport { Provider } from \"@ethersproject/providers\";\n\nconst log = createModuleLogger(projectLogger, \"verifying-paymaster\");\n\nexport async function getPaymasterAndData(\n  paymasterAddress: string,\n  validUntil: number,\n  validAfter: number,\n  userOperation: UserOperation,\n  privateKey: string,\n  provider: Provider,\n  entrypoint: string\n): Promise<string> {\n  const verifyingPaymasterContract = new Contract(\n    paymasterAddress,\n    VerifyingPaymasterABI,\n    provider\n  );\n\n  const hash = await verifyingPaymasterContract.getHash(\n    userOperation,\n    validUntil,\n    validAfter,\n    { from: entrypoint }\n  );\n\n  log(\"Retrieved user operation hash from paymaster\", hash);\n\n  const signature = await signHash(hash, privateKey);\n\n  log(\"Generated user operation signature\", signature);\n\n  const data =\n    paymasterAddress +\n    stripHexPrefix(\n      defaultAbiCoder.encode([\"uint48\", \"uint48\"], [validUntil, validAfter])\n    ) +\n    stripHexPrefix(signature);\n\n  log(\"Generated paymaster data\", data);\n\n  const isValid = await verifyPaymasterData(\n    userOperation,\n    data,\n    verifyingPaymasterContract,\n    entrypoint\n  );\n\n  if (!isValid) {\n    throw new Error(\"Validation of paymaster data failed\");\n  }\n\n  return data;\n}\n\nexport function getDummyPaymasterAndData(\n  paymasterAddress?: string\n): string | undefined {\n  if (!paymasterAddress) {\n    return undefined;\n  }\n\n  const encodedValidUntilAfter = stripHexPrefix(\n    defaultAbiCoder.encode([\"uint48\", \"uint48\"], [0, 0])\n  );\n\n  return `${paymasterAddress}${encodedValidUntilAfter}${stripHexPrefix(\n    DUMMY_SIGNATURE\n  )}`;\n}\n\nasync function verifyPaymasterData(\n  userOperation: UserOperation,\n  paymasterAndData: string,\n  paymasterContract: Contract,\n  entrypoint: string\n): Promise<boolean> {\n  const testUserOperation = { ...userOperation, paymasterAndData };\n\n  const result = await paymasterContract.callStatic.validatePaymasterUserOp(\n    testUserOperation,\n    \"0x\".padEnd(66, \"0\"),\n    1,\n    { from: entrypoint }\n  );\n\n  const packedResult = result[1].toHexString() as string;\n  const failed = packedResult.endsWith(\"1\");\n\n  log(\"Validated paymaster data with contract\", {\n    packedResult,\n    valid: !failed,\n  });\n\n  return !failed;\n}\n"]}