{"version":3,"file":"SimpleAccount.js","sourceRoot":"","sources":["../src/SimpleAccount.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,wDAAuD;AACvD,wDAAoD;AAEpD,qDAAiD;AAEjD,qCAA6D;AAC7D,4EAAkD;AAClD,kFAAwD;AACxD,gGAAsE;AACtE,2CAA8C;AAE9C,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,gBAAgB,CAAC,CAAC;AAEhE,SAAgB,WAAW,CACzB,KAAa,EACb,IAAY,EACZ,oBAA4B;IAE5B,MAAM,4BAA4B,GAAG,IAAI,oBAAQ,CAC/C,oBAAoB,EACpB,mCAAuB,CACxB,CAAC;IAEF,MAAM,QAAQ,GACZ,oBAAoB;QACpB,IAAA,gCAAc,EACZ,4BAA4B,CAAC,SAAS,CAAC,kBAAkB,CACvD,eAAe,EACf,CAAC,KAAK,EAAE,IAAI,CAAC,CACd,CACF,CAAC;IAEJ,GAAG,CAAC,qBAAqB,EAAE;QACzB,QAAQ;QACR,KAAK;QACL,IAAI;KACL,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC;AAClB,CAAC;AA1BD,kCA0BC;AAED,SAAsB,SAAS,CAC7B,QAAgB,EAChB,QAAkB,EAClB,UAAkB;;QAElB,MAAM,kBAAkB,GAAG,IAAI,oBAAQ,CAAC,UAAU,EAAE,yBAAa,EAAE,QAAQ,CAAC,CAAC;QAC7E,IAAI,aAAa,CAAC;QAElB,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,UAAU;aAC/C,gBAAgB,CAAC,QAAQ,CAAC;aAC1B,KAAK,CAAC,CAAC,KAAU,EAAE,EAAE;;YACpB,aAAa,GAAG,KAAK,CAAC;YACtB,OAAO,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,SAAS,0CAAE,MAAM,CAAC;QAClC,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YAC1C,MAAM,IAAI,KAAK,CACb,uCAAuC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CACvE,CAAC;QACJ,CAAC;QAED,GAAG,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QAEjC,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAxBD,8BAwBC;AAED,SAAgB,WAAW,CACzB,EAAsB,EACtB,KAAyB,EACzB,IAAwB;IAExB,MAAM,qBAAqB,GAAG,oBAAQ,CAAC,YAAY,CAAC,4BAAgB,CAAC,CAAC;IAEtE,OAAO,qBAAqB,CAAC,kBAAkB,CAAC,SAAS,EAAE;QACzD,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,uBAAW;QACjB,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,KAAK;QACd,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,IAAI;KACb,CAAC,CAAC;AACL,CAAC;AAZD,kCAYC;AAED,SAAsB,QAAQ,CAC5B,MAAc,EACd,UAAmB,EACnB,QAAkB;;QAElB,MAAM,qBAAqB,GAAG,IAAI,oBAAQ,CACxC,MAAM,EACN,4BAAgB,EAChB,QAAQ,CACT,CAAC;QAEF,MAAM,KAAK,GAAG,UAAU;YACtB,CAAC,CAAC,CAAC,MAAM,qBAAqB,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,EAAE;YACxD,CAAC,CAAC,KAAK,CAAC;QAEV,IAAI,UAAU,EAAE,CAAC;YACf,GAAG,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;QACpD,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AApBD,4BAoBC;AAED,SAAgB,iBAAiB;IAC/B,OAAO,2BAAe,CAAC;AACzB,CAAC;AAFD,8CAEC","sourcesContent":["import { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport { stripHexPrefix } from \"ethereumjs-util\";\n\nimport { projectLogger, createModuleLogger } from \"./logger\";\nimport EntrypointABI from \"./abi/Entrypoint.json\";\nimport SimpleAccountABI from \"./abi/SimpleAccount.json\";\nimport SimpleAccountFactoryABI from \"./abi/SimpleAccountFactory.json\";\nimport { DUMMY_SIGNATURE } from \"./constants\";\n\nconst log = createModuleLogger(projectLogger, \"simple-account\");\n\nexport function getInitCode(\n  owner: string,\n  salt: string,\n  simpleAccountFactory: string\n): string {\n  const SimpleAccountFactoryContract = new Contract(\n    simpleAccountFactory,\n    SimpleAccountFactoryABI\n  );\n\n  const initCode =\n    simpleAccountFactory +\n    stripHexPrefix(\n      SimpleAccountFactoryContract.interface.encodeFunctionData(\n        \"createAccount\",\n        [owner, salt]\n      )\n    );\n\n  log(\"Generated init code\", {\n    initCode,\n    owner,\n    salt,\n  });\n\n  return initCode;\n}\n\nexport async function getSender(\n  initCode: string,\n  provider: Provider,\n  entrypoint: string\n): Promise<string> {\n  const entrypointContract = new Contract(entrypoint, EntrypointABI, provider);\n  let expectedError;\n\n  const sender = await entrypointContract.callStatic\n    .getSenderAddress(initCode)\n    .catch((error: any) => {\n      expectedError = error;\n      return error?.errorArgs?.sender;\n    });\n\n  if (!sender || typeof sender !== \"string\") {\n    throw new Error(\n      `Could not determine sender - Error: ${JSON.stringify(expectedError)}`\n    );\n  }\n\n  log(\"Determined sender\", sender);\n\n  return sender;\n}\n\nexport function getCallData(\n  to: string | undefined,\n  value: string | undefined,\n  data: string | undefined\n): string {\n  const simpleAccountContract = Contract.getInterface(SimpleAccountABI);\n\n  return simpleAccountContract.encodeFunctionData(\"execute\", [\n    to ?? AddressZero,\n    value ?? \"0x0\",\n    data ?? \"0x\",\n  ]);\n}\n\nexport async function getNonce(\n  sender: string,\n  isDeployed: boolean,\n  provider: Provider\n): Promise<string> {\n  const simpleAccountContract = new Contract(\n    sender,\n    SimpleAccountABI,\n    provider\n  );\n\n  const nonce = isDeployed\n    ? (await simpleAccountContract.getNonce()).toHexString()\n    : \"0x0\";\n\n  if (isDeployed) {\n    log(\"Retrieved nonce from smart contract\", nonce);\n  }\n\n  return nonce;\n}\n\nexport function getDummySignature(): string {\n  return DUMMY_SIGNATURE;\n}\n"]}