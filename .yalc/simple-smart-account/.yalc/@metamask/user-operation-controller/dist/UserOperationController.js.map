{"version":3,"file":"UserOperationController.js","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  ApprovalType,\n  ORIGIN_METAMASK,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { NetworkControllerGetNetworkClientByIdAction } from '@metamask/network-controller';\nimport type {\n  TransactionMeta,\n  TransactionParams,\n} from '@metamask/transaction-controller';\nimport { Transaction } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport type { Patch } from 'immer';\nimport { cloneDeep } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport { ADDRESS_ZERO, EMPTY_BYTES, ENTRYPOINT } from './constants';\nimport { Bundler } from './helpers/Bundler';\nimport { PendingUserOperationTracker } from './helpers/PendingUserOperationTracker';\nimport { projectLogger as log } from './logger';\nimport type {\n  SmartContractAccount,\n  UserOperation,\n  UserOperationMetadata,\n} from './types';\nimport { UserOperationStatus } from './types';\nimport { getTransactionMetadata } from './utils/transaction';\nimport {\n  validateAddUserOperationOptions,\n  validateAddUserOperationRequest,\n  validatePrepareUserOperationResponse,\n  validateSignUserOperationResponse,\n  validateUpdateUserOperationResponse,\n} from './utils/validation';\n\nconst GAS_BUFFER = 1.5;\nconst DEFAULT_INTERVAL = 10 * 1000; // 10 Seconds\n\nconst controllerName = 'UserOperationController';\n\nconst stateMetadata = {\n  userOperations: { persist: true, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  userOperations: {},\n});\n\ntype Events = {\n  'transaction-updated': [metadata: TransactionMeta];\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [metadata: UserOperationMetadata, error: Error];\n  [key: `${string}:confirmed`]: [metadata: UserOperationMetadata];\n  [key: `${string}:failed`]: [metadata: UserOperationMetadata, error: Error];\n};\n\nexport type UserOperationControllerEventEmitter = EventEmitter & {\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\nexport type UserOperationControllerState = {\n  userOperations: Record<string, UserOperationMetadata>;\n};\n\nexport type GetUserOperationState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => UserOperationControllerState;\n};\n\nexport type UserOperationStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [UserOperationControllerState, Patch[]];\n};\n\nexport type UserOperationControllerActions =\n  | GetUserOperationState\n  | NetworkControllerGetNetworkClientByIdAction\n  | AddApprovalRequest;\n\nexport type UserOperationControllerEvents = UserOperationStateChange;\n\nexport type UserOperationControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  UserOperationControllerActions,\n  UserOperationControllerEvents,\n  UserOperationControllerActions['type'],\n  UserOperationControllerEvents['type']\n>;\n\nexport type UserOperationControllerOptions = {\n  interval?: number;\n  messenger: UserOperationControllerMessenger;\n  state?: Partial<UserOperationControllerState>;\n};\n\nexport type AddUserOperationOptions = {\n  chainId: string;\n  requireApproval?: boolean;\n  smartContractAccount: SmartContractAccount;\n  transaction?: TransactionParams;\n};\n\nexport type AddUserOperationResponse = {\n  id: string;\n  hash: () => Promise<string | undefined>;\n  transactionHash: () => Promise<string | undefined>;\n};\n\n/**\n * Controller for creating and managing the life cycle of user operations.\n */\nexport class UserOperationController extends BaseController<\n  typeof controllerName,\n  UserOperationControllerState,\n  UserOperationControllerMessenger\n> {\n  hub: UserOperationControllerEventEmitter;\n\n  #pendingUserOperationTracker: PendingUserOperationTracker;\n\n  /**\n   * Construct a UserOperationController instance.\n   *\n   * @param options - Controller options.\n   * @param options.interval - Polling interval used to check the status of pending user operations.\n   * @param options.messenger - Restricted controller messenger for the user operation controller.\n   * @param options.state - Initial state to set on the controller.\n   */\n  constructor({ interval, messenger, state }: UserOperationControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.hub = new EventEmitter() as UserOperationControllerEventEmitter;\n\n    this.#pendingUserOperationTracker = new PendingUserOperationTracker({\n      getUserOperations: () =>\n        cloneDeep(Object.values(this.state.userOperations)),\n      messenger,\n    });\n\n    this.#pendingUserOperationTracker.setIntervalLength(\n      interval ?? DEFAULT_INTERVAL,\n    );\n\n    this.#addPendingUserOperationTrackerListeners();\n  }\n\n  /**\n   * Create and submit a user operation.\n   *\n   * @param request - Information required to create a user operation.\n   * @param request.data - Data to include in the resulting transaction.\n   * @param request.maxFeePerGas - Maximum fee per gas to pay towards the transaction.\n   * @param request.maxPriorityFeePerGas - Maximum priority fee per gas to pay towards the transaction.\n   * @param request.to - Destination address of the resulting transaction.\n   * @param request.value - Value to include in the resulting transaction.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.chainId - Chain ID of the resulting transaction.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce.\n   */\n  async addUserOperation(\n    request: {\n      data?: string;\n      maxFeePerGas: string;\n      maxPriorityFeePerGas: string;\n      to?: string;\n      value?: string;\n    },\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationRequest(request);\n    validateAddUserOperationOptions(options);\n\n    return await this.#addUserOperation(request, options);\n  }\n\n  async addUserOperationFromTransaction(\n    transaction: TransactionParams,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationOptions(options);\n\n    const { data, maxFeePerGas, maxPriorityFeePerGas, to, value } = transaction;\n\n    return await this.#addUserOperation(\n      {\n        data,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        to,\n        value,\n      } as any,\n      { ...options, transaction },\n    );\n  }\n\n  startPollingByNetworkClientId(networkClientId: string): string {\n    return this.#pendingUserOperationTracker.startPollingByNetworkClientId(\n      networkClientId,\n    );\n  }\n\n  async #addUserOperation(\n    request: {\n      data?: string;\n      maxFeePerGas: string;\n      maxPriorityFeePerGas: string;\n      to?: string;\n      value?: string;\n    },\n    options: AddUserOperationOptions & { transaction?: TransactionParams },\n  ): Promise<AddUserOperationResponse> {\n    const { chainId, transaction } = options;\n    const metadata = this.#createMetadata(chainId, transaction);\n    const { id } = metadata;\n    let throwError = false;\n\n    const hashValue = (async () => {\n      try {\n        return await this.#prepareAndSubmitUserOperation(\n          metadata,\n          request,\n          options,\n        );\n      } catch (error) {\n        this.#failUserOperation(metadata, error);\n\n        if (throwError) {\n          throw error;\n        }\n\n        return undefined;\n      }\n    })();\n\n    const hash = async () => {\n      throwError = true;\n      return await hashValue;\n    };\n\n    const transactionHash = async () => {\n      await hash();\n\n      const { transactionHash: finalTransactionHash } =\n        await this.#waitForConfirmation(metadata);\n\n      return finalTransactionHash ?? undefined;\n    };\n\n    return {\n      id,\n      hash,\n      transactionHash,\n    };\n  }\n\n  async #prepareAndSubmitUserOperation(\n    metadata: UserOperationMetadata,\n    request: {\n      data?: string;\n      maxFeePerGas: string;\n      maxPriorityFeePerGas: string;\n      to?: string;\n      value?: string;\n    },\n    options: AddUserOperationOptions,\n  ) {\n    const { data, maxFeePerGas, maxPriorityFeePerGas, to, value } = request;\n    const { chainId, requireApproval, smartContractAccount } = options;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n\n    try {\n      await this.#prepareUserOperation(\n        to,\n        value,\n        data,\n        metadata,\n        smartContractAccount,\n        chainId,\n      );\n\n      const bundler = new Bundler(metadata.bundlerUrl as string);\n\n      metadata.userOperation.maxFeePerGas = maxFeePerGas;\n      metadata.userOperation.maxPriorityFeePerGas = maxPriorityFeePerGas;\n\n      await this.#updateGas(metadata, bundler);\n      await this.#addPaymasterData(metadata, smartContractAccount);\n\n      if (requireApproval !== false) {\n        resultCallbacks = await this.#approveUserOperation(metadata);\n      }\n\n      await this.#signUserOperation(metadata, smartContractAccount);\n      await this.#submitUserOperation(metadata, bundler);\n\n      resultCallbacks?.success();\n\n      return metadata.hash as string;\n    } catch (error: any) {\n      resultCallbacks?.error(error);\n      throw error;\n    }\n  }\n\n  async #waitForConfirmation(\n    metadata: UserOperationMetadata,\n  ): Promise<UserOperationMetadata> {\n    const { id, hash } = metadata;\n\n    log('Waiting for confirmation', id, hash);\n\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${id}:confirmed`, (finalMetadata) => {\n        resolve(finalMetadata);\n      });\n\n      this.hub.once(`${id}:failed`, (_finalMetadata, error) => {\n        reject(error);\n      });\n    });\n  }\n\n  #createMetadata(\n    chainId: string,\n    transaction?: TransactionParams,\n  ): UserOperationMetadata {\n    const metadata: UserOperationMetadata = {\n      actualGasCost: null,\n      actualGasUsed: null,\n      baseFeePerGas: null,\n      bundlerUrl: null,\n      chainId,\n      error: null,\n      hash: null,\n      id: random(),\n      status: UserOperationStatus.Unapproved,\n      time: Date.now(),\n      transactionHash: null,\n      transactionParams: (transaction as Required<TransactionParams>) ?? null,\n      userOperation: this.#createEmptyUserOperation(),\n    };\n\n    this.#updateMetadata(metadata);\n\n    log('Added user operation', metadata.id);\n\n    return metadata;\n  }\n\n  async #prepareUserOperation(\n    to: string | undefined,\n    value: string | undefined,\n    data: string | undefined,\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n    chainId: string,\n  ) {\n    const { id, userOperation } = metadata;\n\n    log('Preparing user operation', { id });\n\n    const response = await smartContractAccount.prepareUserOperation({\n      chainId,\n      data,\n      to,\n      value,\n    });\n\n    validatePrepareUserOperationResponse(response);\n\n    const {\n      bundler: bundlerUrl,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      gas,\n      initCode,\n      nonce,\n      sender,\n    } = response;\n\n    userOperation.callData = callData;\n    userOperation.callGasLimit = gas?.callGasLimit ?? EMPTY_BYTES;\n    userOperation.initCode = initCode ?? EMPTY_BYTES;\n    userOperation.nonce = nonce;\n    userOperation.paymasterAndData = dummyPaymasterAndData ?? EMPTY_BYTES;\n    userOperation.preVerificationGas = gas?.preVerificationGas ?? EMPTY_BYTES;\n    userOperation.sender = sender;\n    userOperation.signature = dummySignature ?? EMPTY_BYTES;\n    userOperation.verificationGasLimit =\n      gas?.verificationGasLimit ?? EMPTY_BYTES;\n\n    metadata.bundlerUrl = bundlerUrl;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #updateGas(\n    metadata: UserOperationMetadata,\n    bundler: Bundler,\n  ): Promise<void> {\n    const { id, userOperation } = metadata;\n\n    log('Updating gas', id);\n\n    // Previous validation ensures that all gas values are set or none are.\n    if (userOperation.callGasLimit !== EMPTY_BYTES) {\n      log('Skipping gas estimation as already set', {\n        callGasLimit: userOperation.callGasLimit,\n        preVerificationGas: userOperation.preVerificationGas,\n        verificationGasLimit: userOperation.verificationGasLimit,\n      });\n\n      return;\n    }\n\n    const payload = {\n      ...userOperation,\n      callGasLimit: '0x1',\n      preVerificationGas: '0x1',\n      verificationGasLimit: '0x1',\n    };\n\n    const { preVerificationGas, verificationGas, callGasLimit } =\n      await bundler.estimateUserOperationGas(payload, ENTRYPOINT);\n\n    const normalizeGas = (value: number) =>\n      toHex(Math.round(value * GAS_BUFFER));\n\n    userOperation.callGasLimit = normalizeGas(callGasLimit);\n    userOperation.preVerificationGas = normalizeGas(preVerificationGas);\n    userOperation.verificationGasLimit = normalizeGas(verificationGas);\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #addPaymasterData(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, userOperation } = metadata;\n\n    log('Requesting paymaster data', { id });\n\n    const response = await smartContractAccount.updateUserOperation({\n      userOperation,\n    });\n\n    validateUpdateUserOperationResponse(response);\n\n    userOperation.paymasterAndData = response.paymasterAndData ?? EMPTY_BYTES;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #approveUserOperation(metadata: UserOperationMetadata) {\n    const { resultCallbacks, value } = await this.#requestApproval(metadata);\n\n    const updatedTransaction = (value as any)?.txMeta as\n      | TransactionMeta\n      | undefined;\n\n    const { userOperation, transactionParams } = metadata;\n\n    if (transactionParams && updatedTransaction) {\n      log('Found updated transaction in approval', { updatedTransaction });\n\n      if (userOperation.paymasterAndData === EMPTY_BYTES) {\n        userOperation.maxFeePerGas = updatedTransaction.txParams\n          .maxFeePerGas as string;\n\n        userOperation.maxPriorityFeePerGas = updatedTransaction.txParams\n          .maxPriorityFeePerGas as string;\n\n        log('Updated gas fees after approval', {\n          maxFeePerGas: userOperation.maxFeePerGas,\n          maxPriorityFeePerGas: userOperation.maxPriorityFeePerGas,\n        });\n      }\n    }\n\n    metadata.status = UserOperationStatus.Approved;\n\n    this.#updateMetadata(metadata);\n\n    return resultCallbacks;\n  }\n\n  async #signUserOperation(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, chainId, userOperation } = metadata;\n\n    log('Signing user operation', id, userOperation);\n\n    const response = await smartContractAccount.signUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateSignUserOperationResponse(response);\n\n    const { signature } = response;\n\n    userOperation.signature = signature;\n\n    log('Signed user operation', signature);\n\n    metadata.status = UserOperationStatus.Signed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #submitUserOperation(\n    metadata: UserOperationMetadata,\n    bundler: Bundler,\n  ) {\n    const { userOperation } = metadata;\n\n    log('Submitting user operation', userOperation);\n\n    const hash = await bundler.sendUserOperation(userOperation, ENTRYPOINT);\n\n    metadata.hash = hash;\n    metadata.status = UserOperationStatus.Submitted;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #failUserOperation(metadata: UserOperationMetadata, error: unknown) {\n    const { id } = metadata;\n    const rawError = error as any;\n\n    log('User operation failed', id, error);\n\n    metadata.error = {\n      name: rawError.name,\n      message: rawError.message,\n      stack: rawError.stack,\n      code: rawError.code,\n      rpc: rawError.rpc,\n    };\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #createEmptyUserOperation(): UserOperation {\n    return {\n      callData: EMPTY_BYTES,\n      callGasLimit: EMPTY_BYTES,\n      initCode: EMPTY_BYTES,\n      maxFeePerGas: EMPTY_BYTES,\n      maxPriorityFeePerGas: EMPTY_BYTES,\n      nonce: EMPTY_BYTES,\n      paymasterAndData: EMPTY_BYTES,\n      preVerificationGas: EMPTY_BYTES,\n      sender: ADDRESS_ZERO,\n      signature: EMPTY_BYTES,\n      verificationGasLimit: EMPTY_BYTES,\n    };\n  }\n\n  #updateMetadata(metadata: UserOperationMetadata) {\n    const { id } = metadata;\n\n    this.update((state) => {\n      state.userOperations[id] = cloneDeep(metadata);\n    });\n\n    this.#updateTransaction(metadata);\n  }\n\n  #updateTransaction(metadata: UserOperationMetadata) {\n    if (!metadata.transactionParams) {\n      return;\n    }\n\n    const transactionMetadata = getTransactionMetadata(metadata);\n\n    this.hub.emit('transaction-updated', transactionMetadata);\n  }\n\n  #addPendingUserOperationTrackerListeners() {\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-confirmed',\n      (metadata) => {\n        log('In listener...');\n        this.hub.emit('user-operation-confirmed', metadata);\n        this.hub.emit(`${metadata.id}:confirmed`, metadata);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-failed',\n      (metadata, error) => {\n        this.hub.emit('user-operation-failed', metadata, error);\n        this.hub.emit(`${metadata.id}:failed`, metadata, error);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-updated',\n      (metadata) => {\n        this.#updateMetadata(metadata);\n      },\n    );\n  }\n\n  async #requestApproval(metadata: UserOperationMetadata): Promise<AddResult> {\n    const { id } = metadata;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      true, // Should display approval request to user\n    )) as Promise<AddResult>;\n  }\n}\n"]}