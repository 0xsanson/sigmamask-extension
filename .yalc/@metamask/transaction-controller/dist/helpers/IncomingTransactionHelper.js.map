{"version":3,"file":"IncomingTransactionHelper.js","sourceRoot":"","sources":["../../src/helpers/IncomingTransactionHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockTracker, NetworkState } from '@metamask/network-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport EventEmitter from 'events';\n\nimport { incomingTransactionsLogger as log } from '../logger';\nimport type { RemoteTransactionSource, TransactionMeta } from '../types';\n\nconst RECENT_HISTORY_BLOCK_RANGE = 10;\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst UPDATE_CHECKS: ((txMeta: TransactionMeta) => any)[] = [\n  (txMeta) => txMeta.status,\n  (txMeta) => txMeta.txParams.gasUsed,\n];\n\nexport class IncomingTransactionHelper {\n  hub: EventEmitter;\n\n  #blockTracker: BlockTracker;\n\n  #getCurrentAccount: () => string;\n\n  #getLastFetchedBlockNumbers: () => Record<string, number>;\n\n  #getLocalTransactions: () => TransactionMeta[];\n\n  #getNetworkState: () => NetworkState;\n\n  #isEnabled: () => boolean;\n\n  #isRunning: boolean;\n\n  #mutex = new Mutex();\n\n  #onLatestBlock: (blockNumberHex: Hex) => Promise<void>;\n\n  #queryEntireHistory: boolean;\n\n  #remoteTransactionSource: RemoteTransactionSource;\n\n  #transactionLimit?: number;\n\n  #updateTransactions: boolean;\n\n  constructor({\n    blockTracker,\n    getCurrentAccount,\n    getLastFetchedBlockNumbers,\n    getLocalTransactions,\n    getNetworkState,\n    isEnabled,\n    queryEntireHistory,\n    remoteTransactionSource,\n    transactionLimit,\n    updateTransactions,\n  }: {\n    blockTracker: BlockTracker;\n    getCurrentAccount: () => string;\n    getLastFetchedBlockNumbers: () => Record<string, number>;\n    getLocalTransactions?: () => TransactionMeta[];\n    getNetworkState: () => NetworkState;\n    isEnabled?: () => boolean;\n    queryEntireHistory?: boolean;\n    remoteTransactionSource: RemoteTransactionSource;\n    transactionLimit?: number;\n    updateTransactions?: boolean;\n  }) {\n    this.hub = new EventEmitter();\n\n    this.#blockTracker = blockTracker;\n    this.#getCurrentAccount = getCurrentAccount;\n    this.#getLastFetchedBlockNumbers = getLastFetchedBlockNumbers;\n    this.#getLocalTransactions = getLocalTransactions || (() => []);\n    this.#getNetworkState = getNetworkState;\n    this.#isEnabled = isEnabled ?? (() => true);\n    this.#isRunning = false;\n    this.#queryEntireHistory = queryEntireHistory ?? true;\n    this.#remoteTransactionSource = remoteTransactionSource;\n    this.#transactionLimit = transactionLimit;\n    this.#updateTransactions = updateTransactions ?? false;\n\n    // Using a property instead of a method to provide a listener reference\n    // with the correct scope that we can remove later if stopped.\n    this.#onLatestBlock = async (blockNumberHex: Hex) => {\n      try {\n        await this.update(blockNumberHex);\n      } catch (error) {\n        console.error('Error while checking incoming transactions', error);\n      }\n    };\n  }\n\n  start() {\n    if (this.#isRunning) {\n      return;\n    }\n\n    if (!this.#canStart()) {\n      return;\n    }\n\n    this.#blockTracker.addListener('latest', this.#onLatestBlock);\n    this.#isRunning = true;\n  }\n\n  stop() {\n    this.#blockTracker.removeListener('latest', this.#onLatestBlock);\n    this.#isRunning = false;\n  }\n\n  async update(latestBlockNumberHex?: Hex): Promise<void> {\n    const releaseLock = await this.#mutex.acquire();\n\n    log('Checking for incoming transactions');\n\n    try {\n      if (!this.#canStart()) {\n        return;\n      }\n\n      const latestBlockNumber = parseInt(\n        latestBlockNumberHex || (await this.#blockTracker.getLatestBlock()),\n        16,\n      );\n\n      const additionalLastFetchedKeys =\n        this.#remoteTransactionSource.getLastBlockVariations?.() ?? [];\n\n      const fromBlock = this.#getFromBlock(\n        latestBlockNumber,\n        additionalLastFetchedKeys,\n      );\n\n      const address = this.#getCurrentAccount();\n      const currentChainId = this.#getCurrentChainId();\n\n      let remoteTransactions = [];\n\n      try {\n        remoteTransactions =\n          await this.#remoteTransactionSource.fetchTransactions({\n            address,\n            currentChainId,\n            fromBlock,\n            limit: this.#transactionLimit,\n          });\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (error: any) {\n        log('Error while fetching remote transactions', error);\n        return;\n      }\n\n      if (!this.#updateTransactions) {\n        remoteTransactions = remoteTransactions.filter(\n          (tx) => tx.txParams.to?.toLowerCase() === address.toLowerCase(),\n        );\n      }\n\n      const localTransactions = !this.#updateTransactions\n        ? []\n        : this.#getLocalTransactions();\n\n      const newTransactions = this.#getNewTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      const updatedTransactions = this.#getUpdatedTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      if (newTransactions.length > 0 || updatedTransactions.length > 0) {\n        this.#sortTransactionsByTime(newTransactions);\n        this.#sortTransactionsByTime(updatedTransactions);\n\n        log('Found incoming transactions', {\n          new: newTransactions,\n          updated: updatedTransactions,\n        });\n\n        this.hub.emit('transactions', {\n          added: newTransactions,\n          updated: updatedTransactions,\n        });\n      }\n\n      this.#updateLastFetchedBlockNumber(\n        remoteTransactions,\n        additionalLastFetchedKeys,\n      );\n    } finally {\n      releaseLock();\n    }\n  }\n\n  #sortTransactionsByTime(transactions: TransactionMeta[]) {\n    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));\n  }\n\n  #getNewTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter(\n      (tx) => !localTxs.some(({ hash }) => hash === tx.hash),\n    );\n  }\n\n  #getUpdatedTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((remoteTx) =>\n      localTxs.some(\n        (localTx) =>\n          remoteTx.hash === localTx.hash &&\n          this.#isTransactionOutdated(remoteTx, localTx),\n      ),\n    );\n  }\n\n  #isTransactionOutdated(\n    remoteTx: TransactionMeta,\n    localTx: TransactionMeta,\n  ): boolean {\n    return UPDATE_CHECKS.some(\n      (getValue) => getValue(remoteTx) !== getValue(localTx),\n    );\n  }\n\n  #getFromBlock(\n    latestBlockNumber: number,\n    additionalKeys: string[],\n  ): number | undefined {\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n\n    const lastFetchedBlockNumber =\n      this.#getLastFetchedBlockNumbers()[lastFetchedKey];\n\n    if (lastFetchedBlockNumber) {\n      return lastFetchedBlockNumber + 1;\n    }\n\n    return this.#queryEntireHistory\n      ? undefined\n      : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;\n  }\n\n  #updateLastFetchedBlockNumber(\n    remoteTxs: TransactionMeta[],\n    additionalKeys: string[],\n  ) {\n    let lastFetchedBlockNumber = -1;\n\n    for (const tx of remoteTxs) {\n      const currentBlockNumberValue = tx.blockNumber\n        ? parseInt(tx.blockNumber, 10)\n        : -1;\n\n      lastFetchedBlockNumber = Math.max(\n        lastFetchedBlockNumber,\n        currentBlockNumberValue,\n      );\n    }\n\n    if (lastFetchedBlockNumber === -1) {\n      return;\n    }\n\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n    const lastFetchedBlockNumbers = this.#getLastFetchedBlockNumbers();\n    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];\n\n    if (previousValue >= lastFetchedBlockNumber) {\n      return;\n    }\n\n    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;\n\n    this.hub.emit('updatedLastFetchedBlockNumbers', {\n      lastFetchedBlockNumbers,\n      blockNumber: lastFetchedBlockNumber,\n    });\n  }\n\n  #getBlockNumberKey(additionalKeys: string[]): string {\n    const currentChainId = this.#getCurrentChainId();\n    const currentAccount = this.#getCurrentAccount()?.toLowerCase();\n\n    return [currentChainId, currentAccount, ...additionalKeys].join('#');\n  }\n\n  #canStart(): boolean {\n    const isEnabled = this.#isEnabled();\n    const currentChainId = this.#getCurrentChainId();\n\n    const isSupportedNetwork =\n      this.#remoteTransactionSource.isSupportedNetwork(currentChainId);\n\n    return isEnabled && isSupportedNetwork;\n  }\n\n  #getCurrentChainId(): Hex {\n    return this.#getNetworkState().providerConfig.chainId;\n  }\n}\n"]}