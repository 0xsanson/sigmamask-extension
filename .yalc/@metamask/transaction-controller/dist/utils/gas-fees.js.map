{"version":3,"file":"gas-fees.js","sourceRoot":"","sources":["../../src/utils/gas-fees.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport {\n  ORIGIN_METAMASK,\n  gweiDecToWEIBN,\n  query,\n  toHex,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport { GAS_ESTIMATE_TYPES } from '@metamask/gas-fee-controller';\nimport { createModuleLogger } from '@metamask/utils';\nimport { addHexPrefix } from 'ethereumjs-util';\n\nimport { projectLogger } from '../logger';\nimport type {\n  SavedGasFees,\n  TransactionParams,\n  TransactionMeta,\n  TransactionType,\n} from '../types';\nimport { UserFeeLevel } from '../types';\nimport { SWAP_TRANSACTION_TYPES } from './swaps';\n\nexport type UpdateGasFeesRequest = {\n  eip1559: boolean;\n  ethQuery: EthQuery;\n  getSavedGasFees: () => SavedGasFees | undefined;\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  txMeta: TransactionMeta;\n};\n\nexport type GetGasFeeRequest = UpdateGasFeesRequest & {\n  savedGasFees?: SavedGasFees;\n  initialParams: TransactionParams;\n  suggestedGasFees: Awaited<ReturnType<typeof getSuggestedGasFees>>;\n};\n\nconst log = createModuleLogger(projectLogger, 'gas-fees');\n\nexport async function updateGasFees(request: UpdateGasFeesRequest) {\n  const { txMeta } = request;\n  const initialParams = { ...txMeta.txParams };\n\n  const isSwap = SWAP_TRANSACTION_TYPES.includes(\n    txMeta.type as TransactionType,\n  );\n  const savedGasFees = isSwap ? undefined : request.getSavedGasFees();\n\n  const suggestedGasFees = await getSuggestedGasFees(request);\n\n  log('Suggested gas fees', suggestedGasFees);\n\n  const getGasFeeRequest = {\n    ...request,\n    savedGasFees,\n    initialParams,\n    suggestedGasFees,\n  };\n\n  txMeta.txParams.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);\n\n  txMeta.txParams.maxPriorityFeePerGas =\n    getMaxPriorityFeePerGas(getGasFeeRequest);\n\n  txMeta.txParams.gasPrice = getGasPrice(getGasFeeRequest);\n  txMeta.userFeeLevel = getUserFeeLevel(getGasFeeRequest);\n\n  log('Updated gas fee properties', {\n    maxFeePerGas: txMeta.txParams.maxFeePerGas,\n    maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,\n    gasPrice: txMeta.txParams.gasPrice,\n  });\n\n  if (txMeta.txParams.maxFeePerGas || txMeta.txParams.maxPriorityFeePerGas) {\n    delete txMeta.txParams.gasPrice;\n  }\n\n  if (txMeta.txParams.gasPrice) {\n    delete txMeta.txParams.maxFeePerGas;\n    delete txMeta.txParams.maxPriorityFeePerGas;\n  }\n\n  updateDefaultGasEstimates(txMeta);\n}\n\nfunction getMaxFeePerGas(request: GetGasFeeRequest): string | undefined {\n  const { savedGasFees, eip1559, initialParams, suggestedGasFees } = request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    const maxFeePerGas = gweiDecimalToWeiHex(savedGasFees.maxBaseFee as string);\n    log('Using maxFeePerGas from savedGasFees', maxFeePerGas);\n    return maxFeePerGas;\n  }\n\n  if (initialParams.maxFeePerGas) {\n    log('Using maxFeePerGas from request', initialParams.maxFeePerGas);\n    return initialParams.maxFeePerGas;\n  }\n\n  if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {\n    log(\n      'Setting maxFeePerGas to gasPrice from request',\n      initialParams.gasPrice,\n    );\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxFeePerGas) {\n    log('Using suggested maxFeePerGas', suggestedGasFees.maxFeePerGas);\n    return suggestedGasFees.maxFeePerGas;\n  }\n\n  if (suggestedGasFees.gasPrice) {\n    log(\n      'Setting maxFeePerGas to suggested gasPrice',\n      suggestedGasFees.gasPrice,\n    );\n    return suggestedGasFees.gasPrice;\n  }\n\n  log('maxFeePerGas not set');\n  return undefined;\n}\n\nfunction getMaxPriorityFeePerGas(\n  request: GetGasFeeRequest,\n): string | undefined {\n  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } =\n    request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    const maxPriorityFeePerGas = gweiDecimalToWeiHex(savedGasFees.priorityFee);\n    log(\n      'Using maxPriorityFeePerGas from savedGasFees.priorityFee',\n      maxPriorityFeePerGas,\n    );\n    return maxPriorityFeePerGas;\n  }\n\n  if (initialParams.maxPriorityFeePerGas) {\n    log(\n      'Using maxPriorityFeePerGas from request',\n      initialParams.maxPriorityFeePerGas,\n    );\n    return initialParams.maxPriorityFeePerGas;\n  }\n\n  if (initialParams.gasPrice && !initialParams.maxFeePerGas) {\n    log(\n      'Setting maxPriorityFeePerGas to gasPrice from request',\n      initialParams.gasPrice,\n    );\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxPriorityFeePerGas) {\n    log(\n      'Using suggested maxPriorityFeePerGas',\n      suggestedGasFees.maxPriorityFeePerGas,\n    );\n    return suggestedGasFees.maxPriorityFeePerGas;\n  }\n\n  if (txMeta.txParams.maxFeePerGas) {\n    log(\n      'Setting maxPriorityFeePerGas to maxFeePerGas',\n      txMeta.txParams.maxFeePerGas,\n    );\n    return txMeta.txParams.maxFeePerGas;\n  }\n\n  log('maxPriorityFeePerGas not set');\n  return undefined;\n}\n\nfunction getGasPrice(request: GetGasFeeRequest): string | undefined {\n  const { eip1559, initialParams, suggestedGasFees } = request;\n\n  if (eip1559) {\n    return undefined;\n  }\n\n  if (initialParams.gasPrice) {\n    log('Using gasPrice from request', initialParams.gasPrice);\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.gasPrice) {\n    log('Using suggested gasPrice', suggestedGasFees.gasPrice);\n    return suggestedGasFees.gasPrice;\n  }\n\n  log('gasPrice not set');\n  return undefined;\n}\n\nfunction getUserFeeLevel(request: GetGasFeeRequest): UserFeeLevel | undefined {\n  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } =\n    request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    return UserFeeLevel.CUSTOM;\n  }\n\n  if (\n    !initialParams.maxFeePerGas &&\n    !initialParams.maxPriorityFeePerGas &&\n    initialParams.gasPrice\n  ) {\n    return txMeta.origin === ORIGIN_METAMASK\n      ? UserFeeLevel.CUSTOM\n      : UserFeeLevel.DAPP_SUGGESTED;\n  }\n\n  if (\n    !initialParams.maxFeePerGas &&\n    !initialParams.maxPriorityFeePerGas &&\n    suggestedGasFees.maxFeePerGas &&\n    suggestedGasFees.maxPriorityFeePerGas\n  ) {\n    return UserFeeLevel.MEDIUM;\n  }\n\n  if (txMeta.origin === ORIGIN_METAMASK) {\n    return UserFeeLevel.MEDIUM;\n  }\n\n  return UserFeeLevel.DAPP_SUGGESTED;\n}\n\nfunction updateDefaultGasEstimates(txMeta: TransactionMeta) {\n  if (!txMeta.defaultGasEstimates) {\n    txMeta.defaultGasEstimates = {};\n  }\n\n  txMeta.defaultGasEstimates.maxFeePerGas = txMeta.txParams.maxFeePerGas;\n\n  txMeta.defaultGasEstimates.maxPriorityFeePerGas =\n    txMeta.txParams.maxPriorityFeePerGas;\n\n  txMeta.defaultGasEstimates.gasPrice = txMeta.txParams.gasPrice;\n  txMeta.defaultGasEstimates.estimateType = txMeta.userFeeLevel;\n}\n\nasync function getSuggestedGasFees(request: UpdateGasFeesRequest) {\n  const { eip1559, ethQuery, getGasFeeEstimates, txMeta } = request;\n\n  if (\n    (!eip1559 && txMeta.txParams.gasPrice) ||\n    (eip1559 &&\n      txMeta.txParams.maxFeePerGas &&\n      txMeta.txParams.maxPriorityFeePerGas)\n  ) {\n    return {};\n  }\n\n  try {\n    const { gasFeeEstimates, gasEstimateType } = await getGasFeeEstimates();\n\n    if (eip1559 && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n      const {\n        medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {},\n      } = gasFeeEstimates;\n\n      if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n        return {\n          maxFeePerGas: gweiDecimalToWeiHex(suggestedMaxFeePerGas),\n          maxPriorityFeePerGas: gweiDecimalToWeiHex(\n            suggestedMaxPriorityFeePerGas,\n          ),\n        };\n      }\n    }\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n      // The LEGACY type includes low, medium and high estimates of\n      // gas price values.\n      return {\n        gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.medium),\n      };\n    }\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n      // The ETH_GASPRICE type just includes a single gas price property,\n      // which we can assume was retrieved from eth_gasPrice\n      return {\n        gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.gasPrice),\n      };\n    }\n  } catch (error) {\n    log('Failed to get suggested gas fees', error);\n  }\n\n  const gasPriceDecimal = (await query(ethQuery, 'gasPrice')) as number;\n\n  const gasPrice = gasPriceDecimal\n    ? addHexPrefix(gasPriceDecimal.toString(16))\n    : undefined;\n\n  return { gasPrice };\n}\n\nfunction gweiDecimalToWeiHex(value: string) {\n  return toHex(gweiDecToWEIBN(value));\n}\n"]}