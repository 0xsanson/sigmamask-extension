{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAiDA,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,gDAAyB,CAAA;IACzB,4CAAqB,CAAA;IACrB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;IACvB,8CAAuB,CAAA;IACvB,wCAAiB,CAAA;AACnB,CAAC,EAPW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAO9B","sourcesContent":["import type { TransactionParams } from '@metamask/transaction-controller';\n\nexport type UserOperation = {\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /** The amount of gas to allocate the main execution call. */\n  callGasLimit: string;\n\n  /**\n   * The initCode of the account.\n   * Needed if and only if the account is not yet on-chain and needs to be created.\n   */\n  initCode: string;\n\n  /**\n   * Maximum fee per gas.\n   * Similar to EIP-1559 max_fee_per_gas.\n   */\n  maxFeePerGas: string;\n\n  /**\n   * Maximum priority fee per gas.\n   * Similar to EIP-1559 max_priority_fee_per_gas.\n   */\n  maxPriorityFeePerGas: string;\n\n  /** Anti-replay parameter. */\n  nonce: string;\n\n  /**\n   * Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster.\n   * Empty for self-sponsored transactions.\n   */\n  paymasterAndData: string;\n\n  /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that canâ€™t be tracked on-chain. */\n  preVerificationGas: string;\n\n  /** The account making the operation. */\n  sender: string;\n\n  /** Data passed into the account along with the nonce during the verification step. */\n  signature: string;\n\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: string;\n};\n\nexport enum UserOperationStatus {\n  Unapproved = 'unapproved',\n  Approved = 'approved',\n  Signed = 'signed',\n  Submitted = 'submitted',\n  Confirmed = 'confirmed',\n  Failed = 'failed',\n}\n\nexport type UserOperationError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack: string | null;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code: string | null;\n\n  /**\n   * The rpc property holds additional information related to the error.\n   */\n  rpc: string | null;\n};\n\nexport type UserOperationMetadata = {\n  actualGasCost: string | null;\n  actualGasUsed: string | null;\n  baseFeePerGas: string | null;\n  bundlerUrl: string | null;\n  chainId: string;\n  error: UserOperationError | null;\n  hash: string | null;\n  id: string;\n  status: UserOperationStatus;\n  time: number;\n  transactionHash: string | null;\n  transactionParams: Required<TransactionParams> | null;\n  userFeeLevel: string | null;\n  userOperation: UserOperation;\n};\n\nexport type BundlerEstimateUserOperationGasResponse = {\n  preVerificationGas: number;\n  verificationGas: number;\n  verificationGasLimit: number;\n  callGasLimit: number;\n};\n\nexport type UserOperationReceipt = {\n  actualGasCost: string;\n  actualGasUsed: string;\n  success: boolean;\n  receipt: {\n    blockHash: string;\n    transactionHash: string;\n  };\n};\n"]}