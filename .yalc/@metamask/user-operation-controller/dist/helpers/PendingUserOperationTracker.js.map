{"version":3,"file":"PendingUserOperationTracker.js","sourceRoot":"","sources":["../../src/helpers/PendingUserOperationTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockTracker } from '@metamask/network-controller';\nimport { createModuleLogger } from '@metamask/utils';\nimport EventEmitter from 'events';\n\nimport { projectLogger } from '../logger';\nimport {\n  UserOperationMetadata,\n  UserOperationReceipt,\n  UserOperationStatus,\n} from '../types';\nimport { UserOperationControllerState } from '../UserOperationController';\nimport { Block } from '@ethersproject/providers';\nimport { getBundler } from './Bundler';\n\nconst log = createModuleLogger(projectLogger, 'pending-user-operations');\n\ntype Events = {\n  [key: `${string}:confirmed`]: [metadata: UserOperationMetadata];\n  [key: `${string}:failed`]: [txMeta: UserOperationMetadata, error: Error];\n  'user-operation-updated': [txMeta: UserOperationMetadata];\n};\n\nexport interface PendingUserOperationTrackerEventEmitter extends EventEmitter {\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): this;\n\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): this;\n\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n}\n\nexport class PendingUserOperationTracker {\n  hub: PendingUserOperationTrackerEventEmitter;\n\n  #blockTracker: BlockTracker;\n\n  #getBlockByHash: (hash: string) => Promise<Block>;\n\n  #getUserOperations: () => UserOperationMetadata[];\n\n  #listener: any;\n\n  #onStateChange: (\n    listener: (state: UserOperationControllerState) => void,\n  ) => void;\n\n  #running: boolean;\n\n  constructor({\n    blockTracker,\n    getBlockByHash,\n    getUserOperations,\n    onStateChange,\n  }: {\n    blockTracker: BlockTracker;\n    getBlockByHash: (hash: string) => Promise<Block>;\n    getUserOperations: () => UserOperationMetadata[];\n    onStateChange: (\n      listener: (state: UserOperationControllerState) => void,\n    ) => void;\n  }) {\n    this.hub = new EventEmitter() as PendingUserOperationTrackerEventEmitter;\n\n    this.#blockTracker = blockTracker;\n    this.#getBlockByHash = getBlockByHash;\n    this.#getUserOperations = getUserOperations;\n    this.#listener = this.#onLatestBlock.bind(this);\n    this.#onStateChange = onStateChange;\n    this.#running = false;\n\n    this.#onStateChange((state) => {\n      const pendingUserOperations = this.#getPendingUserOperations(\n        Object.values(state.userOperations),\n      );\n\n      if (pendingUserOperations.length) {\n        this.#start();\n      } else {\n        this.#stop();\n      }\n    });\n  }\n\n  #start() {\n    if (this.#running) {\n      return;\n    }\n\n    this.#blockTracker.on('latest', this.#listener);\n    this.#running = true;\n\n    log('Started polling');\n  }\n\n  #stop() {\n    if (!this.#running) {\n      return;\n    }\n\n    this.#blockTracker.removeListener('latest', this.#listener);\n    this.#running = false;\n\n    log('Stopped polling');\n  }\n\n  async #onLatestBlock(latestBlockNumber: string) {\n    try {\n      log('Checking latest block', latestBlockNumber);\n      await this.#checkUserOperations();\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check user operations', error);\n    }\n  }\n\n  async #checkUserOperations() {\n    const pendingUserOperations = this.#getPendingUserOperations();\n\n    if (!pendingUserOperations.length) {\n      log('No pending user operations to check');\n      return;\n    }\n\n    log('Found pending user operations to check', {\n      count: pendingUserOperations.length,\n      ids: pendingUserOperations.map((userOperation) => userOperation.id),\n    });\n\n    await Promise.all(\n      pendingUserOperations.map((userOperation) =>\n        this.#checkUserOperation(userOperation),\n      ),\n    );\n  }\n\n  async #checkUserOperation(metadata: UserOperationMetadata) {\n    const { chainId, hash, id } = metadata;\n\n    if (!hash) {\n      log('Skipping user operation as no hash', id);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getUserOperationReceipt(hash, chainId);\n      const isSuccess = receipt?.success;\n\n      if (receipt && !isSuccess) {\n        this.#onUserOperationFailed(metadata, receipt);\n        return;\n      }\n\n      if (isSuccess) {\n        await this.#onUserOperationConfirmed(metadata, receipt);\n        return;\n      }\n\n      log('No receipt found for user operation', { id, hash });\n    } catch (error: any) {\n      log('Failed to check user operation', id, error);\n    }\n  }\n\n  async #onUserOperationConfirmed(\n    metadata: UserOperationMetadata,\n    receipt: UserOperationReceipt,\n  ) {\n    const { id } = metadata;\n\n    const {\n      actualGasCost,\n      actualGasUsed,\n      receipt: { blockHash, transactionHash },\n    } = receipt;\n\n    log('User operation confirmed', id, transactionHash);\n\n    const block = await this.#getBlockByHash(blockHash);\n\n    metadata.baseFeePerGas = (block.baseFeePerGas as any).toHexString();\n    metadata.actualGasCost = actualGasCost;\n    metadata.actualGasUsed = actualGasUsed;\n    metadata.status = UserOperationStatus.Confirmed;\n    metadata.transactionHash = transactionHash || null;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit(`${id}:confirmed`, metadata);\n  }\n\n  #onUserOperationFailed(\n    metadata: UserOperationMetadata,\n    _receipt: UserOperationReceipt,\n  ) {\n    const { id } = metadata;\n\n    log('User operation failed', id);\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit(\n      `${id}:failed`,\n      metadata,\n      new Error('User operation receipt has failed status'),\n    );\n  }\n\n  #getPendingUserOperations(\n    userOperations?: UserOperationMetadata[],\n  ): UserOperationMetadata[] {\n    return (userOperations ?? this.#getUserOperations()).filter(\n      (userOperation) => userOperation.status === UserOperationStatus.Submitted,\n    );\n  }\n\n  #updateUserOperation(metadata: UserOperationMetadata) {\n    this.hub.emit('user-operation-updated', metadata);\n  }\n\n  async #getUserOperationReceipt(\n    hash: string,\n    chainId: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    const bundler = getBundler(chainId);\n    return bundler.getUserOperationReceipt(hash);\n  }\n}\n"]}