{"version":3,"file":"Bundler.js","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":";AAAA,wCAAwC;;;;;;;;;;;;;;;;;;;;;;;;AAExC,sCAA8D;AAG9D,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,SAAS,CAAC,CAAC;AAoBzD;;GAEG;AACH,MAAa,OAAO;IAGlB,YAAY,GAAW;;QAFvB,+BAAa;QAGX,uBAAA,IAAI,gBAAQ,GAAG,MAAA,CAAC;IAClB,CAAC;IAED;;;;;;OAMG;IACG,wBAAwB,CAC5B,aAA4B,EAC5B,UAAkB;;YAElB,GAAG,CAAC,gBAAgB,EAAE,EAAE,GAAG,EAAE,uBAAA,IAAI,oBAAK,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC;YAErE,MAAM,QAAQ,GAA4C,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAClE,8BAA8B,EAC9B,CAAC,aAAa,EAAE,UAAU,CAAC,CAC5B,CAAC;YAEF,GAAG,CAAC,eAAe,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;YAEnC,OAAO,QAAQ,CAAC;QAClB,CAAC;KAAA;IAED;;;;OAIG;IACG,uBAAuB,CAC3B,IAAa;;YAEb,GAAG,CAAC,gCAAgC,EAAE,EAAE,GAAG,EAAE,uBAAA,IAAI,oBAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YAEhE,OAAO,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EACf,6BAA6B,EAC7B,CAAC,IAAI,CAAC,CACP,CAAC;QACJ,CAAC;KAAA;IAED;;;;;OAKG;IACG,iBAAiB,CACrB,aAA4B,EAC5B,UAAkB;;YAElB,GAAG,CAAC,wBAAwB,EAAE;gBAC5B,GAAG,EAAE,uBAAA,IAAI,oBAAK;gBACd,aAAa;gBACb,UAAU;aACX,CAAC,CAAC;YAEH,MAAM,IAAI,GAAW,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAAQ,uBAAuB,EAAE;gBAC9D,aAAa;gBACb,UAAU;aACX,CAAC,CAAC;YAEH,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;YAEjC,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;CA0BF;AAhGD,0BAgGC;2GAxBiB,MAAc,EAAE,MAAiB;;QAC/C,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,MAAM,EAAE,kBAAkB;gBAC1B,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;SAChE,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,uBAAA,IAAI,oBAAK,EAAE,OAAO,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE3C,IAAI,YAAY,CAAC,KAAK,EAAE;YACtB,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;YAEzE,KAA2C,CAAC,IAAI;gBAC/C,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;YAE1B,MAAM,KAAK,CAAC;SACb;QAED,OAAO,YAAY,CAAC,MAAM,CAAC;IAC7B,CAAC","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type { UserOperation, UserOperationReceipt } from '../types';\n\nconst log = createModuleLogger(projectLogger, 'bundler');\n\n/**\n * Response from the `eth_estimateUserOperationGas` bundler method.\n * Includes the estimated gas limits required by a user operation.\n */\nexport type BundlerEstimateUserOperationGasResponse = {\n  /** Estimated gas required to compensate the bundler for any pre-verification. */\n  preVerificationGas: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGas?: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGasLimit?: number | string;\n\n  /** Estimated gas required for the execution of the user operation. */\n  callGasLimit: number | string;\n};\n\n/**\n * A helper class for interacting with a bundler.\n */\nexport class Bundler {\n  #url: string;\n\n  constructor(url: string) {\n    this.#url = url;\n  }\n\n  /**\n   * Estimate the gas required to execute a user operation.\n   *\n   * @param userOperation - The user operation to estimate gas for.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The estimated gas limits for the user operation.\n   */\n  async estimateUserOperationGas(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<BundlerEstimateUserOperationGasResponse> {\n    log('Estimating gas', { url: this.#url, userOperation, entrypoint });\n\n    const response: BundlerEstimateUserOperationGasResponse = await this.#query(\n      'eth_estimateUserOperationGas',\n      [userOperation, entrypoint],\n    );\n\n    log('Estimated gas', { response });\n\n    return response;\n  }\n\n  /**\n   * Retrieve the receipt for a user operation.\n   * @param hash - The hash of the user operation.\n   * @returns The receipt for the user operation, or `undefined` if the user operation is pending.\n   */\n  async getUserOperationReceipt(\n    hash?: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    log('Getting user operation receipt', { url: this.#url, hash });\n\n    return await this.#query<UserOperationReceipt | undefined>(\n      'eth_getUserOperationReceipt',\n      [hash],\n    );\n  }\n\n  /**\n   * Submit a user operation to the bundler.\n   * @param userOperation - The signed user operation to submit.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The hash of the user operation.\n   */\n  async sendUserOperation(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<string> {\n    log('Sending user operation', {\n      url: this.#url,\n      userOperation,\n      entrypoint,\n    });\n\n    const hash: string = await this.#query('eth_sendUserOperation', [\n      userOperation,\n      entrypoint,\n    ]);\n\n    log('Sent user operation', hash);\n\n    return hash;\n  }\n\n  async #query<T>(method: string, params: unknown[]): Promise<T> {\n    const request = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ jsonrpc: '2.0', id: 1, method, params }),\n    };\n\n    const response = await fetch(this.#url, request);\n    const responseJson = await response.json();\n\n    if (responseJson.error) {\n      const error = new Error(responseJson.error.message || responseJson.error);\n\n      (error as unknown as Record<string, string>).code =\n        responseJson.error.code;\n\n      throw error;\n    }\n\n    return responseJson.result;\n  }\n}\n"]}