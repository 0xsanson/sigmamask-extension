{"version":3,"file":"Bundler.js","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":";AAAA,wCAAwC;;;;;;;;;;;;;;;;;;;;;;;;AAExC,4CAAuD;AACvD,sCAA8D;AAO9D,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,SAAS,CAAC,CAAC;AAEzD,MAAa,OAAO;IAGlB,YAAY,GAAW;;QAFvB,+BAAa;QAGX,uBAAA,IAAI,gBAAQ,GAAG,MAAA,CAAC;IAClB,CAAC;IAEK,wBAAwB,CAC5B,aAA4B,EAC5B,UAAkB;;YAElB,MAAM,QAAQ,GAAG,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAAQ,8BAA8B,EAAE;gBACjE,aAAa;gBACb,UAAU;aACX,CAAC,CAAC;YAEH,GAAG,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YAE/B,OAAO,QAAmD,CAAC;QAC7D,CAAC;KAAA;IAEK,uBAAuB,CAC3B,IAAa;;YAEb,OAAO,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAAQ,6BAA6B,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,CAAC;KAAA;IAEK,iBAAiB,CACrB,aAA4B,EAC5B,UAAkB;;YAElB,GAAG,CAAC,wBAAwB,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC;YAE7D,MAAM,IAAI,GAAG,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAAQ,uBAAuB,EAAE;gBACtD,aAAa;gBACb,UAAU;aACX,CAAC,CAAC;YAEH,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;YAEjC,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;CAwBF;AAjED,0BAiEC;2GAtBc,MAAc,EAAE,MAAa;;QACxC,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,MAAM,EAAE,kBAAkB;gBAC1B,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;SAChE,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,uBAAA,IAAI,oBAAK,EAAE,OAAO,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE3C,IAAI,YAAY,CAAC,KAAK,EAAE;YACtB,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;YACzE,KAAa,CAAC,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;YAE9C,MAAM,KAAK,CAAC;SACb;QAED,OAAO,YAAY,CAAC,MAAM,CAAC;IAC7B,CAAC;;AAGH,SAAgB,UAAU,CAAC,OAAe;IACxC,MAAM,UAAU,GAAG,OAA+C,CAAC;IACnE,MAAM,GAAG,GAAG,mCAAuB,CAAC,UAAU,CAAC,CAAC;IAEhD,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,kCAAkC,OAAO,EAAE,CAAC,CAAC;KAC9D;IAED,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AATD,gCASC","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { BUNDLER_URL_BY_CHAIN_ID } from '../constants';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  BundlerEstimateUserOperationGasResponse,\n  UserOperation,\n  UserOperationReceipt,\n} from '../types';\n\nconst log = createModuleLogger(projectLogger, 'bundler');\n\nexport class Bundler {\n  #url: string;\n\n  constructor(url: string) {\n    this.#url = url;\n  }\n\n  async estimateUserOperationGas(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<BundlerEstimateUserOperationGasResponse> {\n    const response = await this.#query('eth_estimateUserOperationGas', [\n      userOperation,\n      entrypoint,\n    ]);\n\n    log('Estimated gas', response);\n\n    return response as BundlerEstimateUserOperationGasResponse;\n  }\n\n  async getUserOperationReceipt(\n    hash?: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    return await this.#query('eth_getUserOperationReceipt', [hash]);\n  }\n\n  async sendUserOperation(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<string> {\n    log('Sending user operation', { userOperation, entrypoint });\n\n    const hash = await this.#query('eth_sendUserOperation', [\n      userOperation,\n      entrypoint,\n    ]);\n\n    log('Sent user operation', hash);\n\n    return hash;\n  }\n\n  async #query(method: string, params: any[]): Promise<any> {\n    const request = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ jsonrpc: '2.0', id: 1, method, params }),\n    };\n\n    const response = await fetch(this.#url, request);\n    const responseJson = await response.json();\n\n    if (responseJson.error) {\n      const error = new Error(responseJson.error.message || responseJson.error);\n      (error as any).code = responseJson.error.code;\n\n      throw error;\n    }\n\n    return responseJson.result;\n  }\n}\n\nexport function getBundler(chainId: string): Bundler {\n  const chainIdKey = chainId as keyof typeof BUNDLER_URL_BY_CHAIN_ID;\n  const url = BUNDLER_URL_BY_CHAIN_ID[chainIdKey];\n\n  if (!url) {\n    throw new Error(`No bundler found for chain ID: ${chainId}`);\n  }\n\n  return new Bundler(url);\n}\n"]}