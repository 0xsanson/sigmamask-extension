{"version":3,"file":"UserOperationController.js","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  Provider,\n} from '@metamask/network-controller';\nimport {\n  determineTransactionType,\n  type TransactionMeta,\n  type TransactionParams,\n  type TransactionType,\n} from '@metamask/transaction-controller';\nimport { addHexPrefix } from 'ethereumjs-util';\nimport EventEmitter from 'events';\nimport type { Patch } from 'immer';\nimport { cloneDeep } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport { ADDRESS_ZERO, EMPTY_BYTES, VALUE_ZERO } from './constants';\nimport { Bundler } from './helpers/Bundler';\nimport { PendingUserOperationTracker } from './helpers/PendingUserOperationTracker';\nimport { projectLogger as log } from './logger';\nimport type {\n  SmartContractAccount,\n  UserOperation,\n  UserOperationMetadata,\n} from './types';\nimport { UserOperationStatus } from './types';\nimport { updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getTransactionMetadata } from './utils/transaction';\nimport {\n  validateAddUserOperationOptions,\n  validateAddUserOperationRequest,\n  validatePrepareUserOperationResponse,\n  validateSignUserOperationResponse,\n  validateUpdateUserOperationResponse,\n} from './utils/validation';\n\nconst controllerName = 'UserOperationController';\n\nconst stateMetadata = {\n  userOperations: { persist: true, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  userOperations: {},\n});\n\ntype Events = {\n  'transaction-updated': [metadata: TransactionMeta];\n  'user-operation-added': [metadata: UserOperationMetadata];\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [metadata: UserOperationMetadata, error: Error];\n  [key: `${string}:confirmed`]: [metadata: UserOperationMetadata];\n  [key: `${string}:failed`]: [metadata: UserOperationMetadata, error: Error];\n};\n\nexport type UserOperationControllerEventEmitter = EventEmitter & {\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\nexport type UserOperationControllerState = {\n  userOperations: Record<string, UserOperationMetadata>;\n};\n\nexport type GetUserOperationState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => UserOperationControllerState;\n};\n\nexport type UserOperationStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [UserOperationControllerState, Patch[]];\n};\n\nexport type UserOperationControllerActions =\n  | GetUserOperationState\n  | NetworkControllerGetNetworkClientByIdAction\n  | AddApprovalRequest;\n\nexport type UserOperationControllerEvents = UserOperationStateChange;\n\nexport type UserOperationControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  UserOperationControllerActions,\n  UserOperationControllerEvents,\n  UserOperationControllerActions['type'],\n  UserOperationControllerEvents['type']\n>;\n\nexport type UserOperationControllerOptions = {\n  entrypoint: string;\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  interval?: number;\n  messenger: UserOperationControllerMessenger;\n  state?: Partial<UserOperationControllerState>;\n};\n\nexport type AddUserOperationRequest = {\n  data?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  to?: string;\n  value?: string;\n};\n\nexport type AddUserOperationSwapOptions = {\n  approvalTxId?: string;\n  destinationTokenAddress?: string;\n  destinationTokenDecimals?: number;\n  destinationTokenSymbol?: string;\n  estimatedBaseFee?: string;\n  sourceTokenSymbol?: string;\n  swapMetaData?: Record<string, unknown>;\n  swapTokenValue?: string;\n};\n\nexport type AddUserOperationOptions = {\n  networkClientId: string;\n  origin: string;\n  requireApproval?: boolean;\n  smartContractAccount: SmartContractAccount;\n  swaps?: AddUserOperationSwapOptions;\n  type?: TransactionType;\n};\n\nexport type AddUserOperationResponse = {\n  id: string;\n  hash: () => Promise<string | undefined>;\n  transactionHash: () => Promise<string | undefined>;\n};\n\ntype UserOperationCache = {\n  chainId: string;\n  metadata: UserOperationMetadata;\n  options: AddUserOperationOptions;\n  provider: Provider;\n  request: AddUserOperationRequest;\n  transaction?: TransactionParams;\n};\n\n/**\n * Controller for creating and managing the life cycle of user operations.\n */\nexport class UserOperationController extends BaseController<\n  typeof controllerName,\n  UserOperationControllerState,\n  UserOperationControllerMessenger\n> {\n  hub: UserOperationControllerEventEmitter;\n\n  #entrypoint: string;\n\n  #getGasFeeEstimates: () => Promise<GasFeeState>;\n\n  #pendingUserOperationTracker: PendingUserOperationTracker;\n\n  /**\n   * Construct a UserOperationController instance.\n   *\n   * @param options - Controller options.\n   * @param options.entrypoint - Address of the entrypoint contract.\n   * @param options.getGasFeeEstimates - Callback to get gas fee estimates.\n   * @param options.messenger - Restricted controller messenger for the user operation controller.\n   * @param options.state - Initial state to set on the controller.\n   */\n  constructor({\n    entrypoint,\n    getGasFeeEstimates,\n    messenger,\n    state,\n  }: UserOperationControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.hub = new EventEmitter() as UserOperationControllerEventEmitter;\n\n    this.#entrypoint = entrypoint;\n    this.#getGasFeeEstimates = getGasFeeEstimates;\n\n    this.#pendingUserOperationTracker = new PendingUserOperationTracker({\n      getUserOperations: () =>\n        cloneDeep(Object.values(this.state.userOperations)),\n      messenger,\n    });\n\n    this.#addPendingUserOperationTrackerListeners();\n  }\n\n  /**\n   * Create and submit a user operation.\n   *\n   * @param request - Information required to create a user operation.\n   * @param request.data - Data to include in the resulting transaction.\n   * @param request.maxFeePerGas - Maximum fee per gas to pay towards the transaction.\n   * @param request.maxPriorityFeePerGas - Maximum priority fee per gas to pay towards the transaction.\n   * @param request.to - Destination address of the resulting transaction.\n   * @param request.value - Value to include in the resulting transaction.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce.\n   */\n  async addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationRequest(request);\n    validateAddUserOperationOptions(options);\n\n    return await this.#addUserOperation(request, options);\n  }\n\n  /**\n   * Create and submit a user operation equivalent to the provided transaction.\n   *\n   * @param transaction - Transaction to use as the basis for the user operation.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperationFromTransaction(\n    transaction: TransactionParams,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationOptions(options);\n\n    const { data, maxFeePerGas, maxPriorityFeePerGas, to, value } = transaction;\n\n    return await this.#addUserOperation(\n      {\n        data: data === '' ? undefined : data,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        to,\n        value,\n      },\n      { ...options, transaction },\n    );\n  }\n\n  startPollingByNetworkClientId(networkClientId: string): string {\n    return this.#pendingUserOperationTracker.startPollingByNetworkClientId(\n      networkClientId,\n    );\n  }\n\n  async #addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions & { transaction?: TransactionParams },\n  ): Promise<AddUserOperationResponse> {\n    log('Adding user operation', { request, options });\n\n    const { networkClientId, origin, transaction, swaps } = options;\n    const { chainId, provider } = await this.#getProvider(networkClientId);\n\n    const metadata = await this.#createMetadata(\n      chainId,\n      origin,\n      transaction,\n      swaps,\n    );\n\n    const cache: UserOperationCache = {\n      chainId,\n      metadata,\n      options,\n      provider,\n      request,\n      transaction,\n    };\n\n    const { id } = metadata;\n    let throwError = false;\n\n    const hashValue = (async () => {\n      try {\n        return await this.#prepareAndSubmitUserOperation(cache);\n      } catch (error) {\n        this.#failUserOperation(metadata, error);\n\n        if (throwError) {\n          throw error;\n        }\n\n        return undefined;\n      }\n    })();\n\n    const hash = async () => {\n      throwError = true;\n      return await hashValue;\n    };\n\n    const transactionHash = async () => {\n      await hash();\n\n      const { transactionHash: finalTransactionHash } =\n        await this.#waitForConfirmation(metadata);\n\n      return finalTransactionHash as string;\n    };\n\n    return {\n      id,\n      hash,\n      transactionHash,\n    };\n  }\n\n  async #prepareAndSubmitUserOperation(cache: UserOperationCache) {\n    const { metadata, options } = cache;\n    const { requireApproval, smartContractAccount } = options;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n\n    try {\n      await this.#prepareUserOperation(cache);\n      await this.#addPaymasterData(metadata, smartContractAccount);\n\n      this.hub.emit('user-operation-added', metadata);\n\n      if (requireApproval !== false) {\n        resultCallbacks = await this.#approveUserOperation(cache);\n      }\n\n      await this.#signUserOperation(metadata, smartContractAccount);\n      await this.#submitUserOperation(metadata);\n\n      resultCallbacks?.success();\n\n      return metadata.hash as string;\n    } catch (error) {\n      /* istanbul ignore next */\n      resultCallbacks?.error(error as Error);\n      throw error;\n    }\n  }\n\n  async #waitForConfirmation(\n    metadata: UserOperationMetadata,\n  ): Promise<UserOperationMetadata> {\n    const { id, hash } = metadata;\n\n    log('Waiting for confirmation', id, hash);\n\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${id}:confirmed`, (finalMetadata) => {\n        resolve(finalMetadata);\n      });\n\n      this.hub.once(`${id}:failed`, (_finalMetadata, error) => {\n        reject(error);\n      });\n    });\n  }\n\n  async #createMetadata(\n    chainId: string,\n    origin: string,\n    transaction?: TransactionParams,\n    swaps?: AddUserOperationSwapOptions,\n  ): Promise<UserOperationMetadata> {\n    const metadata: UserOperationMetadata = {\n      actualGasCost: null,\n      actualGasUsed: null,\n      baseFeePerGas: null,\n      bundlerUrl: null,\n      chainId,\n      error: null,\n      hash: null,\n      id: random(),\n      origin,\n      status: UserOperationStatus.Unapproved,\n      swapsMetadata: swaps\n        ? {\n            approvalTxId: swaps.approvalTxId ?? null,\n            destinationTokenAddress: swaps.destinationTokenAddress ?? null,\n            destinationTokenDecimals: swaps.destinationTokenDecimals ?? null,\n            destinationTokenSymbol: swaps.destinationTokenSymbol ?? null,\n            estimatedBaseFee: swaps.estimatedBaseFee ?? null,\n            sourceTokenSymbol: swaps.sourceTokenSymbol ?? null,\n            swapMetaData: (swaps.swapMetaData as Record<string, never>) ?? null,\n            swapTokenValue: swaps.swapTokenValue ?? null,\n          }\n        : null,\n      time: Date.now(),\n      transactionHash: null,\n      transactionParams: (transaction as Required<TransactionParams>) ?? null,\n      transactionType: null,\n      userFeeLevel: null,\n      userOperation: this.#createEmptyUserOperation(transaction),\n    };\n\n    this.#updateMetadata(metadata);\n\n    log('Added user operation', metadata.id);\n\n    return metadata;\n  }\n\n  async #prepareUserOperation(cache: UserOperationCache) {\n    const { chainId, metadata, options, provider, request, transaction } =\n      cache;\n\n    const { data, to, value } = request;\n    const { id, transactionParams, userOperation } = metadata;\n    const { smartContractAccount } = options;\n\n    log('Preparing user operation', { id });\n\n    const transactionType = await this.#getTransactionType(\n      transaction,\n      provider,\n      options,\n    );\n\n    metadata.transactionType = transactionType ?? null;\n\n    log('Determined transaction type', transactionType);\n\n    await updateGasFees({\n      getGasFeeEstimates: this.#getGasFeeEstimates,\n      metadata,\n      originalRequest: request,\n      provider,\n      transaction: transactionParams ?? undefined,\n    });\n\n    const response = await smartContractAccount.prepareUserOperation({\n      chainId,\n      data,\n      to,\n      value,\n    });\n\n    validatePrepareUserOperationResponse(response);\n\n    const {\n      bundler: bundlerUrl,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      initCode,\n      nonce,\n      sender,\n    } = response;\n\n    userOperation.callData = callData;\n    userOperation.initCode = initCode ?? EMPTY_BYTES;\n    userOperation.nonce = nonce;\n    userOperation.paymasterAndData = dummyPaymasterAndData ?? EMPTY_BYTES;\n    userOperation.sender = sender;\n    userOperation.signature = dummySignature ?? EMPTY_BYTES;\n\n    metadata.bundlerUrl = bundlerUrl;\n\n    await updateGas(metadata, response, this.#entrypoint);\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #addPaymasterData(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, userOperation } = metadata;\n\n    log('Requesting paymaster data', { id });\n\n    const response = await smartContractAccount.updateUserOperation({\n      userOperation,\n    });\n\n    validateUpdateUserOperationResponse(response);\n\n    userOperation.paymasterAndData = response.paymasterAndData ?? EMPTY_BYTES;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #approveUserOperation(cache: UserOperationCache) {\n    log('Requesting approval');\n\n    const { metadata } = cache;\n\n    const { resultCallbacks, value } = await this.#requestApproval(metadata);\n    const updatedTransaction = value?.txMeta;\n\n    if (updatedTransaction) {\n      await this.#updateUserOperationAfterApproval(cache, updatedTransaction);\n    }\n\n    metadata.status = UserOperationStatus.Approved;\n\n    this.#updateMetadata(metadata);\n\n    return resultCallbacks;\n  }\n\n  async #signUserOperation(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, chainId, userOperation } = metadata;\n\n    log('Signing user operation', id, userOperation);\n\n    const response = await smartContractAccount.signUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateSignUserOperationResponse(response);\n\n    const { signature } = response;\n\n    userOperation.signature = signature;\n\n    log('Signed user operation', signature);\n\n    metadata.status = UserOperationStatus.Signed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #submitUserOperation(metadata: UserOperationMetadata) {\n    const { userOperation } = metadata;\n\n    log('Submitting user operation', userOperation);\n\n    const bundler = new Bundler(metadata.bundlerUrl as string);\n\n    const hash = await bundler.sendUserOperation(\n      userOperation,\n      this.#entrypoint,\n    );\n\n    metadata.hash = hash;\n    metadata.status = UserOperationStatus.Submitted;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #failUserOperation(metadata: UserOperationMetadata, error: unknown) {\n    const { id } = metadata;\n    const rawError = error as Record<string, string>;\n\n    log('User operation failed', id, error);\n\n    metadata.error = {\n      name: rawError.name,\n      message: rawError.message,\n      stack: rawError.stack,\n      code: rawError.code,\n      rpc: rawError.value,\n    };\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #createEmptyUserOperation(transaction?: TransactionParams): UserOperation {\n    return {\n      callData: EMPTY_BYTES,\n      callGasLimit: EMPTY_BYTES,\n      initCode: EMPTY_BYTES,\n      maxFeePerGas: transaction?.maxFeePerGas ?? EMPTY_BYTES,\n      maxPriorityFeePerGas: transaction?.maxPriorityFeePerGas ?? EMPTY_BYTES,\n      nonce: EMPTY_BYTES,\n      paymasterAndData: EMPTY_BYTES,\n      preVerificationGas: EMPTY_BYTES,\n      sender: ADDRESS_ZERO,\n      signature: EMPTY_BYTES,\n      verificationGasLimit: EMPTY_BYTES,\n    };\n  }\n\n  #updateMetadata(metadata: UserOperationMetadata) {\n    const { id } = metadata;\n\n    this.update((state) => {\n      state.userOperations[id] = cloneDeep(metadata);\n    });\n\n    this.#updateTransaction(metadata);\n  }\n\n  #updateTransaction(metadata: UserOperationMetadata) {\n    if (!metadata.transactionParams) {\n      return;\n    }\n\n    const transactionMetadata = getTransactionMetadata(metadata);\n\n    this.hub.emit('transaction-updated', transactionMetadata);\n  }\n\n  #addPendingUserOperationTrackerListeners() {\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-confirmed',\n      (metadata) => {\n        log('In listener...');\n        this.hub.emit('user-operation-confirmed', metadata);\n        this.hub.emit(`${metadata.id}:confirmed`, metadata);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-failed',\n      (metadata, error) => {\n        this.hub.emit('user-operation-failed', metadata, error);\n        this.hub.emit(`${metadata.id}:failed`, metadata, error);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-updated',\n      (metadata) => {\n        this.#updateMetadata(metadata);\n      },\n    );\n  }\n\n  async #requestApproval(metadata: UserOperationMetadata) {\n    const { id, origin } = metadata;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      true, // Should display approval request to user\n    )) as AddResult & { value?: { txMeta?: TransactionMeta } };\n  }\n\n  async #getTransactionType(\n    transaction: TransactionParams | undefined,\n    provider: Provider,\n    options: AddUserOperationOptions,\n  ): Promise<TransactionType | undefined> {\n    if (!transaction) {\n      return undefined;\n    }\n\n    if (options.type) {\n      return options.type;\n    }\n\n    const ethQuery = new EthQuery(provider);\n    const result = determineTransactionType(transaction, ethQuery);\n\n    return (await result).type;\n  }\n\n  async #getProvider(\n    networkClientId: string,\n  ): Promise<{ provider: Provider; chainId: string }> {\n    const { provider, configuration } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n\n    const { chainId } = configuration;\n\n    return { provider, chainId };\n  }\n\n  async #updateUserOperationAfterApproval(\n    cache: UserOperationCache,\n    updatedTransaction: TransactionMeta,\n  ) {\n    log('Found updated transaction in approval', { updatedTransaction });\n\n    const { metadata, request } = cache;\n\n    const { userOperation } = metadata;\n    const usingPaymaster = userOperation.paymasterAndData !== EMPTY_BYTES;\n\n    const updatedMaxFeePerGas = addHexPrefix(\n      updatedTransaction.txParams.maxFeePerGas as string,\n    );\n\n    const updatedMaxPriorityFeePerGas = addHexPrefix(\n      updatedTransaction.txParams.maxPriorityFeePerGas as string,\n    );\n\n    let regenerateUserOperation = false;\n    const previousMaxFeePerGas = userOperation.maxFeePerGas;\n    const previousMaxPriorityFeePerGas = userOperation.maxPriorityFeePerGas;\n\n    if (\n      previousMaxFeePerGas !== updatedMaxFeePerGas ||\n      previousMaxPriorityFeePerGas !== updatedMaxPriorityFeePerGas\n    ) {\n      log('Gas fees updated during approval', {\n        previousMaxFeePerGas,\n        previousMaxPriorityFeePerGas,\n        updatedMaxFeePerGas,\n        updatedMaxPriorityFeePerGas,\n      });\n\n      userOperation.maxFeePerGas = updatedMaxFeePerGas;\n      userOperation.maxPriorityFeePerGas = updatedMaxPriorityFeePerGas;\n\n      regenerateUserOperation = usingPaymaster;\n    }\n\n    const previousData = request.data ?? EMPTY_BYTES;\n    const updatedData = updatedTransaction.txParams.data ?? EMPTY_BYTES;\n\n    if (previousData !== updatedData) {\n      log('Data updated during approval', { previousData, updatedData });\n      regenerateUserOperation = true;\n    }\n\n    const previousValue = request.value ?? VALUE_ZERO;\n    const updatedValue = updatedTransaction.txParams.value ?? VALUE_ZERO;\n\n    if (previousValue !== updatedValue) {\n      log('Value updated during approval', { previousValue, updatedValue });\n      regenerateUserOperation = true;\n    }\n\n    if (regenerateUserOperation) {\n      const updatedRequest = {\n        ...request,\n        data: updatedData,\n        maxFeePerGas: updatedMaxFeePerGas,\n        maxPriorityFeePerGas: updatedMaxPriorityFeePerGas,\n        value: updatedValue,\n      };\n\n      await this.#regenerateUserOperation({\n        ...cache,\n        request: updatedRequest,\n      });\n    }\n  }\n\n  async #regenerateUserOperation(cache: UserOperationCache) {\n    log(\n      'Regenerating user operation as parameters were updated during approval',\n    );\n\n    const {\n      options: { smartContractAccount },\n      metadata,\n    } = cache;\n\n    await this.#prepareUserOperation(cache);\n    await this.#addPaymasterData(metadata, smartContractAccount);\n\n    log('Regenerated user operation', metadata.userOperation);\n  }\n}\n"]}