{"version":3,"file":"UserOperationController.js","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":";AAAA,qCAAqC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAErC,4CAAqD;AACrD,wDAAuD;AACvD,wDAAwD;AAMxD,+DAA6D;AAC7D,iEAIoC;AAMpC,qDAAiD;AACjD,oDAAkC;AAElC,mCAAmC;AACnC,+BAAoC;AAGpC,2CAAyC;AAEzC,+CAA+C;AAC/C,uFAAoF;AACpF,qCAAgD;AAChD,mCAGiB;AAGjB,mCAA8C;AAC9C,+CAAiD;AACjD,iDAAsD;AACtD,qDAA6D;AAE7D,MAAM,eAAe,GACnB,sIAAsI,CAAC;AAEzI,MAAM,UAAU,GAAG,CAAC,CAAC;AAErB,MAAM,cAAc,GAAG,yBAAyB,CAAC;AAEjD,MAAM,aAAa,GAAG;IACpB,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CACpD,CAAC;AAEF,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,CAAC;IAC7B,cAAc,EAAE,EAAE;CACnB,CAAC,CAAC;AAwCH;;GAEG;AACH,MAAa,uBAAwB,SAAQ,kCAI5C;IAeC;;;;;;;;;;;OAWG;IACH,YAAY,EACV,YAAY,EACZ,kBAAkB,EAClB,aAAa,EACb,eAAe,EACf,SAAS,EACT,QAAQ,EACR,KAAK,GAC0B;QAC/B,KAAK,CAAC;YACJ,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,aAAa;YACvB,SAAS;YACT,KAAK,kCAAO,eAAe,EAAE,GAAK,KAAK,CAAE;SAC1C,CAAC,CAAC;;QAtCL,wDAA4B;QAE5B,8DAAgD;QAEhD,yDAAsC;QAEtC,2DAA0C;QAE1C,0DAA6C;QAE7C,oDAAyB;QA8BvB,IAAI,CAAC,GAAG,GAAG,IAAI,gBAAY,EAAE,CAAC;QAE9B,uBAAA,IAAI,yCAAiB,YAAY,MAAA,CAAC;QAClC,uBAAA,IAAI,+CAAuB,kBAAkB,MAAA,CAAC;QAC9C,uBAAA,IAAI,0CAAkB,aAAa,MAAA,CAAC;QACpC,uBAAA,IAAI,4CAAoB,eAAe,MAAA,CAAC;QACxC,uBAAA,IAAI,qCAAa,QAAQ,MAAA,CAAC;QAE1B,uBAAA,IAAI,2CAAmB,IAAI,yDAA2B,CAAC;YACrD,YAAY,EAAE,uBAAA,IAAI,6CAAc;YAChC,cAAc,EAAE,CAAC,IAAY,EAAE,EAAE,CAC/B,IAAI,wBAAY,CAAC,uBAAA,IAAI,yCAAiB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;YACxD,iBAAiB,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAA,IAAI,6EAAU,MAAd,IAAI,CAAY,CAAC,cAAc,CAAC;YACvE,aAAa,EAAE,CACb,QAAuD,EACvD,EAAE,CACF,IAAI,CAAC,GAAG,CAAC,EAAE,CACT,yBAAyB,EACzB,CAAC,QAAsC,EAAE,EAAE;gBACzC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACrB,CAAC,CACF;SACJ,CAAC,MAAA,CAAC;QAEH,uBAAA,IAAI,+CAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,wBAAwB,EAAE,CAAC,QAAQ,EAAE,EAAE;YACjE,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAEK,+BAA+B,CACnC,WAA8B,EAC9B,EAAE,OAAO,EAAE,MAAM,EAAuC;;YAExD,MAAM,OAAO,GAAG,IAAA,oBAAU,EAAC,OAAO,CAAC,CAAC;YACpC,MAAM,QAAQ,GAAG,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,OAAO,CAAC,CAAC;YAC/C,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,CAAC;YAExB,MAAM,IAAI,GAAG,CAAC,GAAS,EAAE;gBACvB,IAAI;oBACF,MAAM,uBAAA,IAAI,kFAAe,MAAnB,IAAI,EAAgB,QAAQ,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;oBACzD,MAAM,uBAAA,IAAI,kFAAe,MAAnB,IAAI,EAAgB,QAAQ,CAAC,CAAC;oBACpC,MAAM,uBAAA,IAAI,8EAAW,MAAf,IAAI,EAAY,QAAQ,EAAE,OAAO,CAAC,CAAC;oBACzC,MAAM,uBAAA,IAAI,qFAAkB,MAAtB,IAAI,EAAmB,QAAQ,EAAE,MAAM,CAAC,CAAC;oBAE/C,MAAM,eAAe,GAAG,MAAM,uBAAA,IAAI,yFAAsB,MAA1B,IAAI,EAAuB,QAAQ,CAAC,CAAC;oBAEnE,MAAM,uBAAA,IAAI,sFAAmB,MAAvB,IAAI,EAAoB,QAAQ,CAAC,CAAC;oBACxC,MAAM,uBAAA,IAAI,wFAAqB,MAAzB,IAAI,EAAsB,QAAQ,EAAE,OAAO,CAAC,CAAC;oBAEnD,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,EAAE,CAAC;oBAE3B,OAAO,QAAQ,CAAC,IAAc,CAAC;iBAChC;gBAAC,OAAO,KAAK,EAAE;oBACd,uBAAA,IAAI,sFAAmB,MAAvB,IAAI,EAAoB,QAAQ,EAAE,KAAK,CAAC,CAAC;oBACzC,MAAM,KAAK,CAAC;iBACb;YACH,CAAC,CAAA,CAAC,EAAE,CAAC;YAEL,MAAM,eAAe,GAAG,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC9D,uBAAA,IAAI,+CAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE;oBACxD,OAAO,CAAC,IAAI,CAAC,eAAyB,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC;gBAEH,uBAAA,IAAI,+CAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;oBACjE,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,OAAO;gBACL,EAAE;gBACF,IAAI;gBACJ,eAAe;aAChB,CAAC;QACJ,CAAC;KAAA;CAgSF;AAxZD,0DAwZC;ieA9RiB,OAAe;IAC7B,MAAM,QAAQ,GAAG;QACf,aAAa,EAAE,IAAI;QACnB,aAAa,EAAE,IAAI;QACnB,aAAa,EAAE,IAAI;QACnB,OAAO;QACP,KAAK,EAAE,IAAI;QACX,IAAI,EAAE,IAAI;QACV,EAAE,EAAE,IAAA,SAAM,GAAE;QACZ,MAAM,EAAE,2BAAmB,CAAC,UAAU;QACtC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;QAChB,eAAe,EAAE,IAAI;QACrB,iBAAiB,EAAE,IAAI;QACvB,aAAa,EAAE,uBAAA,IAAI,6FAA0B,MAA9B,IAAI,CAA4B;QAC/C,YAAY,EAAE,IAAI;KACnB,CAAC;IAEF,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;IAE/B,IAAA,sBAAG,EAAC,sBAAsB,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;IAEzC,OAAO,QAAQ,CAAC;AAClB,CAAC,2FAGC,QAA+B,EAC/B,WAA8B,EAC9B,MAAc;;QAEd,MAAM,EAAE,EAAE,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;QAEvC,IAAA,sBAAG,EAAC,2BAA2B,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAEjD,MAAM,QAAQ,GAAG,IAAI,wBAAY,CAAC,uBAAA,IAAI,yCAAiB,CAAC,CAAC;QAEzD,MAAM,QAAQ,GAAiB;YAC7B,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;SAC/D,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,oCAA4B,EAAC,MAAM,EAAE;YAC1D,QAAQ;YACR,EAAE,EAAE,WAAW,CAAC,EAAE;YAClB,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,IAAI,EAAE,WAAW,CAAC,IAAI;SACvB,CAAC,CAAC;QAEH,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAC3C,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAC3C,aAAa,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QACrC,aAAa,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAEvC,QAAQ,CAAC,iBAAiB,GAAG,WAAkB,CAAC;QAEhD,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;IACjC,CAAC;4FAEoB,QAA+B;;QAClD,MAAM,IAAA,wBAAa,EAAC;YAClB,kBAAkB,EAAE,uBAAA,IAAI,mDAAoB;YAC5C,QAAQ;YACR,QAAQ,EAAE,IAAI,wBAAY,CAAC,uBAAA,IAAI,yCAAiB,CAAC;SAClD,CAAC,CAAC;QAEH,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;IACjC,CAAC;oFAGC,QAA+B,EAC/B,OAAgB;;QAEhB,MAAM,EAAE,EAAE,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;QAEvC,IAAA,sBAAG,EAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QAExB,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;QAEvD,MAAM,sBAAsB,GAAG,IAAA,gCAAc,EAC3C,qBAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACrD,CAAC;QAEF,MAAM,kBAAkB,GAAG,GAAG,gBAAgB,GAAG,sBAAsB,GAAG,IAAA,gCAAc,EACtF,eAAe,CAChB,EAAE,CAAC;QAEJ,MAAM,OAAO,mCACR,aAAa,KAChB,YAAY,EAAE,KAAK,EACnB,kBAAkB,EAAE,KAAK,EACzB,oBAAoB,EAAE,KAAK,EAC3B,SAAS,EAAE,eAAe,EAC1B,gBAAgB,EAAE,kBAAkB,GACrC,CAAC;QAEF,IAAA,sBAAG,EAAC,gBAAgB,EAAE;YACpB,gBAAgB;YAChB,sBAAsB;YACtB,cAAc,EAAE,OAAO,CAAC,SAAS;YACjC,kBAAkB,EAAE,OAAO,CAAC,gBAAgB;SAC7C,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,wBAAwB,CACzD,OAAO,EACP,sBAAU,CACX,CAAC;QAEF,aAAa,CAAC,kBAAkB,GAAG,IAAA,wBAAK,EACtC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,kBAAkB,GAAG,UAAU,CAAC,CACzD,CAAC;QAEF,aAAa,CAAC,oBAAoB,GAAG,IAAA,wBAAK,EACxC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,oBAAoB,GAAG,UAAU,CAAC,CAC3D,CAAC;QAEF,aAAa,CAAC,YAAY,GAAG,IAAA,wBAAK,EAChC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,YAAY,GAAG,UAAU,CAAC,CACnD,CAAC;QAEF,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;IACjC,CAAC;kGAEuB,QAA+B,EAAE,MAAc;;QACrE,MAAM,EAAE,EAAE,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;QAEvC,IAAA,sBAAG,EAAC,gCAAgC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAEtD,MAAM,QAAQ,GAAG,IAAI,wBAAY,CAAC,uBAAA,IAAI,yCAAiB,CAAC,CAAC;QAEzD,MAAM,QAAQ,GAAiB;YAC7B,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;SAC/D,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,gCAAwB,EAAC,MAAM,EAAE;YACtD,QAAQ;YACR,aAAa;YACb,UAAU,EAAE,MAAM,uBAAA,IAAI,8CAAe,MAAnB,IAAI,CAAiB;SACxC,CAAC,CAAC;QAEH,aAAa,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,CAAC;QAE3D,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;IACjC,CAAC;0GAE2B,QAA+B;;QACzD,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,uBAAA,IAAI,oFAAiB,MAArB,IAAI,EAAkB,QAAQ,CAAC,CAAC;QAElE,MAAM,WAAW,GAAG,uBAAA,IAAI,gDAAiB,MAArB,IAAI,CAAmB,CAAC,IAAI,CAC9C,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,CAC9B,CAAC;QAEF,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;QAEnC,IACE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAC,YAAY;aAClC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAC,oBAAoB,CAAA,EAC1C;YACA,aAAa,CAAC,YAAY,GAAG,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC;YAE/D,aAAa,CAAC,oBAAoB;gBAChC,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC;YAE5C,IAAA,sBAAG,EAAC,iCAAiC,EAAE;gBACrC,YAAY,EAAE,aAAa,CAAC,YAAY;gBACxC,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;aACzD,CAAC,CAAC;SACJ;QAED,QAAQ,CAAC,MAAM,GAAG,2BAAmB,CAAC,QAAQ,CAAC;QAE/C,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;QAE/B,OAAO,eAAe,CAAC;IACzB,CAAC;oGAEwB,QAA+B;;QACtD,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;QAEhD,IAAA,sBAAG,EAAC,wBAAwB,EAAE,EAAE,EAAE,aAAa,CAAC,CAAC;QAEjD,MAAM,SAAS,GAAG,MAAM,IAAA,6BAAiB,EACvC,aAAa,EACb,sBAAU,EACV,OAAO,EACP,MAAM,uBAAA,IAAI,8CAAe,MAAnB,IAAI,CAAiB,CAC5B,CAAC;QAEF,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;QAEpC,IAAA,sBAAG,EAAC,uBAAuB,EAAE,SAAS,CAAC,CAAC;QAExC,QAAQ,CAAC,MAAM,GAAG,2BAAmB,CAAC,MAAM,CAAC;QAE7C,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;IACjC,CAAC;wGAGC,QAA+B,EAC/B,OAAgB;;QAEhB,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;QAEnC,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAC,aAAa,EAAE,sBAAU,CAAC,CAAC;QAExE,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,QAAQ,CAAC,MAAM,GAAG,2BAAmB,CAAC,SAAS,CAAC;QAEhD,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;IACjC,CAAC;oGAEkB,QAA+B,EAAE,KAAc;IAChE,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,CAAC;IACxB,MAAM,QAAQ,GAAG,KAAY,CAAC;IAE9B,IAAA,sBAAG,EAAC,uBAAuB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;IAExC,QAAQ,CAAC,KAAK,GAAG;QACf,IAAI,EAAE,QAAQ,CAAC,IAAI;QACnB,OAAO,EAAE,QAAQ,CAAC,OAAO;QACzB,KAAK,EAAE,QAAQ,CAAC,KAAK;QACrB,IAAI,EAAE,QAAQ,CAAC,IAAI;QACnB,GAAG,EAAE,QAAQ,CAAC,GAAG;KAClB,CAAC;IAEF,QAAQ,CAAC,MAAM,GAAG,2BAAmB,CAAC,MAAM,CAAC;IAE7C,uBAAA,IAAI,mFAAgB,MAApB,IAAI,EAAiB,QAAQ,CAAC,CAAC;AACjC,CAAC;IAGC,OAAO;QACL,QAAQ,EAAE,IAAI;QACd,YAAY,EAAE,IAAI;QAClB,QAAQ,EAAE,IAAI;QACd,YAAY,EAAE,IAAI;QAClB,oBAAoB,EAAE,IAAI;QAC1B,KAAK,EAAE,IAAI;QACX,gBAAgB,EAAE,IAAI;QACtB,kBAAkB,EAAE,IAAI;QACxB,MAAM,EAAE,uBAAW;QACnB,SAAS,EAAE,IAAI;QACf,oBAAoB,EAAE,IAAI;KAC3B,CAAC;AACJ,CAAC,6FAEe,QAA+B;IAC7C,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,CAAC;IAExB,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;QACpB,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,GAAG,IAAA,kBAAS,EAAC,QAAQ,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAyB,EAAE,uBAAA,IAAI,6EAAU,MAAd,IAAI,CAAY,CAAC,CAAC;IAE3D,uBAAA,IAAI,sFAAmB,MAAvB,IAAI,EAAoB,QAAQ,CAAC,CAAC;AACpC,CAAC,mGAEkB,QAA+B;IAChD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE;QAC/B,OAAO;KACR;IAED,MAAM,mBAAmB,GAAG,IAAA,oCAAsB,EAAC,QAAQ,CAAC,CAAC;IAE7D,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;AAC5D,CAAC;IAGC,OAAO,IAAA,kBAAS,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC,+FAEsB,QAA+B;;QACpD,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,CAAC;QACxB,MAAM,IAAI,GAAG,+BAAY,CAAC,WAAW,CAAC;QACtC,MAAM,WAAW,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;QAEjC,OAAO,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CACrC,+BAA+B,EAC/B;YACE,EAAE;YACF,MAAM,EAAE,kCAAe;YACvB,IAAI;YACJ,WAAW;YACX,aAAa,EAAE,IAAI;SACpB,EACD,IAAI,CACL,CAAuB,CAAC;IAC3B,CAAC","sourcesContent":["/* eslint-disable n/no-process-env */\n\nimport { defaultAbiCoder } from '@ethersproject/abi';\nimport { AddressZero } from '@ethersproject/constants';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type {\n  AddResult,\n  AddApprovalRequest,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseControllerV2 } from '@metamask/base-controller';\nimport {\n  ApprovalType,\n  ORIGIN_METAMASK,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  TransactionMeta,\n  TransactionParams,\n} from '@metamask/transaction-controller';\nimport { stripHexPrefix } from 'ethereumjs-util';\nimport EventEmitter from 'events';\nimport type { Patch } from 'immer';\nimport { cloneDeep } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport type { BlockTracker, ProviderProxy } from '../../network-controller/src';\nimport { ENTRYPOINT } from './constants';\nimport type { Bundler } from './helpers/Bundler';\nimport { getBundler } from './helpers/Bundler';\nimport { PendingUserOperationTracker } from './helpers/PendingUserOperationTracker';\nimport { projectLogger as log } from './logger';\nimport {\n  sendSnapPaymasterRequest,\n  sendSnapUserOperationRequest,\n} from './snaps';\nimport type { SnapProvider } from './snaps/types';\nimport type { UserOperation, UserOperationMetadata } from './types';\nimport { UserOperationStatus } from './types';\nimport { updateGasFees } from './utils/gas-fees';\nimport { signUserOperation } from './utils/signature';\nimport { getTransactionMetadata } from './utils/transaction';\n\nconst DUMMY_SIGNATURE =\n  '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c';\n\nconst GAS_BUFFER = 2;\n\nconst controllerName = 'UserOperationController';\n\nconst stateMetadata = {\n  userOperations: { persist: true, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  userOperations: {},\n});\n\nexport type UserOperationControllerState = {\n  userOperations: Record<string, UserOperationMetadata>;\n};\n\nexport type GetUserOperationState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => UserOperationControllerState;\n};\n\nexport type UserOperationStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [UserOperationControllerState, Patch[]];\n};\n\nexport type UserOperationControllerActions =\n  | GetUserOperationState\n  | AddApprovalRequest;\n\nexport type UserOperationControllerEvents = UserOperationStateChange;\n\nexport type UserOperationControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  UserOperationControllerActions,\n  UserOperationControllerEvents,\n  UserOperationControllerActions['type'],\n  UserOperationControllerEvents['type']\n>;\n\nexport type UserOperationControllerOptions = {\n  blockTracker: BlockTracker;\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  getPrivateKey: () => Promise<string>;\n  getTransactions: () => TransactionMeta[];\n  messenger: UserOperationControllerMessenger;\n  provider: ProviderProxy;\n  state?: Partial<UserOperationControllerState>;\n};\n\n/**\n * Controller for creating and managing the life cycle of user operations.\n */\nexport class UserOperationController extends BaseControllerV2<\n  typeof controllerName,\n  UserOperationControllerState,\n  UserOperationControllerMessenger\n> {\n  hub: EventEmitter;\n\n  #blockTracker: BlockTracker;\n\n  #getGasFeeEstimates: () => Promise<GasFeeState>;\n\n  #getPrivateKey: () => Promise<string>;\n\n  #getTransactions: () => TransactionMeta[];\n\n  #pendingTracker: PendingUserOperationTracker;\n\n  #provider: ProviderProxy;\n\n  /**\n   * Construct a UserOperation controller.\n   *\n   * @param options - Controller options.\n   * @param options.blockTracker -\n   * @param options.getGasFeeEstimates -\n   * @param options.getPrivateKey -\n   * @param options.getTransactions -\n   * @param options.messenger - Restricted controller messenger for the user operation controller.\n   * @param options.provider -\n   * @param options.state - Initial state to set on the controller.\n   */\n  constructor({\n    blockTracker,\n    getGasFeeEstimates,\n    getPrivateKey,\n    getTransactions,\n    messenger,\n    provider,\n    state,\n  }: UserOperationControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.hub = new EventEmitter();\n\n    this.#blockTracker = blockTracker;\n    this.#getGasFeeEstimates = getGasFeeEstimates;\n    this.#getPrivateKey = getPrivateKey;\n    this.#getTransactions = getTransactions;\n    this.#provider = provider;\n\n    this.#pendingTracker = new PendingUserOperationTracker({\n      blockTracker: this.#blockTracker,\n      getBlockByHash: (hash: string) =>\n        new Web3Provider(this.#provider as any).getBlock(hash),\n      getUserOperations: () => Object.values(this.#getState().userOperations),\n      onStateChange: (\n        listener: (state: UserOperationControllerState) => void,\n      ) =>\n        this.hub.on(\n          'user-operations-updated',\n          (newState: UserOperationControllerState) => {\n            listener(newState);\n          },\n        ),\n    });\n\n    this.#pendingTracker.hub.on('user-operation-updated', (metadata) => {\n      this.#updateMetadata(metadata);\n    });\n  }\n\n  async addUserOperationFromTransaction(\n    transaction: TransactionParams,\n    { chainId, snapId }: { chainId: string; snapId: string },\n  ) {\n    const bundler = getBundler(chainId);\n    const metadata = this.#createMetadata(chainId);\n    const { id } = metadata;\n\n    const hash = (async () => {\n      try {\n        await this.#applySnapData(metadata, transaction, snapId);\n        await this.#updateGasFees(metadata);\n        await this.#updateGas(metadata, bundler);\n        await this.#addPaymasterData(metadata, snapId);\n\n        const resultCallbacks = await this.#approveUserOperation(metadata);\n\n        await this.#signUserOperation(metadata);\n        await this.#submitUserOperation(metadata, bundler);\n\n        resultCallbacks?.success();\n\n        return metadata.hash as string;\n      } catch (error) {\n        this.#failUserOperation(metadata, error);\n        throw error;\n      }\n    })();\n\n    const transactionHash = new Promise<string>((resolve, reject) => {\n      this.#pendingTracker.hub.once(`${id}:confirmed`, (meta) => {\n        resolve(meta.transactionHash as string);\n      });\n\n      this.#pendingTracker.hub.once(`${id}:failed`, (_metadata, error) => {\n        reject(error);\n      });\n    });\n\n    return {\n      id,\n      hash,\n      transactionHash,\n    };\n  }\n\n  #createMetadata(chainId: string): UserOperationMetadata {\n    const metadata = {\n      actualGasCost: null,\n      actualGasUsed: null,\n      baseFeePerGas: null,\n      chainId,\n      error: null,\n      hash: null,\n      id: random(),\n      status: UserOperationStatus.Unapproved,\n      time: Date.now(),\n      transactionHash: null,\n      transactionParams: null,\n      userOperation: this.#createEmptyUserOperation(),\n      userFeeLevel: null,\n    };\n\n    this.#updateMetadata(metadata);\n\n    log('Added user operation', metadata.id);\n\n    return metadata;\n  }\n\n  async #applySnapData(\n    metadata: UserOperationMetadata,\n    transaction: TransactionParams,\n    snapId: string,\n  ) {\n    const { id, userOperation } = metadata;\n\n    log('Requesting data from snap', { id, snapId });\n\n    const provider = new Web3Provider(this.#provider as any);\n\n    const ethereum: SnapProvider = {\n      request: ({ method, params }) => provider.send(method, params),\n    };\n\n    const response = await sendSnapUserOperationRequest(snapId, {\n      ethereum,\n      to: transaction.to,\n      value: transaction.value,\n      data: transaction.data,\n    });\n\n    userOperation.callData = response.callData;\n    userOperation.initCode = response.initCode;\n    userOperation.nonce = response.nonce;\n    userOperation.sender = response.sender;\n\n    metadata.transactionParams = transaction as any;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #updateGasFees(metadata: UserOperationMetadata) {\n    await updateGasFees({\n      getGasFeeEstimates: this.#getGasFeeEstimates,\n      metadata,\n      provider: new Web3Provider(this.#provider as any),\n    });\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #updateGas(\n    metadata: UserOperationMetadata,\n    bundler: Bundler,\n  ): Promise<void> {\n    const { id, userOperation } = metadata;\n\n    log('Updating gas', id);\n\n    const paymasterAddress = process.env.PAYMASTER_ADDRESS;\n\n    const encodedValidUntilAfter = stripHexPrefix(\n      defaultAbiCoder.encode(['uint48', 'uint48'], [0, 0]),\n    );\n\n    const dummyPaymasterData = `${paymasterAddress}${encodedValidUntilAfter}${stripHexPrefix(\n      DUMMY_SIGNATURE,\n    )}`;\n\n    const payload = {\n      ...userOperation,\n      callGasLimit: '0x1',\n      preVerificationGas: '0x1',\n      verificationGasLimit: '0x1',\n      signature: DUMMY_SIGNATURE,\n      paymasterAndData: dummyPaymasterData,\n    };\n\n    log('Estimating gas', {\n      paymasterAddress,\n      encodedValidUntilAfter,\n      dummySignature: payload.signature,\n      dummyPaymasterData: payload.paymasterAndData,\n    });\n\n    const estimatedGas = await bundler.estimateUserOperationGas(\n      payload,\n      ENTRYPOINT,\n    );\n\n    userOperation.preVerificationGas = toHex(\n      Math.round(estimatedGas.preVerificationGas * GAS_BUFFER),\n    );\n\n    userOperation.verificationGasLimit = toHex(\n      Math.round(estimatedGas.verificationGasLimit * GAS_BUFFER),\n    );\n\n    userOperation.callGasLimit = toHex(\n      Math.round(estimatedGas.callGasLimit * GAS_BUFFER),\n    );\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #addPaymasterData(metadata: UserOperationMetadata, snapId: string) {\n    const { id, userOperation } = metadata;\n\n    log('Requesting paymaster from snap', { id, snapId });\n\n    const provider = new Web3Provider(this.#provider as any);\n\n    const ethereum: SnapProvider = {\n      request: ({ method, params }) => provider.send(method, params),\n    };\n\n    const response = await sendSnapPaymasterRequest(snapId, {\n      ethereum,\n      userOperation,\n      privateKey: await this.#getPrivateKey(),\n    });\n\n    userOperation.paymasterAndData = response.paymasterAndData;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #approveUserOperation(metadata: UserOperationMetadata) {\n    const { resultCallbacks } = await this.#requestApproval(metadata);\n\n    const transaction = this.#getTransactions().find(\n      (tx) => tx.id === metadata.id,\n    );\n\n    const { userOperation } = metadata;\n\n    if (\n      transaction?.txParams.maxFeePerGas &&\n      transaction?.txParams.maxPriorityFeePerGas\n    ) {\n      userOperation.maxFeePerGas = transaction.txParams.maxFeePerGas;\n\n      userOperation.maxPriorityFeePerGas =\n        transaction.txParams.maxPriorityFeePerGas;\n\n      log('Updated gas fees after approval', {\n        maxFeePerGas: userOperation.maxFeePerGas,\n        maxPriorityFeePerGas: userOperation.maxPriorityFeePerGas,\n      });\n    }\n\n    metadata.status = UserOperationStatus.Approved;\n\n    this.#updateMetadata(metadata);\n\n    return resultCallbacks;\n  }\n\n  async #signUserOperation(metadata: UserOperationMetadata) {\n    const { id, chainId, userOperation } = metadata;\n\n    log('Signing user operation', id, userOperation);\n\n    const signature = await signUserOperation(\n      userOperation,\n      ENTRYPOINT,\n      chainId,\n      await this.#getPrivateKey(),\n    );\n\n    userOperation.signature = signature;\n\n    log('Signed user operation', signature);\n\n    metadata.status = UserOperationStatus.Signed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #submitUserOperation(\n    metadata: UserOperationMetadata,\n    bundler: Bundler,\n  ) {\n    const { userOperation } = metadata;\n\n    const hash = await bundler.sendUserOperation(userOperation, ENTRYPOINT);\n\n    metadata.hash = hash;\n    metadata.status = UserOperationStatus.Submitted;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #failUserOperation(metadata: UserOperationMetadata, error: unknown) {\n    const { id } = metadata;\n    const rawError = error as any;\n\n    log('User operation failed', id, error);\n\n    metadata.error = {\n      name: rawError.name,\n      message: rawError.message,\n      stack: rawError.stack,\n      code: rawError.code,\n      rpc: rawError.rpc,\n    };\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #createEmptyUserOperation(): UserOperation {\n    return {\n      callData: '0x',\n      callGasLimit: '0x',\n      initCode: '0x',\n      maxFeePerGas: '0x',\n      maxPriorityFeePerGas: '0x',\n      nonce: '0x',\n      paymasterAndData: '0x',\n      preVerificationGas: '0x',\n      sender: AddressZero,\n      signature: '0x',\n      verificationGasLimit: '0x',\n    };\n  }\n\n  #updateMetadata(metadata: UserOperationMetadata) {\n    const { id } = metadata;\n\n    this.update((state) => {\n      state.userOperations[id] = cloneDeep(metadata);\n    });\n\n    this.hub.emit('user-operations-updated', this.#getState());\n\n    this.#updateTransaction(metadata);\n  }\n\n  #updateTransaction(metadata: UserOperationMetadata) {\n    if (!metadata.transactionParams) {\n      return;\n    }\n\n    const transactionMetadata = getTransactionMetadata(metadata);\n\n    this.hub.emit('transaction-updated', transactionMetadata);\n  }\n\n  #getState(): UserOperationControllerState {\n    return cloneDeep(this.state);\n  }\n\n  async #requestApproval(metadata: UserOperationMetadata): Promise<AddResult> {\n    const { id } = metadata;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      true, // Should display approval request to user\n    )) as Promise<AddResult>;\n  }\n}\n"]}