{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/snaps/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { UserOperation } from '../types';\n\nexport type SnapProvider = {\n  request: (request: { method: string; params: any[] }) => Promise<any>;\n};\n\nexport type OnUserOperationRequest = {\n  to?: string;\n  value?: string;\n  data?: string;\n  chainId: string;\n  // This would be a global varable in a real snap.\n  ethereum: SnapProvider;\n};\n\nexport type OnPaymasterRequest = {\n  userOperation: UserOperation;\n  // This is only required for the POC since our example paymaster signs the user operation using our EOA.\n  privateKey: string;\n  // This would be a global varable in a real snap.\n  ethereum: SnapProvider;\n};\n\nexport type OnUserOperationSignatureRequest = {\n  userOperation: UserOperation;\n  chainId: string;\n  // This is only required for the POC since we're not yet using the KeyringController.\n  privateKey: string;\n};\n\nexport type OnUserOperationResponse = {\n  bundler?: string;\n  callData: string;\n  dummyPaymasterAndData?: string;\n  dummySignature?: string;\n  initCode: string;\n  nonce: string;\n  sender: string;\n};\n\nexport type OnPaymasterResponse = {\n  paymasterAndData: string;\n};\n\nexport type OnUserOperationSignatureResponse = {\n  signature: string;\n};\n\nexport type OnUserOperationHandler = (\n  request: OnUserOperationRequest,\n) => Promise<OnUserOperationResponse>;\n\nexport type OnPaymasterHandler = (\n  request: OnPaymasterRequest,\n) => Promise<OnPaymasterResponse>;\n\nexport type OnUserOperationSignatureHandler = (\n  request: OnUserOperationSignatureRequest,\n) => Promise<OnUserOperationSignatureResponse>;\n\nexport type AccountSnap = {\n  onUserOperationRequest: OnUserOperationHandler;\n  onPaymasterRequest: OnPaymasterHandler;\n  onUserOperationSignatureRequest: OnUserOperationSignatureHandler;\n};\n"]}