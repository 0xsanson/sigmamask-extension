{"version":3,"file":"VerifyingPaymaster.js","sourceRoot":"","sources":["../../../src/snaps/simple-account/VerifyingPaymaster.ts"],"names":[],"mappings":";AAAA,qCAAqC;AACrC,wCAAwC;;;;;;;;;;;;;;;AAExC,4CAAqD;AACrD,wDAAoD;AAEpD,qDAAiD;AAEjD,+CAA6C;AAC7C,yCAAiE;AAEjE,4FAAkE;AAClE,2CAA8C;AAC9C,mCAAmC;AAEnC,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,qBAAqB,CAAC,CAAC;AAErE,SAAsB,mBAAmB,CACvC,gBAAwB,EACxB,UAAkB,EAClB,UAAkB,EAClB,aAA4B,EAC5B,UAAkB,EAClB,QAAsB;;QAEtB,MAAM,0BAA0B,GAAG,IAAI,oBAAQ,CAC7C,gBAAgB,EAChB,iCAAqB,EACrB,QAAQ,CACT,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,0BAA0B,CAAC,OAAO,CACnD,aAAa,EACb,UAAU,EACV,UAAU,CACX,CAAC;QAEF,GAAG,CAAC,8CAA8C,EAAE,IAAI,CAAC,CAAC;QAE1D,MAAM,SAAS,GAAG,MAAM,IAAA,gBAAQ,EAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAEnD,GAAG,CAAC,oCAAoC,EAAE,SAAS,CAAC,CAAC;QAErD,MAAM,IAAI,GACR,gBAAgB;YAChB,IAAA,gCAAc,EACZ,qBAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CACvE;YACD,IAAA,gCAAc,EAAC,SAAS,CAAC,CAAC;QAE5B,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;QAEtC,MAAM,OAAO,GAAG,MAAM,mBAAmB,CACvC,aAAa,EACb,IAAI,EACJ,0BAA0B,CAC3B,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACxD;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CAAA;AA9CD,kDA8CC;AAED,SAAgB,wBAAwB;IACtC,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;IAEvD,IAAI,CAAC,gBAAgB,EAAE;QACrB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,sBAAsB,GAAG,IAAA,gCAAc,EAC3C,qBAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACrD,CAAC;IAEF,OAAO,GAAG,gBAAgB,GAAG,sBAAsB,GAAG,IAAA,gCAAc,EAClE,2BAAe,CAChB,EAAE,CAAC;AACN,CAAC;AAdD,4DAcC;AAED,SAAe,mBAAmB,CAChC,aAA4B,EAC5B,gBAAwB,EACxB,iBAA2B;;QAE3B,MAAM,iBAAiB,mCAAQ,aAAa,KAAE,gBAAgB,GAAE,CAAC;QAEjE,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,UAAU,CAAC,uBAAuB,CACvE,iBAAiB,EACjB,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,EACpB,CAAC,EACD,EAAE,IAAI,EAAE,sBAAU,EAAE,CACrB,CAAC;QAEF,MAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAY,CAAC;QACvD,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAE1C,GAAG,CAAC,wCAAwC,EAAE;YAC5C,YAAY;YACZ,KAAK,EAAE,CAAC,MAAM;SACf,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CAAC;IACjB,CAAC;CAAA","sourcesContent":["/* eslint-disable n/no-process-env */\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport { defaultAbiCoder } from '@ethersproject/abi';\nimport { Contract } from '@ethersproject/contracts';\nimport type { Web3Provider } from '@ethersproject/providers';\nimport { stripHexPrefix } from 'ethereumjs-util';\n\nimport { ENTRYPOINT } from '../../constants';\nimport { createModuleLogger, projectLogger } from '../../logger';\nimport type { UserOperation } from '../../types';\nimport VerifyingPaymasterABI from './abi/VerifyingPaymaster.json';\nimport { DUMMY_SIGNATURE } from './constants';\nimport { signHash } from './ecdsa';\n\nconst log = createModuleLogger(projectLogger, 'verifying-paymaster');\n\nexport async function getPaymasterAndData(\n  paymasterAddress: string,\n  validUntil: number,\n  validAfter: number,\n  userOperation: UserOperation,\n  privateKey: string,\n  provider: Web3Provider,\n): Promise<string> {\n  const verifyingPaymasterContract = new Contract(\n    paymasterAddress,\n    VerifyingPaymasterABI,\n    provider,\n  );\n\n  const hash = await verifyingPaymasterContract.getHash(\n    userOperation,\n    validUntil,\n    validAfter,\n  );\n\n  log('Retrieved user operation hash from paymaster', hash);\n\n  const signature = await signHash(hash, privateKey);\n\n  log('Generated user operation signature', signature);\n\n  const data =\n    paymasterAddress +\n    stripHexPrefix(\n      defaultAbiCoder.encode(['uint48', 'uint48'], [validUntil, validAfter]),\n    ) +\n    stripHexPrefix(signature);\n\n  log('Generated paymaster data', data);\n\n  const isValid = await verifyPaymasterData(\n    userOperation,\n    data,\n    verifyingPaymasterContract,\n  );\n\n  if (!isValid) {\n    throw new Error('Validation of paymaster data failed');\n  }\n\n  return data;\n}\n\nexport function getDummyPaymasterAndData(): string {\n  const paymasterAddress = process.env.PAYMASTER_ADDRESS;\n\n  if (!paymasterAddress) {\n    return '0x';\n  }\n\n  const encodedValidUntilAfter = stripHexPrefix(\n    defaultAbiCoder.encode(['uint48', 'uint48'], [0, 0]),\n  );\n\n  return `${paymasterAddress}${encodedValidUntilAfter}${stripHexPrefix(\n    DUMMY_SIGNATURE,\n  )}`;\n}\n\nasync function verifyPaymasterData(\n  userOperation: UserOperation,\n  paymasterAndData: string,\n  paymasterContract: Contract,\n): Promise<boolean> {\n  const testUserOperation = { ...userOperation, paymasterAndData };\n\n  const result = await paymasterContract.callStatic.validatePaymasterUserOp(\n    testUserOperation,\n    '0x'.padEnd(66, '0'),\n    1,\n    { from: ENTRYPOINT },\n  );\n\n  const packedResult = result[1].toHexString() as string;\n  const failed = packedResult.endsWith('1');\n\n  log('Validated paymaster data with contract', {\n    packedResult,\n    valid: !failed,\n  });\n\n  return !failed;\n}\n"]}