{"version":3,"file":"SimpleAccount.js","sourceRoot":"","sources":["../../../src/snaps/simple-account/SimpleAccount.ts"],"names":[],"mappings":";AAAA,wCAAwC;;;;;;;;;;;;;;;AAExC,wDAAuD;AACvD,wDAAoD;AAEpD,qDAAiD;AAEjD,+CAA6C;AAC7C,yCAAiE;AACjE,4EAAkD;AAClD,kFAAwD;AACxD,gGAAsE;AACtE,2CAA8C;AAE9C,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,gBAAgB,CAAC,CAAC;AAEhE,MAAM,8BAA8B,GAClC,4CAA4C,CAAC;AAE/C,SAAgB,WAAW,CAAC,KAAa,EAAE,IAAY;IACrD,MAAM,4BAA4B,GAAG,IAAI,oBAAQ,CAC/C,8BAA8B,EAC9B,mCAAuB,CACxB,CAAC;IAEF,MAAM,QAAQ,GACZ,8BAA8B;QAC9B,IAAA,gCAAc,EACZ,4BAA4B,CAAC,SAAS,CAAC,kBAAkB,CACvD,eAAe,EACf,CAAC,KAAK,EAAE,IAAI,CAAC,CACd,CACF,CAAC;IAEJ,GAAG,CAAC,qBAAqB,EAAE;QACzB,QAAQ;QACR,KAAK;QACL,IAAI;KACL,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC;AAClB,CAAC;AAtBD,kCAsBC;AAED,SAAsB,SAAS,CAC7B,QAAgB,EAChB,QAAsB;;QAEtB,MAAM,kBAAkB,GAAG,IAAI,oBAAQ,CAAC,sBAAU,EAAE,yBAAa,EAAE,QAAQ,CAAC,CAAC;QAE7E,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,UAAU;aAC/C,gBAAgB,CAAC,QAAQ,CAAC;aAC1B,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAE5C,GAAG,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QAEjC,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAbD,8BAaC;AAED,SAAgB,WAAW,CACzB,EAAsB,EACtB,KAAyB,EACzB,IAAwB,EACxB,MAAc;IAEd,MAAM,qBAAqB,GAAG,IAAI,oBAAQ,CAAC,MAAM,EAAE,4BAAgB,CAAC,CAAC;IAErE,OAAO,qBAAqB,CAAC,SAAS,CAAC,kBAAkB,CAAC,SAAS,EAAE;QACnE,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,uBAAW;QACjB,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,KAAK;QACd,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,IAAI;KACb,CAAC,CAAC;AACL,CAAC;AAbD,kCAaC;AAED,SAAsB,QAAQ,CAC5B,MAAc,EACd,UAAmB,EACnB,QAAsB;;QAEtB,MAAM,qBAAqB,GAAG,IAAI,oBAAQ,CACxC,MAAM,EACN,4BAAgB,EAChB,QAAQ,CACT,CAAC;QAEF,MAAM,KAAK,GAAG,UAAU;YACtB,CAAC,CAAC,CAAC,MAAM,qBAAqB,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,EAAE;YACxD,CAAC,CAAC,KAAK,CAAC;QAEV,IAAI,UAAU,EAAE;YACd,GAAG,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;SACnD;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AApBD,4BAoBC;AAED,SAAgB,iBAAiB;IAC/B,OAAO,2BAAe,CAAC;AACzB,CAAC;AAFD,8CAEC","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { AddressZero } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport type { Web3Provider } from '@ethersproject/providers';\nimport { stripHexPrefix } from 'ethereumjs-util';\n\nimport { ENTRYPOINT } from '../../constants';\nimport { projectLogger, createModuleLogger } from '../../logger';\nimport EntrypointABI from './abi/Entrypoint.json';\nimport SimpleAccountABI from './abi/SimpleAccount.json';\nimport SimpleAccountFactoryABI from './abi/SimpleAccountFactory.json';\nimport { DUMMY_SIGNATURE } from './constants';\n\nconst log = createModuleLogger(projectLogger, 'simple-account');\n\nconst SIMPLE_ACCOUNT_FACTORY_ADDRESS =\n  '0x9406Cc6185a346906296840746125a0E44976454';\n\nexport function getInitCode(owner: string, salt: string): string {\n  const SimpleAccountFactoryContract = new Contract(\n    SIMPLE_ACCOUNT_FACTORY_ADDRESS,\n    SimpleAccountFactoryABI,\n  );\n\n  const initCode =\n    SIMPLE_ACCOUNT_FACTORY_ADDRESS +\n    stripHexPrefix(\n      SimpleAccountFactoryContract.interface.encodeFunctionData(\n        'createAccount',\n        [owner, salt],\n      ),\n    );\n\n  log('Generated init code', {\n    initCode,\n    owner,\n    salt,\n  });\n\n  return initCode;\n}\n\nexport async function getSender(\n  initCode: string,\n  provider: Web3Provider,\n): Promise<string> {\n  const entrypointContract = new Contract(ENTRYPOINT, EntrypointABI, provider);\n\n  const sender = await entrypointContract.callStatic\n    .getSenderAddress(initCode)\n    .catch((error) => error.errorArgs.sender);\n\n  log('Determined sender', sender);\n\n  return sender;\n}\n\nexport function getCallData(\n  to: string | undefined,\n  value: string | undefined,\n  data: string | undefined,\n  sender: string,\n): string {\n  const simpleAccountContract = new Contract(sender, SimpleAccountABI);\n\n  return simpleAccountContract.interface.encodeFunctionData('execute', [\n    to ?? AddressZero,\n    value ?? '0x0',\n    data ?? '0x',\n  ]);\n}\n\nexport async function getNonce(\n  sender: string,\n  isDeployed: boolean,\n  provider: Web3Provider,\n): Promise<string> {\n  const simpleAccountContract = new Contract(\n    sender,\n    SimpleAccountABI,\n    provider,\n  );\n\n  const nonce = isDeployed\n    ? (await simpleAccountContract.getNonce()).toHexString()\n    : '0x0';\n\n  if (isDeployed) {\n    log('Retrieved nonce from smart contract', nonce);\n  }\n\n  return nonce;\n}\n\nexport function getDummySignature(): string {\n  return DUMMY_SIGNATURE;\n}\n"]}