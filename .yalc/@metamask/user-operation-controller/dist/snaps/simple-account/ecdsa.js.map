{"version":3,"file":"ecdsa.js","sourceRoot":"","sources":["../../../src/snaps/simple-account/ecdsa.ts"],"names":[],"mappings":";AAAA,wCAAwC;;;;;;;;;;;;AAExC,4CAAqD;AACrD,gDAAgD;AAChD,wDAAqD;AACrD,kDAA+C;AAC/C,2CAAqD;AAErD,yCAA6C;AAG7C,MAAM,GAAG,GAAG,IAAA,0BAAkB,EAAC,sBAAa,EAAE,OAAO,CAAC,CAAC;AAEvD,SAAgB,QAAQ,CAAC,IAAY,EAAE,UAAkB;IACvD,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAE1B,MAAM,IAAI,GAAG,IAAA,gBAAQ,EAAC,IAAI,CAAC,CAAC;IAC5B,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,UAAU,CAAC,CAAC;IAEtC,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AAPD,4BAOC;AAED,SAAsB,iBAAiB,CACrC,aAA4B,EAC5B,iBAAyB,EACzB,OAAe,EACf,UAAkB;;QAElB,GAAG,CAAC,wBAAwB,EAAE,aAAa,CAAC,CAAC;QAE7C,MAAM,IAAI,GAAG,oBAAoB,CAAC,aAAa,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;QAE7E,GAAG,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;QAE3C,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC1C,CAAC;CAAA;AAbD,8CAaC;AAED,SAAS,oBAAoB,CAC3B,aAA4B,EAC5B,iBAAyB,EACzB,OAAe;IAEf,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC7C,MAAM,IAAI,GAAG,IAAA,qBAAS,EAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;IAE3D,MAAM,IAAI,GAAG,qBAAe,CAAC,MAAM,CACjC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EACjC,CAAC,IAAI,EAAE,iBAAiB,EAAE,cAAc,CAAC,CAC1C,CAAC;IAEF,OAAO,IAAA,qBAAS,EAAC,IAAI,CAAC,CAAC;AACzB,CAAC;AAED,SAAS,mBAAmB,CAAC,aAA4B;IACvD,OAAO,qBAAe,CAAC,MAAM,CAC3B;QACE,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;QACT,SAAS;KACV,EACD;QACE,aAAa,CAAC,MAAM;QACpB,aAAa,CAAC,KAAK;QACnB,IAAA,qBAAS,EAAC,aAAa,CAAC,QAAQ,CAAC;QACjC,IAAA,qBAAS,EAAC,aAAa,CAAC,QAAQ,CAAC;QACjC,aAAa,CAAC,YAAY;QAC1B,aAAa,CAAC,oBAAoB;QAClC,aAAa,CAAC,kBAAkB;QAChC,aAAa,CAAC,YAAY;QAC1B,aAAa,CAAC,oBAAoB;QAClC,IAAA,qBAAS,EAAC,aAAa,CAAC,gBAAgB,CAAC;KAC1C,CACF,CAAC;AACJ,CAAC","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { defaultAbiCoder } from '@ethersproject/abi';\nimport { arrayify } from '@ethersproject/bytes';\nimport { keccak256 } from '@ethersproject/keccak256';\nimport { Wallet } from '@ethersproject/wallet';\nimport { createModuleLogger } from '@metamask/utils';\n\nimport { projectLogger } from '../../logger';\nimport type { UserOperation } from '../../types';\n\nconst log = createModuleLogger(projectLogger, 'ecdsa');\n\nexport function signHash(hash: string, privateKey: string): Promise<string> {\n  log('Signing hash', hash);\n\n  const data = arrayify(hash);\n  const signer = new Wallet(privateKey);\n\n  return signer.signMessage(data);\n}\n\nexport async function signUserOperation(\n  userOperation: UserOperation,\n  entrypointAddress: string,\n  chainId: string,\n  privateKey: string,\n): Promise<string> {\n  log('Signing user operation', userOperation);\n\n  const hash = getUserOperationHash(userOperation, entrypointAddress, chainId);\n\n  log('Generated user operation hash', hash);\n\n  return await signHash(hash, privateKey);\n}\n\nfunction getUserOperationHash(\n  userOperation: UserOperation,\n  entrypointAddress: string,\n  chainId: string,\n): string {\n  const chainIdDecimal = parseInt(chainId, 16);\n  const hash = keccak256(encodeUserOperation(userOperation));\n\n  const data = defaultAbiCoder.encode(\n    ['bytes32', 'address', 'uint256'],\n    [hash, entrypointAddress, chainIdDecimal],\n  );\n\n  return keccak256(data);\n}\n\nfunction encodeUserOperation(userOperation: UserOperation): string {\n  return defaultAbiCoder.encode(\n    [\n      'address',\n      'uint256',\n      'bytes32',\n      'bytes32',\n      'uint256',\n      'uint256',\n      'uint256',\n      'uint256',\n      'uint256',\n      'bytes32',\n    ],\n    [\n      userOperation.sender,\n      userOperation.nonce,\n      keccak256(userOperation.initCode),\n      keccak256(userOperation.callData),\n      userOperation.callGasLimit,\n      userOperation.verificationGasLimit,\n      userOperation.preVerificationGas,\n      userOperation.maxFeePerGas,\n      userOperation.maxPriorityFeePerGas,\n      keccak256(userOperation.paymasterAndData),\n    ],\n  );\n}\n"]}