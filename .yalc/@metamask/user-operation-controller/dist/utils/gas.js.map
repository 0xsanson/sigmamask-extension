{"version":3,"file":"gas.js","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iEAAqD;AACrD,qDAAmD;AAEnD,4CAA0C;AAC1C,gDAA6C;AAC7C,sCAA8D;AAM9D,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,KAAK,CAAC,CAAC;AAErD;;GAEG;AACH,MAAM,uBAAuB,GAAG,GAAG,CAAC;AAEpC;;;;GAIG;AACH,SAAsB,SAAS,CAC7B,QAA+B,EAC/B,eAA6C;;;QAE7C,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;QAEnC,IAAI,eAAe,CAAC,GAAG,EAAE;YACvB,aAAa,CAAC,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC;YAC9D,aAAa,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,CAAC;YAC1E,aAAa,CAAC,oBAAoB;gBAChC,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC;YAE3C,GAAG,CAAC,8CAA8C,EAAE;gBAClD,YAAY,EAAE,aAAa,CAAC,YAAY;gBACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;gBACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;aACzD,CAAC,CAAC;YAEH,OAAO;SACR;QAED,MAAM,OAAO,mCACR,aAAa,KAChB,YAAY,EAAE,KAAK,EACnB,kBAAkB,EAAE,KAAK,EACzB,oBAAoB,EAAE,KAAK,GAC5B,CAAC;QAEF,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,QAAQ,CAAC,UAAoB,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,wBAAwB,CAAC,OAAO,EAAE,sBAAU,CAAC,CAAC;QAE7E,aAAa,CAAC,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACzE,aAAa,CAAC,kBAAkB,GAAG,oBAAoB,CACrD,QAAQ,CAAC,kBAAkB,CAC5B,CAAC;QACF,aAAa,CAAC,oBAAoB,GAAG,oBAAoB,CACvD,MAAA,QAAQ,CAAC,oBAAoB,mCAAI,QAAQ,CAAC,eAAe,CAC1D,CAAC;QAEF,GAAG,CAAC,iDAAiD,EAAE;YACrD,YAAY,EAAE,aAAa,CAAC,YAAY;YACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;YACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;YACxD,UAAU,EAAE,uBAAuB;YACnC,QAAQ;SACT,CAAC,CAAC;;CACJ;AA9CD,8BA8CC;AAED;;;;GAIG;AACH,SAAS,oBAAoB,CAAC,QAAyB;IACrD,MAAM,KAAK,GACT,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAA,0BAAO,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,oBAAE,CAAC,QAAQ,CAAC,CAAC;IAEtE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAE1D,OAAO,IAAA,8BAAY,EAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAClD,CAAC","sourcesContent":["import { hexToBN } from '@metamask/controller-utils';\nimport { BN, addHexPrefix } from 'ethereumjs-util';\n\nimport { ENTRYPOINT } from '../constants';\nimport { Bundler } from '../helpers/Bundler';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  PrepareUserOperationResponse,\n  UserOperationMetadata,\n} from '../types';\n\nconst log = createModuleLogger(projectLogger, 'gas');\n\n/**\n * A multiplier to apply to all gas estimate values returned from the bundler.\n */\nconst GAS_ESTIMATE_MULTIPLIER = 1.5;\n\n/**\n * Populates the gas properties for a user operation.\n * @param metadata - The metadata for the user operation.\n * @param prepareResponse - The prepare response from the smart contract account.\n */\nexport async function updateGas(\n  metadata: UserOperationMetadata,\n  prepareResponse: PrepareUserOperationResponse,\n) {\n  const { userOperation } = metadata;\n\n  if (prepareResponse.gas) {\n    userOperation.callGasLimit = prepareResponse.gas.callGasLimit;\n    userOperation.preVerificationGas = prepareResponse.gas.preVerificationGas;\n    userOperation.verificationGasLimit =\n      prepareResponse.gas.verificationGasLimit;\n\n    log('Using gas values from smart contract account', {\n      callGasLimit: userOperation.callGasLimit,\n      preVerificationGas: userOperation.preVerificationGas,\n      verificationGasLimit: userOperation.verificationGasLimit,\n    });\n\n    return;\n  }\n\n  const payload = {\n    ...userOperation,\n    callGasLimit: '0x1',\n    preVerificationGas: '0x1',\n    verificationGasLimit: '0x1',\n  };\n\n  const bundler = new Bundler(metadata.bundlerUrl as string);\n  const estimate = await bundler.estimateUserOperationGas(payload, ENTRYPOINT);\n\n  userOperation.callGasLimit = normalizeGasEstimate(estimate.callGasLimit);\n  userOperation.preVerificationGas = normalizeGasEstimate(\n    estimate.preVerificationGas,\n  );\n  userOperation.verificationGasLimit = normalizeGasEstimate(\n    estimate.verificationGasLimit ?? estimate.verificationGas,\n  );\n\n  log('Using buffered gas values from bundler estimate', {\n    callGasLimit: userOperation.callGasLimit,\n    preVerificationGas: userOperation.preVerificationGas,\n    verificationGasLimit: userOperation.verificationGasLimit,\n    multiplier: GAS_ESTIMATE_MULTIPLIER,\n    estimate,\n  });\n}\n\n/**\n * Normalizes a gas estimate value from the bundler.\n * @param rawValue - The raw value to normalize.\n * @returns The normalized value as a hexadecimal string.\n */\nfunction normalizeGasEstimate(rawValue: string | number): string {\n  const value =\n    typeof rawValue === 'string' ? hexToBN(rawValue) : new BN(rawValue);\n\n  const bufferedValue = value.muln(GAS_ESTIMATE_MULTIPLIER);\n\n  return addHexPrefix(bufferedValue.toString(16));\n}\n"]}