{"version":3,"file":"gas-fees.js","sourceRoot":"","sources":["../../src/utils/gas-fees.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  gweiDecToWEIBN,\n  ORIGIN_METAMASK,\n  query,\n  toHex,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport {\n  GAS_ESTIMATE_TYPES,\n  type GasFeeState,\n} from '@metamask/gas-fee-controller';\nimport type { Provider } from '@metamask/network-controller';\nimport type { TransactionParams } from '@metamask/transaction-controller';\nimport { UserFeeLevel } from '@metamask/transaction-controller';\nimport { addHexPrefix } from 'ethereumjs-util';\n\nimport { EMPTY_BYTES } from '../constants';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type { UserOperation, UserOperationMetadata } from '../types';\nimport type { AddUserOperationRequest } from '../UserOperationController';\n\nconst log = createModuleLogger(projectLogger, 'gas-fees');\n\nexport type UpdateGasFeesRequest = {\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  metadata: UserOperationMetadata;\n  originalRequest: AddUserOperationRequest;\n  provider: Provider;\n  transaction?: TransactionParams;\n};\n\ntype SuggestedGasFees = {\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Populates the gas fee properties for a user operation.\n * @param request - The request to update the gas fees.\n * @param request.getGasFeeEstimates - A callback to get gas fee estimates.\n * @param request.metadata - The metadata for the user operation.\n * @param request.originalRequest - The original request to add the user operation.\n * @param request.provider - A provider to query the network.\n * @param request.transaction - The transaction that created the user operation.\n */\nexport async function updateGasFees(request: UpdateGasFeesRequest) {\n  const { metadata, originalRequest, transaction } = request;\n  const { userOperation } = metadata;\n  let suggestedGasFees: SuggestedGasFees | undefined;\n\n  const getGasFeeEstimates = async () => {\n    if (!suggestedGasFees) {\n      suggestedGasFees = await getSuggestedGasFees(request);\n    }\n\n    return suggestedGasFees;\n  };\n\n  userOperation.maxFeePerGas = await getMaxFeePerGas(\n    originalRequest,\n    getGasFeeEstimates,\n    transaction,\n  );\n\n  userOperation.maxPriorityFeePerGas = await getMaxPriorityFeePerGas(\n    originalRequest,\n    getGasFeeEstimates,\n    userOperation,\n    transaction,\n  );\n\n  metadata.userFeeLevel = getUserFeeLevel(\n    metadata,\n    originalRequest,\n    suggestedGasFees,\n    transaction,\n  );\n}\n\n/**\n * Gets the maxFeePerGas for a user operation.\n * @param originalRequest - The original request to add the user operation.\n * @param getGetFasEstimates - A callback to get gas fee estimates.\n * @param transaction - The transaction that created the user operation.\n * @returns The maxFeePerGas for the user operation.\n */\nasync function getMaxFeePerGas(\n  originalRequest: AddUserOperationRequest,\n  getGetFasEstimates: () => Promise<SuggestedGasFees>,\n  transaction?: TransactionParams,\n) {\n  const { maxFeePerGas, maxPriorityFeePerGas } = originalRequest;\n  const { gasPrice } = transaction ?? {};\n\n  if (!isGasFeeEmpty(maxFeePerGas)) {\n    log('Using maxFeePerGas from request', maxFeePerGas);\n    return maxFeePerGas as string;\n  }\n\n  if (isGasFeeEmpty(maxPriorityFeePerGas) && gasPrice) {\n    log('Setting maxFeePerGas to transaction gasPrice', gasPrice);\n    return gasPrice;\n  }\n\n  const { maxFeePerGas: suggestedMaxFeePerGas } = await getGetFasEstimates();\n\n  if (!suggestedMaxFeePerGas) {\n    throw new Error('Failed to get gas fee estimate for maxFeePerGas');\n  }\n\n  log('Using maxFeePerGas from estimate', suggestedMaxFeePerGas);\n\n  return suggestedMaxFeePerGas;\n}\n\n/**\n * Gets the maxPriorityFeePerGas for a user operation.\n * @param originalRequest - The original request to add the user operation.\n * @param getGetFasEstimates - A callback to get gas fee estimates.\n * @param userOperation - The user operation being updated.\n * @param transaction - The transaction that created the user operation.\n * @returns The maxPriorityFeePerGas for the user operation.\n */\nasync function getMaxPriorityFeePerGas(\n  originalRequest: AddUserOperationRequest,\n  getGetFasEstimates: () => Promise<SuggestedGasFees>,\n  userOperation: UserOperation,\n  transaction?: TransactionParams,\n) {\n  const { maxFeePerGas, maxPriorityFeePerGas } = originalRequest;\n  const { gasPrice } = transaction ?? {};\n  const { maxFeePerGas: updatedMaxFeePerGas } = userOperation;\n\n  if (!isGasFeeEmpty(maxPriorityFeePerGas)) {\n    log('Using maxPriorityFeePerGas from request', maxPriorityFeePerGas);\n    return maxPriorityFeePerGas as string;\n  }\n\n  if (isGasFeeEmpty(maxFeePerGas) && gasPrice) {\n    log('Setting maxPriorityFeePerGas to transaction gasPrice', gasPrice);\n    return gasPrice;\n  }\n\n  const { maxPriorityFeePerGas: suggestedMaxPriorityFeePerGas } =\n    await getGetFasEstimates();\n\n  if (suggestedMaxPriorityFeePerGas) {\n    log(\n      'Using maxPriorityFeePerGas from estimate',\n      suggestedMaxPriorityFeePerGas,\n    );\n    return suggestedMaxPriorityFeePerGas;\n  }\n\n  log('Setting maxPriorityFeePerGas to maxFeePerGas', updatedMaxFeePerGas);\n\n  return updatedMaxFeePerGas;\n}\n\n/**\n * Gets the userFeeLevel for a user operation.\n * @param metadata - The metadata for the user operation.\n * @param originalRequest - The original request to add the user operation.\n * @param suggestedGasFees - The suggested gas fees, if any.\n * @param transaction - The transaction that created the user operation.\n * @returns The userFeeLevel for the user operation.\n */\nfunction getUserFeeLevel(\n  metadata: UserOperationMetadata,\n  originalRequest: AddUserOperationRequest,\n  suggestedGasFees?: SuggestedGasFees,\n  transaction?: TransactionParams,\n): UserFeeLevel {\n  const { origin } = metadata;\n  const { maxFeePerGas, maxPriorityFeePerGas } = originalRequest;\n\n  const {\n    maxFeePerGas: suggestedMaxFeePerGas,\n    maxPriorityFeePerGas: suggestedMaxPriorityFeePerGas,\n  } = suggestedGasFees || {};\n\n  if (\n    isGasFeeEmpty(maxFeePerGas) &&\n    isGasFeeEmpty(maxPriorityFeePerGas) &&\n    transaction?.gasPrice\n  ) {\n    return origin === ORIGIN_METAMASK\n      ? UserFeeLevel.CUSTOM\n      : UserFeeLevel.DAPP_SUGGESTED;\n  }\n\n  if (\n    isGasFeeEmpty(maxFeePerGas) &&\n    isGasFeeEmpty(maxPriorityFeePerGas) &&\n    suggestedMaxFeePerGas &&\n    suggestedMaxPriorityFeePerGas\n  ) {\n    return UserFeeLevel.MEDIUM;\n  }\n\n  if (origin === ORIGIN_METAMASK) {\n    return UserFeeLevel.CUSTOM;\n  }\n\n  return UserFeeLevel.DAPP_SUGGESTED;\n}\n\n/**\n * Gets suggested gas fees.\n * @param request - The request to update the gas fees.\n * @param request.getGasFeeEstimates - A callback to get gas fee estimates.\n * @param request.provider - A provider to query the network.\n * @returns The suggested gas fees.\n */\nasync function getSuggestedGasFees(request: UpdateGasFeesRequest) {\n  const { getGasFeeEstimates, provider } = request;\n\n  try {\n    const { gasFeeEstimates, gasEstimateType } = await getGasFeeEstimates();\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n      const {\n        medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {},\n      } = gasFeeEstimates;\n\n      if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n        const values = {\n          maxFeePerGas: gweiDecimalToWeiHex(suggestedMaxFeePerGas),\n          maxPriorityFeePerGas: gweiDecimalToWeiHex(\n            suggestedMaxPriorityFeePerGas,\n          ),\n        };\n\n        log('Using medium values from fee market estimate', values);\n\n        return values;\n      }\n    }\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n      const maxFeePerGas = gweiDecimalToWeiHex(gasFeeEstimates.medium);\n\n      log('Using medium value from legacy estimate', maxFeePerGas);\n\n      return {\n        maxFeePerGas,\n      };\n    }\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n      const maxFeePerGas = gweiDecimalToWeiHex(gasFeeEstimates.gasPrice);\n\n      log('Using gasPrice from estimate', maxFeePerGas);\n\n      return {\n        maxFeePerGas,\n      };\n    }\n  } catch (error) {\n    log('Failed to get estimate', error);\n  }\n\n  const gasPriceDecimal = (await query(new EthQuery(provider), 'gasPrice')) as\n    | number\n    | undefined;\n\n  if (!gasPriceDecimal) {\n    return {};\n  }\n\n  const maxFeePerGas = addHexPrefix(gasPriceDecimal.toString(16));\n\n  log('Using gasPrice from network as fallback', maxFeePerGas);\n\n  return { maxFeePerGas };\n}\n\n/**\n * Converts a GWEI decimal string to a WEI hexadecimal string.\n * @param value - The GWEI decimal string to convert.\n * @returns The WEI hexadecimal string.\n */\nfunction gweiDecimalToWeiHex(value: string) {\n  return toHex(gweiDecToWEIBN(value));\n}\n\n/**\n * Checks if a gas fee property is empty.\n * @param value - The gas fee value to check.\n * @returns Whether the gas fee property is empty.\n */\nfunction isGasFeeEmpty(value?: string): boolean {\n  return !value || value === EMPTY_BYTES;\n}\n"]}