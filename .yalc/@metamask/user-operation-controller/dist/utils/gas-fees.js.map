{"version":3,"file":"gas-fees.js","sourceRoot":"","sources":["../../src/utils/gas-fees.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport type { Web3Provider } from '@ethersproject/providers';\nimport { gweiDecToWEIBN, toHex } from '@metamask/controller-utils';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport { GAS_ESTIMATE_TYPES } from '@metamask/gas-fee-controller';\nimport type { TransactionParams } from '@metamask/transaction-controller';\nimport { UserFeeLevel } from '@metamask/transaction-controller';\nimport { createModuleLogger } from '@metamask/utils';\nimport { addHexPrefix } from 'ethereumjs-util';\n\nimport { projectLogger } from '../logger';\nimport type { UserOperationMetadata } from '../types';\n\nexport type UpdateGasFeesRequest = {\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  metadata: UserOperationMetadata;\n  provider: Web3Provider;\n};\n\nexport type GetGasFeeRequest = UpdateGasFeesRequest & {\n  initialParams: TransactionParams;\n  suggestedGasFees: Awaited<ReturnType<typeof getSuggestedGasFees>>;\n};\n\nconst log = createModuleLogger(projectLogger, 'gas-fees');\n\nexport async function updateGasFees(request: UpdateGasFeesRequest) {\n  const { metadata } = request;\n  const initialParams = { ...metadata.transactionParams } as TransactionParams;\n  const suggestedGasFees = await getSuggestedGasFees(request);\n\n  log('Suggested gas fees', suggestedGasFees);\n\n  const getGasFeeRequest = {\n    ...request,\n    initialParams,\n    suggestedGasFees,\n  };\n\n  metadata.userOperation.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);\n\n  metadata.userOperation.maxPriorityFeePerGas =\n    getMaxPriorityFeePerGas(getGasFeeRequest);\n\n  metadata.userFeeLevel = getUserFeeLevel(getGasFeeRequest) || null;\n\n  log('Updated gas fee properties', {\n    maxFeePerGas: metadata.userOperation.maxFeePerGas,\n    maxPriorityFeePerGas: metadata.userOperation.maxPriorityFeePerGas,\n    userFeeLevel: metadata.userFeeLevel,\n  });\n}\n\nfunction getMaxFeePerGas(request: GetGasFeeRequest): string {\n  const { initialParams, suggestedGasFees } = request;\n\n  if (initialParams.maxFeePerGas) {\n    log('Using maxFeePerGas from request', initialParams.maxFeePerGas);\n    return initialParams.maxFeePerGas;\n  }\n\n  if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {\n    log(\n      'Setting maxFeePerGas to gasPrice from request',\n      initialParams.gasPrice,\n    );\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxFeePerGas) {\n    log('Using suggested maxFeePerGas', suggestedGasFees.maxFeePerGas);\n    return suggestedGasFees.maxFeePerGas;\n  }\n\n  throw new Error('Cannot set maxFeePerGas');\n}\n\nfunction getMaxPriorityFeePerGas(request: GetGasFeeRequest): string {\n  const { initialParams, suggestedGasFees, metadata } = request;\n\n  if (initialParams.maxPriorityFeePerGas) {\n    log(\n      'Using maxPriorityFeePerGas from request',\n      initialParams.maxPriorityFeePerGas,\n    );\n    return initialParams.maxPriorityFeePerGas;\n  }\n\n  if (initialParams.gasPrice && !initialParams.maxFeePerGas) {\n    log(\n      'Setting maxPriorityFeePerGas to gasPrice from request',\n      initialParams.gasPrice,\n    );\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxPriorityFeePerGas) {\n    log(\n      'Using suggested maxPriorityFeePerGas',\n      suggestedGasFees.maxPriorityFeePerGas,\n    );\n    return suggestedGasFees.maxPriorityFeePerGas;\n  }\n\n  if (metadata.userOperation.maxFeePerGas) {\n    log(\n      'Setting maxPriorityFeePerGas to maxFeePerGas',\n      metadata.userOperation.maxFeePerGas,\n    );\n    return metadata.userOperation.maxFeePerGas;\n  }\n\n  throw new Error('Cannot set maxPriorityFeePerGas');\n}\n\nfunction getUserFeeLevel(request: GetGasFeeRequest): UserFeeLevel | undefined {\n  const { initialParams, suggestedGasFees } = request;\n\n  if (\n    !initialParams.maxFeePerGas &&\n    !initialParams.maxPriorityFeePerGas &&\n    initialParams.gasPrice\n  ) {\n    return UserFeeLevel.DAPP_SUGGESTED;\n  }\n\n  if (\n    !initialParams.maxFeePerGas &&\n    !initialParams.maxPriorityFeePerGas &&\n    suggestedGasFees.maxFeePerGas &&\n    suggestedGasFees.maxPriorityFeePerGas\n  ) {\n    return UserFeeLevel.MEDIUM;\n  }\n\n  return UserFeeLevel.DAPP_SUGGESTED;\n}\n\nasync function getSuggestedGasFees(request: UpdateGasFeesRequest) {\n  const { getGasFeeEstimates, metadata } = request;\n\n  if (\n    metadata.transactionParams?.maxFeePerGas &&\n    metadata.transactionParams?.maxPriorityFeePerGas\n  ) {\n    return {};\n  }\n\n  try {\n    const { gasFeeEstimates, gasEstimateType } = await getGasFeeEstimates();\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n      const {\n        medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {},\n      } = gasFeeEstimates;\n\n      if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n        return {\n          maxFeePerGas: gweiDecimalToWeiHex(suggestedMaxFeePerGas),\n          maxPriorityFeePerGas: gweiDecimalToWeiHex(\n            suggestedMaxPriorityFeePerGas,\n          ),\n        };\n      }\n    }\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n      const maxFeePerGas = gweiDecimalToWeiHex(gasFeeEstimates.medium);\n\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas: maxFeePerGas,\n      };\n    }\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n      const maxFeePerGas = gweiDecimalToWeiHex(gasFeeEstimates.gasPrice);\n\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas: maxFeePerGas,\n      };\n    }\n  } catch (error) {\n    log('Failed to get suggested gas fees', error);\n  }\n\n  const gasPriceDecimal = await request.provider.getGasPrice();\n\n  const maxFeePerGas = gasPriceDecimal\n    ? addHexPrefix(gasPriceDecimal.toHexString())\n    : undefined;\n\n  return { maxFeePerGas, maxPriorityFeePerGas: maxFeePerGas };\n}\n\nfunction gweiDecimalToWeiHex(value: string) {\n  return toHex(gweiDecToWEIBN(value));\n}\n"]}