{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../src/utils/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  TransactionError,\n  TransactionMeta,\n  TransactionParams,\n} from '@metamask/transaction-controller';\nimport {\n  TransactionStatus,\n  UserFeeLevel,\n} from '@metamask/transaction-controller';\nimport type { Hex } from '@metamask/utils';\nimport { BN, addHexPrefix, stripHexPrefix } from 'ethereumjs-util';\n\nimport { EMPTY_BYTES } from '../constants';\nimport { UserOperationStatus } from '../types';\nimport type { UserOperationMetadata } from '../types';\n\n/**\n * Converts a user operation metadata object into a transaction metadata object.\n * @param metadata - The user operation metadata object to convert.\n * @returns The equivalent transaction metadata object.\n */\nexport function getTransactionMetadata(\n  metadata: UserOperationMetadata,\n): TransactionMeta | undefined {\n  const {\n    actualGasCost,\n    actualGasUsed,\n    baseFeePerGas,\n    chainId,\n    error: rawError,\n    origin,\n    transactionHash,\n    id,\n    time,\n    transactionParams,\n    transactionType,\n    userFeeLevel,\n    userOperation,\n  } = metadata;\n\n  if (!transactionParams) {\n    return undefined;\n  }\n\n  const effectiveGasPrice =\n    actualGasCost && actualGasUsed\n      ? addHexPrefix(\n          new BN(stripHexPrefix(actualGasCost), 16)\n            .div(new BN(stripHexPrefix(actualGasUsed), 16))\n            .toString(16),\n        )\n      : undefined;\n\n  const error = (\n    rawError\n      ? {\n          name: rawError.name,\n          message: rawError.message,\n          stack: rawError.stack,\n          code: rawError.code,\n          rpc: rawError.rpc,\n        }\n      : undefined\n  ) as TransactionError;\n\n  const status: TransactionStatus = {\n    [UserOperationStatus.Unapproved]: TransactionStatus.unapproved,\n    [UserOperationStatus.Approved]: TransactionStatus.approved,\n    [UserOperationStatus.Signed]: TransactionStatus.signed,\n    [UserOperationStatus.Submitted]: TransactionStatus.submitted,\n    [UserOperationStatus.Confirmed]: TransactionStatus.confirmed,\n    [UserOperationStatus.Failed]: TransactionStatus.failed,\n  }[metadata.status];\n\n  const gas = addHex(\n    userOperation.preVerificationGas,\n    userOperation.verificationGasLimit,\n    userOperation.callGasLimit,\n  );\n\n  const hasPaymaster = userOperation.paymasterAndData !== EMPTY_BYTES;\n\n  const maxFeePerGas = hasPaymaster ? '0x0' : userOperation.maxFeePerGas;\n\n  const maxPriorityFeePerGas = hasPaymaster\n    ? '0x0'\n    : userOperation.maxPriorityFeePerGas;\n\n  const nonce =\n    userOperation.nonce === EMPTY_BYTES ? undefined : userOperation.nonce;\n\n  const txParams = {\n    ...transactionParams,\n    from: userOperation.sender,\n    gas,\n    nonce,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n  } as TransactionParams;\n\n  // Since the user operations only support EIP-1559, we won't need this.\n  delete txParams.gasPrice;\n\n  return {\n    baseFeePerGas: (baseFeePerGas as Hex) ?? undefined,\n    chainId: chainId as Hex,\n    error,\n    hash: transactionHash ?? undefined,\n    id,\n    isUserOperation: true,\n    origin,\n    status,\n    time,\n    txParams,\n    txReceipt: {\n      effectiveGasPrice: effectiveGasPrice ?? undefined,\n      gasUsed: actualGasUsed ?? undefined,\n    },\n    type: transactionType ?? undefined,\n    userFeeLevel: userFeeLevel as string,\n  };\n}\n\n/**\n * Adds the given hexadecimal values together.\n * @param values - The hexadecimal values to add together.\n * @returns The sum of the given hexadecimal values.\n */\nfunction addHex(...values: (string | undefined)[]) {\n  const total = new BN(0);\n\n  for (const value of values) {\n    if (!value) {\n      continue;\n    }\n\n    total.iadd(new BN(stripHexPrefix(value), 16));\n  }\n\n  return addHexPrefix(total.toString(16));\n}\n"]}