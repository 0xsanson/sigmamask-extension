diff --git a/dist/EtherscanRemoteTransactionSource.d.ts b/dist/EtherscanRemoteTransactionSource.d.ts
deleted file mode 100644
index 8f36777884bcacf278ff33b79c5d865b4453964f..0000000000000000000000000000000000000000
--- a/dist/EtherscanRemoteTransactionSource.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import type { Hex } from '@metamask/utils';
-import type { RemoteTransactionSource, RemoteTransactionSourceRequest, TransactionMeta } from './types';
-/**
- * A RemoteTransactionSource that fetches transaction data from Etherscan.
- */
-export declare class EtherscanRemoteTransactionSource implements RemoteTransactionSource {
-    #private;
-    constructor({ includeTokenTransfers, }?: {
-        includeTokenTransfers?: boolean;
-    });
-    isSupportedNetwork(chainId: Hex): boolean;
-    getLastBlockVariations(): string[];
-    fetchTransactions(request: RemoteTransactionSourceRequest): Promise<TransactionMeta[]>;
-}
-//# sourceMappingURL=EtherscanRemoteTransactionSource.d.ts.map
\ No newline at end of file
diff --git a/dist/EtherscanRemoteTransactionSource.d.ts.map b/dist/EtherscanRemoteTransactionSource.d.ts.map
deleted file mode 100644
index 9a28bf567caa2b9292b40d2a1a582808288dbbdb..0000000000000000000000000000000000000000
--- a/dist/EtherscanRemoteTransactionSource.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"EtherscanRemoteTransactionSource.d.ts","sourceRoot":"","sources":["../src/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAiB3C,OAAO,KAAK,EACV,uBAAuB,EACvB,8BAA8B,EAC9B,eAAe,EAChB,MAAM,SAAS,CAAC;AAGjB;;GAEG;AACH,qBAAa,gCACX,YAAW,uBAAuB;;gBAMtB,EACV,qBAAqB,GACtB,GAAE;QAAE,qBAAqB,CAAC,EAAE,OAAO,CAAA;KAAO;IAK3C,kBAAkB,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO;IAIzC,sBAAsB,IAAI,MAAM,EAAE;IAI5B,iBAAiB,CACrB,OAAO,EAAE,8BAA8B,GACtC,OAAO,CAAC,eAAe,EAAE,CAAC;CAkI9B"}
\ No newline at end of file
diff --git a/dist/EtherscanRemoteTransactionSource.js b/dist/EtherscanRemoteTransactionSource.js
deleted file mode 100644
index c03d191ccb46bafd0c8baba7370ea6c0808611c8..0000000000000000000000000000000000000000
--- a/dist/EtherscanRemoteTransactionSource.js
+++ /dev/null
@@ -1,122 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _EtherscanRemoteTransactionSource_instances, _EtherscanRemoteTransactionSource_includeTokenTransfers, _EtherscanRemoteTransactionSource_isTokenRequestPending, _EtherscanRemoteTransactionSource_fetchNormalTransactions, _EtherscanRemoteTransactionSource_fetchTokenTransactions, _EtherscanRemoteTransactionSource_getResponseTransactions, _EtherscanRemoteTransactionSource_normalizeTransaction, _EtherscanRemoteTransactionSource_normalizeTokenTransaction, _EtherscanRemoteTransactionSource_normalizeTransactionBase;
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.EtherscanRemoteTransactionSource = void 0;
-const controller_utils_1 = require("@metamask/controller-utils");
-const ethereumjs_util_1 = require("ethereumjs-util");
-const uuid_1 = require("uuid");
-const constants_1 = require("./constants");
-const etherscan_1 = require("./etherscan");
-const logger_1 = require("./logger");
-const types_1 = require("./types");
-/**
- * A RemoteTransactionSource that fetches transaction data from Etherscan.
- */
-class EtherscanRemoteTransactionSource {
-    constructor({ includeTokenTransfers, } = {}) {
-        _EtherscanRemoteTransactionSource_instances.add(this);
-        _EtherscanRemoteTransactionSource_includeTokenTransfers.set(this, void 0);
-        _EtherscanRemoteTransactionSource_isTokenRequestPending.set(this, void 0);
-        _EtherscanRemoteTransactionSource_fetchNormalTransactions.set(this, (request, etherscanRequest) => __awaiter(this, void 0, void 0, function* () {
-            const { currentChainId } = request;
-            const etherscanTransactions = yield (0, etherscan_1.fetchEtherscanTransactions)(etherscanRequest);
-            return __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_getResponseTransactions).call(this, etherscanTransactions).map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransaction).call(this, tx, currentChainId));
-        }));
-        _EtherscanRemoteTransactionSource_fetchTokenTransactions.set(this, (request, etherscanRequest) => __awaiter(this, void 0, void 0, function* () {
-            const { currentChainId } = request;
-            const etherscanTransactions = yield (0, etherscan_1.fetchEtherscanTokenTransactions)(etherscanRequest);
-            return __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_getResponseTransactions).call(this, etherscanTransactions).map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTokenTransaction).call(this, tx, currentChainId));
-        }));
-        __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_includeTokenTransfers, includeTokenTransfers !== null && includeTokenTransfers !== void 0 ? includeTokenTransfers : true, "f");
-        __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, false, "f");
-    }
-    isSupportedNetwork(chainId) {
-        return Object.keys(constants_1.ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);
-    }
-    getLastBlockVariations() {
-        return [__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f") ? 'token' : 'normal'];
-    }
-    fetchTransactions(request) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const etherscanRequest = Object.assign(Object.assign({}, request), { chainId: request.currentChainId });
-            const transactions = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f")
-                ? yield __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_fetchTokenTransactions, "f").call(this, request, etherscanRequest)
-                : yield __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_fetchNormalTransactions, "f").call(this, request, etherscanRequest);
-            if (__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_includeTokenTransfers, "f")) {
-                __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, !__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f"), "f");
-            }
-            return transactions;
-        });
-    }
-}
-exports.EtherscanRemoteTransactionSource = EtherscanRemoteTransactionSource;
-_EtherscanRemoteTransactionSource_includeTokenTransfers = new WeakMap(), _EtherscanRemoteTransactionSource_isTokenRequestPending = new WeakMap(), _EtherscanRemoteTransactionSource_fetchNormalTransactions = new WeakMap(), _EtherscanRemoteTransactionSource_fetchTokenTransactions = new WeakMap(), _EtherscanRemoteTransactionSource_instances = new WeakSet(), _EtherscanRemoteTransactionSource_getResponseTransactions = function _EtherscanRemoteTransactionSource_getResponseTransactions(response) {
-    let result = response.result;
-    if (response.status === '0') {
-        result = [];
-        if (response.result.length) {
-            (0, logger_1.incomingTransactionsLogger)('Ignored Etherscan request error', {
-                message: response.result,
-                type: __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f") ? 'token' : 'normal',
-            });
-        }
-    }
-    return result;
-}, _EtherscanRemoteTransactionSource_normalizeTransaction = function _EtherscanRemoteTransactionSource_normalizeTransaction(txMeta, currentChainId) {
-    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentChainId);
-    return Object.assign(Object.assign(Object.assign({}, base), { txParams: Object.assign(Object.assign({}, base.txParams), { data: txMeta.input }) }), (txMeta.isError === '0'
-        ? { status: types_1.TransactionStatus.confirmed }
-        : {
-            error: new Error('Transaction failed'),
-            status: types_1.TransactionStatus.failed,
-        }));
-}, _EtherscanRemoteTransactionSource_normalizeTokenTransaction = function _EtherscanRemoteTransactionSource_normalizeTokenTransaction(txMeta, currentChainId) {
-    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentChainId);
-    return Object.assign(Object.assign({}, base), { isTransfer: true, transferInformation: {
-            contractAddress: txMeta.contractAddress,
-            decimals: Number(txMeta.tokenDecimal),
-            symbol: txMeta.tokenSymbol,
-        } });
-}, _EtherscanRemoteTransactionSource_normalizeTransactionBase = function _EtherscanRemoteTransactionSource_normalizeTransactionBase(txMeta, currentChainId) {
-    const time = parseInt(txMeta.timeStamp, 10) * 1000;
-    return {
-        blockNumber: txMeta.blockNumber,
-        chainId: currentChainId,
-        hash: txMeta.hash,
-        id: (0, uuid_1.v1)({ msecs: time }),
-        status: types_1.TransactionStatus.confirmed,
-        time,
-        txParams: {
-            chainId: currentChainId,
-            from: txMeta.from,
-            gas: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gas)),
-            gasPrice: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasPrice)),
-            gasUsed: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasUsed)),
-            nonce: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.nonce)),
-            to: txMeta.to,
-            value: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.value)),
-        },
-        verifiedOnBlockchain: false,
-    };
-};
-//# sourceMappingURL=EtherscanRemoteTransactionSource.js.map
\ No newline at end of file
diff --git a/dist/EtherscanRemoteTransactionSource.js.map b/dist/EtherscanRemoteTransactionSource.js.map
deleted file mode 100644
index 4b10444cf000f8873da3e37c7b5cc22dc2c507c9..0000000000000000000000000000000000000000
--- a/dist/EtherscanRemoteTransactionSource.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"EtherscanRemoteTransactionSource.js","sourceRoot":"","sources":["../src/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"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","sourcesContent":["import { BNToHex } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\nimport { BN } from 'ethereumjs-util';\nimport { v1 as random } from 'uuid';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from './constants';\nimport type {\n  EtherscanTokenTransactionMeta,\n  EtherscanTransactionMeta,\n  EtherscanTransactionMetaBase,\n  EtherscanTransactionRequest,\n  EtherscanTransactionResponse,\n} from './etherscan';\nimport {\n  fetchEtherscanTokenTransactions,\n  fetchEtherscanTransactions,\n} from './etherscan';\nimport { incomingTransactionsLogger as log } from './logger';\nimport type {\n  RemoteTransactionSource,\n  RemoteTransactionSourceRequest,\n  TransactionMeta,\n} from './types';\nimport { TransactionStatus } from './types';\n\n/**\n * A RemoteTransactionSource that fetches transaction data from Etherscan.\n */\nexport class EtherscanRemoteTransactionSource\n  implements RemoteTransactionSource\n{\n  #includeTokenTransfers: boolean;\n\n  #isTokenRequestPending: boolean;\n\n  constructor({\n    includeTokenTransfers,\n  }: { includeTokenTransfers?: boolean } = {}) {\n    this.#includeTokenTransfers = includeTokenTransfers ?? true;\n    this.#isTokenRequestPending = false;\n  }\n\n  isSupportedNetwork(chainId: Hex): boolean {\n    return Object.keys(ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);\n  }\n\n  getLastBlockVariations(): string[] {\n    return [this.#isTokenRequestPending ? 'token' : 'normal'];\n  }\n\n  async fetchTransactions(\n    request: RemoteTransactionSourceRequest,\n  ): Promise<TransactionMeta[]> {\n    const etherscanRequest: EtherscanTransactionRequest = {\n      ...request,\n      chainId: request.currentChainId,\n    };\n\n    const transactions = this.#isTokenRequestPending\n      ? await this.#fetchTokenTransactions(request, etherscanRequest)\n      : await this.#fetchNormalTransactions(request, etherscanRequest);\n\n    if (this.#includeTokenTransfers) {\n      this.#isTokenRequestPending = !this.#isTokenRequestPending;\n    }\n\n    return transactions;\n  }\n\n  #fetchNormalTransactions = async (\n    request: RemoteTransactionSourceRequest,\n    etherscanRequest: EtherscanTransactionRequest,\n  ) => {\n    const { currentChainId } = request;\n\n    const etherscanTransactions = await fetchEtherscanTransactions(\n      etherscanRequest,\n    );\n\n    return this.#getResponseTransactions(etherscanTransactions).map((tx) =>\n      this.#normalizeTransaction(tx, currentChainId),\n    );\n  };\n\n  #fetchTokenTransactions = async (\n    request: RemoteTransactionSourceRequest,\n    etherscanRequest: EtherscanTransactionRequest,\n  ) => {\n    const { currentChainId } = request;\n\n    const etherscanTransactions = await fetchEtherscanTokenTransactions(\n      etherscanRequest,\n    );\n\n    return this.#getResponseTransactions(etherscanTransactions).map((tx) =>\n      this.#normalizeTokenTransaction(tx, currentChainId),\n    );\n  };\n\n  #getResponseTransactions<T extends EtherscanTransactionMetaBase>(\n    response: EtherscanTransactionResponse<T>,\n  ): T[] {\n    let result = response.result as T[];\n\n    if (response.status === '0') {\n      result = [];\n\n      if (response.result.length) {\n        log('Ignored Etherscan request error', {\n          message: response.result,\n          type: this.#isTokenRequestPending ? 'token' : 'normal',\n        });\n      }\n    }\n\n    return result;\n  }\n\n  #normalizeTransaction(\n    txMeta: EtherscanTransactionMeta,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(txMeta, currentChainId);\n\n    return {\n      ...base,\n      txParams: {\n        ...base.txParams,\n        data: txMeta.input,\n      },\n      ...(txMeta.isError === '0'\n        ? { status: TransactionStatus.confirmed }\n        : {\n            error: new Error('Transaction failed'),\n            status: TransactionStatus.failed,\n          }),\n    };\n  }\n\n  #normalizeTokenTransaction(\n    txMeta: EtherscanTokenTransactionMeta,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(txMeta, currentChainId);\n\n    return {\n      ...base,\n      isTransfer: true,\n      transferInformation: {\n        contractAddress: txMeta.contractAddress,\n        decimals: Number(txMeta.tokenDecimal),\n        symbol: txMeta.tokenSymbol,\n      },\n    };\n  }\n\n  #normalizeTransactionBase(\n    txMeta: EtherscanTransactionMetaBase,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n\n    return {\n      blockNumber: txMeta.blockNumber,\n      chainId: currentChainId,\n      hash: txMeta.hash,\n      id: random({ msecs: time }),\n      status: TransactionStatus.confirmed,\n      time,\n      txParams: {\n        chainId: currentChainId,\n        from: txMeta.from,\n        gas: BNToHex(new BN(txMeta.gas)),\n        gasPrice: BNToHex(new BN(txMeta.gasPrice)),\n        gasUsed: BNToHex(new BN(txMeta.gasUsed)),\n        nonce: BNToHex(new BN(txMeta.nonce)),\n        to: txMeta.to,\n        value: BNToHex(new BN(txMeta.value)),\n      },\n      verifiedOnBlockchain: false,\n    };\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/IncomingTransactionHelper.d.ts b/dist/IncomingTransactionHelper.d.ts
deleted file mode 100644
index 076111cc3f4c873e0658b8720c10df3c527de5e1..0000000000000000000000000000000000000000
--- a/dist/IncomingTransactionHelper.d.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-/// <reference types="node" />
-import type { BlockTracker, NetworkState } from '@metamask/network-controller';
-import type { Hex } from '@metamask/utils';
-import EventEmitter from 'events';
-import type { RemoteTransactionSource, TransactionMeta } from './types';
-export declare class IncomingTransactionHelper {
-    #private;
-    hub: EventEmitter;
-    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getNetworkState, isEnabled, queryEntireHistory, remoteTransactionSource, transactionLimit, updateTransactions, }: {
-        blockTracker: BlockTracker;
-        getCurrentAccount: () => string;
-        getLastFetchedBlockNumbers: () => Record<string, number>;
-        getLocalTransactions?: () => TransactionMeta[];
-        getNetworkState: () => NetworkState;
-        isEnabled?: () => boolean;
-        queryEntireHistory?: boolean;
-        remoteTransactionSource: RemoteTransactionSource;
-        transactionLimit?: number;
-        updateTransactions?: boolean;
-    });
-    start(): void;
-    stop(): void;
-    update(latestBlockNumberHex?: Hex): Promise<void>;
-}
-//# sourceMappingURL=IncomingTransactionHelper.d.ts.map
\ No newline at end of file
diff --git a/dist/IncomingTransactionHelper.d.ts.map b/dist/IncomingTransactionHelper.d.ts.map
deleted file mode 100644
index 5d3ae50b9515bfc9b770f1ec3b08318d251145be..0000000000000000000000000000000000000000
--- a/dist/IncomingTransactionHelper.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"IncomingTransactionHelper.d.ts","sourceRoot":"","sources":["../src/IncomingTransactionHelper.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC/E,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAE3C,OAAO,YAAY,MAAM,QAAQ,CAAC;AAGlC,OAAO,KAAK,EAAE,uBAAuB,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AASxE,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,YAAY,CAAC;gBA4BN,EACV,YAAY,EACZ,iBAAiB,EACjB,0BAA0B,EAC1B,oBAAoB,EACpB,eAAe,EACf,SAAS,EACT,kBAAkB,EAClB,uBAAuB,EACvB,gBAAgB,EAChB,kBAAkB,GACnB,EAAE;QACD,YAAY,EAAE,YAAY,CAAC;QAC3B,iBAAiB,EAAE,MAAM,MAAM,CAAC;QAChC,0BAA0B,EAAE,MAAM,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACzD,oBAAoB,CAAC,EAAE,MAAM,eAAe,EAAE,CAAC;QAC/C,eAAe,EAAE,MAAM,YAAY,CAAC;QACpC,SAAS,CAAC,EAAE,MAAM,OAAO,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;QAC7B,uBAAuB,EAAE,uBAAuB,CAAC;QACjD,gBAAgB,CAAC,EAAE,MAAM,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;KAC9B;IA0BD,KAAK;IAaL,IAAI;IAKE,MAAM,CAAC,oBAAoB,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;CAmMxD"}
\ No newline at end of file
diff --git a/dist/IncomingTransactionHelper.js b/dist/IncomingTransactionHelper.js
deleted file mode 100644
index 4bf34b7620560526ba410ed62b1c09cf1492d230..0000000000000000000000000000000000000000
--- a/dist/IncomingTransactionHelper.js
+++ /dev/null
@@ -1,198 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-var _IncomingTransactionHelper_instances, _IncomingTransactionHelper_blockTracker, _IncomingTransactionHelper_getCurrentAccount, _IncomingTransactionHelper_getLastFetchedBlockNumbers, _IncomingTransactionHelper_getLocalTransactions, _IncomingTransactionHelper_getNetworkState, _IncomingTransactionHelper_isEnabled, _IncomingTransactionHelper_isRunning, _IncomingTransactionHelper_mutex, _IncomingTransactionHelper_onLatestBlock, _IncomingTransactionHelper_queryEntireHistory, _IncomingTransactionHelper_remoteTransactionSource, _IncomingTransactionHelper_transactionLimit, _IncomingTransactionHelper_updateTransactions, _IncomingTransactionHelper_sortTransactionsByTime, _IncomingTransactionHelper_getNewTransactions, _IncomingTransactionHelper_getUpdatedTransactions, _IncomingTransactionHelper_isTransactionOutdated, _IncomingTransactionHelper_getFromBlock, _IncomingTransactionHelper_updateLastFetchedBlockNumber, _IncomingTransactionHelper_getBlockNumberKey, _IncomingTransactionHelper_canStart, _IncomingTransactionHelper_getCurrentChainId;
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.IncomingTransactionHelper = void 0;
-const async_mutex_1 = require("async-mutex");
-const events_1 = __importDefault(require("events"));
-const logger_1 = require("./logger");
-const RECENT_HISTORY_BLOCK_RANGE = 10;
-const UPDATE_CHECKS = [
-    (txMeta) => txMeta.status,
-    (txMeta) => txMeta.txParams.gasUsed,
-];
-class IncomingTransactionHelper {
-    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getNetworkState, isEnabled, queryEntireHistory, remoteTransactionSource, transactionLimit, updateTransactions, }) {
-        _IncomingTransactionHelper_instances.add(this);
-        _IncomingTransactionHelper_blockTracker.set(this, void 0);
-        _IncomingTransactionHelper_getCurrentAccount.set(this, void 0);
-        _IncomingTransactionHelper_getLastFetchedBlockNumbers.set(this, void 0);
-        _IncomingTransactionHelper_getLocalTransactions.set(this, void 0);
-        _IncomingTransactionHelper_getNetworkState.set(this, void 0);
-        _IncomingTransactionHelper_isEnabled.set(this, void 0);
-        _IncomingTransactionHelper_isRunning.set(this, void 0);
-        _IncomingTransactionHelper_mutex.set(this, new async_mutex_1.Mutex());
-        _IncomingTransactionHelper_onLatestBlock.set(this, void 0);
-        _IncomingTransactionHelper_queryEntireHistory.set(this, void 0);
-        _IncomingTransactionHelper_remoteTransactionSource.set(this, void 0);
-        _IncomingTransactionHelper_transactionLimit.set(this, void 0);
-        _IncomingTransactionHelper_updateTransactions.set(this, void 0);
-        this.hub = new events_1.default();
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_blockTracker, blockTracker, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_getCurrentAccount, getCurrentAccount, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, getLastFetchedBlockNumbers, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_getLocalTransactions, getLocalTransactions || (() => []), "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_getNetworkState, getNetworkState, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_isEnabled, isEnabled !== null && isEnabled !== void 0 ? isEnabled : (() => true), "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, false, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_queryEntireHistory, queryEntireHistory !== null && queryEntireHistory !== void 0 ? queryEntireHistory : true, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_remoteTransactionSource, remoteTransactionSource, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_transactionLimit, transactionLimit, "f");
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_updateTransactions, updateTransactions !== null && updateTransactions !== void 0 ? updateTransactions : false, "f");
-        // Using a property instead of a method to provide a listener reference
-        // with the correct scope that we can remove later if stopped.
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_onLatestBlock, (blockNumberHex) => __awaiter(this, void 0, void 0, function* () {
-            try {
-                yield this.update(blockNumberHex);
-            }
-            catch (error) {
-                console.error('Error while checking incoming transactions', error);
-            }
-        }), "f");
-    }
-    start() {
-        if (__classPrivateFieldGet(this, _IncomingTransactionHelper_isRunning, "f")) {
-            return;
-        }
-        if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_canStart).call(this)) {
-            return;
-        }
-        __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").addListener('latest', __classPrivateFieldGet(this, _IncomingTransactionHelper_onLatestBlock, "f"));
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, true, "f");
-    }
-    stop() {
-        __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").removeListener('latest', __classPrivateFieldGet(this, _IncomingTransactionHelper_onLatestBlock, "f"));
-        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, false, "f");
-    }
-    update(latestBlockNumberHex) {
-        var _a, _b, _c;
-        return __awaiter(this, void 0, void 0, function* () {
-            const releaseLock = yield __classPrivateFieldGet(this, _IncomingTransactionHelper_mutex, "f").acquire();
-            (0, logger_1.incomingTransactionsLogger)('Checking for incoming transactions');
-            try {
-                if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_canStart).call(this)) {
-                    return;
-                }
-                const latestBlockNumber = parseInt(latestBlockNumberHex || (yield __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").getLatestBlock()), 16);
-                const additionalLastFetchedKeys = (_c = (_b = (_a = __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f")).getLastBlockVariations) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];
-                const fromBlock = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getFromBlock).call(this, latestBlockNumber, additionalLastFetchedKeys);
-                const address = __classPrivateFieldGet(this, _IncomingTransactionHelper_getCurrentAccount, "f").call(this);
-                const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
-                let remoteTransactions = [];
-                try {
-                    remoteTransactions =
-                        yield __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").fetchTransactions({
-                            address,
-                            currentChainId,
-                            fromBlock,
-                            limit: __classPrivateFieldGet(this, _IncomingTransactionHelper_transactionLimit, "f"),
-                        });
-                }
-                catch (error) {
-                    (0, logger_1.incomingTransactionsLogger)('Error while fetching remote transactions', error);
-                    return;
-                }
-                if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_updateTransactions, "f")) {
-                    remoteTransactions = remoteTransactions.filter((tx) => { var _a; return ((_a = tx.txParams.to) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === address.toLowerCase(); });
-                }
-                const localTransactions = !__classPrivateFieldGet(this, _IncomingTransactionHelper_updateTransactions, "f")
-                    ? []
-                    : __classPrivateFieldGet(this, _IncomingTransactionHelper_getLocalTransactions, "f").call(this);
-                const newTransactions = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getNewTransactions).call(this, remoteTransactions, localTransactions);
-                const updatedTransactions = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getUpdatedTransactions).call(this, remoteTransactions, localTransactions);
-                if (newTransactions.length > 0 || updatedTransactions.length > 0) {
-                    __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, newTransactions);
-                    __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, updatedTransactions);
-                    (0, logger_1.incomingTransactionsLogger)('Found incoming transactions', {
-                        new: newTransactions,
-                        updated: updatedTransactions,
-                    });
-                    this.hub.emit('transactions', {
-                        added: newTransactions,
-                        updated: updatedTransactions,
-                    });
-                }
-                __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_updateLastFetchedBlockNumber).call(this, remoteTransactions, additionalLastFetchedKeys);
-            }
-            finally {
-                releaseLock();
-            }
-        });
-    }
-}
-exports.IncomingTransactionHelper = IncomingTransactionHelper;
-_IncomingTransactionHelper_blockTracker = new WeakMap(), _IncomingTransactionHelper_getCurrentAccount = new WeakMap(), _IncomingTransactionHelper_getLastFetchedBlockNumbers = new WeakMap(), _IncomingTransactionHelper_getLocalTransactions = new WeakMap(), _IncomingTransactionHelper_getNetworkState = new WeakMap(), _IncomingTransactionHelper_isEnabled = new WeakMap(), _IncomingTransactionHelper_isRunning = new WeakMap(), _IncomingTransactionHelper_mutex = new WeakMap(), _IncomingTransactionHelper_onLatestBlock = new WeakMap(), _IncomingTransactionHelper_queryEntireHistory = new WeakMap(), _IncomingTransactionHelper_remoteTransactionSource = new WeakMap(), _IncomingTransactionHelper_transactionLimit = new WeakMap(), _IncomingTransactionHelper_updateTransactions = new WeakMap(), _IncomingTransactionHelper_instances = new WeakSet(), _IncomingTransactionHelper_sortTransactionsByTime = function _IncomingTransactionHelper_sortTransactionsByTime(transactions) {
-    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));
-}, _IncomingTransactionHelper_getNewTransactions = function _IncomingTransactionHelper_getNewTransactions(remoteTxs, localTxs) {
-    return remoteTxs.filter((tx) => !localTxs.some(({ hash }) => hash === tx.hash));
-}, _IncomingTransactionHelper_getUpdatedTransactions = function _IncomingTransactionHelper_getUpdatedTransactions(remoteTxs, localTxs) {
-    return remoteTxs.filter((remoteTx) => localTxs.some((localTx) => remoteTx.hash === localTx.hash &&
-        __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_isTransactionOutdated).call(this, remoteTx, localTx)));
-}, _IncomingTransactionHelper_isTransactionOutdated = function _IncomingTransactionHelper_isTransactionOutdated(remoteTx, localTx) {
-    return UPDATE_CHECKS.some((getValue) => getValue(remoteTx) !== getValue(localTx));
-}, _IncomingTransactionHelper_getFromBlock = function _IncomingTransactionHelper_getFromBlock(latestBlockNumber, additionalKeys) {
-    const lastFetchedKey = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getBlockNumberKey).call(this, additionalKeys);
-    const lastFetchedBlockNumber = __classPrivateFieldGet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, "f").call(this)[lastFetchedKey];
-    if (lastFetchedBlockNumber) {
-        return lastFetchedBlockNumber + 1;
-    }
-    return __classPrivateFieldGet(this, _IncomingTransactionHelper_queryEntireHistory, "f")
-        ? undefined
-        : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;
-}, _IncomingTransactionHelper_updateLastFetchedBlockNumber = function _IncomingTransactionHelper_updateLastFetchedBlockNumber(remoteTxs, additionalKeys) {
-    let lastFetchedBlockNumber = -1;
-    for (const tx of remoteTxs) {
-        const currentBlockNumberValue = tx.blockNumber
-            ? parseInt(tx.blockNumber, 10)
-            : -1;
-        lastFetchedBlockNumber = Math.max(lastFetchedBlockNumber, currentBlockNumberValue);
-    }
-    if (lastFetchedBlockNumber === -1) {
-        return;
-    }
-    const lastFetchedKey = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getBlockNumberKey).call(this, additionalKeys);
-    const lastFetchedBlockNumbers = __classPrivateFieldGet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, "f").call(this);
-    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];
-    if (previousValue >= lastFetchedBlockNumber) {
-        return;
-    }
-    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;
-    this.hub.emit('updatedLastFetchedBlockNumbers', {
-        lastFetchedBlockNumbers,
-        blockNumber: lastFetchedBlockNumber,
-    });
-}, _IncomingTransactionHelper_getBlockNumberKey = function _IncomingTransactionHelper_getBlockNumberKey(additionalKeys) {
-    const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
-    const currentAccount = __classPrivateFieldGet(this, _IncomingTransactionHelper_getCurrentAccount, "f").call(this).toLowerCase();
-    return [currentChainId, currentAccount, ...additionalKeys].join('#');
-}, _IncomingTransactionHelper_canStart = function _IncomingTransactionHelper_canStart() {
-    const isEnabled = __classPrivateFieldGet(this, _IncomingTransactionHelper_isEnabled, "f").call(this);
-    const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
-    const isSupportedNetwork = __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").isSupportedNetwork(currentChainId);
-    return isEnabled && isSupportedNetwork;
-}, _IncomingTransactionHelper_getCurrentChainId = function _IncomingTransactionHelper_getCurrentChainId() {
-    return __classPrivateFieldGet(this, _IncomingTransactionHelper_getNetworkState, "f").call(this).providerConfig.chainId;
-};
-//# sourceMappingURL=IncomingTransactionHelper.js.map
\ No newline at end of file
diff --git a/dist/IncomingTransactionHelper.js.map b/dist/IncomingTransactionHelper.js.map
deleted file mode 100644
index a45b30c1572f248d2c7ec6527b2dfa04f10ba735..0000000000000000000000000000000000000000
--- a/dist/IncomingTransactionHelper.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"IncomingTransactionHelper.js","sourceRoot":"","sources":["../src/IncomingTransactionHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockTracker, NetworkState } from '@metamask/network-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport EventEmitter from 'events';\n\nimport { incomingTransactionsLogger as log } from './logger';\nimport type { RemoteTransactionSource, TransactionMeta } from './types';\n\nconst RECENT_HISTORY_BLOCK_RANGE = 10;\n\nconst UPDATE_CHECKS: ((txMeta: TransactionMeta) => any)[] = [\n  (txMeta) => txMeta.status,\n  (txMeta) => txMeta.txParams.gasUsed,\n];\n\nexport class IncomingTransactionHelper {\n  hub: EventEmitter;\n\n  #blockTracker: BlockTracker;\n\n  #getCurrentAccount: () => string;\n\n  #getLastFetchedBlockNumbers: () => Record<string, number>;\n\n  #getLocalTransactions: () => TransactionMeta[];\n\n  #getNetworkState: () => NetworkState;\n\n  #isEnabled: () => boolean;\n\n  #isRunning: boolean;\n\n  #mutex = new Mutex();\n\n  #onLatestBlock: (blockNumberHex: Hex) => Promise<void>;\n\n  #queryEntireHistory: boolean;\n\n  #remoteTransactionSource: RemoteTransactionSource;\n\n  #transactionLimit?: number;\n\n  #updateTransactions: boolean;\n\n  constructor({\n    blockTracker,\n    getCurrentAccount,\n    getLastFetchedBlockNumbers,\n    getLocalTransactions,\n    getNetworkState,\n    isEnabled,\n    queryEntireHistory,\n    remoteTransactionSource,\n    transactionLimit,\n    updateTransactions,\n  }: {\n    blockTracker: BlockTracker;\n    getCurrentAccount: () => string;\n    getLastFetchedBlockNumbers: () => Record<string, number>;\n    getLocalTransactions?: () => TransactionMeta[];\n    getNetworkState: () => NetworkState;\n    isEnabled?: () => boolean;\n    queryEntireHistory?: boolean;\n    remoteTransactionSource: RemoteTransactionSource;\n    transactionLimit?: number;\n    updateTransactions?: boolean;\n  }) {\n    this.hub = new EventEmitter();\n\n    this.#blockTracker = blockTracker;\n    this.#getCurrentAccount = getCurrentAccount;\n    this.#getLastFetchedBlockNumbers = getLastFetchedBlockNumbers;\n    this.#getLocalTransactions = getLocalTransactions || (() => []);\n    this.#getNetworkState = getNetworkState;\n    this.#isEnabled = isEnabled ?? (() => true);\n    this.#isRunning = false;\n    this.#queryEntireHistory = queryEntireHistory ?? true;\n    this.#remoteTransactionSource = remoteTransactionSource;\n    this.#transactionLimit = transactionLimit;\n    this.#updateTransactions = updateTransactions ?? false;\n\n    // Using a property instead of a method to provide a listener reference\n    // with the correct scope that we can remove later if stopped.\n    this.#onLatestBlock = async (blockNumberHex: Hex) => {\n      try {\n        await this.update(blockNumberHex);\n      } catch (error) {\n        console.error('Error while checking incoming transactions', error);\n      }\n    };\n  }\n\n  start() {\n    if (this.#isRunning) {\n      return;\n    }\n\n    if (!this.#canStart()) {\n      return;\n    }\n\n    this.#blockTracker.addListener('latest', this.#onLatestBlock);\n    this.#isRunning = true;\n  }\n\n  stop() {\n    this.#blockTracker.removeListener('latest', this.#onLatestBlock);\n    this.#isRunning = false;\n  }\n\n  async update(latestBlockNumberHex?: Hex): Promise<void> {\n    const releaseLock = await this.#mutex.acquire();\n\n    log('Checking for incoming transactions');\n\n    try {\n      if (!this.#canStart()) {\n        return;\n      }\n\n      const latestBlockNumber = parseInt(\n        latestBlockNumberHex || (await this.#blockTracker.getLatestBlock()),\n        16,\n      );\n\n      const additionalLastFetchedKeys =\n        this.#remoteTransactionSource.getLastBlockVariations?.() ?? [];\n\n      const fromBlock = this.#getFromBlock(\n        latestBlockNumber,\n        additionalLastFetchedKeys,\n      );\n\n      const address = this.#getCurrentAccount();\n      const currentChainId = this.#getCurrentChainId();\n\n      let remoteTransactions = [];\n\n      try {\n        remoteTransactions =\n          await this.#remoteTransactionSource.fetchTransactions({\n            address,\n            currentChainId,\n            fromBlock,\n            limit: this.#transactionLimit,\n          });\n      } catch (error: any) {\n        log('Error while fetching remote transactions', error);\n        return;\n      }\n\n      if (!this.#updateTransactions) {\n        remoteTransactions = remoteTransactions.filter(\n          (tx) => tx.txParams.to?.toLowerCase() === address.toLowerCase(),\n        );\n      }\n\n      const localTransactions = !this.#updateTransactions\n        ? []\n        : this.#getLocalTransactions();\n\n      const newTransactions = this.#getNewTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      const updatedTransactions = this.#getUpdatedTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      if (newTransactions.length > 0 || updatedTransactions.length > 0) {\n        this.#sortTransactionsByTime(newTransactions);\n        this.#sortTransactionsByTime(updatedTransactions);\n\n        log('Found incoming transactions', {\n          new: newTransactions,\n          updated: updatedTransactions,\n        });\n\n        this.hub.emit('transactions', {\n          added: newTransactions,\n          updated: updatedTransactions,\n        });\n      }\n\n      this.#updateLastFetchedBlockNumber(\n        remoteTransactions,\n        additionalLastFetchedKeys,\n      );\n    } finally {\n      releaseLock();\n    }\n  }\n\n  #sortTransactionsByTime(transactions: TransactionMeta[]) {\n    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));\n  }\n\n  #getNewTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter(\n      (tx) => !localTxs.some(({ hash }) => hash === tx.hash),\n    );\n  }\n\n  #getUpdatedTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((remoteTx) =>\n      localTxs.some(\n        (localTx) =>\n          remoteTx.hash === localTx.hash &&\n          this.#isTransactionOutdated(remoteTx, localTx),\n      ),\n    );\n  }\n\n  #isTransactionOutdated(\n    remoteTx: TransactionMeta,\n    localTx: TransactionMeta,\n  ): boolean {\n    return UPDATE_CHECKS.some(\n      (getValue) => getValue(remoteTx) !== getValue(localTx),\n    );\n  }\n\n  #getFromBlock(\n    latestBlockNumber: number,\n    additionalKeys: string[],\n  ): number | undefined {\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n\n    const lastFetchedBlockNumber =\n      this.#getLastFetchedBlockNumbers()[lastFetchedKey];\n\n    if (lastFetchedBlockNumber) {\n      return lastFetchedBlockNumber + 1;\n    }\n\n    return this.#queryEntireHistory\n      ? undefined\n      : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;\n  }\n\n  #updateLastFetchedBlockNumber(\n    remoteTxs: TransactionMeta[],\n    additionalKeys: string[],\n  ) {\n    let lastFetchedBlockNumber = -1;\n\n    for (const tx of remoteTxs) {\n      const currentBlockNumberValue = tx.blockNumber\n        ? parseInt(tx.blockNumber, 10)\n        : -1;\n\n      lastFetchedBlockNumber = Math.max(\n        lastFetchedBlockNumber,\n        currentBlockNumberValue,\n      );\n    }\n\n    if (lastFetchedBlockNumber === -1) {\n      return;\n    }\n\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n    const lastFetchedBlockNumbers = this.#getLastFetchedBlockNumbers();\n    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];\n\n    if (previousValue >= lastFetchedBlockNumber) {\n      return;\n    }\n\n    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;\n\n    this.hub.emit('updatedLastFetchedBlockNumbers', {\n      lastFetchedBlockNumbers,\n      blockNumber: lastFetchedBlockNumber,\n    });\n  }\n\n  #getBlockNumberKey(additionalKeys: string[]): string {\n    const currentChainId = this.#getCurrentChainId();\n    const currentAccount = this.#getCurrentAccount().toLowerCase();\n\n    return [currentChainId, currentAccount, ...additionalKeys].join('#');\n  }\n\n  #canStart(): boolean {\n    const isEnabled = this.#isEnabled();\n    const currentChainId = this.#getCurrentChainId();\n\n    const isSupportedNetwork =\n      this.#remoteTransactionSource.isSupportedNetwork(currentChainId);\n\n    return isEnabled && isSupportedNetwork;\n  }\n\n  #getCurrentChainId(): Hex {\n    return this.#getNetworkState().providerConfig.chainId;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/TransactionController.d.ts b/dist/TransactionController.d.ts
index d8fa996c21bc45df84598be8aa7f870910184244..c6885975354d86f8907605de8971b4b22fe4f14a 100644
--- a/dist/TransactionController.d.ts
+++ b/dist/TransactionController.d.ts
@@ -4,11 +4,13 @@ import type { TypedTransaction } from '@ethereumjs/tx';
 import type { AddApprovalRequest } from '@metamask/approval-controller';
 import type { BaseConfig, BaseState, RestrictedControllerMessenger } from '@metamask/base-controller';
 import { BaseController } from '@metamask/base-controller';
+import type { GasFeeState } from '@metamask/gas-fee-controller';
 import type { BlockTracker, NetworkState, Provider } from '@metamask/network-controller';
 import type { Hex } from '@metamask/utils';
 import { EventEmitter } from 'events';
-import type { TransactionParams, TransactionMeta, TransactionReceipt, SendFlowHistoryEntry, WalletDevice } from './types';
-import { TransactionType } from './types';
+import type { NonceLock } from 'nonce-tracker/dist/NonceTracker';
+import type { Events, SavedGasFees, SecurityProviderRequest, SendFlowHistoryEntry, TransactionParams, TransactionMeta, TransactionReceipt, WalletDevice, SecurityAlertResponse } from './types';
+import { TransactionType, TransactionStatus } from './types';
 export declare const HARDFORK = Hardfork.London;
 /**
  * @type Result
@@ -30,12 +32,10 @@ export interface FeeMarketEIP1559Values {
  * @type TransactionConfig
  *
  * Transaction controller configuration
- * @property interval - Polling interval used to fetch new currency rate
  * @property provider - Provider used to create a new underlying EthQuery instance
  * @property sign - Method used to sign transactions
  */
 export interface TransactionConfig extends BaseConfig {
-    interval: number;
     sign?: (txParams: TransactionParams, from: string) => Promise<any>;
     txHistoryLimit: number;
 }
@@ -86,29 +86,45 @@ declare type AllowedActions = AddApprovalRequest;
  * The messenger of the {@link TransactionController}.
  */
 export declare type TransactionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, AllowedActions, never, AllowedActions['type'], never>;
+export interface TransactionControllerEventEmitter extends EventEmitter {
+    on<T extends keyof Events>(eventName: T, listener: (...args: Events[T]) => void): this;
+    emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;
+}
 /**
  * Controller responsible for submitting and managing transactions.
  */
 export declare class TransactionController extends BaseController<TransactionConfig, TransactionState> {
     private ethQuery;
     private readonly isHistoryDisabled;
+    private readonly isSwapsDisabled;
     private readonly isSendFlowHistoryDisabled;
+    private readonly inProcessOfSigning;
     private readonly nonceTracker;
     private registry;
     private readonly provider;
-    private handle?;
     private readonly mutex;
+    private readonly getSavedGasFees;
     private readonly getNetworkState;
     private readonly getCurrentAccountEIP1559Compatibility;
     private readonly getCurrentNetworkEIP1559Compatibility;
+    private readonly getGasFeeEstimates;
+    private readonly getPermittedAccounts;
+    private readonly getSelectedAddress;
     private readonly messagingSystem;
     private readonly incomingTransactionHelper;
+    private readonly securityProviderRequest?;
+    private readonly pendingTransactionTracker;
+    private readonly afterSign;
+    private readonly beforeApproveOnInit;
+    private readonly beforeCheckPendingTransaction;
+    private readonly beforePublish;
+    private readonly getAdditionalSignArguments;
     private failTransaction;
     private registryLookup;
     /**
      * EventEmitter instance used to listen to specific transactional events
      */
-    hub: EventEmitter;
+    hub: TransactionControllerEventEmitter;
     /**
      * Name of this controller used during composition
      */
@@ -116,7 +132,7 @@ export declare class TransactionController extends BaseController<TransactionCon
     /**
      * Method used to sign transactions
      */
-    sign?: (transaction: TypedTransaction, from: string) => Promise<TypedTransaction>;
+    sign?: (transaction: TypedTransaction, from: string, transactionMeta?: TransactionMeta) => Promise<TypedTransaction>;
     /**
      * Creates a TransactionController instance.
      *
@@ -124,9 +140,13 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param options.blockTracker - The block tracker used to poll for new blocks data.
      * @param options.disableHistory - Whether to disable storing history in transaction metadata.
      * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
+     * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.
+     * @param options.getSavedGasFees - Gets the saved gas fee config.
      * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
      * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
+     * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.
      * @param options.getNetworkState - Gets the state of the network controller.
+     * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
      * @param options.getSelectedAddress - Gets the address of the currently selected account.
      * @param options.incomingTransactions - Configuration options for incoming transaction support.
      * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.
@@ -135,19 +155,32 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param options.incomingTransactions.updateTransactions - Whether to update local transactions using remote transaction data.
      * @param options.messenger - The controller messenger.
      * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
+     * @param options.pendingTransactions - Configuration options for pending transaction support.
+     * @param options.pendingTransactions.isResubmitEnabled - Whether transaction publishing is automatically retried.
      * @param options.provider - The provider used to create the underlying EthQuery instance.
+     * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
+     * @param options.hooks - The controller hooks.
+     * @param options.hooks.afterSign - Additional logic to execute after signing a transaction. Return false to not change the status to signed.
+     * @param options.hooks.beforeApproveOnInit - Additional logic to execute before starting an approval flow for a transaction during initialization. Return false to skip the transaction.
+     * @param options.hooks.beforeCheckPendingTransaction - Additional logic to execute before checking pending transactions. Return false to prevent the broadcast of the transaction.
+     * @param options.hooks.beforePublish - Additional logic to execute before publishing a transaction. Return false to prevent the broadcast of the transaction.
+     * @param options.hooks.getAdditionalSignArguments - Returns additional arguments required to sign a transaction.
      * @param config - Initial options used to configure this controller.
      * @param state - Initial state to set on this controller.
      */
-    constructor({ blockTracker, disableHistory, disableSendFlowHistory, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getNetworkState, getSelectedAddress, incomingTransactions, messenger, onNetworkStateChange, provider, }: {
+    constructor({ blockTracker, disableHistory, disableSendFlowHistory, disableSwaps, getSavedGasFees, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getGasFeeEstimates, getNetworkState, getPermittedAccounts, getSelectedAddress, incomingTransactions, messenger, onNetworkStateChange, pendingTransactions, provider, securityProviderRequest, hooks, }: {
         blockTracker: BlockTracker;
         disableHistory: boolean;
         disableSendFlowHistory: boolean;
+        disableSwaps: boolean;
+        getSavedGasFees?: (chainId: Hex) => SavedGasFees | undefined;
         getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;
         getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;
+        getGasFeeEstimates?: () => Promise<GasFeeState>;
         getNetworkState: () => NetworkState;
+        getPermittedAccounts: (origin?: string) => Promise<string[]>;
         getSelectedAddress: () => string;
-        incomingTransactions: {
+        incomingTransactions?: {
             includeTokenTransfers?: boolean;
             isEnabled?: () => boolean;
             queryEntireHistory?: boolean;
@@ -155,14 +188,19 @@ export declare class TransactionController extends BaseController<TransactionCon
         };
         messenger: TransactionControllerMessenger;
         onNetworkStateChange: (listener: (state: NetworkState) => void) => void;
+        pendingTransactions?: {
+            isResubmitEnabled?: boolean;
+        };
         provider: Provider;
+        securityProviderRequest?: SecurityProviderRequest;
+        hooks: {
+            afterSign?: (transactionMeta: TransactionMeta, signedTx: TypedTransaction) => boolean;
+            beforeApproveOnInit?: (transactionMeta: TransactionMeta) => boolean;
+            beforeCheckPendingTransaction?: (transactionMeta: TransactionMeta) => boolean;
+            beforePublish?: (transactionMeta: TransactionMeta) => boolean;
+            getAdditionalSignArguments?: (transactionMeta: TransactionMeta) => (TransactionMeta | undefined)[];
+        };
     }, config?: Partial<TransactionConfig>, state?: Partial<TransactionState>);
-    /**
-     * Starts a new polling interval.
-     *
-     * @param interval - The polling interval used to fetch new transaction statuses.
-     */
-    poll(interval?: number): Promise<void>;
     /**
      * Handle new method data request.
      *
@@ -179,29 +217,34 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param opts - Additional options to control how the transaction is added.
      * @param opts.actionId - Unique ID to prevent duplicate requests.
      * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+     * @param opts.method - RPC method that requested the transaction.
      * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
      * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
      * @param opts.securityAlertResponse - Response from security validator.
      * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
      * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
+     * @param opts.swaps - Options for swaps transactions.
+     * @param opts.swaps.hasApproveTx - Whether the transaction has an approval transaction.
+     * @param opts.swaps.meta - Metadata for swap transaction.
      * @returns Object containing a promise resolving to the transaction hash if approved.
      */
-    addTransaction(txParams: TransactionParams, { actionId, deviceConfirmedOn, origin, requireApproval, securityAlertResponse, sendFlowHistory, type, }?: {
+    addTransaction(txParams: TransactionParams, { actionId, deviceConfirmedOn, method, origin, requireApproval, securityAlertResponse, sendFlowHistory, swaps, type, }?: {
         actionId?: string;
         deviceConfirmedOn?: WalletDevice;
+        method?: string;
         origin?: string;
         requireApproval?: boolean | undefined;
-        securityAlertResponse?: Record<string, unknown>;
+        securityAlertResponse?: SecurityAlertResponse;
         sendFlowHistory?: SendFlowHistoryEntry[];
+        swaps?: {
+            hasApproveTx?: boolean;
+            meta?: Partial<TransactionMeta>;
+        };
         type?: TransactionType;
     }): Promise<Result>;
     startIncomingTransactionPolling(): void;
     stopIncomingTransactionPolling(): void;
     updateIncomingTransactions(): Promise<void>;
-    /**
-     * Creates approvals for all unapproved transactions persisted.
-     */
-    initApprovals(): void;
     /**
      * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
@@ -209,10 +252,12 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param transactionId - The ID of the transaction to cancel.
      * @param gasValues - The gas values to use for the cancellation transaction.
      * @param options - The options for the cancellation transaction.
+     * @param options.actionId - Unique ID to prevent duplicate requests.
      * @param options.estimatedBaseFee - The estimated base fee of the transaction.
      */
-    stopTransaction(transactionId: string, gasValues?: GasPriceValue | FeeMarketEIP1559Values, { estimatedBaseFee }?: {
+    stopTransaction(transactionId: string, gasValues?: GasPriceValue | FeeMarketEIP1559Values, { estimatedBaseFee, actionId, }?: {
         estimatedBaseFee?: string;
+        actionId?: string;
     }): Promise<void>;
     /**
      * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.
@@ -235,18 +280,32 @@ export declare class TransactionController extends BaseController<TransactionCon
      */
     estimateGas(transaction: TransactionParams): Promise<{
         gas: string;
-        gasPrice: any;
-        estimateGasError?: undefined;
-    } | {
-        gas: string;
-        gasPrice: any;
-        estimateGasError: string | undefined;
+        simulationFails: {
+            reason: any;
+            errorKey: any;
+            debug: {
+                blockNumber: string;
+                blockGasLimit: string;
+            };
+        } | undefined;
     }>;
     /**
-     * Check the status of submitted transactions on the network to determine whether they have
-     * been included in a block. Any that have been included in a block are marked as confirmed.
+     * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.
+     *
+     * @param transaction - The transaction params to estimate gas for.
+     * @param multiplier - The multiplier to use for the gas buffer.
      */
-    queryTransactionStatuses(): Promise<void>;
+    estimateGasBuffered(transaction: TransactionParams, multiplier: number): Promise<{
+        gas: string;
+        simulationFails: {
+            reason: any;
+            errorKey: any;
+            debug: {
+                blockNumber: string;
+                blockGasLimit: string;
+            };
+        } | undefined;
+    }>;
     /**
      * Updates an existing transaction in state.
      *
@@ -254,6 +313,13 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param note - A note or update reason to include in the transaction history.
      */
     updateTransaction(transactionMeta: TransactionMeta, note: string): void;
+    /**
+     * Update the security alert response for a transaction.
+     *
+     * @param transactionId - ID of the transaction.
+     * @param securityAlertResponse - The new security alert response for the transaction.
+     */
+    updateSecurityAlertResponse(transactionId: string, securityAlertResponse: SecurityAlertResponse): void;
     /**
      * Removes all transactions from state, optionally based on the current network.
      *
@@ -313,6 +379,73 @@ export declare class TransactionController extends BaseController<TransactionCon
         userEditedGasLimit?: boolean;
         userFeeLevel?: string;
     }): TransactionMeta;
+    /**
+     * Update the previous gas values of a transaction.
+     *
+     * @param transactionId - The ID of the transaction to update.
+     * @param previousGas - Previous gas values to update.
+     * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.
+     * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
+     * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
+     * @returns The updated transactionMeta.
+     */
+    updatePreviousGasParams(transactionId: string, { gasLimit, maxFeePerGas, maxPriorityFeePerGas, }: {
+        gasLimit?: string;
+        maxFeePerGas?: string;
+        maxPriorityFeePerGas?: string;
+    }): TransactionMeta;
+    /**
+     * Gets the next nonce according to the nonce-tracker.
+     * Ensure `releaseLock` is called once processing of the `nonce` value is complete.
+     *
+     * @param address - The hex string address for the transaction.
+     * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.
+     */
+    getNonceLock(address: string): Promise<NonceLock>;
+    /**
+     * Signs and returns the raw transaction data for provided transaction params list.
+     *
+     * @param listOfTxParams - The list of transaction params to approve.
+     * @returns The raw transactions.
+     */
+    approveTransactionsWithSameNonce(listOfTxParams?: TransactionParams[]): Promise<string | string[]>;
+    /**
+     * Update a custodial transaction.
+     *
+     * @param transactionId - The ID of the transaction to update.
+     * @param options - The custodial transaction options to update.
+     * @param options.custodyStatus - The new custody status value to be assigned.
+     * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.
+     * @param options.hash - The new hash value to be assigned.
+     * @param options.status - The new status value to be assigned.
+     */
+    updateCustodialTransaction(transactionId: string, { custodyStatus, errorMessage, hash, status, }: {
+        custodyStatus?: string;
+        errorMessage?: string;
+        hash?: string;
+        status?: TransactionStatus;
+    }): void;
+    private signExternalTransaction;
+    /**
+     * Removes unapproved transactions from state.
+     */
+    clearUnapprovedTransactions(): void;
+    private addMetadata;
+    private updateGasProperties;
+    private getCurrentChainTransactionsByStatus;
+    private onBootCleanup;
+    /**
+     * Create approvals for all unapproved transactions on current chain.
+     */
+    private createApprovalsForUnapprovedTransactions;
+    /**
+     * Update the gas values of all unapproved transactions on current chain.
+     */
+    private loadGasValuesForUnapprovedTransactions;
+    /**
+     * Force to submit approved transactions on current chain.
+     */
+    private submitApprovedTransactions;
     private processApproval;
     /**
      * Approves a transaction and updates it's status in state. If this is not a
@@ -323,11 +456,13 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param transactionId - The ID of the transaction to approve.
      */
     private approveTransaction;
+    private publishTransaction;
     /**
      * Cancels a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
      *
      * @param transactionId - The ID of the transaction to cancel.
+     * @param actionId - The actionId passed from UI
      */
     private cancelTransaction;
     /**
@@ -359,23 +494,6 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @returns Whether the transaction is in a final state.
      */
     private isLocalFinalState;
-    /**
-     * Method to verify the state of a transaction using the Blockchain as a source of truth.
-     *
-     * @param meta - The local transaction to verify on the blockchain.
-     * @returns A tuple containing the updated transaction, and whether or not an update was required.
-     */
-    private blockchainTransactionStateReconciler;
-    /**
-     * Method to check if a tx has failed according to their receipt
-     * According to the Web3 docs:
-     * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.
-     * The receipt is not available for pending transactions and returns null.
-     *
-     * @param txHash - The transaction hash.
-     * @returns Whether the transaction has failed.
-     */
-    private checkTxReceiptStatusIsFailed;
     private requestApproval;
     private getTransaction;
     private getApprovalId;
@@ -431,6 +549,8 @@ export declare class TransactionController extends BaseController<TransactionCon
      */
     private updateTransactionMetaRSV;
     private getEIP1559Compatibility;
+    private addPendingTransactionTrackerListeners;
+    private signTransaction;
 }
 export default TransactionController;
 //# sourceMappingURL=TransactionController.d.ts.map
\ No newline at end of file
diff --git a/dist/TransactionController.d.ts.map b/dist/TransactionController.d.ts.map
deleted file mode 100644
index 083b07c332887c5dc2bca0074f22794962934600..0000000000000000000000000000000000000000
--- a/dist/TransactionController.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.d.ts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/TransactionController.js b/dist/TransactionController.js
index bfa28719cf6450321d54123b47563ae0c102f1e4..48780bcd0e1e722dfa557b41a830588b8b11bef2 100644
--- a/dist/TransactionController.js
+++ b/dist/TransactionController.js
@@ -26,13 +26,19 @@ const events_1 = require("events");
 const lodash_1 = require("lodash");
 const nonce_tracker_1 = __importDefault(require("nonce-tracker"));
 const uuid_1 = require("uuid");
-const EtherscanRemoteTransactionSource_1 = require("./EtherscanRemoteTransactionSource");
-const external_transactions_1 = require("./external-transactions");
-const history_1 = require("./history");
-const IncomingTransactionHelper_1 = require("./IncomingTransactionHelper");
-const transaction_type_1 = require("./transaction-type");
+const EtherscanRemoteTransactionSource_1 = require("./helpers/EtherscanRemoteTransactionSource");
+const IncomingTransactionHelper_1 = require("./helpers/IncomingTransactionHelper");
+const PendingTransactionTracker_1 = require("./helpers/PendingTransactionTracker");
+const logger_1 = require("./logger");
 const types_1 = require("./types");
-const utils_1 = require("./utils");
+const external_transactions_1 = require("./utils/external-transactions");
+const gas_1 = require("./utils/gas");
+const gas_fees_1 = require("./utils/gas-fees");
+const history_1 = require("./utils/history");
+const swaps_1 = require("./utils/swaps");
+const transaction_type_1 = require("./utils/transaction-type");
+const utils_1 = require("./utils/utils");
+const validation_1 = require("./utils/validation");
 exports.HARDFORK = common_1.Hardfork.London;
 /**
  * Multiplier used to determine a transaction's increased gas fee during cancellation
@@ -57,9 +63,13 @@ class TransactionController extends base_controller_1.BaseController {
      * @param options.blockTracker - The block tracker used to poll for new blocks data.
      * @param options.disableHistory - Whether to disable storing history in transaction metadata.
      * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
+     * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.
+     * @param options.getSavedGasFees - Gets the saved gas fee config.
      * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
      * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
+     * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.
      * @param options.getNetworkState - Gets the state of the network controller.
+     * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
      * @param options.getSelectedAddress - Gets the address of the currently selected account.
      * @param options.incomingTransactions - Configuration options for incoming transaction support.
      * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.
@@ -68,12 +78,23 @@ class TransactionController extends base_controller_1.BaseController {
      * @param options.incomingTransactions.updateTransactions - Whether to update local transactions using remote transaction data.
      * @param options.messenger - The controller messenger.
      * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
+     * @param options.pendingTransactions - Configuration options for pending transaction support.
+     * @param options.pendingTransactions.isResubmitEnabled - Whether transaction publishing is automatically retried.
      * @param options.provider - The provider used to create the underlying EthQuery instance.
+     * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
+     * @param options.hooks - The controller hooks.
+     * @param options.hooks.afterSign - Additional logic to execute after signing a transaction. Return false to not change the status to signed.
+     * @param options.hooks.beforeApproveOnInit - Additional logic to execute before starting an approval flow for a transaction during initialization. Return false to skip the transaction.
+     * @param options.hooks.beforeCheckPendingTransaction - Additional logic to execute before checking pending transactions. Return false to prevent the broadcast of the transaction.
+     * @param options.hooks.beforePublish - Additional logic to execute before publishing a transaction. Return false to prevent the broadcast of the transaction.
+     * @param options.hooks.getAdditionalSignArguments - Returns additional arguments required to sign a transaction.
      * @param config - Initial options used to configure this controller.
      * @param state - Initial state to set on this controller.
      */
-    constructor({ blockTracker, disableHistory, disableSendFlowHistory, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getNetworkState, getSelectedAddress, incomingTransactions = {}, messenger, onNetworkStateChange, provider, }, config, state) {
+    constructor({ blockTracker, disableHistory, disableSendFlowHistory, disableSwaps, getSavedGasFees, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getGasFeeEstimates, getNetworkState, getPermittedAccounts, getSelectedAddress, incomingTransactions = {}, messenger, onNetworkStateChange, pendingTransactions = {}, provider, securityProviderRequest, hooks = {}, }, config, state) {
+        var _a, _b, _c, _d, _e;
         super(config, state);
+        this.inProcessOfSigning = new Set();
         this.mutex = new async_mutex_1.Mutex();
         /**
          * EventEmitter instance used to listen to specific transactional events
@@ -84,7 +105,6 @@ class TransactionController extends base_controller_1.BaseController {
          */
         this.name = 'TransactionController';
         this.defaultConfig = {
-            interval: 15000,
             txHistoryLimit: 40,
         };
         this.defaultState = {
@@ -99,11 +119,27 @@ class TransactionController extends base_controller_1.BaseController {
         this.ethQuery = new eth_query_1.default(provider);
         this.isSendFlowHistoryDisabled = disableSendFlowHistory !== null && disableSendFlowHistory !== void 0 ? disableSendFlowHistory : false;
         this.isHistoryDisabled = disableHistory !== null && disableHistory !== void 0 ? disableHistory : false;
+        this.isSwapsDisabled = disableSwaps !== null && disableSwaps !== void 0 ? disableSwaps : false;
         this.registry = new eth_method_registry_1.default({ provider });
+        this.getSavedGasFees = getSavedGasFees !== null && getSavedGasFees !== void 0 ? getSavedGasFees : ((_chainId) => undefined);
         this.getCurrentAccountEIP1559Compatibility =
             getCurrentAccountEIP1559Compatibility;
         this.getCurrentNetworkEIP1559Compatibility =
             getCurrentNetworkEIP1559Compatibility;
+        this.getGasFeeEstimates =
+            getGasFeeEstimates || (() => Promise.resolve({}));
+        this.getPermittedAccounts = getPermittedAccounts;
+        this.getSelectedAddress = getSelectedAddress;
+        this.securityProviderRequest = securityProviderRequest;
+        this.afterSign = (_a = hooks === null || hooks === void 0 ? void 0 : hooks.afterSign) !== null && _a !== void 0 ? _a : (() => true);
+        this.beforeApproveOnInit = (_b = hooks === null || hooks === void 0 ? void 0 : hooks.beforeApproveOnInit) !== null && _b !== void 0 ? _b : (() => true);
+        this.beforeCheckPendingTransaction =
+            (_c = hooks === null || hooks === void 0 ? void 0 : hooks.beforeCheckPendingTransaction) !== null && _c !== void 0 ? _c : 
+            /* istanbul ignore next */
+            (() => true);
+        this.beforePublish = (_d = hooks === null || hooks === void 0 ? void 0 : hooks.beforePublish) !== null && _d !== void 0 ? _d : (() => true);
+        this.getAdditionalSignArguments =
+            (_e = hooks === null || hooks === void 0 ? void 0 : hooks.getAdditionalSignArguments) !== null && _e !== void 0 ? _e : (() => []);
         this.nonceTracker = new nonce_tracker_1.default({
             provider,
             blockTracker,
@@ -125,14 +161,36 @@ class TransactionController extends base_controller_1.BaseController {
         });
         this.incomingTransactionHelper.hub.on('transactions', this.onIncomingTransactions.bind(this));
         this.incomingTransactionHelper.hub.on('updatedLastFetchedBlockNumbers', this.onUpdatedLastFetchedBlockNumbers.bind(this));
+        this.pendingTransactionTracker = new PendingTransactionTracker_1.PendingTransactionTracker({
+            approveTransaction: this.approveTransaction.bind(this),
+            blockTracker,
+            getChainId: this.getChainId.bind(this),
+            getEthQuery: () => this.ethQuery,
+            getTransactions: () => this.state.transactions,
+            isResubmitEnabled: pendingTransactions.isResubmitEnabled,
+            nonceTracker: this.nonceTracker,
+            onStateChange: this.subscribe.bind(this),
+            publishTransaction: this.publishTransaction.bind(this),
+            hooks: {
+                beforeCheckPendingTransaction: this.beforeCheckPendingTransaction.bind(this),
+                beforePublish: this.beforePublish.bind(this),
+            },
+        });
+        this.addPendingTransactionTrackerListeners();
         onNetworkStateChange(() => {
             this.ethQuery = new eth_query_1.default(this.provider);
             this.registry = new eth_method_registry_1.default({ provider: this.provider });
+            this.onBootCleanup();
         });
-        this.poll();
+        this.onBootCleanup();
     }
-    failTransaction(transactionMeta, error) {
-        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error, status: types_1.TransactionStatus.failed });
+    failTransaction(transactionMeta, error, actionId) {
+        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error: (0, utils_1.normalizeTxError)(error), status: types_1.TransactionStatus.failed });
+        this.hub.emit('transaction-failed', {
+            actionId,
+            error: error.message,
+            transactionMeta: newTransactionMeta,
+        });
         this.updateTransaction(newTransactionMeta, 'TransactionController#failTransaction - Add error message and set status to failed');
         this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);
     }
@@ -143,21 +201,6 @@ class TransactionController extends base_controller_1.BaseController {
             return { registryMethod, parsedRegistryMethod };
         });
     }
-    /**
-     * Starts a new polling interval.
-     *
-     * @param interval - The polling interval used to fetch new transaction statuses.
-     */
-    poll(interval) {
-        return __awaiter(this, void 0, void 0, function* () {
-            interval && this.configure({ interval }, false, false);
-            this.handle && clearTimeout(this.handle);
-            yield (0, controller_utils_1.safelyExecute)(() => this.queryTransactionStatuses());
-            this.handle = setTimeout(() => {
-                this.poll(this.config.interval);
-            }, this.config.interval);
-        });
-    }
     /**
      * Handle new method data request.
      *
@@ -193,20 +236,26 @@ class TransactionController extends base_controller_1.BaseController {
      * @param opts - Additional options to control how the transaction is added.
      * @param opts.actionId - Unique ID to prevent duplicate requests.
      * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+     * @param opts.method - RPC method that requested the transaction.
      * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
      * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
      * @param opts.securityAlertResponse - Response from security validator.
      * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
      * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
+     * @param opts.swaps - Options for swaps transactions.
+     * @param opts.swaps.hasApproveTx - Whether the transaction has an approval transaction.
+     * @param opts.swaps.meta - Metadata for swap transaction.
      * @returns Object containing a promise resolving to the transaction hash if approved.
      */
-    addTransaction(txParams, { actionId, deviceConfirmedOn, origin, requireApproval, securityAlertResponse, sendFlowHistory, type, } = {}) {
+    addTransaction(txParams, { actionId, deviceConfirmedOn, method, origin, requireApproval, securityAlertResponse, sendFlowHistory, swaps = {}, type, } = {}) {
         return __awaiter(this, void 0, void 0, function* () {
             const chainId = this.getChainId();
-            const { transactions } = this.state;
             txParams = (0, utils_1.normalizeTxParams)(txParams);
             const isEIP1559Compatible = yield this.getEIP1559Compatibility();
-            (0, utils_1.validateTxParams)(txParams, isEIP1559Compatible);
+            (0, validation_1.validateTxParams)(txParams, isEIP1559Compatible);
+            if (origin) {
+                yield (0, validation_1.validateTransactionOrigin)(yield this.getPermittedAccounts(origin), this.getSelectedAddress(), txParams.from, origin);
+            }
             const dappSuggestedGasFees = this.generateDappSuggestedGasFees(txParams, origin);
             const transactionType = type !== null && type !== void 0 ? type : (yield (0, transaction_type_1.determineTransactionType)(txParams, this.ethQuery)).type;
             const existingTransactionMeta = this.getTransactionWithActionId(actionId);
@@ -227,18 +276,14 @@ class TransactionController extends base_controller_1.BaseController {
                 verifiedOnBlockchain: false,
                 type: transactionType,
             };
-            try {
-                const { gas, estimateGasError } = yield this.estimateGas(txParams);
-                txParams.gas = gas;
-                txParams.estimateGasError = estimateGasError;
-                transactionMeta.originalGasEstimate = gas;
-            }
-            catch (error) {
-                this.failTransaction(transactionMeta, error);
-                return Promise.reject(error);
-            }
+            yield this.updateGasProperties(transactionMeta);
             // Checks if a transaction already exists with a given actionId
             if (!existingTransactionMeta) {
+                // Set security provider response
+                if (method && this.securityProviderRequest) {
+                    const securityProviderResponse = yield this.securityProviderRequest(transactionMeta, method);
+                    transactionMeta.securityProviderResponse = securityProviderResponse;
+                }
                 if (!this.isSendFlowHistoryDisabled) {
                     transactionMeta.sendFlowHistory = sendFlowHistory !== null && sendFlowHistory !== void 0 ? sendFlowHistory : [];
                 }
@@ -246,16 +291,19 @@ class TransactionController extends base_controller_1.BaseController {
                 if (!this.isHistoryDisabled) {
                     (0, history_1.addInitialHistorySnapshot)(transactionMeta);
                 }
-                transactions.push(transactionMeta);
-                this.update({
-                    transactions: this.trimTransactionsForState(transactions),
+                yield (0, swaps_1.updateSwapsTransaction)(transactionMeta, transactionType, swaps, {
+                    isSwapsDisabled: this.isSwapsDisabled,
+                    cancelTransaction: this.cancelTransaction.bind(this),
+                    controllerHubEmitter: this.hub.emit.bind(this.hub),
                 });
+                this.addMetadata(transactionMeta);
                 this.hub.emit(`unapprovedTransaction`, transactionMeta);
             }
             return {
                 result: this.processApproval(transactionMeta, {
                     isExisting: Boolean(existingTransactionMeta),
                     requireApproval,
+                    actionId,
                 }),
                 transactionMeta,
             };
@@ -272,22 +320,6 @@ class TransactionController extends base_controller_1.BaseController {
             yield this.incomingTransactionHelper.update();
         });
     }
-    /**
-     * Creates approvals for all unapproved transactions persisted.
-     */
-    initApprovals() {
-        const chainId = this.getChainId();
-        const unapprovedTxs = this.state.transactions.filter((transaction) => transaction.status === types_1.TransactionStatus.unapproved &&
-            transaction.chainId === chainId);
-        for (const txMeta of unapprovedTxs) {
-            this.processApproval(txMeta, {
-                shouldShowRequest: false,
-            }).catch((error) => {
-                /* istanbul ignore next */
-                console.error('Error during persisted transaction approval', error);
-            });
-        }
-    }
     /**
      * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
@@ -295,15 +327,20 @@ class TransactionController extends base_controller_1.BaseController {
      * @param transactionId - The ID of the transaction to cancel.
      * @param gasValues - The gas values to use for the cancellation transaction.
      * @param options - The options for the cancellation transaction.
+     * @param options.actionId - Unique ID to prevent duplicate requests.
      * @param options.estimatedBaseFee - The estimated base fee of the transaction.
      */
-    stopTransaction(transactionId, gasValues, { estimatedBaseFee } = {}) {
+    stopTransaction(transactionId, gasValues, { estimatedBaseFee, actionId, } = {}) {
         var _a, _b;
         return __awaiter(this, void 0, void 0, function* () {
+            // If transaction is found for same action id, do not create a cancel transaction.
+            if (this.getTransactionWithActionId(actionId)) {
+                return;
+            }
             if (gasValues) {
                 (0, utils_1.validateGasValues)(gasValues);
             }
-            const transactionMeta = this.state.transactions.find(({ id }) => id === transactionId);
+            const transactionMeta = this.getTransaction(transactionId);
             if (!transactionMeta) {
                 return;
             }
@@ -330,13 +367,13 @@ class TransactionController extends base_controller_1.BaseController {
             const newMaxPriorityFeePerGas = (maxPriorityFeePerGasValues &&
                 (0, utils_1.validateMinimumIncrease)(maxPriorityFeePerGasValues, minMaxPriorityFeePerGas)) ||
                 (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);
-            const txParams = newMaxFeePerGas && newMaxPriorityFeePerGas
+            const newTxParams = newMaxFeePerGas && newMaxPriorityFeePerGas
                 ? {
                     from: transactionMeta.txParams.from,
                     gasLimit: transactionMeta.txParams.gas,
                     maxFeePerGas: newMaxFeePerGas,
                     maxPriorityFeePerGas: newMaxPriorityFeePerGas,
-                    type: 2,
+                    type: '2',
                     nonce: transactionMeta.txParams.nonce,
                     to: transactionMeta.txParams.from,
                     value: '0x0',
@@ -349,14 +386,33 @@ class TransactionController extends base_controller_1.BaseController {
                     to: transactionMeta.txParams.from,
                     value: '0x0',
                 };
-            const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
+            const unsignedEthTx = this.prepareUnsignedEthTx(newTxParams);
             const signedTx = yield this.sign(unsignedEthTx, transactionMeta.txParams.from);
-            yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
             const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-            yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTx]);
-            transactionMeta.estimatedBaseFee = estimatedBaseFee;
-            transactionMeta.status = types_1.TransactionStatus.cancelled;
-            this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
+            const hash = yield this.publishTransaction(rawTx);
+            const cancelTransactionMeta = {
+                actionId,
+                chainId: transactionMeta.chainId,
+                estimatedBaseFee,
+                hash,
+                id: (0, uuid_1.v1)(),
+                originalGasEstimate: transactionMeta.txParams.gas,
+                status: types_1.TransactionStatus.submitted,
+                time: Date.now(),
+                type: types_1.TransactionType.cancel,
+                txParams: newTxParams,
+            };
+            this.addMetadata(cancelTransactionMeta);
+            // stopTransaction has no approval request, so we assume the user has already approved the transaction
+            this.hub.emit('transaction-approved', {
+                transactionMeta: cancelTransactionMeta,
+                actionId,
+            });
+            this.hub.emit('transaction-submitted', {
+                transactionMeta: cancelTransactionMeta,
+                actionId,
+            });
+            this.hub.emit(`${cancelTransactionMeta.id}:finished`, cancelTransactionMeta);
         });
     }
     /**
@@ -387,7 +443,6 @@ class TransactionController extends base_controller_1.BaseController {
             if (!this.sign) {
                 throw new Error('No sign method defined.');
             }
-            const { transactions } = this.state;
             // gasPrice (legacy non EIP1559)
             const minGasPrice = (0, utils_1.getIncreasedPriceFromExisting)(transactionMeta.txParams.gasPrice, exports.SPEED_UP_RATE);
             const gasPriceFromValues = (0, utils_1.isGasPriceValue)(gasValues) && gasValues.gasPrice;
@@ -409,18 +464,26 @@ class TransactionController extends base_controller_1.BaseController {
                 (0, utils_1.validateMinimumIncrease)(maxPriorityFeePerGasValues, minMaxPriorityFeePerGas)) ||
                 (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);
             const txParams = newMaxFeePerGas && newMaxPriorityFeePerGas
-                ? Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, maxFeePerGas: newMaxFeePerGas, maxPriorityFeePerGas: newMaxPriorityFeePerGas, type: 2 }) : Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, gasPrice: newGasPrice });
+                ? Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, maxFeePerGas: newMaxFeePerGas, maxPriorityFeePerGas: newMaxPriorityFeePerGas, type: '2' }) : Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, gasPrice: newGasPrice });
             const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
             const signedTx = yield this.sign(unsignedEthTx, transactionMeta.txParams.from);
             yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
             const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
             const hash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTx]);
             const baseTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { estimatedBaseFee, id: (0, uuid_1.v1)(), time: Date.now(), hash,
-                actionId, originalGasEstimate: transactionMeta.txParams.gas, type: types_1.TransactionType.retry });
+                actionId, originalGasEstimate: transactionMeta.txParams.gas, type: types_1.TransactionType.retry, originalType: transactionMeta.type });
             const newTransactionMeta = newMaxFeePerGas && newMaxPriorityFeePerGas
                 ? Object.assign(Object.assign({}, baseTransactionMeta), { txParams: Object.assign(Object.assign({}, transactionMeta.txParams), { maxFeePerGas: newMaxFeePerGas, maxPriorityFeePerGas: newMaxPriorityFeePerGas }) }) : Object.assign(Object.assign({}, baseTransactionMeta), { txParams: Object.assign(Object.assign({}, transactionMeta.txParams), { gasPrice: newGasPrice }) });
-            transactions.push(newTransactionMeta);
-            this.update({ transactions: this.trimTransactionsForState(transactions) });
+            this.addMetadata(newTransactionMeta);
+            // speedUpTransaction has no approval request, so we assume the user has already approved the transaction
+            this.hub.emit('transaction-approved', {
+                transactionMeta: newTransactionMeta,
+                actionId,
+            });
+            this.hub.emit('transaction-submitted', {
+                transactionMeta: newTransactionMeta,
+                actionId,
+            });
             this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);
         });
     }
@@ -432,93 +495,24 @@ class TransactionController extends base_controller_1.BaseController {
      */
     estimateGas(transaction) {
         return __awaiter(this, void 0, void 0, function* () {
-            const estimatedTransaction = Object.assign({}, transaction);
-            const { gas, gasPrice: providedGasPrice, to, value, data, } = estimatedTransaction;
-            const gasPrice = typeof providedGasPrice === 'undefined'
-                ? yield (0, controller_utils_1.query)(this.ethQuery, 'gasPrice')
-                : providedGasPrice;
-            const { providerConfig } = this.getNetworkState();
-            const isCustomNetwork = providerConfig.type === controller_utils_1.NetworkType.rpc;
-            // 1. If gas is already defined on the transaction, use it
-            if (typeof gas !== 'undefined') {
-                return { gas, gasPrice };
-            }
-            const { gasLimit } = yield (0, controller_utils_1.query)(this.ethQuery, 'getBlockByNumber', [
-                'latest',
-                false,
-            ]);
-            // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.
-            // If the network is a custom network then bypass this check and fetch 'estimateGas'.
-            /* istanbul ignore next */
-            const code = to ? yield (0, controller_utils_1.query)(this.ethQuery, 'getCode', [to]) : undefined;
-            /* istanbul ignore next */
-            if (!isCustomNetwork &&
-                (!to || (to && !data && (!code || code === '0x')))) {
-                return { gas: '0x5208', gasPrice };
-            }
-            // if data, should be hex string format
-            estimatedTransaction.data = !data
-                ? data
-                : /* istanbul ignore next */ (0, ethereumjs_util_1.addHexPrefix)(data);
-            // 3. If this is a contract address, safely estimate gas using RPC
-            estimatedTransaction.value =
-                typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;
-            const gasLimitBN = (0, controller_utils_1.hexToBN)(gasLimit);
-            estimatedTransaction.gas = (0, controller_utils_1.BNToHex)((0, controller_utils_1.fractionBN)(gasLimitBN, 19, 20));
-            let gasHex;
-            let estimateGasError;
-            try {
-                gasHex = yield (0, controller_utils_1.query)(this.ethQuery, 'estimateGas', [
-                    estimatedTransaction,
-                ]);
-            }
-            catch (error) {
-                estimateGasError = utils_1.ESTIMATE_GAS_ERROR;
-            }
-            // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a
-            // a custom network then return the eth_estimateGas value.
-            const gasBN = (0, controller_utils_1.hexToBN)(gasHex);
-            const maxGasBN = gasLimitBN.muln(0.9);
-            const paddedGasBN = gasBN.muln(1.5);
-            /* istanbul ignore next */
-            if (gasBN.gt(maxGasBN) || isCustomNetwork) {
-                return { gas: (0, ethereumjs_util_1.addHexPrefix)(gasHex), gasPrice, estimateGasError };
-            }
-            /* istanbul ignore next */
-            if (paddedGasBN.lt(maxGasBN)) {
-                return {
-                    gas: (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(paddedGasBN)),
-                    gasPrice,
-                    estimateGasError,
-                };
-            }
-            return { gas: (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(maxGasBN)), gasPrice, estimateGasError };
+            const { estimatedGas, simulationFails } = yield (0, gas_1.estimateGas)(transaction, this.ethQuery);
+            return { gas: estimatedGas, simulationFails };
         });
     }
     /**
-     * Check the status of submitted transactions on the network to determine whether they have
-     * been included in a block. Any that have been included in a block are marked as confirmed.
+     * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.
+     *
+     * @param transaction - The transaction params to estimate gas for.
+     * @param multiplier - The multiplier to use for the gas buffer.
      */
-    queryTransactionStatuses() {
+    estimateGasBuffered(transaction, multiplier) {
         return __awaiter(this, void 0, void 0, function* () {
-            const { transactions } = this.state;
-            const currentChainId = this.getChainId();
-            let gotUpdates = false;
-            yield (0, controller_utils_1.safelyExecute)(() => Promise.all(transactions.map((meta, index) => __awaiter(this, void 0, void 0, function* () {
-                if (!meta.verifiedOnBlockchain && meta.chainId === currentChainId) {
-                    const [reconciledTx, updateRequired] = yield this.blockchainTransactionStateReconciler(meta);
-                    if (updateRequired) {
-                        transactions[index] = reconciledTx;
-                        gotUpdates = updateRequired;
-                    }
-                }
-            }))));
-            /* istanbul ignore else */
-            if (gotUpdates) {
-                this.update({
-                    transactions: this.trimTransactionsForState(transactions),
-                });
-            }
+            const { blockGasLimit, estimatedGas, simulationFails } = yield (0, gas_1.estimateGas)(transaction, this.ethQuery);
+            const gas = (0, gas_1.addGasBuffer)(estimatedGas, blockGasLimit, multiplier);
+            return {
+                gas,
+                simulationFails,
+            };
         });
     }
     /**
@@ -530,7 +524,7 @@ class TransactionController extends base_controller_1.BaseController {
     updateTransaction(transactionMeta, note) {
         const { transactions } = this.state;
         transactionMeta.txParams = (0, utils_1.normalizeTxParams)(transactionMeta.txParams);
-        (0, utils_1.validateTxParams)(transactionMeta.txParams);
+        (0, validation_1.validateTxParams)(transactionMeta.txParams);
         if (!this.isHistoryDisabled) {
             (0, history_1.updateTransactionHistory)(transactionMeta, note);
         }
@@ -538,6 +532,23 @@ class TransactionController extends base_controller_1.BaseController {
         transactions[index] = transactionMeta;
         this.update({ transactions: this.trimTransactionsForState(transactions) });
     }
+    /**
+     * Update the security alert response for a transaction.
+     *
+     * @param transactionId - ID of the transaction.
+     * @param securityAlertResponse - The new security alert response for the transaction.
+     */
+    updateSecurityAlertResponse(transactionId, securityAlertResponse) {
+        if (!securityAlertResponse) {
+            throw new Error('updateSecurityAlertResponse: securityAlertResponse should not be null');
+        }
+        const transactionMeta = this.getTransaction(transactionId);
+        if (!transactionMeta) {
+            throw new Error(`Cannot update security alert response as no transaction metadata found`);
+        }
+        const updatedMeta = (0, lodash_1.merge)(transactionMeta, { securityAlertResponse });
+        this.updateTransaction(updatedMeta, 'TransactionController:updatesecurityAlertResponse - securityAlertResponse updated');
+    }
     /**
      * Removes all transactions from state, optionally based on the current network.
      *
@@ -595,6 +606,26 @@ class TransactionController extends base_controller_1.BaseController {
                 this.markNonceDuplicatesDropped(transactionId);
                 // Update external provided transaction with updated gas values and confirmed status.
                 this.updateTransaction(transactionMeta, 'TransactionController:confirmExternalTransaction - Add external transaction');
+                if (transactionMeta.type === types_1.TransactionType.swap) {
+                    (0, swaps_1.updatePostTransactionBalance)(transactionMeta, {
+                        ethQuery: this.ethQuery,
+                        getTransaction: this.getTransaction.bind(this),
+                        updateTransaction: this.updateTransaction.bind(this),
+                    })
+                        .then(({ updatedTransactionMeta, approvalTransactionMeta }) => {
+                        this.hub.emit('post-transaction-balance-updated', {
+                            transactionMeta: updatedTransactionMeta,
+                            approvalTransactionMeta,
+                        });
+                    })
+                        .catch((error) => {
+                        /* istanbul ignore next */
+                        (0, logger_1.projectLogger)('Error while updating post transaction balance', error);
+                    });
+                }
+                this.hub.emit('transaction-confirmed', {
+                    transactionMeta,
+                });
             }
             catch (error) {
                 console.error(error);
@@ -676,7 +707,250 @@ class TransactionController extends base_controller_1.BaseController {
         this.updateTransaction(updatedMeta, 'TransactionController:updateTransactionGasFees - gas values updated');
         return this.getTransaction(transactionId);
     }
-    processApproval(transactionMeta, { isExisting = false, requireApproval, shouldShowRequest = true, }) {
+    /**
+     * Update the previous gas values of a transaction.
+     *
+     * @param transactionId - The ID of the transaction to update.
+     * @param previousGas - Previous gas values to update.
+     * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.
+     * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.
+     * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.
+     * @returns The updated transactionMeta.
+     */
+    updatePreviousGasParams(transactionId, { gasLimit, maxFeePerGas, maxPriorityFeePerGas, }) {
+        const transactionMeta = this.getTransaction(transactionId);
+        if (!transactionMeta) {
+            throw new Error(`Cannot update transaction as no transaction metadata found`);
+        }
+        (0, utils_1.validateIfTransactionUnapproved)(transactionMeta, 'updatePreviousGasParams');
+        const transactionPreviousGas = {
+            previousGas: {
+                gasLimit,
+                maxFeePerGas,
+                maxPriorityFeePerGas,
+            },
+        };
+        // only update what is defined
+        transactionPreviousGas.previousGas = (0, lodash_1.pickBy)(transactionPreviousGas.previousGas);
+        // merge updated previous gas values with existing transaction meta
+        const updatedMeta = (0, lodash_1.merge)(transactionMeta, transactionPreviousGas);
+        this.updateTransaction(updatedMeta, 'TransactionController:updatePreviousGasParams - Previous gas values updated');
+        return this.getTransaction(transactionId);
+    }
+    /**
+     * Gets the next nonce according to the nonce-tracker.
+     * Ensure `releaseLock` is called once processing of the `nonce` value is complete.
+     *
+     * @param address - The hex string address for the transaction.
+     * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.
+     */
+    getNonceLock(address) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.nonceTracker.getNonceLock(address);
+        });
+    }
+    /**
+     * Signs and returns the raw transaction data for provided transaction params list.
+     *
+     * @param listOfTxParams - The list of transaction params to approve.
+     * @returns The raw transactions.
+     */
+    approveTransactionsWithSameNonce(listOfTxParams = []) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (listOfTxParams.length === 0) {
+                return '';
+            }
+            const initialTx = listOfTxParams[0];
+            const common = this.getCommonConfiguration();
+            const initialTxAsEthTx = tx_1.TransactionFactory.fromTxData(initialTx, {
+                common,
+            });
+            const initialTxAsSerializedHex = (0, ethereumjs_util_1.bufferToHex)(initialTxAsEthTx.serialize());
+            if (this.inProcessOfSigning.has(initialTxAsSerializedHex)) {
+                return '';
+            }
+            this.inProcessOfSigning.add(initialTxAsSerializedHex);
+            let rawTransactions, nonceLock;
+            try {
+                // TODO: we should add a check to verify that all transactions have the same from address
+                const fromAddress = initialTx.from;
+                nonceLock = yield this.nonceTracker.getNonceLock(fromAddress);
+                const nonce = nonceLock.nextNonce;
+                rawTransactions = yield Promise.all(listOfTxParams.map((txParams) => {
+                    txParams.nonce = (0, ethereumjs_util_1.addHexPrefix)(nonce.toString(16));
+                    return this.signExternalTransaction(txParams);
+                }));
+            }
+            catch (err) {
+                (0, logger_1.projectLogger)('Error while signing transactions with same nonce', err);
+                // Must set transaction to submitted/failed before releasing lock
+                // continue with error chain
+                throw err;
+            }
+            finally {
+                if (nonceLock) {
+                    nonceLock.releaseLock();
+                }
+                this.inProcessOfSigning.delete(initialTxAsSerializedHex);
+            }
+            return rawTransactions;
+        });
+    }
+    /**
+     * Update a custodial transaction.
+     *
+     * @param transactionId - The ID of the transaction to update.
+     * @param options - The custodial transaction options to update.
+     * @param options.custodyStatus - The new custody status value to be assigned.
+     * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.
+     * @param options.hash - The new hash value to be assigned.
+     * @param options.status - The new status value to be assigned.
+     */
+    updateCustodialTransaction(transactionId, { custodyStatus, errorMessage, hash, status, }) {
+        let transactionMeta;
+        transactionMeta = this.getTransaction(transactionId);
+        if (!transactionMeta) {
+            throw new Error(`Cannot update custodial transaction as no transaction metadata found`);
+        }
+        if (!transactionMeta.custodyId) {
+            throw new Error('Transaction must be a custodian transaction');
+        }
+        if (status &&
+            ![
+                types_1.TransactionStatus.submitted,
+                types_1.TransactionStatus.signed,
+                types_1.TransactionStatus.failed,
+            ].includes(status)) {
+            throw new Error(`Cannot update custodial transaction with status: ${status}`);
+        }
+        if (status === types_1.TransactionStatus.signed) {
+            transactionMeta.status = status;
+        }
+        if (status === types_1.TransactionStatus.submitted) {
+            transactionMeta.submittedTime = new Date().getTime();
+            transactionMeta.status = status;
+        }
+        if (status === types_1.TransactionStatus.failed) {
+            transactionMeta = Object.assign(Object.assign({}, transactionMeta), { error: (0, utils_1.normalizeTxError)(new Error(errorMessage)), status: types_1.TransactionStatus.failed });
+        }
+        if (custodyStatus) {
+            transactionMeta.custodyStatus = custodyStatus;
+        }
+        if (hash) {
+            transactionMeta.hash = hash;
+        }
+        this.updateTransaction(transactionMeta, `TransactionController:updateCustodialTransaction - Custodial transaction updated`);
+    }
+    signExternalTransaction(transactionParams) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (!this.sign) {
+                throw new Error('No sign method defined.');
+            }
+            const normalizedTransactionParams = (0, utils_1.normalizeTxParams)(transactionParams);
+            const chainId = this.getChainId();
+            const type = (0, utils_1.isEIP1559Transaction)(normalizedTransactionParams)
+                ? types_1.TransactionEnvelopeType.feeMarket
+                : types_1.TransactionEnvelopeType.legacy;
+            const updatedTransactionParams = Object.assign(Object.assign({}, normalizedTransactionParams), { type, gasLimit: normalizedTransactionParams.gas, chainId });
+            const { from } = updatedTransactionParams;
+            const common = this.getCommonConfiguration();
+            const unsignedTransaction = tx_1.TransactionFactory.fromTxData(updatedTransactionParams, { common });
+            const signedTransaction = yield this.sign(unsignedTransaction, from);
+            const rawTransaction = (0, ethereumjs_util_1.bufferToHex)(signedTransaction.serialize());
+            return rawTransaction;
+        });
+    }
+    /**
+     * Removes unapproved transactions from state.
+     */
+    clearUnapprovedTransactions() {
+        const transactions = this.state.transactions.filter(({ status }) => status !== types_1.TransactionStatus.unapproved);
+        this.update({ transactions: this.trimTransactionsForState(transactions) });
+    }
+    addMetadata(transactionMeta) {
+        const { transactions } = this.state;
+        transactions.push(transactionMeta);
+        this.update({ transactions: this.trimTransactionsForState(transactions) });
+    }
+    updateGasProperties(transactionMeta) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const isEIP1559Compatible = yield this.getEIP1559Compatibility();
+            const chainId = this.getChainId();
+            yield (0, gas_1.updateGas)({
+                ethQuery: this.ethQuery,
+                providerConfig: this.getNetworkState().providerConfig,
+                txMeta: transactionMeta,
+            });
+            yield (0, gas_fees_1.updateGasFees)({
+                eip1559: isEIP1559Compatible,
+                ethQuery: this.ethQuery,
+                getSavedGasFees: this.getSavedGasFees.bind(this, chainId),
+                getGasFeeEstimates: this.getGasFeeEstimates.bind(this),
+                txMeta: transactionMeta,
+            });
+        });
+    }
+    getCurrentChainTransactionsByStatus(status) {
+        const chainId = this.getChainId();
+        return this.state.transactions.filter((transaction) => transaction.status === status && transaction.chainId === chainId);
+    }
+    onBootCleanup() {
+        this.createApprovalsForUnapprovedTransactions();
+        this.loadGasValuesForUnapprovedTransactions();
+        this.submitApprovedTransactions();
+    }
+    /**
+     * Create approvals for all unapproved transactions on current chain.
+     */
+    createApprovalsForUnapprovedTransactions() {
+        const unapprovedTransactions = this.getCurrentChainTransactionsByStatus(types_1.TransactionStatus.unapproved);
+        for (const transactionMeta of unapprovedTransactions) {
+            this.processApproval(transactionMeta, {
+                shouldShowRequest: false,
+            }).catch((error) => {
+                if ((error === null || error === void 0 ? void 0 : error.code) === rpc_errors_1.errorCodes.provider.userRejectedRequest) {
+                    return;
+                }
+                /* istanbul ignore next */
+                console.error('Error during persisted transaction approval', error);
+            });
+        }
+    }
+    /**
+     * Update the gas values of all unapproved transactions on current chain.
+     */
+    loadGasValuesForUnapprovedTransactions() {
+        return __awaiter(this, void 0, void 0, function* () {
+            const unapprovedTransactions = this.getCurrentChainTransactionsByStatus(types_1.TransactionStatus.unapproved);
+            const results = yield Promise.allSettled(unapprovedTransactions.map((transactionMeta) => __awaiter(this, void 0, void 0, function* () {
+                yield this.updateGasProperties(transactionMeta);
+                this.updateTransaction(transactionMeta, 'TransactionController:loadGasValuesForUnapprovedTransactions - Gas values updated');
+            })));
+            for (const [index, result] of results.entries()) {
+                if (result.status === 'rejected') {
+                    const transactionMeta = unapprovedTransactions[index];
+                    this.failTransaction(transactionMeta, result.reason);
+                    /* istanbul ignore next */
+                    console.error('Error while loading gas values for persisted transaction id: ', transactionMeta.id, result.reason);
+                }
+            }
+        });
+    }
+    /**
+     * Force to submit approved transactions on current chain.
+     */
+    submitApprovedTransactions() {
+        const approvedTransactions = this.getCurrentChainTransactionsByStatus(types_1.TransactionStatus.approved);
+        for (const transactionMeta of approvedTransactions) {
+            if (this.beforeApproveOnInit(transactionMeta)) {
+                this.approveTransaction(transactionMeta.id).catch((error) => {
+                    /* istanbul ignore next */
+                    console.error('Error while submitting persisted transaction', error);
+                });
+            }
+        }
+    }
+    processApproval(transactionMeta, { isExisting = false, requireApproval, shouldShowRequest = true, actionId, }) {
         return __awaiter(this, void 0, void 0, function* () {
             const transactionId = transactionMeta.id;
             let resultCallbacks;
@@ -695,17 +969,22 @@ class TransactionController extends base_controller_1.BaseController {
                     const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
                     if (!isTxCompleted) {
                         yield this.approveTransaction(transactionId);
+                        const updatedTransactionMeta = this.getTransaction(transactionId);
+                        this.hub.emit('transaction-approved', {
+                            transactionMeta: updatedTransactionMeta,
+                            actionId,
+                        });
                     }
                 }
                 catch (error) {
                     const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
                     if (!isTxCompleted) {
-                        if (error.code === rpc_errors_1.errorCodes.provider.userRejectedRequest) {
-                            this.cancelTransaction(transactionId);
-                            throw rpc_errors_1.providerErrors.userRejectedRequest('User rejected the transaction');
+                        if ((error === null || error === void 0 ? void 0 : error.code) === rpc_errors_1.errorCodes.provider.userRejectedRequest) {
+                            this.cancelTransaction(transactionId, actionId);
+                            throw rpc_errors_1.providerErrors.userRejectedRequest('MetaMask Tx Signature: User denied transaction signature.');
                         }
                         else {
-                            this.failTransaction(meta, error);
+                            this.failTransaction(meta, error, actionId);
                         }
                     }
                 }
@@ -715,10 +994,6 @@ class TransactionController extends base_controller_1.BaseController {
                 case types_1.TransactionStatus.failed:
                     resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(finalMeta.error);
                     throw rpc_errors_1.rpcErrors.internal(finalMeta.error.message);
-                case types_1.TransactionStatus.cancelled:
-                    const cancelError = rpc_errors_1.rpcErrors.internal('User cancelled the transaction');
-                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(cancelError);
-                    throw cancelError;
                 case types_1.TransactionStatus.submitted:
                     resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.success();
                     return finalMeta.hash;
@@ -757,6 +1032,10 @@ class TransactionController extends base_controller_1.BaseController {
                     this.failTransaction(transactionMeta, new Error('No chainId defined.'));
                     return;
                 }
+                if (this.inProcessOfSigning.has(transactionId)) {
+                    (0, logger_1.projectLogger)('Skipping approval as signing in progress', transactionId);
+                    return;
+                }
                 const { approved: status } = types_1.TransactionStatus;
                 let nonceToUse = nonce;
                 // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction
@@ -769,27 +1048,31 @@ class TransactionController extends base_controller_1.BaseController {
                 transactionMeta.txParams.nonce = nonceToUse;
                 transactionMeta.txParams.chainId = chainId;
                 const baseTxParams = Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas });
+                this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction approved');
                 const isEIP1559 = (0, utils_1.isEIP1559Transaction)(transactionMeta.txParams);
                 const txParams = isEIP1559
                     ? Object.assign(Object.assign({}, baseTxParams), { maxFeePerGas: transactionMeta.txParams.maxFeePerGas, maxPriorityFeePerGas: transactionMeta.txParams.maxPriorityFeePerGas, estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee, 
                         // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set
-                        type: 2 }) : baseTxParams;
+                        type: '2' }) : baseTxParams;
                 // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set
                 if (isEIP1559) {
                     delete txParams.gasPrice;
                 }
-                const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
-                const signedTx = yield this.sign(unsignedEthTx, from);
-                yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
-                transactionMeta.status = types_1.TransactionStatus.signed;
-                this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction signed');
-                const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-                transactionMeta.rawTx = rawTx;
-                this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - RawTransaction added');
-                const hash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTx]);
+                const rawTx = yield this.signTransaction(transactionMeta);
+                if (!this.beforePublish(transactionMeta)) {
+                    (0, logger_1.projectLogger)('Skipping publishing transaction based on hook');
+                    return;
+                }
+                if (!rawTx) {
+                    return;
+                }
+                const hash = yield this.publishTransaction(rawTx);
                 transactionMeta.hash = hash;
                 transactionMeta.status = types_1.TransactionStatus.submitted;
                 transactionMeta.submittedTime = new Date().getTime();
+                this.hub.emit('transaction-submitted', {
+                    transactionMeta,
+                });
                 this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction submitted');
                 this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
             }
@@ -797,6 +1080,7 @@ class TransactionController extends base_controller_1.BaseController {
                 this.failTransaction(transactionMeta, error);
             }
             finally {
+                this.inProcessOfSigning.delete(transactionId);
                 // must set transaction to submitted/failed before releasing lock
                 if (nonceLock) {
                     nonceLock.releaseLock();
@@ -805,19 +1089,29 @@ class TransactionController extends base_controller_1.BaseController {
             }
         });
     }
+    publishTransaction(rawTransaction) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTransaction]);
+        });
+    }
     /**
      * Cancels a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
      *
      * @param transactionId - The ID of the transaction to cancel.
+     * @param actionId - The actionId passed from UI
      */
-    cancelTransaction(transactionId) {
+    cancelTransaction(transactionId, actionId) {
         const transactionMeta = this.state.transactions.find(({ id }) => id === transactionId);
         if (!transactionMeta) {
             return;
         }
         transactionMeta.status = types_1.TransactionStatus.rejected;
         this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
+        this.hub.emit('transaction-rejected', {
+            transactionMeta,
+            actionId,
+        });
         const transactions = this.state.transactions.filter(({ id }) => id !== transactionId);
         this.update({ transactions: this.trimTransactionsForState(transactions) });
     }
@@ -866,8 +1160,7 @@ class TransactionController extends base_controller_1.BaseController {
     isFinalState(status) {
         return (status === types_1.TransactionStatus.rejected ||
             status === types_1.TransactionStatus.confirmed ||
-            status === types_1.TransactionStatus.failed ||
-            status === types_1.TransactionStatus.cancelled);
+            status === types_1.TransactionStatus.failed);
     }
     /**
      * Whether the transaction has at least completed all local processing.
@@ -877,92 +1170,12 @@ class TransactionController extends base_controller_1.BaseController {
      */
     isLocalFinalState(status) {
         return [
-            types_1.TransactionStatus.cancelled,
             types_1.TransactionStatus.confirmed,
             types_1.TransactionStatus.failed,
             types_1.TransactionStatus.rejected,
             types_1.TransactionStatus.submitted,
         ].includes(status);
     }
-    /**
-     * Method to verify the state of a transaction using the Blockchain as a source of truth.
-     *
-     * @param meta - The local transaction to verify on the blockchain.
-     * @returns A tuple containing the updated transaction, and whether or not an update was required.
-     */
-    blockchainTransactionStateReconciler(meta) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const { status, hash } = meta;
-            switch (status) {
-                case types_1.TransactionStatus.confirmed:
-                    const txReceipt = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionReceipt', [
-                        hash,
-                    ]);
-                    if (!txReceipt) {
-                        return [meta, false];
-                    }
-                    const txBlock = yield (0, controller_utils_1.query)(this.ethQuery, 'getBlockByHash', [
-                        txReceipt.blockHash,
-                    ]);
-                    meta.verifiedOnBlockchain = true;
-                    meta.txParams.gasUsed = txReceipt.gasUsed;
-                    meta.txReceipt = txReceipt;
-                    meta.baseFeePerGas = txBlock === null || txBlock === void 0 ? void 0 : txBlock.baseFeePerGas;
-                    meta.blockTimestamp = txBlock === null || txBlock === void 0 ? void 0 : txBlock.timestamp;
-                    // According to the Web3 docs:
-                    // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.
-                    if (Number(txReceipt.status) === 0) {
-                        const error = new Error('Transaction failed. The transaction was reversed');
-                        this.failTransaction(meta, error);
-                        return [meta, false];
-                    }
-                    return [meta, true];
-                case types_1.TransactionStatus.submitted:
-                    const txObj = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionByHash', [
-                        hash,
-                    ]);
-                    if (!txObj) {
-                        const receiptShowsFailedStatus = yield this.checkTxReceiptStatusIsFailed(hash);
-                        // Case the txObj is evaluated as false, a second check will
-                        // determine if the tx failed or it is pending or confirmed
-                        if (receiptShowsFailedStatus) {
-                            const error = new Error('Transaction failed. The transaction was dropped or replaced by a new one');
-                            this.failTransaction(meta, error);
-                        }
-                    }
-                    /* istanbul ignore next */
-                    if (txObj === null || txObj === void 0 ? void 0 : txObj.blockNumber) {
-                        meta.status = types_1.TransactionStatus.confirmed;
-                        this.hub.emit(`${meta.id}:confirmed`, meta);
-                        return [meta, true];
-                    }
-                    return [meta, false];
-                default:
-                    return [meta, false];
-            }
-        });
-    }
-    /**
-     * Method to check if a tx has failed according to their receipt
-     * According to the Web3 docs:
-     * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.
-     * The receipt is not available for pending transactions and returns null.
-     *
-     * @param txHash - The transaction hash.
-     * @returns Whether the transaction has failed.
-     */
-    checkTxReceiptStatusIsFailed(txHash) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const txReceipt = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionReceipt', [
-                txHash,
-            ]);
-            if (!txReceipt) {
-                // Transaction is pending
-                return false;
-            }
-            return Number(txReceipt.status) === 0;
-        });
-    }
     requestApproval(txMeta, { shouldShowRequest }) {
         return __awaiter(this, void 0, void 0, function* () {
             const id = this.getApprovalId(txMeta);
@@ -1134,6 +1347,9 @@ class TransactionController extends base_controller_1.BaseController {
      */
     setTransactionStatusDropped(transactionMeta) {
         transactionMeta.status = types_1.TransactionStatus.dropped;
+        this.hub.emit('transaction-dropped', {
+            transactionMeta,
+        });
         this.updateTransaction(transactionMeta, 'TransactionController#setTransactionStatusDropped - Transaction dropped');
     }
     /**
@@ -1182,6 +1398,39 @@ class TransactionController extends base_controller_1.BaseController {
             return (currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible);
         });
     }
+    addPendingTransactionTrackerListeners() {
+        this.pendingTransactionTracker.hub.on('transaction-confirmed', (transactionMeta) => {
+            this.hub.emit('transaction-confirmed', { transactionMeta });
+            this.hub.emit(`${transactionMeta.id}:confirmed`, transactionMeta);
+        });
+        this.pendingTransactionTracker.hub.on('transaction-dropped', this.setTransactionStatusDropped.bind(this));
+        this.pendingTransactionTracker.hub.on('transaction-failed', this.failTransaction.bind(this));
+        this.pendingTransactionTracker.hub.on('transaction-updated', this.updateTransaction.bind(this));
+    }
+    signTransaction(transactionMeta) {
+        var _a;
+        return __awaiter(this, void 0, void 0, function* () {
+            const { txParams } = transactionMeta;
+            const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
+            this.inProcessOfSigning.add(transactionMeta.id);
+            const signedTx = yield ((_a = this.sign) === null || _a === void 0 ? void 0 : _a.call(this, unsignedEthTx, txParams.from, ...this.getAdditionalSignArguments(transactionMeta)));
+            if (!signedTx) {
+                (0, logger_1.projectLogger)('Skipping signed status as no signed transaction');
+                return undefined;
+            }
+            if (!this.afterSign(transactionMeta, signedTx)) {
+                (0, logger_1.projectLogger)('Skipping signed status based on hook');
+                return undefined;
+            }
+            yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
+            transactionMeta.status = types_1.TransactionStatus.signed;
+            this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction signed');
+            const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
+            transactionMeta.rawTx = rawTx;
+            this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - RawTransaction added');
+            return rawTx;
+        });
+    }
 }
 exports.TransactionController = TransactionController;
 exports.default = TransactionController;
diff --git a/dist/TransactionController.js.map b/dist/TransactionController.js.map
deleted file mode 100644
index b4ead511ade2915c1cf256106e6737fb80ccdaf6..0000000000000000000000000000000000000000
--- a/dist/TransactionController.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hardfork, Common, type ChainConfig } from '@ethereumjs/common';\nimport type { TypedTransaction } from '@ethereumjs/tx';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  BNToHex,\n  fractionBN,\n  hexToBN,\n  safelyExecute,\n  query,\n  NetworkType,\n  RPC,\n  ApprovalType,\n  ORIGIN_METAMASK,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  BlockTracker,\n  NetworkState,\n  Provider,\n} from '@metamask/network-controller';\nimport { errorCodes, rpcErrors, providerErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport MethodRegistry from 'eth-method-registry';\nimport { addHexPrefix, bufferToHex } from 'ethereumjs-util';\nimport { EventEmitter } from 'events';\nimport { merge, pickBy } from 'lodash';\nimport NonceTracker from 'nonce-tracker';\nimport { v1 as random } from 'uuid';\n\nimport { EtherscanRemoteTransactionSource } from './EtherscanRemoteTransactionSource';\nimport { validateConfirmedExternalTransaction } from './external-transactions';\nimport { addInitialHistorySnapshot, updateTransactionHistory } from './history';\nimport { IncomingTransactionHelper } from './IncomingTransactionHelper';\nimport { determineTransactionType } from './transaction-type';\nimport type {\n  DappSuggestedGasFees,\n  TransactionParams,\n  TransactionMeta,\n  TransactionReceipt,\n  SendFlowHistoryEntry,\n  WalletDevice,\n} from './types';\nimport { TransactionType, TransactionStatus } from './types';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  getIncreasedPriceFromExisting,\n  normalizeTxParams,\n  isEIP1559Transaction,\n  isFeeMarketEIP1559Values,\n  isGasPriceValue,\n  validateGasValues,\n  validateIfTransactionUnapproved,\n  validateMinimumIncrease,\n  validateTxParams,\n  ESTIMATE_GAS_ERROR,\n} from './utils';\n\nexport const HARDFORK = Hardfork.London;\n\n/**\n * @type Result\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\nexport interface GasPriceValue {\n  gasPrice: string;\n}\n\nexport interface FeeMarketEIP1559Values {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n * @property interval - Polling interval used to fetch new currency rate\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\nexport interface TransactionConfig extends BaseConfig {\n  interval: number;\n  sign?: (txParams: TransactionParams, from: string) => Promise<any>;\n  txHistoryLimit: number;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport interface MethodData {\n  registryMethod: string;\n  parsedRegistryMethod: Record<string, unknown>;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\nexport interface TransactionState extends BaseState {\n  transactions: TransactionMeta[];\n  methodData: { [key: string]: MethodData };\n  lastFetchedBlockNumbers: { [key: string]: number };\n}\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\ntype AllowedActions = AddApprovalRequest;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  TransactionConfig,\n  TransactionState\n> {\n  private ethQuery: EthQuery;\n\n  private readonly isHistoryDisabled: boolean;\n\n  private readonly isSendFlowHistoryDisabled: boolean;\n\n  private readonly nonceTracker: NonceTracker;\n\n  private registry: any;\n\n  private readonly provider: Provider;\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private readonly mutex = new Mutex();\n\n  private readonly getNetworkState: () => NetworkState;\n\n  private readonly getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly messagingSystem: TransactionControllerMessenger;\n\n  private readonly incomingTransactionHelper: IncomingTransactionHelper;\n\n  private failTransaction(transactionMeta: TransactionMeta, error: Error) {\n    const newTransactionMeta = {\n      ...transactionMeta,\n      error,\n      status: TransactionStatus.failed,\n    };\n    this.updateTransaction(\n      newTransactionMeta,\n      'TransactionController#failTransaction - Add error message and set status to failed',\n    );\n    this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);\n  }\n\n  private async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TransactionController';\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Creates a TransactionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.blockTracker - The block tracker used to poll for new blocks data.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getSelectedAddress - Gets the address of the currently selected account.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.\n   * @param options.incomingTransactions.isEnabled - Whether or not incoming transaction retrieval is enabled.\n   * @param options.incomingTransactions.queryEntireHistory - Whether to initially query the entire transaction history or only recent blocks.\n   * @param options.incomingTransactions.updateTransactions - Whether to update local transactions using remote transaction data.\n   * @param options.messenger - The controller messenger.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.provider - The provider used to create the underlying EthQuery instance.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      blockTracker,\n      disableHistory,\n      disableSendFlowHistory,\n      getCurrentAccountEIP1559Compatibility,\n      getCurrentNetworkEIP1559Compatibility,\n      getNetworkState,\n      getSelectedAddress,\n      incomingTransactions = {},\n      messenger,\n      onNetworkStateChange,\n      provider,\n    }: {\n      blockTracker: BlockTracker;\n      disableHistory: boolean;\n      disableSendFlowHistory: boolean;\n      getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n      getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n      getNetworkState: () => NetworkState;\n      getSelectedAddress: () => string;\n      incomingTransactions: {\n        includeTokenTransfers?: boolean;\n        isEnabled?: () => boolean;\n        queryEntireHistory?: boolean;\n        updateTransactions?: boolean;\n      };\n      messenger: TransactionControllerMessenger;\n      onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n      provider: Provider;\n    },\n    config?: Partial<TransactionConfig>,\n    state?: Partial<TransactionState>,\n  ) {\n    super(config, state);\n\n    this.defaultConfig = {\n      interval: 15000,\n      txHistoryLimit: 40,\n    };\n\n    this.defaultState = {\n      methodData: {},\n      transactions: [],\n      lastFetchedBlockNumbers: {},\n    };\n\n    this.initialize();\n\n    this.provider = provider;\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    this.ethQuery = new EthQuery(provider);\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.registry = new MethodRegistry({ provider });\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility;\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n\n    this.nonceTracker = new NonceTracker({\n      provider,\n      blockTracker,\n      getPendingTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.submitted,\n          this.state.transactions,\n        ),\n      getConfirmedTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.confirmed,\n          this.state.transactions,\n        ),\n    });\n\n    this.incomingTransactionHelper = new IncomingTransactionHelper({\n      blockTracker,\n      getCurrentAccount: getSelectedAddress,\n      getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,\n      getNetworkState,\n      isEnabled: incomingTransactions.isEnabled,\n      queryEntireHistory: incomingTransactions.queryEntireHistory,\n      remoteTransactionSource: new EtherscanRemoteTransactionSource({\n        includeTokenTransfers: incomingTransactions.includeTokenTransfers,\n      }),\n      transactionLimit: this.config.txHistoryLimit,\n      updateTransactions: incomingTransactions.updateTransactions,\n    });\n\n    this.incomingTransactionHelper.hub.on(\n      'transactions',\n      this.onIncomingTransactions.bind(this),\n    );\n\n    this.incomingTransactionHelper.hub.on(\n      'updatedLastFetchedBlockNumbers',\n      this.onUpdatedLastFetchedBlockNumbers.bind(this),\n    );\n\n    onNetworkStateChange(() => {\n      this.ethQuery = new EthQuery(this.provider);\n      this.registry = new MethodRegistry({ provider: this.provider });\n    });\n\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - The polling interval used to fetch new transaction statuses.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.queryTransactionStatuses());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find(\n        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix,\n      );\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update({\n        methodData: { ...methodData, ...{ [fourBytePrefix]: registry } },\n      });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param opts - Additional options to control how the transaction is added.\n   * @param opts.actionId - Unique ID to prevent duplicate requests.\n   * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param opts.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param opts.securityAlertResponse - Response from security validator.\n   * @param opts.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    txParams: TransactionParams,\n    {\n      actionId,\n      deviceConfirmedOn,\n      origin,\n      requireApproval,\n      securityAlertResponse,\n      sendFlowHistory,\n      type,\n    }: {\n      actionId?: string;\n      deviceConfirmedOn?: WalletDevice;\n      origin?: string;\n      requireApproval?: boolean | undefined;\n      securityAlertResponse?: Record<string, unknown>;\n      sendFlowHistory?: SendFlowHistoryEntry[];\n      type?: TransactionType;\n    } = {},\n  ): Promise<Result> {\n    const chainId = this.getChainId();\n    const { transactions } = this.state;\n    txParams = normalizeTxParams(txParams);\n    const isEIP1559Compatible = await this.getEIP1559Compatibility();\n    validateTxParams(txParams, isEIP1559Compatible);\n\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin,\n    );\n\n    const transactionType =\n      type ?? (await determineTransactionType(txParams, this.ethQuery)).type;\n\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n    // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.\n    const transactionMeta: TransactionMeta = existingTransactionMeta || {\n      // Add actionId to txMeta to check if same actionId is seen again\n      actionId,\n      chainId,\n      dappSuggestedGasFees,\n      deviceConfirmedOn,\n      id: random(),\n      origin,\n      securityAlertResponse,\n      status: TransactionStatus.unapproved as TransactionStatus.unapproved,\n      time: Date.now(),\n      txParams,\n      userEditedGasLimit: false,\n      verifiedOnBlockchain: false,\n      type: transactionType,\n    };\n\n    try {\n      const { gas, estimateGasError } = await this.estimateGas(txParams);\n      txParams.gas = gas;\n      txParams.estimateGasError = estimateGasError;\n      transactionMeta.originalGasEstimate = gas;\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return Promise.reject(error);\n    }\n\n    // Checks if a transaction already exists with a given actionId\n    if (!existingTransactionMeta) {\n      if (!this.isSendFlowHistoryDisabled) {\n        transactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      // Initial history push\n      if (!this.isHistoryDisabled) {\n        addInitialHistorySnapshot(transactionMeta);\n      }\n      transactions.push(transactionMeta);\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n      this.hub.emit(`unapprovedTransaction`, transactionMeta);\n    }\n\n    return {\n      result: this.processApproval(transactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n      }),\n      transactionMeta,\n    };\n  }\n\n  startIncomingTransactionPolling() {\n    this.incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionPolling() {\n    this.incomingTransactionHelper.stop();\n  }\n\n  async updateIncomingTransactions() {\n    await this.incomingTransactionHelper.update();\n  }\n\n  /**\n   * Creates approvals for all unapproved transactions persisted.\n   */\n  initApprovals() {\n    const chainId = this.getChainId();\n    const unapprovedTxs = this.state.transactions.filter(\n      (transaction) =>\n        transaction.status === TransactionStatus.unapproved &&\n        transaction.chainId === chainId,\n    );\n\n    for (const txMeta of unapprovedTxs) {\n      this.processApproval(txMeta, {\n        shouldShowRequest: false,\n      }).catch((error) => {\n        /* istanbul ignore next */\n        console.error('Error during persisted transaction approval', error);\n      });\n    }\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    { estimatedBaseFee }: { estimatedBaseFee?: string } = {},\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.txParams.gasPrice,\n      CANCEL_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            from: transactionMeta.txParams.from,\n            gasLimit: transactionMeta.txParams.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n            nonce: transactionMeta.txParams.nonce,\n            to: transactionMeta.txParams.from,\n            value: '0x0',\n          }\n        : {\n            from: transactionMeta.txParams.from,\n            gasLimit: transactionMeta.txParams.gas,\n            gasPrice: newGasPrice,\n            nonce: transactionMeta.txParams.nonce,\n            to: transactionMeta.txParams.from,\n            value: '0x0',\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n    await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n    const rawTx = bufferToHex(signedTx.serialize());\n    await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n    transactionMeta.estimatedBaseFee = estimatedBaseFee;\n    transactionMeta.status = TransactionStatus.cancelled;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      actionId,\n      estimatedBaseFee,\n    }: { actionId?: string; estimatedBaseFee?: string } = {},\n  ) {\n    // If transaction is found for same action id, do not create a new speed up transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const { transactions } = this.state;\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.txParams.gasPrice,\n      SPEED_UP_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...transactionMeta.txParams,\n            gasLimit: transactionMeta.txParams.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n          }\n        : {\n            ...transactionMeta.txParams,\n            gasLimit: transactionMeta.txParams.gas,\n            gasPrice: newGasPrice,\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n    await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n    const rawTx = bufferToHex(signedTx.serialize());\n    const hash = await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n    const baseTransactionMeta = {\n      ...transactionMeta,\n      estimatedBaseFee,\n      id: random(),\n      time: Date.now(),\n      hash,\n      actionId,\n      originalGasEstimate: transactionMeta.txParams.gas,\n      type: TransactionType.retry,\n    };\n    const newTransactionMeta =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...baseTransactionMeta,\n            txParams: {\n              ...transactionMeta.txParams,\n              maxFeePerGas: newMaxFeePerGas,\n              maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            },\n          }\n        : {\n            ...baseTransactionMeta,\n            txParams: {\n              ...transactionMeta.txParams,\n              gasPrice: newGasPrice,\n            },\n          };\n    transactions.push(newTransactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(transaction: TransactionParams) {\n    const estimatedTransaction = { ...transaction };\n    const {\n      gas,\n      gasPrice: providedGasPrice,\n      to,\n      value,\n      data,\n    } = estimatedTransaction;\n    const gasPrice =\n      typeof providedGasPrice === 'undefined'\n        ? await query(this.ethQuery, 'gasPrice')\n        : providedGasPrice;\n    const { providerConfig } = this.getNetworkState();\n    const isCustomNetwork = providerConfig.type === NetworkType.rpc;\n    // 1. If gas is already defined on the transaction, use it\n    if (typeof gas !== 'undefined') {\n      return { gas, gasPrice };\n    }\n    const { gasLimit } = await query(this.ethQuery, 'getBlockByNumber', [\n      'latest',\n      false,\n    ]);\n\n    // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.\n    // If the network is a custom network then bypass this check and fetch 'estimateGas'.\n    /* istanbul ignore next */\n    const code = to ? await query(this.ethQuery, 'getCode', [to]) : undefined;\n    /* istanbul ignore next */\n    if (\n      !isCustomNetwork &&\n      (!to || (to && !data && (!code || code === '0x')))\n    ) {\n      return { gas: '0x5208', gasPrice };\n    }\n\n    // if data, should be hex string format\n    estimatedTransaction.data = !data\n      ? data\n      : /* istanbul ignore next */ addHexPrefix(data);\n\n    // 3. If this is a contract address, safely estimate gas using RPC\n    estimatedTransaction.value =\n      typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n    const gasLimitBN = hexToBN(gasLimit);\n    estimatedTransaction.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n\n    let gasHex;\n    let estimateGasError;\n    try {\n      gasHex = await query(this.ethQuery, 'estimateGas', [\n        estimatedTransaction,\n      ]);\n    } catch (error) {\n      estimateGasError = ESTIMATE_GAS_ERROR;\n    }\n    // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a\n    // a custom network then return the eth_estimateGas value.\n    const gasBN = hexToBN(gasHex);\n    const maxGasBN = gasLimitBN.muln(0.9);\n    const paddedGasBN = gasBN.muln(1.5);\n    /* istanbul ignore next */\n    if (gasBN.gt(maxGasBN) || isCustomNetwork) {\n      return { gas: addHexPrefix(gasHex), gasPrice, estimateGasError };\n    }\n\n    /* istanbul ignore next */\n    if (paddedGasBN.lt(maxGasBN)) {\n      return {\n        gas: addHexPrefix(BNToHex(paddedGasBN)),\n        gasPrice,\n        estimateGasError,\n      };\n    }\n    return { gas: addHexPrefix(BNToHex(maxGasBN)), gasPrice, estimateGasError };\n  }\n\n  /**\n   * Check the status of submitted transactions on the network to determine whether they have\n   * been included in a block. Any that have been included in a block are marked as confirmed.\n   */\n  async queryTransactionStatuses() {\n    const { transactions } = this.state;\n    const currentChainId = this.getChainId();\n    let gotUpdates = false;\n    await safelyExecute(() =>\n      Promise.all(\n        transactions.map(async (meta, index) => {\n          if (!meta.verifiedOnBlockchain && meta.chainId === currentChainId) {\n            const [reconciledTx, updateRequired] =\n              await this.blockchainTransactionStateReconciler(meta);\n            if (updateRequired) {\n              transactions[index] = reconciledTx;\n              gotUpdates = updateRequired;\n            }\n          }\n        }),\n      ),\n    );\n\n    /* istanbul ignore else */\n    if (gotUpdates) {\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n    }\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta: TransactionMeta, note: string) {\n    const { transactions } = this.state;\n    transactionMeta.txParams = normalizeTxParams(transactionMeta.txParams);\n    validateTxParams(transactionMeta.txParams);\n    if (!this.isHistoryDisabled) {\n      updateTransactionHistory(transactionMeta, note);\n    }\n    const index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n    transactions[index] = transactionMeta;\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Removes all transactions from state, optionally based on the current network.\n   *\n   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the\n   * current network. If `true`, all transactions are wiped.\n   * @param address - If specified, only transactions originating from this address will be\n   * wiped on current network.\n   */\n  wipeTransactions(ignoreNetwork?: boolean, address?: string) {\n    /* istanbul ignore next */\n    if (ignoreNetwork && !address) {\n      this.update({ transactions: [] });\n      return;\n    }\n    const currentChainId = this.getChainId();\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId, txParams }) => {\n        const isMatchingNetwork = ignoreNetwork || chainId === currentChainId;\n\n        if (!isMatchingNetwork) {\n          return true;\n        }\n\n        const isMatchingAddress =\n          !address || txParams.from?.toLowerCase() === address.toLowerCase();\n\n        return !isMatchingAddress;\n      },\n    );\n\n    this.update({\n      transactions: this.trimTransactionsForState(newTransactions),\n    });\n  }\n\n  startIncomingTransactionProcessing() {\n    this.incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionProcessing() {\n    this.incomingTransactionHelper.stop();\n  }\n\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(\n    transactionMeta: TransactionMeta,\n    transactionReceipt: TransactionReceipt,\n    baseFeePerGas: Hex,\n  ) {\n    // Run validation and add external transaction to state.\n    this.addExternalTransaction(transactionMeta);\n\n    try {\n      const transactionId = transactionMeta.id;\n\n      // Make sure status is confirmed and define gasUsed as in receipt.\n      transactionMeta.status = TransactionStatus.confirmed;\n      transactionMeta.txReceipt = transactionReceipt;\n      if (baseFeePerGas) {\n        transactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      // Update same nonce local transactions as dropped and define replacedBy properties.\n      this.markNonceDuplicatesDropped(transactionId);\n\n      // Update external provided transaction with updated gas values and confirmed status.\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController:confirmExternalTransaction - Add external transaction',\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(\n    transactionID: string,\n    currentSendFlowHistoryLength: number,\n    sendFlowHistoryToAdd: SendFlowHistoryEntry[],\n  ): TransactionMeta {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        'Send flow history is disabled for the current transaction controller',\n      );\n    }\n\n    const transactionMeta = this.getTransaction(transactionID);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionSendFlowHistory',\n    );\n\n    if (\n      currentSendFlowHistoryLength ===\n      (transactionMeta?.sendFlowHistory?.length || 0)\n    ) {\n      transactionMeta.sendFlowHistory = [\n        ...(transactionMeta?.sendFlowHistory ?? []),\n        ...sendFlowHistoryToAdd,\n      ];\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController:updateTransactionSendFlowHistory - sendFlowHistory updated',\n      );\n    }\n\n    return this.getTransaction(transactionID) as TransactionMeta;\n  }\n\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(\n    transactionId: string,\n    {\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      gas,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    }: {\n      defaultGasEstimates?: string;\n      estimateUsed?: string;\n      estimateSuggested?: string;\n      gas?: string;\n      gasLimit?: string;\n      gasPrice?: string;\n      maxPriorityFeePerGas?: string;\n      maxFeePerGas?: string;\n      originalGasEstimate?: string;\n      userEditedGasLimit?: boolean;\n      userFeeLevel?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionGasFees',\n    );\n\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    } as any;\n\n    // only update what is defined\n    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);\n    transactionGasFees = pickBy(transactionGasFees);\n\n    // merge updated gas values with existing transaction meta\n    const updatedMeta = merge(transactionMeta, transactionGasFees);\n\n    this.updateTransaction(\n      updatedMeta,\n      'TransactionController:updateTransactionGasFees - gas values updated',\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n    {\n      isExisting = false,\n      requireApproval,\n      shouldShowRequest = true,\n    }: {\n      isExisting?: boolean;\n      requireApproval?: boolean | undefined;\n      shouldShowRequest?: boolean;\n    },\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted\n      ? Promise.resolve(meta)\n      : this.waitForTransactionFinished(transactionId);\n\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.requestApproval(transactionMeta, {\n            shouldShowRequest,\n          });\n          resultCallbacks = acceptResult.resultCallbacks;\n        }\n\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n\n        if (!isTxCompleted) {\n          await this.approveTransaction(transactionId);\n        }\n      } catch (error: any) {\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error.code === errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId);\n\n            throw providerErrors.userRejectedRequest(\n              'User rejected the transaction',\n            );\n          } else {\n            this.failTransaction(meta, error);\n          }\n        }\n      }\n    }\n\n    const finalMeta = await finishedPromise;\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw rpcErrors.internal(finalMeta.error.message);\n\n      case TransactionStatus.cancelled:\n        const cancelError = rpcErrors.internal(\n          'User cancelled the transaction',\n        );\n\n        resultCallbacks?.error(cancelError);\n        throw cancelError;\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.hash as string;\n\n      default:\n        const internalError = rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   */\n  private async approveTransaction(transactionId: string) {\n    const { transactions } = this.state;\n    const releaseLock = await this.mutex.acquire();\n    const chainId = this.getChainId();\n    const index = transactions.findIndex(({ id }) => transactionId === id);\n    const transactionMeta = transactions[index];\n    const {\n      txParams: { nonce, from },\n    } = transactionMeta;\n    let nonceLock;\n    try {\n      if (!this.sign) {\n        releaseLock();\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return;\n      } else if (!chainId) {\n        releaseLock();\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return;\n      }\n\n      const { approved: status } = TransactionStatus;\n      let nonceToUse = nonce;\n      // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction\n      // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce\n      if (!nonceToUse) {\n        nonceLock = await this.nonceTracker.getNonceLock(from);\n        nonceToUse = addHexPrefix(nonceLock.nextNonce.toString(16));\n      }\n\n      transactionMeta.status = status;\n      transactionMeta.txParams.nonce = nonceToUse;\n      transactionMeta.txParams.chainId = chainId;\n\n      const baseTxParams = {\n        ...transactionMeta.txParams,\n        gasLimit: transactionMeta.txParams.gas,\n      };\n\n      const isEIP1559 = isEIP1559Transaction(transactionMeta.txParams);\n\n      const txParams = isEIP1559\n        ? {\n            ...baseTxParams,\n            maxFeePerGas: transactionMeta.txParams.maxFeePerGas,\n            maxPriorityFeePerGas: transactionMeta.txParams.maxPriorityFeePerGas,\n            estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee,\n            // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set\n            type: 2,\n          }\n        : baseTxParams;\n\n      // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set\n      if (isEIP1559) {\n        delete txParams.gasPrice;\n      }\n\n      const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n      const signedTx = await this.sign(unsignedEthTx, from);\n      await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n      transactionMeta.status = TransactionStatus.signed;\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - Transaction signed',\n      );\n\n      const rawTx = bufferToHex(signedTx.serialize());\n      transactionMeta.rawTx = rawTx;\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - RawTransaction added',\n      );\n      const hash = await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n      transactionMeta.hash = hash;\n      transactionMeta.status = TransactionStatus.submitted;\n      transactionMeta.submittedTime = new Date().getTime();\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - Transaction submitted',\n      );\n      this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n    } finally {\n      // must set transaction to submitted/failed before releasing lock\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      releaseLock();\n    }\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   */\n  private cancelTransaction(transactionId: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    transactionMeta.status = TransactionStatus.rejected;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    const transactions = this.state.transactions.filter(\n      ({ id }) => id !== transactionId,\n    );\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for transactions of the same\n   * nonce, same day and network combo can result in confusing or broken experiences\n   * in the UI. The transactions are then updated using the BaseController update.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n\n    const txsToKeep = transactions\n      .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order\n      .filter((tx) => {\n        const { chainId, status, txParams, time } = tx;\n\n        if (txParams) {\n          const key = `${txParams.nonce}-${convertHexToDecimal(\n            chainId,\n          )}-${new Date(time).toDateString()}`;\n\n          if (nonceNetworkSet.has(key)) {\n            return true;\n          } else if (\n            nonceNetworkSet.size < this.config.txHistoryLimit ||\n            !this.isFinalState(status)\n          ) {\n            nonceNetworkSet.add(key);\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n    txsToKeep.reverse(); // Ascending time order\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed ||\n      status === TransactionStatus.cancelled\n    );\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.cancelled,\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  /**\n   * Method to verify the state of a transaction using the Blockchain as a source of truth.\n   *\n   * @param meta - The local transaction to verify on the blockchain.\n   * @returns A tuple containing the updated transaction, and whether or not an update was required.\n   */\n  private async blockchainTransactionStateReconciler(\n    meta: TransactionMeta,\n  ): Promise<[TransactionMeta, boolean]> {\n    const { status, hash } = meta;\n    switch (status) {\n      case TransactionStatus.confirmed:\n        const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n          hash,\n        ]);\n\n        if (!txReceipt) {\n          return [meta, false];\n        }\n\n        const txBlock = await query(this.ethQuery, 'getBlockByHash', [\n          txReceipt.blockHash,\n        ]);\n\n        meta.verifiedOnBlockchain = true;\n        meta.txParams.gasUsed = txReceipt.gasUsed;\n        meta.txReceipt = txReceipt;\n        meta.baseFeePerGas = txBlock?.baseFeePerGas;\n        meta.blockTimestamp = txBlock?.timestamp;\n\n        // According to the Web3 docs:\n        // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n        if (Number(txReceipt.status) === 0) {\n          const error: Error = new Error(\n            'Transaction failed. The transaction was reversed',\n          );\n          this.failTransaction(meta, error);\n          return [meta, false];\n        }\n\n        return [meta, true];\n      case TransactionStatus.submitted:\n        const txObj = await query(this.ethQuery, 'getTransactionByHash', [\n          hash,\n        ]);\n\n        if (!txObj) {\n          const receiptShowsFailedStatus =\n            await this.checkTxReceiptStatusIsFailed(hash);\n\n          // Case the txObj is evaluated as false, a second check will\n          // determine if the tx failed or it is pending or confirmed\n          if (receiptShowsFailedStatus) {\n            const error: Error = new Error(\n              'Transaction failed. The transaction was dropped or replaced by a new one',\n            );\n            this.failTransaction(meta, error);\n          }\n        }\n\n        /* istanbul ignore next */\n        if (txObj?.blockNumber) {\n          meta.status = TransactionStatus.confirmed;\n          this.hub.emit(`${meta.id}:confirmed`, meta);\n          return [meta, true];\n        }\n\n        return [meta, false];\n      default:\n        return [meta, false];\n    }\n  }\n\n  /**\n   * Method to check if a tx has failed according to their receipt\n   * According to the Web3 docs:\n   * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n   * The receipt is not available for pending transactions and returns null.\n   *\n   * @param txHash - The transaction hash.\n   * @returns Whether the transaction has failed.\n   */\n  private async checkTxReceiptStatusIsFailed(\n    txHash: string | undefined,\n  ): Promise<boolean> {\n    const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n      txHash,\n    ]);\n    if (!txReceipt) {\n      // Transaction is pending\n      return false;\n    }\n    return Number(txReceipt.status) === 0;\n  }\n\n  private async requestApproval(\n    txMeta: TransactionMeta,\n    { shouldShowRequest }: { shouldShowRequest: boolean },\n  ): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      shouldShowRequest,\n    )) as Promise<AddResult>;\n  }\n\n  private getTransaction(transactionId: string): TransactionMeta | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  private isTransactionCompleted(transactionId: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionId);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n\n  private getChainId(): Hex {\n    const { providerConfig } = this.getNetworkState();\n    return providerConfig.chainId;\n  }\n\n  private prepareUnsignedEthTx(\n    txParams: Record<string, unknown>,\n  ): TypedTransaction {\n    return TransactionFactory.fromTxData(txParams, {\n      common: this.getCommonConfiguration(),\n      freeze: false,\n    });\n  }\n\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @returns common configuration object\n   */\n  private getCommonConfiguration(): Common {\n    const {\n      providerConfig: { type: chain, chainId, nickname: name },\n    } = this.getNetworkState();\n\n    if (\n      chain !== RPC &&\n      chain !== NetworkType['linea-goerli'] &&\n      chain !== NetworkType['linea-mainnet']\n    ) {\n      return new Common({ chain, hardfork: HARDFORK });\n    }\n\n    const customChainParams: Partial<ChainConfig> = {\n      name,\n      chainId: parseInt(chainId, 16),\n      defaultHardfork: HARDFORK,\n    };\n\n    return Common.custom(customChainParams);\n  }\n\n  private onIncomingTransactions({\n    added,\n    updated,\n  }: {\n    added: TransactionMeta[];\n    updated: TransactionMeta[];\n  }) {\n    const { transactions: currentTransactions } = this.state;\n\n    const updatedTransactions = [\n      ...added,\n      ...currentTransactions.map((originalTransaction) => {\n        const updatedTransaction = updated.find(\n          ({ hash }) => hash === originalTransaction.hash,\n        );\n\n        return updatedTransaction ?? originalTransaction;\n      }),\n    ];\n\n    this.update({\n      transactions: this.trimTransactionsForState(updatedTransactions),\n    });\n  }\n\n  private onUpdatedLastFetchedBlockNumbers({\n    lastFetchedBlockNumbers,\n    blockNumber,\n  }: {\n    lastFetchedBlockNumbers: {\n      [key: string]: number;\n    };\n    blockNumber: number;\n  }) {\n    this.update({ lastFetchedBlockNumbers });\n    this.hub.emit('incomingTransactionBlock', blockNumber);\n  }\n\n  private generateDappSuggestedGasFees(\n    txParams: TransactionParams,\n    origin?: string,\n  ): DappSuggestedGasFees | undefined {\n    if (!origin || origin === ORIGIN_METAMASK) {\n      return undefined;\n    }\n\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n\n    if (\n      gasPrice === undefined &&\n      maxFeePerGas === undefined &&\n      maxPriorityFeePerGas === undefined &&\n      gas === undefined\n    ) {\n      return undefined;\n    }\n\n    const dappSuggestedGasFees: DappSuggestedGasFees = {};\n\n    if (gasPrice !== undefined) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (\n      maxFeePerGas !== undefined ||\n      maxPriorityFeePerGas !== undefined\n    ) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    if (gas !== undefined) {\n      dappSuggestedGasFees.gas = gas;\n    }\n\n    return dappSuggestedGasFees;\n  }\n\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   */\n  private async addExternalTransaction(transactionMeta: TransactionMeta) {\n    const chainId = this.getChainId();\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === fromAddress &&\n        transaction.chainId === chainId,\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.confirmed,\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    );\n\n    validateConfirmedExternalTransaction(\n      transactionMeta,\n      confirmedTxs,\n      pendingTxs,\n    );\n\n    // Make sure provided external transaction has non empty history array\n    if (!(transactionMeta.history ?? []).length) {\n      if (!this.isHistoryDisabled) {\n        addInitialHistorySnapshot(transactionMeta);\n      }\n    }\n\n    const updatedTransactions = [...transactions, transactionMeta];\n    this.update({\n      transactions: this.trimTransactionsForState(updatedTransactions),\n    });\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  private markNonceDuplicatesDropped(transactionId: string) {\n    const chainId = this.getChainId();\n    const transactionMeta = this.getTransaction(transactionId);\n    const nonce = transactionMeta?.txParams?.nonce;\n    const from = transactionMeta?.txParams?.from;\n    const sameNonceTxs = this.state.transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === from &&\n        transaction.txParams.nonce === nonce &&\n        transaction.chainId === chainId,\n    );\n\n    if (!sameNonceTxs.length) {\n      return;\n    }\n\n    // Mark all same nonce transactions as dropped and give it a replacedBy hash\n    for (const transaction of sameNonceTxs) {\n      if (transaction.id === transactionId) {\n        continue;\n      }\n      transaction.replacedBy = transactionMeta?.hash;\n      transaction.replacedById = transactionMeta?.id;\n      // Drop any transaction that wasn't previously failed (off chain failure)\n      if (transaction.status !== TransactionStatus.failed) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  private setTransactionStatusDropped(transactionMeta: TransactionMeta) {\n    transactionMeta.status = TransactionStatus.dropped;\n    this.updateTransaction(\n      transactionMeta,\n      'TransactionController#setTransactionStatusDropped - Transaction dropped',\n    );\n  }\n\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  private getTransactionWithActionId(actionId?: string) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId,\n    );\n  }\n\n  private async waitForTransactionFinished(\n    transactionId: string,\n  ): Promise<TransactionMeta> {\n    return new Promise((resolve) => {\n      this.hub.once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   */\n  private async updateTransactionMetaRSV(\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ): Promise<void> {\n    if (signedTx.r) {\n      transactionMeta.r = addHexPrefix(signedTx.r.toString(16));\n    }\n\n    if (signedTx.s) {\n      transactionMeta.s = addHexPrefix(signedTx.s.toString(16));\n    }\n\n    if (signedTx.v) {\n      transactionMeta.v = addHexPrefix(signedTx.v.toString(16));\n    }\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n}\n\nexport default TransactionController;\n"]}
\ No newline at end of file
diff --git a/dist/constants.d.ts b/dist/constants.d.ts
index fff2c5c449987750f13101aeba08b7d974ed0f5d..40dad30f368e4f1fa2f38856032c3b7c8335b9bd 100644
--- a/dist/constants.d.ts
+++ b/dist/constants.d.ts
@@ -1,4 +1,3 @@
-import { TransactionType } from './types';
 export declare const CHAIN_IDS: {
     readonly MAINNET: "0x1";
     readonly GOERLI: "0x5";
@@ -19,6 +18,8 @@ export declare const CHAIN_IDS: {
     readonly MOONBEAM_TESTNET: "0x507";
     readonly MOONRIVER: "0x505";
     readonly GNOSIS: "0x64";
+    readonly ARBITRUM: "0xa4b1";
+    readonly ZKSYNC_ERA: "0x144";
 };
 export declare const DEFAULT_ETHERSCAN_DOMAIN = "etherscan.io";
 export declare const DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = "api";
@@ -100,6 +101,4 @@ export declare const ETHERSCAN_SUPPORTED_NETWORKS: {
         subdomain: string;
     };
 };
-export declare const SWAP_TRANSACTION_TYPES: TransactionType[];
-export declare const VALID_UNAPPROVED_TRANSACTION_TYPES: TransactionType[];
 //# sourceMappingURL=constants.d.ts.map
\ No newline at end of file
diff --git a/dist/constants.d.ts.map b/dist/constants.d.ts.map
deleted file mode 100644
index 7fe8678b5c15d4e8452f4cf0e1edc4ca15586e90..0000000000000000000000000000000000000000
--- a/dist/constants.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"constants.d.ts","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE1C,eAAO,MAAM,SAAS;;;;;;;;;;;;;;;;;;;;CAoBZ,CAAC;AAEX,eAAO,MAAM,wBAAwB,iBAAiB,CAAC;AACvD,eAAO,MAAM,kCAAkC,QAAQ,CAAC;AAExD,eAAO,MAAM,4BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6ExC,CAAC;AAEF,eAAO,MAAM,sBAAsB,mBAGlC,CAAC;AAIF,eAAO,MAAM,kCAAkC,mBAM9C,CAAC"}
\ No newline at end of file
diff --git a/dist/constants.js b/dist/constants.js
index 3a2ead9cbe284b1ed770fa65043f96d489862df3..e5928151a263e8b1fca3c696f064c483449d8da4 100644
--- a/dist/constants.js
+++ b/dist/constants.js
@@ -1,7 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.VALID_UNAPPROVED_TRANSACTION_TYPES = exports.SWAP_TRANSACTION_TYPES = exports.ETHERSCAN_SUPPORTED_NETWORKS = exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = exports.DEFAULT_ETHERSCAN_DOMAIN = exports.CHAIN_IDS = void 0;
-const types_1 = require("./types");
+exports.ETHERSCAN_SUPPORTED_NETWORKS = exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = exports.DEFAULT_ETHERSCAN_DOMAIN = exports.CHAIN_IDS = void 0;
 exports.CHAIN_IDS = {
     MAINNET: '0x1',
     GOERLI: '0x5',
@@ -22,6 +21,8 @@ exports.CHAIN_IDS = {
     MOONBEAM_TESTNET: '0x507',
     MOONRIVER: '0x505',
     GNOSIS: '0x64',
+    ARBITRUM: '0xa4b1',
+    ZKSYNC_ERA: '0x144',
 };
 exports.DEFAULT_ETHERSCAN_DOMAIN = 'etherscan.io';
 exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = 'api';
@@ -103,17 +104,4 @@ exports.ETHERSCAN_SUPPORTED_NETWORKS = {
         subdomain: `${exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`,
     },
 };
-exports.SWAP_TRANSACTION_TYPES = [
-    types_1.TransactionType.swap,
-    types_1.TransactionType.swapApproval,
-];
-// Only certain types of transactions should be allowed to be specified when
-// adding a new unapproved transaction.
-exports.VALID_UNAPPROVED_TRANSACTION_TYPES = [
-    ...exports.SWAP_TRANSACTION_TYPES,
-    types_1.TransactionType.simpleSend,
-    types_1.TransactionType.tokenMethodTransfer,
-    types_1.TransactionType.tokenMethodTransferFrom,
-    types_1.TransactionType.contractInteraction,
-];
 //# sourceMappingURL=constants.js.map
\ No newline at end of file
diff --git a/dist/constants.js.map b/dist/constants.js.map
deleted file mode 100644
index 8e7d44418431f9848406325f9e49aa36d94d1ee1..0000000000000000000000000000000000000000
--- a/dist/constants.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransactionType } from './types';\n\nexport const CHAIN_IDS = {\n  MAINNET: '0x1',\n  GOERLI: '0x5',\n  BSC: '0x38',\n  BSC_TESTNET: '0x61',\n  OPTIMISM: '0xa',\n  OPTIMISM_TESTNET: '0x1a4',\n  POLYGON: '0x89',\n  POLYGON_TESTNET: '0x13881',\n  AVALANCHE: '0xa86a',\n  AVALANCHE_TESTNET: '0xa869',\n  FANTOM: '0xfa',\n  FANTOM_TESTNET: '0xfa2',\n  SEPOLIA: '0xaa36a7',\n  LINEA_GOERLI: '0xe704',\n  LINEA_MAINNET: '0xe708',\n  MOONBEAM: '0x504',\n  MOONBEAM_TESTNET: '0x507',\n  MOONRIVER: '0x505',\n  GNOSIS: '0x64',\n} as const;\n\nexport const DEFAULT_ETHERSCAN_DOMAIN = 'etherscan.io';\nexport const DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = 'api';\n\nexport const ETHERSCAN_SUPPORTED_NETWORKS = {\n  [CHAIN_IDS.GOERLI]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`,\n  },\n  [CHAIN_IDS.MAINNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.SEPOLIA]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`,\n  },\n  [CHAIN_IDS.LINEA_GOERLI]: {\n    domain: 'lineascan.build',\n    subdomain: 'goerli',\n  },\n  [CHAIN_IDS.LINEA_MAINNET]: {\n    domain: 'lineascan.build',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.BSC]: {\n    domain: 'bscscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.BSC_TESTNET]: {\n    domain: 'bscscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.OPTIMISM]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`,\n  },\n  [CHAIN_IDS.OPTIMISM_TESTNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli-optimistic`,\n  },\n  [CHAIN_IDS.POLYGON]: {\n    domain: 'polygonscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.POLYGON_TESTNET]: {\n    domain: 'polygonscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`,\n  },\n  [CHAIN_IDS.AVALANCHE]: {\n    domain: 'snowtrace.io',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.AVALANCHE_TESTNET]: {\n    domain: 'snowtrace.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.FANTOM]: {\n    domain: 'ftmscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.FANTOM_TESTNET]: {\n    domain: 'ftmscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.MOONBEAM]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`,\n  },\n  [CHAIN_IDS.MOONBEAM_TESTNET]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`,\n  },\n  [CHAIN_IDS.MOONRIVER]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`,\n  },\n  [CHAIN_IDS.GNOSIS]: {\n    domain: 'gnosisscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`,\n  },\n};\n\nexport const SWAP_TRANSACTION_TYPES = [\n  TransactionType.swap,\n  TransactionType.swapApproval,\n];\n\n// Only certain types of transactions should be allowed to be specified when\n// adding a new unapproved transaction.\nexport const VALID_UNAPPROVED_TRANSACTION_TYPES = [\n  ...SWAP_TRANSACTION_TYPES,\n  TransactionType.simpleSend,\n  TransactionType.tokenMethodTransfer,\n  TransactionType.tokenMethodTransferFrom,\n  TransactionType.contractInteraction,\n];\n"]}
\ No newline at end of file
diff --git a/dist/etherscan.d.ts b/dist/etherscan.d.ts
deleted file mode 100644
index 4a63542389a6c41ccef6af100710bee9cd347d4c..0000000000000000000000000000000000000000
--- a/dist/etherscan.d.ts
+++ /dev/null
@@ -1,64 +0,0 @@
-import type { Hex } from '@metamask/utils';
-export interface EtherscanTransactionMetaBase {
-    blockNumber: string;
-    blockHash: string;
-    confirmations: string;
-    contractAddress: string;
-    cumulativeGasUsed: string;
-    from: string;
-    gas: string;
-    gasPrice: string;
-    gasUsed: string;
-    hash: string;
-    nonce: string;
-    timeStamp: string;
-    to: string;
-    transactionIndex: string;
-    value: string;
-}
-export interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {
-    functionName: string;
-    input: string;
-    isError: string;
-    methodId: string;
-    txreceipt_status: string;
-}
-export interface EtherscanTokenTransactionMeta extends EtherscanTransactionMetaBase {
-    tokenDecimal: string;
-    tokenName: string;
-    tokenSymbol: string;
-}
-export interface EtherscanTransactionResponse<T extends EtherscanTransactionMetaBase> {
-    status: '0' | '1';
-    message?: string;
-    result: string | T[];
-}
-export interface EtherscanTransactionRequest {
-    address: string;
-    chainId: Hex;
-    fromBlock?: number;
-    limit?: number;
-}
-/**
- * Retrieves transaction data from Etherscan.
- *
- * @param request - Configuration required to fetch transactions.
- * @param request.address - Address to retrieve transactions for.
- * @param request.chainId - Current chain ID used to determine subdomain and domain.
- * @param request.fromBlock - Block number to start fetching transactions from.
- * @param request.limit - Number of transactions to retrieve.
- * @returns An Etherscan response object containing the request status and an array of token transaction data.
- */
-export declare function fetchEtherscanTransactions({ address, chainId, fromBlock, limit, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTransactionMeta>>;
-/**
- * Retrieves token transaction data from Etherscan.
- *
- * @param request - Configuration required to fetch token transactions.
- * @param request.address - Address to retrieve token transactions for.
- * @param request.chainId - Current chain ID used to determine subdomain and domain.
- * @param request.fromBlock - Block number to start fetching token transactions from.
- * @param request.limit - Number of token transactions to retrieve.
- * @returns An Etherscan response object containing the request status and an array of token transaction data.
- */
-export declare function fetchEtherscanTokenTransactions({ address, chainId, fromBlock, limit, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTokenTransactionMeta>>;
-//# sourceMappingURL=etherscan.d.ts.map
\ No newline at end of file
diff --git a/dist/etherscan.d.ts.map b/dist/etherscan.d.ts.map
deleted file mode 100644
index 089ab8f0849458b29fb09eac3971841a758bf5f6..0000000000000000000000000000000000000000
--- a/dist/etherscan.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"etherscan.d.ts","sourceRoot":"","sources":["../src/etherscan.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAK3C,MAAM,WAAW,4BAA4B;IAC3C,WAAW,EAAE,MAAM,CAAC;IACpB,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;IACtB,eAAe,EAAE,MAAM,CAAC;IACxB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,EAAE,EAAE,MAAM,CAAC;IACX,gBAAgB,EAAE,MAAM,CAAC;IACzB,KAAK,EAAE,MAAM,CAAC;CACf;AAED,MAAM,WAAW,wBAAyB,SAAQ,4BAA4B;IAC5E,YAAY,EAAE,MAAM,CAAC;IACrB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,gBAAgB,EAAE,MAAM,CAAC;CAC1B;AAED,MAAM,WAAW,6BACf,SAAQ,4BAA4B;IACpC,YAAY,EAAE,MAAM,CAAC;IACrB,SAAS,EAAE,MAAM,CAAC;IAClB,WAAW,EAAE,MAAM,CAAC;CACrB;AAED,MAAM,WAAW,4BAA4B,CAC3C,CAAC,SAAS,4BAA4B;IAEtC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;CACtB;AAED,MAAM,WAAW,2BAA2B;IAC1C,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED;;;;;;;;;GASG;AACH,wBAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,wBAAwB,CAAC,CACvD,CAOA;AAED;;;;;;;;;GASG;AACH,wBAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,6BAA6B,CAAC,CAC5D,CAOA"}
\ No newline at end of file
diff --git a/dist/etherscan.js b/dist/etherscan.js
deleted file mode 100644
index 081076a1130513a17569d996e1d0763bab90e138..0000000000000000000000000000000000000000
--- a/dist/etherscan.js
+++ /dev/null
@@ -1,109 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.fetchEtherscanTokenTransactions = exports.fetchEtherscanTransactions = void 0;
-const controller_utils_1 = require("@metamask/controller-utils");
-const constants_1 = require("./constants");
-const logger_1 = require("./logger");
-/**
- * Retrieves transaction data from Etherscan.
- *
- * @param request - Configuration required to fetch transactions.
- * @param request.address - Address to retrieve transactions for.
- * @param request.chainId - Current chain ID used to determine subdomain and domain.
- * @param request.fromBlock - Block number to start fetching transactions from.
- * @param request.limit - Number of transactions to retrieve.
- * @returns An Etherscan response object containing the request status and an array of token transaction data.
- */
-function fetchEtherscanTransactions({ address, chainId, fromBlock, limit, }) {
-    return __awaiter(this, void 0, void 0, function* () {
-        return yield fetchTransactions('txlist', {
-            address,
-            chainId,
-            fromBlock,
-            limit,
-        });
-    });
-}
-exports.fetchEtherscanTransactions = fetchEtherscanTransactions;
-/**
- * Retrieves token transaction data from Etherscan.
- *
- * @param request - Configuration required to fetch token transactions.
- * @param request.address - Address to retrieve token transactions for.
- * @param request.chainId - Current chain ID used to determine subdomain and domain.
- * @param request.fromBlock - Block number to start fetching token transactions from.
- * @param request.limit - Number of token transactions to retrieve.
- * @returns An Etherscan response object containing the request status and an array of token transaction data.
- */
-function fetchEtherscanTokenTransactions({ address, chainId, fromBlock, limit, }) {
-    return __awaiter(this, void 0, void 0, function* () {
-        return yield fetchTransactions('tokentx', {
-            address,
-            chainId,
-            fromBlock,
-            limit,
-        });
-    });
-}
-exports.fetchEtherscanTokenTransactions = fetchEtherscanTokenTransactions;
-/**
- * Retrieves transaction data from Etherscan from a specific endpoint.
- *
- * @param action - The Etherscan endpoint to use.
- * @param options - Options bag.
- * @param options.address - Address to retrieve transactions for.
- * @param options.chainId - Current chain ID used to determine subdomain and domain.
- * @param options.fromBlock - Block number to start fetching transactions from.
- * @param options.limit - Number of transactions to retrieve.
- * @returns An object containing the request status and an array of transaction data.
- */
-function fetchTransactions(action, { address, chainId, fromBlock, limit, }) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const urlParams = {
-            module: 'account',
-            address,
-            startBlock: fromBlock === null || fromBlock === void 0 ? void 0 : fromBlock.toString(),
-            offset: limit === null || limit === void 0 ? void 0 : limit.toString(),
-            sort: 'desc',
-        };
-        const etherscanTxUrl = getEtherscanApiUrl(chainId, Object.assign(Object.assign({}, urlParams), { action }));
-        (0, logger_1.incomingTransactionsLogger)('Sending Etherscan request', etherscanTxUrl);
-        const response = (yield (0, controller_utils_1.handleFetch)(etherscanTxUrl));
-        return response;
-    });
-}
-/**
- * Return a URL that can be used to fetch data from Etherscan.
- *
- * @param chainId - Current chain ID used to determine subdomain and domain.
- * @param urlParams - The parameters used to construct the URL.
- * @returns URL to access Etherscan data.
- */
-function getEtherscanApiUrl(chainId, urlParams) {
-    const networkInfo = constants_1.ETHERSCAN_SUPPORTED_NETWORKS[chainId];
-    if (!networkInfo) {
-        throw new Error(`Etherscan does not support chain with ID: ${chainId}`);
-    }
-    const apiUrl = `https://${networkInfo.subdomain}.${networkInfo.domain}`;
-    let url = `${apiUrl}/api?`;
-    // eslint-disable-next-line guard-for-in
-    for (const paramKey in urlParams) {
-        const value = urlParams[paramKey];
-        if (!value) {
-            continue;
-        }
-        url += `${paramKey}=${value}&`;
-    }
-    url += 'tag=latest&page=1';
-    return url;
-}
-//# sourceMappingURL=etherscan.js.map
\ No newline at end of file
diff --git a/dist/etherscan.js.map b/dist/etherscan.js.map
deleted file mode 100644
index 070ac33a25719d7ac0a02e2e370bcd98ace1381c..0000000000000000000000000000000000000000
--- a/dist/etherscan.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"etherscan.js","sourceRoot":"","sources":["../src/etherscan.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iEAAyD;AAGzD,2CAA2D;AAC3D,qCAA6D;AAkD7D;;;;;;;;;GASG;AACH,SAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACuB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,QAAQ,EAAE;YACvC,OAAO;YACP,OAAO;YACP,SAAS;YACT,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAdD,gEAcC;AAED;;;;;;;;;GASG;AACH,SAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACuB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,SAAS,EAAE;YACxC,OAAO;YACP,OAAO;YACP,SAAS;YACT,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAdD,0EAcC;AAED;;;;;;;;;;GAUG;AACH,SAAe,iBAAiB,CAC9B,MAAc,EACd,EACE,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GAMN;;QAED,MAAM,SAAS,GAAG;YAChB,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,UAAU,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,EAAE;YACjC,MAAM,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,EAAE;YACzB,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,MAAM,cAAc,GAAG,kBAAkB,CAAC,OAAO,kCAC5C,SAAS,KACZ,MAAM,IACN,CAAC;QAEH,IAAA,mCAAG,EAAC,2BAA2B,EAAE,cAAc,CAAC,CAAC;QAEjD,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAA,8BAAW,EACjC,cAAc,CACf,CAAoC,CAAC;QAEtC,OAAO,QAAQ,CAAC;IAClB,CAAC;CAAA;AAED;;;;;;GAMG;AACH,SAAS,kBAAkB,CACzB,OAAY,EACZ,SAA6C;IAI7C,MAAM,WAAW,GAAG,wCAA4B,CAAC,OAA2B,CAAC,CAAC;IAE9E,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,6CAA6C,OAAO,EAAE,CAAC,CAAC;KACzE;IAED,MAAM,MAAM,GAAG,WAAW,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;IACxE,IAAI,GAAG,GAAG,GAAG,MAAM,OAAO,CAAC;IAE3B,wCAAwC;IACxC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,EAAE;YACV,SAAS;SACV;QAED,GAAG,IAAI,GAAG,QAAQ,IAAI,KAAK,GAAG,CAAC;KAChC;IAED,GAAG,IAAI,mBAAmB,CAAC;IAE3B,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import { handleFetch } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from './constants';\nimport { incomingTransactionsLogger as log } from './logger';\n\nexport interface EtherscanTransactionMetaBase {\n  blockNumber: string;\n  blockHash: string;\n  confirmations: string;\n  contractAddress: string;\n  cumulativeGasUsed: string;\n  from: string;\n  gas: string;\n  gasPrice: string;\n  gasUsed: string;\n  hash: string;\n  nonce: string;\n  timeStamp: string;\n  to: string;\n  transactionIndex: string;\n  value: string;\n}\n\nexport interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {\n  functionName: string;\n  input: string;\n  isError: string;\n  methodId: string;\n  txreceipt_status: string;\n}\n\nexport interface EtherscanTokenTransactionMeta\n  extends EtherscanTransactionMetaBase {\n  tokenDecimal: string;\n  tokenName: string;\n  tokenSymbol: string;\n}\n\nexport interface EtherscanTransactionResponse<\n  T extends EtherscanTransactionMetaBase,\n> {\n  status: '0' | '1';\n  message?: string;\n  result: string | T[];\n}\n\nexport interface EtherscanTransactionRequest {\n  address: string;\n  chainId: Hex;\n  fromBlock?: number;\n  limit?: number;\n}\n\n/**\n * Retrieves transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch transactions.\n * @param request.address - Address to retrieve transactions for.\n * @param request.chainId - Current chain ID used to determine subdomain and domain.\n * @param request.fromBlock - Block number to start fetching transactions from.\n * @param request.limit - Number of transactions to retrieve.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTransactionMeta>\n> {\n  return await fetchTransactions('txlist', {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  });\n}\n\n/**\n * Retrieves token transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch token transactions.\n * @param request.address - Address to retrieve token transactions for.\n * @param request.chainId - Current chain ID used to determine subdomain and domain.\n * @param request.fromBlock - Block number to start fetching token transactions from.\n * @param request.limit - Number of token transactions to retrieve.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTokenTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTokenTransactionMeta>\n> {\n  return await fetchTransactions('tokentx', {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  });\n}\n\n/**\n * Retrieves transaction data from Etherscan from a specific endpoint.\n *\n * @param action - The Etherscan endpoint to use.\n * @param options - Options bag.\n * @param options.address - Address to retrieve transactions for.\n * @param options.chainId - Current chain ID used to determine subdomain and domain.\n * @param options.fromBlock - Block number to start fetching transactions from.\n * @param options.limit - Number of transactions to retrieve.\n * @returns An object containing the request status and an array of transaction data.\n */\nasync function fetchTransactions<T extends EtherscanTransactionMetaBase>(\n  action: string,\n  {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  }: {\n    address: string;\n    chainId: Hex;\n    fromBlock?: number;\n    limit?: number;\n  },\n): Promise<EtherscanTransactionResponse<T>> {\n  const urlParams = {\n    module: 'account',\n    address,\n    startBlock: fromBlock?.toString(),\n    offset: limit?.toString(),\n    sort: 'desc',\n  };\n\n  const etherscanTxUrl = getEtherscanApiUrl(chainId, {\n    ...urlParams,\n    action,\n  });\n\n  log('Sending Etherscan request', etherscanTxUrl);\n\n  const response = (await handleFetch(\n    etherscanTxUrl,\n  )) as EtherscanTransactionResponse<T>;\n\n  return response;\n}\n\n/**\n * Return a URL that can be used to fetch data from Etherscan.\n *\n * @param chainId - Current chain ID used to determine subdomain and domain.\n * @param urlParams - The parameters used to construct the URL.\n * @returns URL to access Etherscan data.\n */\nfunction getEtherscanApiUrl(\n  chainId: Hex,\n  urlParams: Record<string, string | undefined>,\n): string {\n  type SupportedChainId = keyof typeof ETHERSCAN_SUPPORTED_NETWORKS;\n\n  const networkInfo = ETHERSCAN_SUPPORTED_NETWORKS[chainId as SupportedChainId];\n\n  if (!networkInfo) {\n    throw new Error(`Etherscan does not support chain with ID: ${chainId}`);\n  }\n\n  const apiUrl = `https://${networkInfo.subdomain}.${networkInfo.domain}`;\n  let url = `${apiUrl}/api?`;\n\n  // eslint-disable-next-line guard-for-in\n  for (const paramKey in urlParams) {\n    const value = urlParams[paramKey];\n\n    if (!value) {\n      continue;\n    }\n\n    url += `${paramKey}=${value}&`;\n  }\n\n  url += 'tag=latest&page=1';\n\n  return url;\n}\n"]}
\ No newline at end of file
diff --git a/dist/external-transactions.d.ts b/dist/external-transactions.d.ts
deleted file mode 100644
index 93a84dad738787b820b5a47b7a25b28b547e3b82..0000000000000000000000000000000000000000
--- a/dist/external-transactions.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import type { TransactionMeta } from './types';
-/**
- * Validates the external provided transaction meta.
- *
- * @param transactionMeta - The transaction meta to validate.
- * @param confirmedTxs - The confirmed transactions in controller state.
- * @param pendingTxs - The submitted transactions in controller state.
- */
-export declare function validateConfirmedExternalTransaction(transactionMeta?: TransactionMeta, confirmedTxs?: TransactionMeta[], pendingTxs?: TransactionMeta[]): void;
-//# sourceMappingURL=external-transactions.d.ts.map
\ No newline at end of file
diff --git a/dist/external-transactions.d.ts.map b/dist/external-transactions.d.ts.map
deleted file mode 100644
index 4a72b532a67ee7f2ea994eff94ff9a92f9535cb7..0000000000000000000000000000000000000000
--- a/dist/external-transactions.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"external-transactions.d.ts","sourceRoot":"","sources":["../src/external-transactions.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE/C;;;;;;GAMG;AACH,wBAAgB,oCAAoC,CAClD,eAAe,CAAC,EAAE,eAAe,EACjC,YAAY,CAAC,EAAE,eAAe,EAAE,EAChC,UAAU,CAAC,EAAE,eAAe,EAAE,QAoC/B"}
\ No newline at end of file
diff --git a/dist/external-transactions.js b/dist/external-transactions.js
deleted file mode 100644
index 3182206d3c53a69d4b008c3bc413cd89eb2118cf..0000000000000000000000000000000000000000
--- a/dist/external-transactions.js
+++ /dev/null
@@ -1,36 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.validateConfirmedExternalTransaction = void 0;
-// These utility functions are exclusively used by `confirmExternalTransaction` method in controller
-const rpc_errors_1 = require("@metamask/rpc-errors");
-const types_1 = require("./types");
-/**
- * Validates the external provided transaction meta.
- *
- * @param transactionMeta - The transaction meta to validate.
- * @param confirmedTxs - The confirmed transactions in controller state.
- * @param pendingTxs - The submitted transactions in controller state.
- */
-function validateConfirmedExternalTransaction(transactionMeta, confirmedTxs, pendingTxs) {
-    if (!transactionMeta || !transactionMeta.txParams) {
-        throw rpc_errors_1.rpcErrors.invalidParams('"transactionMeta" or "transactionMeta.txParams" is missing');
-    }
-    if (transactionMeta.status !== types_1.TransactionStatus.confirmed) {
-        throw rpc_errors_1.rpcErrors.invalidParams('External transaction status should be "confirmed"');
-    }
-    const externalTxNonce = transactionMeta.txParams.nonce;
-    if (pendingTxs && pendingTxs.length > 0) {
-        const foundPendingTxByNonce = pendingTxs.find((tx) => { var _a; return ((_a = tx.txParams) === null || _a === void 0 ? void 0 : _a.nonce) === externalTxNonce; });
-        if (foundPendingTxByNonce) {
-            throw rpc_errors_1.rpcErrors.invalidParams('External transaction nonce should not be in pending txs');
-        }
-    }
-    if (confirmedTxs && confirmedTxs.length > 0) {
-        const foundConfirmedTxByNonce = confirmedTxs.find((tx) => { var _a; return ((_a = tx.txParams) === null || _a === void 0 ? void 0 : _a.nonce) === externalTxNonce; });
-        if (foundConfirmedTxByNonce) {
-            throw rpc_errors_1.rpcErrors.invalidParams('External transaction nonce should not be in confirmed txs');
-        }
-    }
-}
-exports.validateConfirmedExternalTransaction = validateConfirmedExternalTransaction;
-//# sourceMappingURL=external-transactions.js.map
\ No newline at end of file
diff --git a/dist/external-transactions.js.map b/dist/external-transactions.js.map
deleted file mode 100644
index d92c9fcb12b13fc2100858b5eb5bb081ae31eeb9..0000000000000000000000000000000000000000
--- a/dist/external-transactions.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"external-transactions.js","sourceRoot":"","sources":["../src/external-transactions.ts"],"names":[],"mappings":";;;AAAA,oGAAoG;AACpG,qDAAiD;AAEjD,mCAA4C;AAG5C;;;;;;GAMG;AACH,SAAgB,oCAAoC,CAClD,eAAiC,EACjC,YAAgC,EAChC,UAA8B;IAE9B,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;QACjD,MAAM,sBAAS,CAAC,aAAa,CAC3B,4DAA4D,CAC7D,CAAC;KACH;IAED,IAAI,eAAe,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,EAAE;QAC1D,MAAM,sBAAS,CAAC,aAAa,CAC3B,mDAAmD,CACpD,CAAC;KACH;IAED,MAAM,eAAe,GAAG,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IACvD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACvC,MAAM,qBAAqB,GAAG,UAAU,CAAC,IAAI,CAC3C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,0CAAE,KAAK,MAAK,eAAe,CAAA,EAAA,CAC/C,CAAC;QACF,IAAI,qBAAqB,EAAE;YACzB,MAAM,sBAAS,CAAC,aAAa,CAC3B,yDAAyD,CAC1D,CAAC;SACH;KACF;IAED,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3C,MAAM,uBAAuB,GAAG,YAAY,CAAC,IAAI,CAC/C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,0CAAE,KAAK,MAAK,eAAe,CAAA,EAAA,CAC/C,CAAC;QACF,IAAI,uBAAuB,EAAE;YAC3B,MAAM,sBAAS,CAAC,aAAa,CAC3B,2DAA2D,CAC5D,CAAC;SACH;KACF;AACH,CAAC;AAvCD,oFAuCC","sourcesContent":["// These utility functions are exclusively used by `confirmExternalTransaction` method in controller\nimport { rpcErrors } from '@metamask/rpc-errors';\n\nimport { TransactionStatus } from './types';\nimport type { TransactionMeta } from './types';\n\n/**\n * Validates the external provided transaction meta.\n *\n * @param transactionMeta - The transaction meta to validate.\n * @param confirmedTxs - The confirmed transactions in controller state.\n * @param pendingTxs - The submitted transactions in controller state.\n */\nexport function validateConfirmedExternalTransaction(\n  transactionMeta?: TransactionMeta,\n  confirmedTxs?: TransactionMeta[],\n  pendingTxs?: TransactionMeta[],\n) {\n  if (!transactionMeta || !transactionMeta.txParams) {\n    throw rpcErrors.invalidParams(\n      '\"transactionMeta\" or \"transactionMeta.txParams\" is missing',\n    );\n  }\n\n  if (transactionMeta.status !== TransactionStatus.confirmed) {\n    throw rpcErrors.invalidParams(\n      'External transaction status should be \"confirmed\"',\n    );\n  }\n\n  const externalTxNonce = transactionMeta.txParams.nonce;\n  if (pendingTxs && pendingTxs.length > 0) {\n    const foundPendingTxByNonce = pendingTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce,\n    );\n    if (foundPendingTxByNonce) {\n      throw rpcErrors.invalidParams(\n        'External transaction nonce should not be in pending txs',\n      );\n    }\n  }\n\n  if (confirmedTxs && confirmedTxs.length > 0) {\n    const foundConfirmedTxByNonce = confirmedTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce,\n    );\n    if (foundConfirmedTxByNonce) {\n      throw rpcErrors.invalidParams(\n        'External transaction nonce should not be in confirmed txs',\n      );\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/EtherscanRemoteTransactionSource.d.ts b/dist/helpers/EtherscanRemoteTransactionSource.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..77cbad1dcb4f168c540e0d4100cd93e75c8f61d7
--- /dev/null
+++ b/dist/helpers/EtherscanRemoteTransactionSource.d.ts
@@ -0,0 +1,15 @@
+import type { Hex } from '@metamask/utils';
+import type { RemoteTransactionSource, RemoteTransactionSourceRequest, TransactionMeta } from '../types';
+/**
+ * A RemoteTransactionSource that fetches transaction data from Etherscan.
+ */
+export declare class EtherscanRemoteTransactionSource implements RemoteTransactionSource {
+    #private;
+    constructor({ includeTokenTransfers, }?: {
+        includeTokenTransfers?: boolean;
+    });
+    isSupportedNetwork(chainId: Hex): boolean;
+    getLastBlockVariations(): string[];
+    fetchTransactions(request: RemoteTransactionSourceRequest): Promise<TransactionMeta[]>;
+}
+//# sourceMappingURL=EtherscanRemoteTransactionSource.d.ts.map
\ No newline at end of file
diff --git a/dist/helpers/EtherscanRemoteTransactionSource.d.ts.map b/dist/helpers/EtherscanRemoteTransactionSource.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..640a2bd49cd6d03c37d864e8a69fc650d8816b75
--- /dev/null
+++ b/dist/helpers/EtherscanRemoteTransactionSource.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"EtherscanRemoteTransactionSource.d.ts","sourceRoot":"","sources":["../../src/helpers/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAM3C,OAAO,KAAK,EACV,uBAAuB,EACvB,8BAA8B,EAC9B,eAAe,EAChB,MAAM,UAAU,CAAC;AAclB;;GAEG;AACH,qBAAa,gCACX,YAAW,uBAAuB;;gBAMtB,EACV,qBAAqB,GACtB,GAAE;QAAE,qBAAqB,CAAC,EAAE,OAAO,CAAA;KAAO;IAK3C,kBAAkB,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO;IAIzC,sBAAsB,IAAI,MAAM,EAAE;IAI5B,iBAAiB,CACrB,OAAO,EAAE,8BAA8B,GACtC,OAAO,CAAC,eAAe,EAAE,CAAC;CAkI9B"}
\ No newline at end of file
diff --git a/dist/helpers/EtherscanRemoteTransactionSource.js b/dist/helpers/EtherscanRemoteTransactionSource.js
new file mode 100644
index 0000000000000000000000000000000000000000..da47b74faecb4266f069aad333bde9db808cd1b8
--- /dev/null
+++ b/dist/helpers/EtherscanRemoteTransactionSource.js
@@ -0,0 +1,122 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var _EtherscanRemoteTransactionSource_instances, _EtherscanRemoteTransactionSource_includeTokenTransfers, _EtherscanRemoteTransactionSource_isTokenRequestPending, _EtherscanRemoteTransactionSource_fetchNormalTransactions, _EtherscanRemoteTransactionSource_fetchTokenTransactions, _EtherscanRemoteTransactionSource_getResponseTransactions, _EtherscanRemoteTransactionSource_normalizeTransaction, _EtherscanRemoteTransactionSource_normalizeTokenTransaction, _EtherscanRemoteTransactionSource_normalizeTransactionBase;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.EtherscanRemoteTransactionSource = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const ethereumjs_util_1 = require("ethereumjs-util");
+const uuid_1 = require("uuid");
+const constants_1 = require("../constants");
+const logger_1 = require("../logger");
+const types_1 = require("../types");
+const etherscan_1 = require("../utils/etherscan");
+/**
+ * A RemoteTransactionSource that fetches transaction data from Etherscan.
+ */
+class EtherscanRemoteTransactionSource {
+    constructor({ includeTokenTransfers, } = {}) {
+        _EtherscanRemoteTransactionSource_instances.add(this);
+        _EtherscanRemoteTransactionSource_includeTokenTransfers.set(this, void 0);
+        _EtherscanRemoteTransactionSource_isTokenRequestPending.set(this, void 0);
+        _EtherscanRemoteTransactionSource_fetchNormalTransactions.set(this, (request, etherscanRequest) => __awaiter(this, void 0, void 0, function* () {
+            const { currentChainId } = request;
+            const etherscanTransactions = yield (0, etherscan_1.fetchEtherscanTransactions)(etherscanRequest);
+            return __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_getResponseTransactions).call(this, etherscanTransactions).map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransaction).call(this, tx, currentChainId));
+        }));
+        _EtherscanRemoteTransactionSource_fetchTokenTransactions.set(this, (request, etherscanRequest) => __awaiter(this, void 0, void 0, function* () {
+            const { currentChainId } = request;
+            const etherscanTransactions = yield (0, etherscan_1.fetchEtherscanTokenTransactions)(etherscanRequest);
+            return __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_getResponseTransactions).call(this, etherscanTransactions).map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTokenTransaction).call(this, tx, currentChainId));
+        }));
+        __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_includeTokenTransfers, includeTokenTransfers !== null && includeTokenTransfers !== void 0 ? includeTokenTransfers : true, "f");
+        __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, false, "f");
+    }
+    isSupportedNetwork(chainId) {
+        return Object.keys(constants_1.ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);
+    }
+    getLastBlockVariations() {
+        return [__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f") ? 'token' : 'normal'];
+    }
+    fetchTransactions(request) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const etherscanRequest = Object.assign(Object.assign({}, request), { chainId: request.currentChainId });
+            const transactions = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f")
+                ? yield __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_fetchTokenTransactions, "f").call(this, request, etherscanRequest)
+                : yield __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_fetchNormalTransactions, "f").call(this, request, etherscanRequest);
+            if (__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_includeTokenTransfers, "f")) {
+                __classPrivateFieldSet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, !__classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f"), "f");
+            }
+            return transactions;
+        });
+    }
+}
+exports.EtherscanRemoteTransactionSource = EtherscanRemoteTransactionSource;
+_EtherscanRemoteTransactionSource_includeTokenTransfers = new WeakMap(), _EtherscanRemoteTransactionSource_isTokenRequestPending = new WeakMap(), _EtherscanRemoteTransactionSource_fetchNormalTransactions = new WeakMap(), _EtherscanRemoteTransactionSource_fetchTokenTransactions = new WeakMap(), _EtherscanRemoteTransactionSource_instances = new WeakSet(), _EtherscanRemoteTransactionSource_getResponseTransactions = function _EtherscanRemoteTransactionSource_getResponseTransactions(response) {
+    let result = response.result;
+    if (response.status === '0') {
+        result = [];
+        if (response.result.length) {
+            (0, logger_1.incomingTransactionsLogger)('Ignored Etherscan request error', {
+                message: response.result,
+                type: __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_isTokenRequestPending, "f") ? 'token' : 'normal',
+            });
+        }
+    }
+    return result;
+}, _EtherscanRemoteTransactionSource_normalizeTransaction = function _EtherscanRemoteTransactionSource_normalizeTransaction(txMeta, currentChainId) {
+    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentChainId);
+    return Object.assign(Object.assign(Object.assign({}, base), { txParams: Object.assign(Object.assign({}, base.txParams), { data: txMeta.input }) }), (txMeta.isError === '0'
+        ? { status: types_1.TransactionStatus.confirmed }
+        : {
+            error: new Error('Transaction failed'),
+            status: types_1.TransactionStatus.failed,
+        }));
+}, _EtherscanRemoteTransactionSource_normalizeTokenTransaction = function _EtherscanRemoteTransactionSource_normalizeTokenTransaction(txMeta, currentChainId) {
+    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentChainId);
+    return Object.assign(Object.assign({}, base), { isTransfer: true, transferInformation: {
+            contractAddress: txMeta.contractAddress,
+            decimals: Number(txMeta.tokenDecimal),
+            symbol: txMeta.tokenSymbol,
+        } });
+}, _EtherscanRemoteTransactionSource_normalizeTransactionBase = function _EtherscanRemoteTransactionSource_normalizeTransactionBase(txMeta, currentChainId) {
+    const time = parseInt(txMeta.timeStamp, 10) * 1000;
+    return {
+        blockNumber: txMeta.blockNumber,
+        chainId: currentChainId,
+        hash: txMeta.hash,
+        id: (0, uuid_1.v1)({ msecs: time }),
+        status: types_1.TransactionStatus.confirmed,
+        time,
+        txParams: {
+            chainId: currentChainId,
+            from: txMeta.from,
+            gas: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gas)),
+            gasPrice: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasPrice)),
+            gasUsed: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasUsed)),
+            nonce: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.nonce)),
+            to: txMeta.to,
+            value: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.value)),
+        },
+        verifiedOnBlockchain: false,
+    };
+};
+//# sourceMappingURL=EtherscanRemoteTransactionSource.js.map
\ No newline at end of file
diff --git a/dist/helpers/EtherscanRemoteTransactionSource.js.map b/dist/helpers/EtherscanRemoteTransactionSource.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..c4e5c60125a5a63734a378856c98ce0651fd8208
--- /dev/null
+++ b/dist/helpers/EtherscanRemoteTransactionSource.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"EtherscanRemoteTransactionSource.js","sourceRoot":"","sources":["../../src/helpers/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"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","sourcesContent":["import { BNToHex } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\nimport { BN } from 'ethereumjs-util';\nimport { v1 as random } from 'uuid';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from '../constants';\nimport { incomingTransactionsLogger as log } from '../logger';\nimport type {\n  RemoteTransactionSource,\n  RemoteTransactionSourceRequest,\n  TransactionMeta,\n} from '../types';\nimport { TransactionStatus } from '../types';\nimport {\n  fetchEtherscanTokenTransactions,\n  fetchEtherscanTransactions,\n} from '../utils/etherscan';\nimport type {\n  EtherscanTokenTransactionMeta,\n  EtherscanTransactionMeta,\n  EtherscanTransactionMetaBase,\n  EtherscanTransactionRequest,\n  EtherscanTransactionResponse,\n} from '../utils/etherscan';\n\n/**\n * A RemoteTransactionSource that fetches transaction data from Etherscan.\n */\nexport class EtherscanRemoteTransactionSource\n  implements RemoteTransactionSource\n{\n  #includeTokenTransfers: boolean;\n\n  #isTokenRequestPending: boolean;\n\n  constructor({\n    includeTokenTransfers,\n  }: { includeTokenTransfers?: boolean } = {}) {\n    this.#includeTokenTransfers = includeTokenTransfers ?? true;\n    this.#isTokenRequestPending = false;\n  }\n\n  isSupportedNetwork(chainId: Hex): boolean {\n    return Object.keys(ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);\n  }\n\n  getLastBlockVariations(): string[] {\n    return [this.#isTokenRequestPending ? 'token' : 'normal'];\n  }\n\n  async fetchTransactions(\n    request: RemoteTransactionSourceRequest,\n  ): Promise<TransactionMeta[]> {\n    const etherscanRequest: EtherscanTransactionRequest = {\n      ...request,\n      chainId: request.currentChainId,\n    };\n\n    const transactions = this.#isTokenRequestPending\n      ? await this.#fetchTokenTransactions(request, etherscanRequest)\n      : await this.#fetchNormalTransactions(request, etherscanRequest);\n\n    if (this.#includeTokenTransfers) {\n      this.#isTokenRequestPending = !this.#isTokenRequestPending;\n    }\n\n    return transactions;\n  }\n\n  #fetchNormalTransactions = async (\n    request: RemoteTransactionSourceRequest,\n    etherscanRequest: EtherscanTransactionRequest,\n  ) => {\n    const { currentChainId } = request;\n\n    const etherscanTransactions = await fetchEtherscanTransactions(\n      etherscanRequest,\n    );\n\n    return this.#getResponseTransactions(etherscanTransactions).map((tx) =>\n      this.#normalizeTransaction(tx, currentChainId),\n    );\n  };\n\n  #fetchTokenTransactions = async (\n    request: RemoteTransactionSourceRequest,\n    etherscanRequest: EtherscanTransactionRequest,\n  ) => {\n    const { currentChainId } = request;\n\n    const etherscanTransactions = await fetchEtherscanTokenTransactions(\n      etherscanRequest,\n    );\n\n    return this.#getResponseTransactions(etherscanTransactions).map((tx) =>\n      this.#normalizeTokenTransaction(tx, currentChainId),\n    );\n  };\n\n  #getResponseTransactions<T extends EtherscanTransactionMetaBase>(\n    response: EtherscanTransactionResponse<T>,\n  ): T[] {\n    let result = response.result as T[];\n\n    if (response.status === '0') {\n      result = [];\n\n      if (response.result.length) {\n        log('Ignored Etherscan request error', {\n          message: response.result,\n          type: this.#isTokenRequestPending ? 'token' : 'normal',\n        });\n      }\n    }\n\n    return result;\n  }\n\n  #normalizeTransaction(\n    txMeta: EtherscanTransactionMeta,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(txMeta, currentChainId);\n\n    return {\n      ...base,\n      txParams: {\n        ...base.txParams,\n        data: txMeta.input,\n      },\n      ...(txMeta.isError === '0'\n        ? { status: TransactionStatus.confirmed }\n        : {\n            error: new Error('Transaction failed'),\n            status: TransactionStatus.failed,\n          }),\n    };\n  }\n\n  #normalizeTokenTransaction(\n    txMeta: EtherscanTokenTransactionMeta,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(txMeta, currentChainId);\n\n    return {\n      ...base,\n      isTransfer: true,\n      transferInformation: {\n        contractAddress: txMeta.contractAddress,\n        decimals: Number(txMeta.tokenDecimal),\n        symbol: txMeta.tokenSymbol,\n      },\n    };\n  }\n\n  #normalizeTransactionBase(\n    txMeta: EtherscanTransactionMetaBase,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n\n    return {\n      blockNumber: txMeta.blockNumber,\n      chainId: currentChainId,\n      hash: txMeta.hash,\n      id: random({ msecs: time }),\n      status: TransactionStatus.confirmed,\n      time,\n      txParams: {\n        chainId: currentChainId,\n        from: txMeta.from,\n        gas: BNToHex(new BN(txMeta.gas)),\n        gasPrice: BNToHex(new BN(txMeta.gasPrice)),\n        gasUsed: BNToHex(new BN(txMeta.gasUsed)),\n        nonce: BNToHex(new BN(txMeta.nonce)),\n        to: txMeta.to,\n        value: BNToHex(new BN(txMeta.value)),\n      },\n      verifiedOnBlockchain: false,\n    };\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/IncomingTransactionHelper.d.ts b/dist/helpers/IncomingTransactionHelper.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..3716ebff171b4396260b35693419e9f3a9da08bc
--- /dev/null
+++ b/dist/helpers/IncomingTransactionHelper.d.ts
@@ -0,0 +1,25 @@
+/// <reference types="node" />
+import type { BlockTracker, NetworkState } from '@metamask/network-controller';
+import type { Hex } from '@metamask/utils';
+import EventEmitter from 'events';
+import type { RemoteTransactionSource, TransactionMeta } from '../types';
+export declare class IncomingTransactionHelper {
+    #private;
+    hub: EventEmitter;
+    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getNetworkState, isEnabled, queryEntireHistory, remoteTransactionSource, transactionLimit, updateTransactions, }: {
+        blockTracker: BlockTracker;
+        getCurrentAccount: () => string;
+        getLastFetchedBlockNumbers: () => Record<string, number>;
+        getLocalTransactions?: () => TransactionMeta[];
+        getNetworkState: () => NetworkState;
+        isEnabled?: () => boolean;
+        queryEntireHistory?: boolean;
+        remoteTransactionSource: RemoteTransactionSource;
+        transactionLimit?: number;
+        updateTransactions?: boolean;
+    });
+    start(): void;
+    stop(): void;
+    update(latestBlockNumberHex?: Hex): Promise<void>;
+}
+//# sourceMappingURL=IncomingTransactionHelper.d.ts.map
\ No newline at end of file
diff --git a/dist/helpers/IncomingTransactionHelper.d.ts.map b/dist/helpers/IncomingTransactionHelper.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..7b1bf26175dc579d78b51c299c872b8e44682511
--- /dev/null
+++ b/dist/helpers/IncomingTransactionHelper.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"IncomingTransactionHelper.d.ts","sourceRoot":"","sources":["../../src/helpers/IncomingTransactionHelper.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC/E,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAE3C,OAAO,YAAY,MAAM,QAAQ,CAAC;AAGlC,OAAO,KAAK,EAAE,uBAAuB,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AASzE,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,YAAY,CAAC;gBA4BN,EACV,YAAY,EACZ,iBAAiB,EACjB,0BAA0B,EAC1B,oBAAoB,EACpB,eAAe,EACf,SAAS,EACT,kBAAkB,EAClB,uBAAuB,EACvB,gBAAgB,EAChB,kBAAkB,GACnB,EAAE;QACD,YAAY,EAAE,YAAY,CAAC;QAC3B,iBAAiB,EAAE,MAAM,MAAM,CAAC;QAChC,0BAA0B,EAAE,MAAM,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACzD,oBAAoB,CAAC,EAAE,MAAM,eAAe,EAAE,CAAC;QAC/C,eAAe,EAAE,MAAM,YAAY,CAAC;QACpC,SAAS,CAAC,EAAE,MAAM,OAAO,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;QAC7B,uBAAuB,EAAE,uBAAuB,CAAC;QACjD,gBAAgB,CAAC,EAAE,MAAM,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;KAC9B;IA0BD,KAAK;IAaL,IAAI;IAKE,MAAM,CAAC,oBAAoB,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;CAmMxD"}
\ No newline at end of file
diff --git a/dist/helpers/IncomingTransactionHelper.js b/dist/helpers/IncomingTransactionHelper.js
new file mode 100644
index 0000000000000000000000000000000000000000..8dcb3f5604ca490cdfd4a7b7250536203a5a84e1
--- /dev/null
+++ b/dist/helpers/IncomingTransactionHelper.js
@@ -0,0 +1,198 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+var _IncomingTransactionHelper_instances, _IncomingTransactionHelper_blockTracker, _IncomingTransactionHelper_getCurrentAccount, _IncomingTransactionHelper_getLastFetchedBlockNumbers, _IncomingTransactionHelper_getLocalTransactions, _IncomingTransactionHelper_getNetworkState, _IncomingTransactionHelper_isEnabled, _IncomingTransactionHelper_isRunning, _IncomingTransactionHelper_mutex, _IncomingTransactionHelper_onLatestBlock, _IncomingTransactionHelper_queryEntireHistory, _IncomingTransactionHelper_remoteTransactionSource, _IncomingTransactionHelper_transactionLimit, _IncomingTransactionHelper_updateTransactions, _IncomingTransactionHelper_sortTransactionsByTime, _IncomingTransactionHelper_getNewTransactions, _IncomingTransactionHelper_getUpdatedTransactions, _IncomingTransactionHelper_isTransactionOutdated, _IncomingTransactionHelper_getFromBlock, _IncomingTransactionHelper_updateLastFetchedBlockNumber, _IncomingTransactionHelper_getBlockNumberKey, _IncomingTransactionHelper_canStart, _IncomingTransactionHelper_getCurrentChainId;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.IncomingTransactionHelper = void 0;
+const async_mutex_1 = require("async-mutex");
+const events_1 = __importDefault(require("events"));
+const logger_1 = require("../logger");
+const RECENT_HISTORY_BLOCK_RANGE = 10;
+const UPDATE_CHECKS = [
+    (txMeta) => txMeta.status,
+    (txMeta) => txMeta.txParams.gasUsed,
+];
+class IncomingTransactionHelper {
+    constructor({ blockTracker, getCurrentAccount, getLastFetchedBlockNumbers, getLocalTransactions, getNetworkState, isEnabled, queryEntireHistory, remoteTransactionSource, transactionLimit, updateTransactions, }) {
+        _IncomingTransactionHelper_instances.add(this);
+        _IncomingTransactionHelper_blockTracker.set(this, void 0);
+        _IncomingTransactionHelper_getCurrentAccount.set(this, void 0);
+        _IncomingTransactionHelper_getLastFetchedBlockNumbers.set(this, void 0);
+        _IncomingTransactionHelper_getLocalTransactions.set(this, void 0);
+        _IncomingTransactionHelper_getNetworkState.set(this, void 0);
+        _IncomingTransactionHelper_isEnabled.set(this, void 0);
+        _IncomingTransactionHelper_isRunning.set(this, void 0);
+        _IncomingTransactionHelper_mutex.set(this, new async_mutex_1.Mutex());
+        _IncomingTransactionHelper_onLatestBlock.set(this, void 0);
+        _IncomingTransactionHelper_queryEntireHistory.set(this, void 0);
+        _IncomingTransactionHelper_remoteTransactionSource.set(this, void 0);
+        _IncomingTransactionHelper_transactionLimit.set(this, void 0);
+        _IncomingTransactionHelper_updateTransactions.set(this, void 0);
+        this.hub = new events_1.default();
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_blockTracker, blockTracker, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getCurrentAccount, getCurrentAccount, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, getLastFetchedBlockNumbers, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getLocalTransactions, getLocalTransactions || (() => []), "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getNetworkState, getNetworkState, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_isEnabled, isEnabled !== null && isEnabled !== void 0 ? isEnabled : (() => true), "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, false, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_queryEntireHistory, queryEntireHistory !== null && queryEntireHistory !== void 0 ? queryEntireHistory : true, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_remoteTransactionSource, remoteTransactionSource, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_transactionLimit, transactionLimit, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_updateTransactions, updateTransactions !== null && updateTransactions !== void 0 ? updateTransactions : false, "f");
+        // Using a property instead of a method to provide a listener reference
+        // with the correct scope that we can remove later if stopped.
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_onLatestBlock, (blockNumberHex) => __awaiter(this, void 0, void 0, function* () {
+            try {
+                yield this.update(blockNumberHex);
+            }
+            catch (error) {
+                console.error('Error while checking incoming transactions', error);
+            }
+        }), "f");
+    }
+    start() {
+        if (__classPrivateFieldGet(this, _IncomingTransactionHelper_isRunning, "f")) {
+            return;
+        }
+        if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_canStart).call(this)) {
+            return;
+        }
+        __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").addListener('latest', __classPrivateFieldGet(this, _IncomingTransactionHelper_onLatestBlock, "f"));
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, true, "f");
+    }
+    stop() {
+        __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").removeListener('latest', __classPrivateFieldGet(this, _IncomingTransactionHelper_onLatestBlock, "f"));
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_isRunning, false, "f");
+    }
+    update(latestBlockNumberHex) {
+        var _a, _b, _c;
+        return __awaiter(this, void 0, void 0, function* () {
+            const releaseLock = yield __classPrivateFieldGet(this, _IncomingTransactionHelper_mutex, "f").acquire();
+            (0, logger_1.incomingTransactionsLogger)('Checking for incoming transactions');
+            try {
+                if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_canStart).call(this)) {
+                    return;
+                }
+                const latestBlockNumber = parseInt(latestBlockNumberHex || (yield __classPrivateFieldGet(this, _IncomingTransactionHelper_blockTracker, "f").getLatestBlock()), 16);
+                const additionalLastFetchedKeys = (_c = (_b = (_a = __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f")).getLastBlockVariations) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];
+                const fromBlock = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getFromBlock).call(this, latestBlockNumber, additionalLastFetchedKeys);
+                const address = __classPrivateFieldGet(this, _IncomingTransactionHelper_getCurrentAccount, "f").call(this);
+                const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
+                let remoteTransactions = [];
+                try {
+                    remoteTransactions =
+                        yield __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").fetchTransactions({
+                            address,
+                            currentChainId,
+                            fromBlock,
+                            limit: __classPrivateFieldGet(this, _IncomingTransactionHelper_transactionLimit, "f"),
+                        });
+                }
+                catch (error) {
+                    (0, logger_1.incomingTransactionsLogger)('Error while fetching remote transactions', error);
+                    return;
+                }
+                if (!__classPrivateFieldGet(this, _IncomingTransactionHelper_updateTransactions, "f")) {
+                    remoteTransactions = remoteTransactions.filter((tx) => { var _a; return ((_a = tx.txParams.to) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === address.toLowerCase(); });
+                }
+                const localTransactions = !__classPrivateFieldGet(this, _IncomingTransactionHelper_updateTransactions, "f")
+                    ? []
+                    : __classPrivateFieldGet(this, _IncomingTransactionHelper_getLocalTransactions, "f").call(this);
+                const newTransactions = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getNewTransactions).call(this, remoteTransactions, localTransactions);
+                const updatedTransactions = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getUpdatedTransactions).call(this, remoteTransactions, localTransactions);
+                if (newTransactions.length > 0 || updatedTransactions.length > 0) {
+                    __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, newTransactions);
+                    __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, updatedTransactions);
+                    (0, logger_1.incomingTransactionsLogger)('Found incoming transactions', {
+                        new: newTransactions,
+                        updated: updatedTransactions,
+                    });
+                    this.hub.emit('transactions', {
+                        added: newTransactions,
+                        updated: updatedTransactions,
+                    });
+                }
+                __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_updateLastFetchedBlockNumber).call(this, remoteTransactions, additionalLastFetchedKeys);
+            }
+            finally {
+                releaseLock();
+            }
+        });
+    }
+}
+exports.IncomingTransactionHelper = IncomingTransactionHelper;
+_IncomingTransactionHelper_blockTracker = new WeakMap(), _IncomingTransactionHelper_getCurrentAccount = new WeakMap(), _IncomingTransactionHelper_getLastFetchedBlockNumbers = new WeakMap(), _IncomingTransactionHelper_getLocalTransactions = new WeakMap(), _IncomingTransactionHelper_getNetworkState = new WeakMap(), _IncomingTransactionHelper_isEnabled = new WeakMap(), _IncomingTransactionHelper_isRunning = new WeakMap(), _IncomingTransactionHelper_mutex = new WeakMap(), _IncomingTransactionHelper_onLatestBlock = new WeakMap(), _IncomingTransactionHelper_queryEntireHistory = new WeakMap(), _IncomingTransactionHelper_remoteTransactionSource = new WeakMap(), _IncomingTransactionHelper_transactionLimit = new WeakMap(), _IncomingTransactionHelper_updateTransactions = new WeakMap(), _IncomingTransactionHelper_instances = new WeakSet(), _IncomingTransactionHelper_sortTransactionsByTime = function _IncomingTransactionHelper_sortTransactionsByTime(transactions) {
+    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));
+}, _IncomingTransactionHelper_getNewTransactions = function _IncomingTransactionHelper_getNewTransactions(remoteTxs, localTxs) {
+    return remoteTxs.filter((tx) => !localTxs.some(({ hash }) => hash === tx.hash));
+}, _IncomingTransactionHelper_getUpdatedTransactions = function _IncomingTransactionHelper_getUpdatedTransactions(remoteTxs, localTxs) {
+    return remoteTxs.filter((remoteTx) => localTxs.some((localTx) => remoteTx.hash === localTx.hash &&
+        __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_isTransactionOutdated).call(this, remoteTx, localTx)));
+}, _IncomingTransactionHelper_isTransactionOutdated = function _IncomingTransactionHelper_isTransactionOutdated(remoteTx, localTx) {
+    return UPDATE_CHECKS.some((getValue) => getValue(remoteTx) !== getValue(localTx));
+}, _IncomingTransactionHelper_getFromBlock = function _IncomingTransactionHelper_getFromBlock(latestBlockNumber, additionalKeys) {
+    const lastFetchedKey = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getBlockNumberKey).call(this, additionalKeys);
+    const lastFetchedBlockNumber = __classPrivateFieldGet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, "f").call(this)[lastFetchedKey];
+    if (lastFetchedBlockNumber) {
+        return lastFetchedBlockNumber + 1;
+    }
+    return __classPrivateFieldGet(this, _IncomingTransactionHelper_queryEntireHistory, "f")
+        ? undefined
+        : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;
+}, _IncomingTransactionHelper_updateLastFetchedBlockNumber = function _IncomingTransactionHelper_updateLastFetchedBlockNumber(remoteTxs, additionalKeys) {
+    let lastFetchedBlockNumber = -1;
+    for (const tx of remoteTxs) {
+        const currentBlockNumberValue = tx.blockNumber
+            ? parseInt(tx.blockNumber, 10)
+            : -1;
+        lastFetchedBlockNumber = Math.max(lastFetchedBlockNumber, currentBlockNumberValue);
+    }
+    if (lastFetchedBlockNumber === -1) {
+        return;
+    }
+    const lastFetchedKey = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getBlockNumberKey).call(this, additionalKeys);
+    const lastFetchedBlockNumbers = __classPrivateFieldGet(this, _IncomingTransactionHelper_getLastFetchedBlockNumbers, "f").call(this);
+    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];
+    if (previousValue >= lastFetchedBlockNumber) {
+        return;
+    }
+    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;
+    this.hub.emit('updatedLastFetchedBlockNumbers', {
+        lastFetchedBlockNumbers,
+        blockNumber: lastFetchedBlockNumber,
+    });
+}, _IncomingTransactionHelper_getBlockNumberKey = function _IncomingTransactionHelper_getBlockNumberKey(additionalKeys) {
+    const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
+    const currentAccount = __classPrivateFieldGet(this, _IncomingTransactionHelper_getCurrentAccount, "f").call(this).toLowerCase();
+    return [currentChainId, currentAccount, ...additionalKeys].join('#');
+}, _IncomingTransactionHelper_canStart = function _IncomingTransactionHelper_canStart() {
+    const isEnabled = __classPrivateFieldGet(this, _IncomingTransactionHelper_isEnabled, "f").call(this);
+    const currentChainId = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getCurrentChainId).call(this);
+    const isSupportedNetwork = __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").isSupportedNetwork(currentChainId);
+    return isEnabled && isSupportedNetwork;
+}, _IncomingTransactionHelper_getCurrentChainId = function _IncomingTransactionHelper_getCurrentChainId() {
+    return __classPrivateFieldGet(this, _IncomingTransactionHelper_getNetworkState, "f").call(this).providerConfig.chainId;
+};
+//# sourceMappingURL=IncomingTransactionHelper.js.map
\ No newline at end of file
diff --git a/dist/helpers/IncomingTransactionHelper.js.map b/dist/helpers/IncomingTransactionHelper.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..40d2037b156c79d74c750c949086ed7cbd96b3ab
--- /dev/null
+++ b/dist/helpers/IncomingTransactionHelper.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"IncomingTransactionHelper.js","sourceRoot":"","sources":["../../src/helpers/IncomingTransactionHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockTracker, NetworkState } from '@metamask/network-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport EventEmitter from 'events';\n\nimport { incomingTransactionsLogger as log } from '../logger';\nimport type { RemoteTransactionSource, TransactionMeta } from '../types';\n\nconst RECENT_HISTORY_BLOCK_RANGE = 10;\n\nconst UPDATE_CHECKS: ((txMeta: TransactionMeta) => any)[] = [\n  (txMeta) => txMeta.status,\n  (txMeta) => txMeta.txParams.gasUsed,\n];\n\nexport class IncomingTransactionHelper {\n  hub: EventEmitter;\n\n  #blockTracker: BlockTracker;\n\n  #getCurrentAccount: () => string;\n\n  #getLastFetchedBlockNumbers: () => Record<string, number>;\n\n  #getLocalTransactions: () => TransactionMeta[];\n\n  #getNetworkState: () => NetworkState;\n\n  #isEnabled: () => boolean;\n\n  #isRunning: boolean;\n\n  #mutex = new Mutex();\n\n  #onLatestBlock: (blockNumberHex: Hex) => Promise<void>;\n\n  #queryEntireHistory: boolean;\n\n  #remoteTransactionSource: RemoteTransactionSource;\n\n  #transactionLimit?: number;\n\n  #updateTransactions: boolean;\n\n  constructor({\n    blockTracker,\n    getCurrentAccount,\n    getLastFetchedBlockNumbers,\n    getLocalTransactions,\n    getNetworkState,\n    isEnabled,\n    queryEntireHistory,\n    remoteTransactionSource,\n    transactionLimit,\n    updateTransactions,\n  }: {\n    blockTracker: BlockTracker;\n    getCurrentAccount: () => string;\n    getLastFetchedBlockNumbers: () => Record<string, number>;\n    getLocalTransactions?: () => TransactionMeta[];\n    getNetworkState: () => NetworkState;\n    isEnabled?: () => boolean;\n    queryEntireHistory?: boolean;\n    remoteTransactionSource: RemoteTransactionSource;\n    transactionLimit?: number;\n    updateTransactions?: boolean;\n  }) {\n    this.hub = new EventEmitter();\n\n    this.#blockTracker = blockTracker;\n    this.#getCurrentAccount = getCurrentAccount;\n    this.#getLastFetchedBlockNumbers = getLastFetchedBlockNumbers;\n    this.#getLocalTransactions = getLocalTransactions || (() => []);\n    this.#getNetworkState = getNetworkState;\n    this.#isEnabled = isEnabled ?? (() => true);\n    this.#isRunning = false;\n    this.#queryEntireHistory = queryEntireHistory ?? true;\n    this.#remoteTransactionSource = remoteTransactionSource;\n    this.#transactionLimit = transactionLimit;\n    this.#updateTransactions = updateTransactions ?? false;\n\n    // Using a property instead of a method to provide a listener reference\n    // with the correct scope that we can remove later if stopped.\n    this.#onLatestBlock = async (blockNumberHex: Hex) => {\n      try {\n        await this.update(blockNumberHex);\n      } catch (error) {\n        console.error('Error while checking incoming transactions', error);\n      }\n    };\n  }\n\n  start() {\n    if (this.#isRunning) {\n      return;\n    }\n\n    if (!this.#canStart()) {\n      return;\n    }\n\n    this.#blockTracker.addListener('latest', this.#onLatestBlock);\n    this.#isRunning = true;\n  }\n\n  stop() {\n    this.#blockTracker.removeListener('latest', this.#onLatestBlock);\n    this.#isRunning = false;\n  }\n\n  async update(latestBlockNumberHex?: Hex): Promise<void> {\n    const releaseLock = await this.#mutex.acquire();\n\n    log('Checking for incoming transactions');\n\n    try {\n      if (!this.#canStart()) {\n        return;\n      }\n\n      const latestBlockNumber = parseInt(\n        latestBlockNumberHex || (await this.#blockTracker.getLatestBlock()),\n        16,\n      );\n\n      const additionalLastFetchedKeys =\n        this.#remoteTransactionSource.getLastBlockVariations?.() ?? [];\n\n      const fromBlock = this.#getFromBlock(\n        latestBlockNumber,\n        additionalLastFetchedKeys,\n      );\n\n      const address = this.#getCurrentAccount();\n      const currentChainId = this.#getCurrentChainId();\n\n      let remoteTransactions = [];\n\n      try {\n        remoteTransactions =\n          await this.#remoteTransactionSource.fetchTransactions({\n            address,\n            currentChainId,\n            fromBlock,\n            limit: this.#transactionLimit,\n          });\n      } catch (error: any) {\n        log('Error while fetching remote transactions', error);\n        return;\n      }\n\n      if (!this.#updateTransactions) {\n        remoteTransactions = remoteTransactions.filter(\n          (tx) => tx.txParams.to?.toLowerCase() === address.toLowerCase(),\n        );\n      }\n\n      const localTransactions = !this.#updateTransactions\n        ? []\n        : this.#getLocalTransactions();\n\n      const newTransactions = this.#getNewTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      const updatedTransactions = this.#getUpdatedTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      if (newTransactions.length > 0 || updatedTransactions.length > 0) {\n        this.#sortTransactionsByTime(newTransactions);\n        this.#sortTransactionsByTime(updatedTransactions);\n\n        log('Found incoming transactions', {\n          new: newTransactions,\n          updated: updatedTransactions,\n        });\n\n        this.hub.emit('transactions', {\n          added: newTransactions,\n          updated: updatedTransactions,\n        });\n      }\n\n      this.#updateLastFetchedBlockNumber(\n        remoteTransactions,\n        additionalLastFetchedKeys,\n      );\n    } finally {\n      releaseLock();\n    }\n  }\n\n  #sortTransactionsByTime(transactions: TransactionMeta[]) {\n    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));\n  }\n\n  #getNewTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter(\n      (tx) => !localTxs.some(({ hash }) => hash === tx.hash),\n    );\n  }\n\n  #getUpdatedTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((remoteTx) =>\n      localTxs.some(\n        (localTx) =>\n          remoteTx.hash === localTx.hash &&\n          this.#isTransactionOutdated(remoteTx, localTx),\n      ),\n    );\n  }\n\n  #isTransactionOutdated(\n    remoteTx: TransactionMeta,\n    localTx: TransactionMeta,\n  ): boolean {\n    return UPDATE_CHECKS.some(\n      (getValue) => getValue(remoteTx) !== getValue(localTx),\n    );\n  }\n\n  #getFromBlock(\n    latestBlockNumber: number,\n    additionalKeys: string[],\n  ): number | undefined {\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n\n    const lastFetchedBlockNumber =\n      this.#getLastFetchedBlockNumbers()[lastFetchedKey];\n\n    if (lastFetchedBlockNumber) {\n      return lastFetchedBlockNumber + 1;\n    }\n\n    return this.#queryEntireHistory\n      ? undefined\n      : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;\n  }\n\n  #updateLastFetchedBlockNumber(\n    remoteTxs: TransactionMeta[],\n    additionalKeys: string[],\n  ) {\n    let lastFetchedBlockNumber = -1;\n\n    for (const tx of remoteTxs) {\n      const currentBlockNumberValue = tx.blockNumber\n        ? parseInt(tx.blockNumber, 10)\n        : -1;\n\n      lastFetchedBlockNumber = Math.max(\n        lastFetchedBlockNumber,\n        currentBlockNumberValue,\n      );\n    }\n\n    if (lastFetchedBlockNumber === -1) {\n      return;\n    }\n\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n    const lastFetchedBlockNumbers = this.#getLastFetchedBlockNumbers();\n    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];\n\n    if (previousValue >= lastFetchedBlockNumber) {\n      return;\n    }\n\n    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;\n\n    this.hub.emit('updatedLastFetchedBlockNumbers', {\n      lastFetchedBlockNumbers,\n      blockNumber: lastFetchedBlockNumber,\n    });\n  }\n\n  #getBlockNumberKey(additionalKeys: string[]): string {\n    const currentChainId = this.#getCurrentChainId();\n    const currentAccount = this.#getCurrentAccount().toLowerCase();\n\n    return [currentChainId, currentAccount, ...additionalKeys].join('#');\n  }\n\n  #canStart(): boolean {\n    const isEnabled = this.#isEnabled();\n    const currentChainId = this.#getCurrentChainId();\n\n    const isSupportedNetwork =\n      this.#remoteTransactionSource.isSupportedNetwork(currentChainId);\n\n    return isEnabled && isSupportedNetwork;\n  }\n\n  #getCurrentChainId(): Hex {\n    return this.#getNetworkState().providerConfig.chainId;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/PendingTransactionTracker.d.ts b/dist/helpers/PendingTransactionTracker.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d5b6d381163e5f205f9af4c3ea8bbc49efa071e5
--- /dev/null
+++ b/dist/helpers/PendingTransactionTracker.d.ts
@@ -0,0 +1,38 @@
+/// <reference types="node" />
+import type EthQuery from '@metamask/eth-query';
+import type { BlockTracker } from '@metamask/network-controller';
+import EventEmitter from 'events';
+import type NonceTracker from 'nonce-tracker';
+import type { TransactionState } from '../TransactionController';
+import type { TransactionMeta } from '../types';
+declare type Events = {
+    'transaction-confirmed': [txMeta: TransactionMeta];
+    'transaction-dropped': [txMeta: TransactionMeta];
+    'transaction-failed': [txMeta: TransactionMeta, error: Error];
+    'transaction-updated': [txMeta: TransactionMeta, note: string];
+};
+export interface PendingTransactionTrackerEventEmitter extends EventEmitter {
+    on<T extends keyof Events>(eventName: T, listener: (...args: Events[T]) => void): this;
+    emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;
+}
+export declare class PendingTransactionTracker {
+    #private;
+    hub: PendingTransactionTrackerEventEmitter;
+    constructor({ approveTransaction, blockTracker, getChainId, getEthQuery, getTransactions, isResubmitEnabled, nonceTracker, onStateChange, publishTransaction, hooks, }: {
+        approveTransaction: (transactionId: string) => Promise<void>;
+        blockTracker: BlockTracker;
+        getChainId: () => string;
+        getEthQuery: () => EthQuery;
+        getTransactions: () => TransactionMeta[];
+        isResubmitEnabled?: boolean;
+        nonceTracker: NonceTracker;
+        onStateChange: (listener: (state: TransactionState) => void) => void;
+        publishTransaction: (rawTx: string) => Promise<string>;
+        hooks?: {
+            beforeCheckPendingTransaction?: (transactionMeta: TransactionMeta) => boolean;
+            beforePublish?: (transactionMeta: TransactionMeta) => boolean;
+        };
+    });
+}
+export {};
+//# sourceMappingURL=PendingTransactionTracker.d.ts.map
\ No newline at end of file
diff --git a/dist/helpers/PendingTransactionTracker.d.ts.map b/dist/helpers/PendingTransactionTracker.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..836a2b0b6639dc840f0236d0731edb060a5e9ab7
--- /dev/null
+++ b/dist/helpers/PendingTransactionTracker.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PendingTransactionTracker.d.ts","sourceRoot":"","sources":["../../src/helpers/PendingTransactionTracker.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAEjE,OAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,OAAO,KAAK,YAAY,MAAM,eAAe,CAAC;AAG9C,OAAO,KAAK,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AACjE,OAAO,KAAK,EAAE,eAAe,EAAsB,MAAM,UAAU,CAAC;AA2BpE,aAAK,MAAM,GAAG;IACZ,uBAAuB,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IACnD,qBAAqB,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IACjD,oBAAoB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,qBAAqB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;CAChE,CAAC;AAKF,MAAM,WAAW,qCAAsC,SAAQ,YAAY;IACzE,EAAE,CAAC,CAAC,SAAS,MAAM,MAAM,EACvB,SAAS,EAAE,CAAC,EACZ,QAAQ,EAAE,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,GACrC,IAAI,CAAC;IAER,IAAI,CAAC,CAAC,SAAS,MAAM,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;CACzE;AAED,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,qCAAqC,CAAC;gBA8B/B,EACV,kBAAkB,EAClB,YAAY,EACZ,UAAU,EACV,WAAW,EACX,eAAe,EACf,iBAAiB,EACjB,YAAY,EACZ,aAAa,EACb,kBAAkB,EAClB,KAAK,GACN,EAAE;QACD,kBAAkB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7D,YAAY,EAAE,YAAY,CAAC;QAC3B,UAAU,EAAE,MAAM,MAAM,CAAC;QACzB,WAAW,EAAE,MAAM,QAAQ,CAAC;QAC5B,eAAe,EAAE,MAAM,eAAe,EAAE,CAAC;QACzC,iBAAiB,CAAC,EAAE,OAAO,CAAC;QAC5B,YAAY,EAAE,YAAY,CAAC;QAC3B,aAAa,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,KAAK,IAAI,CAAC;QACrE,kBAAkB,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QACvD,KAAK,CAAC,EAAE;YACN,6BAA6B,CAAC,EAAE,CAC9B,eAAe,EAAE,eAAe,KAC7B,OAAO,CAAC;YACb,aAAa,CAAC,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,OAAO,CAAC;SAC/D,CAAC;KACH;CAgZF"}
\ No newline at end of file
diff --git a/dist/helpers/PendingTransactionTracker.js b/dist/helpers/PendingTransactionTracker.js
new file mode 100644
index 0000000000000000000000000000000000000000..da72e61cd30e6c71cd28cc337093dde210a3a9e3
--- /dev/null
+++ b/dist/helpers/PendingTransactionTracker.js
@@ -0,0 +1,329 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+var _PendingTransactionTracker_instances, _PendingTransactionTracker_approveTransaction, _PendingTransactionTracker_blockTracker, _PendingTransactionTracker_droppedBlockCountByHash, _PendingTransactionTracker_getChainId, _PendingTransactionTracker_getEthQuery, _PendingTransactionTracker_getTransactions, _PendingTransactionTracker_isResubmitEnabled, _PendingTransactionTracker_listener, _PendingTransactionTracker_nonceTracker, _PendingTransactionTracker_onStateChange, _PendingTransactionTracker_publishTransaction, _PendingTransactionTracker_running, _PendingTransactionTracker_beforeCheckPendingTransaction, _PendingTransactionTracker_beforePublish, _PendingTransactionTracker_start, _PendingTransactionTracker_stop, _PendingTransactionTracker_onLatestBlock, _PendingTransactionTracker_checkTransactions, _PendingTransactionTracker_resubmitTransactions, _PendingTransactionTracker_isKnownTransactionError, _PendingTransactionTracker_resubmitTransaction, _PendingTransactionTracker_isResubmitDue, _PendingTransactionTracker_checkTransaction, _PendingTransactionTracker_onTransactionConfirmed, _PendingTransactionTracker_isTransactionDropped, _PendingTransactionTracker_isNonceTaken, _PendingTransactionTracker_getPendingTransactions, _PendingTransactionTracker_warnTransaction, _PendingTransactionTracker_failTransaction, _PendingTransactionTracker_dropTransaction, _PendingTransactionTracker_updateTransaction, _PendingTransactionTracker_getTransactionReceipt, _PendingTransactionTracker_getBlockByHash, _PendingTransactionTracker_getNetworkTransactionCount;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.PendingTransactionTracker = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const utils_1 = require("@metamask/utils");
+const events_1 = __importDefault(require("events"));
+const logger_1 = require("../logger");
+const types_1 = require("../types");
+/**
+ * We wait this many blocks before emitting a 'transaction-dropped' event
+ * This is because we could be talking to a node that is out of sync
+ */
+const DROPPED_BLOCK_COUNT = 3;
+const MAX_RETRY_BLOCK_DISTANCE = 50;
+const KNOWN_TRANSACTION_ERRORS = [
+    'replacement transaction underpriced',
+    'known transaction',
+    'gas price too low to replace',
+    'transaction with the same hash was already imported',
+    'gateway timeout',
+    'nonce too low',
+];
+const log = (0, utils_1.createModuleLogger)(logger_1.projectLogger, 'pending-transactions');
+class PendingTransactionTracker {
+    constructor({ approveTransaction, blockTracker, getChainId, getEthQuery, getTransactions, isResubmitEnabled, nonceTracker, onStateChange, publishTransaction, hooks, }) {
+        var _a, _b;
+        _PendingTransactionTracker_instances.add(this);
+        _PendingTransactionTracker_approveTransaction.set(this, void 0);
+        _PendingTransactionTracker_blockTracker.set(this, void 0);
+        _PendingTransactionTracker_droppedBlockCountByHash.set(this, void 0);
+        _PendingTransactionTracker_getChainId.set(this, void 0);
+        _PendingTransactionTracker_getEthQuery.set(this, void 0);
+        _PendingTransactionTracker_getTransactions.set(this, void 0);
+        _PendingTransactionTracker_isResubmitEnabled.set(this, void 0);
+        _PendingTransactionTracker_listener.set(this, void 0);
+        _PendingTransactionTracker_nonceTracker.set(this, void 0);
+        _PendingTransactionTracker_onStateChange.set(this, void 0);
+        _PendingTransactionTracker_publishTransaction.set(this, void 0);
+        _PendingTransactionTracker_running.set(this, void 0);
+        _PendingTransactionTracker_beforeCheckPendingTransaction.set(this, void 0);
+        _PendingTransactionTracker_beforePublish.set(this, void 0);
+        this.hub = new events_1.default();
+        __classPrivateFieldSet(this, _PendingTransactionTracker_approveTransaction, approveTransaction, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_blockTracker, blockTracker, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_droppedBlockCountByHash, new Map(), "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_getChainId, getChainId, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_getEthQuery, getEthQuery, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_getTransactions, getTransactions, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_isResubmitEnabled, isResubmitEnabled !== null && isResubmitEnabled !== void 0 ? isResubmitEnabled : true, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_listener, __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_onLatestBlock).bind(this), "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_nonceTracker, nonceTracker, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_onStateChange, onStateChange, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_publishTransaction, publishTransaction, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_running, false, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_beforePublish, (_a = hooks === null || hooks === void 0 ? void 0 : hooks.beforePublish) !== null && _a !== void 0 ? _a : (() => true), "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_beforeCheckPendingTransaction, (_b = hooks === null || hooks === void 0 ? void 0 : hooks.beforeCheckPendingTransaction) !== null && _b !== void 0 ? _b : (() => true), "f");
+        __classPrivateFieldGet(this, _PendingTransactionTracker_onStateChange, "f").call(this, (state) => {
+            const pendingTransactions = __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getPendingTransactions).call(this, state.transactions);
+            if (pendingTransactions.length) {
+                __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_start).call(this);
+            }
+            else {
+                __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_stop).call(this);
+            }
+        });
+    }
+}
+exports.PendingTransactionTracker = PendingTransactionTracker;
+_PendingTransactionTracker_approveTransaction = new WeakMap(), _PendingTransactionTracker_blockTracker = new WeakMap(), _PendingTransactionTracker_droppedBlockCountByHash = new WeakMap(), _PendingTransactionTracker_getChainId = new WeakMap(), _PendingTransactionTracker_getEthQuery = new WeakMap(), _PendingTransactionTracker_getTransactions = new WeakMap(), _PendingTransactionTracker_isResubmitEnabled = new WeakMap(), _PendingTransactionTracker_listener = new WeakMap(), _PendingTransactionTracker_nonceTracker = new WeakMap(), _PendingTransactionTracker_onStateChange = new WeakMap(), _PendingTransactionTracker_publishTransaction = new WeakMap(), _PendingTransactionTracker_running = new WeakMap(), _PendingTransactionTracker_beforeCheckPendingTransaction = new WeakMap(), _PendingTransactionTracker_beforePublish = new WeakMap(), _PendingTransactionTracker_instances = new WeakSet(), _PendingTransactionTracker_start = function _PendingTransactionTracker_start() {
+    if (__classPrivateFieldGet(this, _PendingTransactionTracker_running, "f")) {
+        return;
+    }
+    __classPrivateFieldGet(this, _PendingTransactionTracker_blockTracker, "f").on('latest', __classPrivateFieldGet(this, _PendingTransactionTracker_listener, "f"));
+    __classPrivateFieldSet(this, _PendingTransactionTracker_running, true, "f");
+    log('Started polling');
+}, _PendingTransactionTracker_stop = function _PendingTransactionTracker_stop() {
+    if (!__classPrivateFieldGet(this, _PendingTransactionTracker_running, "f")) {
+        return;
+    }
+    __classPrivateFieldGet(this, _PendingTransactionTracker_blockTracker, "f").removeListener('latest', __classPrivateFieldGet(this, _PendingTransactionTracker_listener, "f"));
+    __classPrivateFieldSet(this, _PendingTransactionTracker_running, false, "f");
+    log('Stopped polling');
+}, _PendingTransactionTracker_onLatestBlock = function _PendingTransactionTracker_onLatestBlock(latestBlockNumber) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const nonceGlobalLock = yield __classPrivateFieldGet(this, _PendingTransactionTracker_nonceTracker, "f").getGlobalLock();
+        try {
+            yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_checkTransactions).call(this);
+        }
+        catch (error) {
+            /* istanbul ignore next */
+            log('Failed to check transactions', error);
+        }
+        finally {
+            nonceGlobalLock.releaseLock();
+        }
+        try {
+            yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_resubmitTransactions).call(this, latestBlockNumber);
+        }
+        catch (error) {
+            /* istanbul ignore next */
+            log('Failed to resubmit transactions', error);
+        }
+    });
+}, _PendingTransactionTracker_checkTransactions = function _PendingTransactionTracker_checkTransactions() {
+    return __awaiter(this, void 0, void 0, function* () {
+        log('Checking transactions');
+        const pendingTransactions = __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getPendingTransactions).call(this);
+        if (!pendingTransactions.length) {
+            log('No pending transactions to check');
+            return;
+        }
+        log('Found pending transactions to check', {
+            count: pendingTransactions.length,
+            ids: pendingTransactions.map((tx) => tx.id),
+        });
+        yield Promise.all(pendingTransactions.map((tx) => __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_checkTransaction).call(this, tx)));
+    });
+}, _PendingTransactionTracker_resubmitTransactions = function _PendingTransactionTracker_resubmitTransactions(latestBlockNumber) {
+    var _a, _b;
+    return __awaiter(this, void 0, void 0, function* () {
+        if (!__classPrivateFieldGet(this, _PendingTransactionTracker_isResubmitEnabled, "f") || !__classPrivateFieldGet(this, _PendingTransactionTracker_running, "f")) {
+            return;
+        }
+        log('Resubmitting transactions');
+        const pendingTransactions = __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getPendingTransactions).call(this);
+        if (!pendingTransactions.length) {
+            log('No pending transactions to resubmit');
+            return;
+        }
+        log('Found pending transactions to resubmit', {
+            count: pendingTransactions.length,
+            ids: pendingTransactions.map((tx) => tx.id),
+        });
+        for (const txMeta of pendingTransactions) {
+            try {
+                yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_resubmitTransaction).call(this, txMeta, latestBlockNumber);
+            }
+            catch (error) {
+                /* istanbul ignore next */
+                const errorMessage = ((_b = (_a = error.value) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || error.message.toLowerCase();
+                if (__classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_isKnownTransactionError).call(this, errorMessage)) {
+                    log('Ignoring known transaction error', errorMessage);
+                    return;
+                }
+                __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_warnTransaction).call(this, txMeta, error.message, 'There was an error when resubmitting this transaction.');
+            }
+        }
+    });
+}, _PendingTransactionTracker_isKnownTransactionError = function _PendingTransactionTracker_isKnownTransactionError(errorMessage) {
+    return KNOWN_TRANSACTION_ERRORS.some((knownError) => errorMessage.includes(knownError));
+}, _PendingTransactionTracker_resubmitTransaction = function _PendingTransactionTracker_resubmitTransaction(txMeta, latestBlockNumber) {
+    var _a;
+    return __awaiter(this, void 0, void 0, function* () {
+        if (!__classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_isResubmitDue).call(this, txMeta, latestBlockNumber)) {
+            return;
+        }
+        log('Resubmitting transaction', txMeta.id);
+        const { rawTx } = txMeta;
+        if (!__classPrivateFieldGet(this, _PendingTransactionTracker_beforePublish, "f").call(this, txMeta)) {
+            return;
+        }
+        if (!(rawTx === null || rawTx === void 0 ? void 0 : rawTx.length)) {
+            log('Approving transaction as no raw value');
+            yield __classPrivateFieldGet(this, _PendingTransactionTracker_approveTransaction, "f").call(this, txMeta.id);
+            return;
+        }
+        yield __classPrivateFieldGet(this, _PendingTransactionTracker_publishTransaction, "f").call(this, rawTx);
+        txMeta.retryCount = ((_a = txMeta.retryCount) !== null && _a !== void 0 ? _a : 0) + 1;
+        __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_updateTransaction).call(this, txMeta, 'PendingTransactionTracker:transaction-retry - Retry count increased');
+    });
+}, _PendingTransactionTracker_isResubmitDue = function _PendingTransactionTracker_isResubmitDue(txMeta, latestBlockNumber) {
+    if (!txMeta.firstRetryBlockNumber) {
+        txMeta.firstRetryBlockNumber = latestBlockNumber;
+        __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_updateTransaction).call(this, txMeta, 'PendingTransactionTracker:#isResubmitDue - First retry block number set');
+    }
+    const firstRetryBlockNumber = txMeta.firstRetryBlockNumber || latestBlockNumber;
+    const blocksSinceFirstRetry = Number.parseInt(latestBlockNumber, 16) -
+        Number.parseInt(firstRetryBlockNumber, 16);
+    const retryCount = txMeta.retryCount || 0;
+    // Exponential backoff to limit retries at publishing
+    // Capped at ~15 minutes between retries
+    const requiredBlocksSinceFirstRetry = Math.min(MAX_RETRY_BLOCK_DISTANCE, Math.pow(2, retryCount));
+    return blocksSinceFirstRetry >= requiredBlocksSinceFirstRetry;
+}, _PendingTransactionTracker_checkTransaction = function _PendingTransactionTracker_checkTransaction(txMeta) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { hash, id } = txMeta;
+        if (!hash && __classPrivateFieldGet(this, _PendingTransactionTracker_beforeCheckPendingTransaction, "f").call(this, txMeta)) {
+            const error = new Error('We had an error while submitting this transaction, please try again.');
+            error.name = 'NoTxHashError';
+            __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_failTransaction).call(this, txMeta, error);
+            return;
+        }
+        if (__classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_isNonceTaken).call(this, txMeta)) {
+            log('Nonce already taken', id);
+            __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_dropTransaction).call(this, txMeta);
+            return;
+        }
+        try {
+            const receipt = yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getTransactionReceipt).call(this, hash);
+            const isSuccess = (receipt === null || receipt === void 0 ? void 0 : receipt.status) === '0x1';
+            if (receipt && !isSuccess) {
+                log('Transaction receipt has failed status');
+                __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_failTransaction).call(this, txMeta, new Error('Transaction dropped or replaced'));
+                return;
+            }
+            const { blockNumber, blockHash } = receipt || {};
+            if (isSuccess && blockNumber && blockHash) {
+                yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_onTransactionConfirmed).call(this, txMeta, Object.assign(Object.assign({}, receipt), { blockNumber,
+                    blockHash }));
+                return;
+            }
+        }
+        catch (error) {
+            log('Failed to check transaction', id, error);
+            __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_warnTransaction).call(this, txMeta, error.message, 'There was a problem loading this transaction.');
+            return;
+        }
+        if (yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_isTransactionDropped).call(this, txMeta)) {
+            __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_dropTransaction).call(this, txMeta);
+        }
+    });
+}, _PendingTransactionTracker_onTransactionConfirmed = function _PendingTransactionTracker_onTransactionConfirmed(txMeta, receipt) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { id } = txMeta;
+        const { blockHash } = receipt;
+        log('Transaction confirmed', id);
+        const { baseFeePerGas, timestamp: blockTimestamp } = yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getBlockByHash).call(this, blockHash, false);
+        txMeta.baseFeePerGas = baseFeePerGas;
+        txMeta.blockTimestamp = blockTimestamp;
+        txMeta.status = types_1.TransactionStatus.confirmed;
+        txMeta.txParams.gasUsed = receipt.gasUsed;
+        txMeta.txReceipt = receipt;
+        txMeta.verifiedOnBlockchain = true;
+        __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_updateTransaction).call(this, txMeta, 'PendingTransactionTracker:#onTransactionConfirmed - Transaction confirmed');
+        this.hub.emit('transaction-confirmed', txMeta);
+    });
+}, _PendingTransactionTracker_isTransactionDropped = function _PendingTransactionTracker_isTransactionDropped(txMeta) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { hash, id, txParams: { nonce, from }, } = txMeta;
+        /* istanbul ignore next */
+        if (!nonce || !hash) {
+            return false;
+        }
+        const networkNextNonceHex = yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getNetworkTransactionCount).call(this, from);
+        const networkNextNonceNumber = parseInt(networkNextNonceHex, 16);
+        const nonceNumber = parseInt(nonce, 16);
+        if (nonceNumber >= networkNextNonceNumber) {
+            return false;
+        }
+        let droppedBlockCount = __classPrivateFieldGet(this, _PendingTransactionTracker_droppedBlockCountByHash, "f").get(hash);
+        if (droppedBlockCount === undefined) {
+            droppedBlockCount = 0;
+            __classPrivateFieldGet(this, _PendingTransactionTracker_droppedBlockCountByHash, "f").set(hash, droppedBlockCount);
+        }
+        if (droppedBlockCount < DROPPED_BLOCK_COUNT) {
+            log('Incrementing dropped block count', { id, droppedBlockCount });
+            __classPrivateFieldGet(this, _PendingTransactionTracker_droppedBlockCountByHash, "f").set(hash, droppedBlockCount + 1);
+            return false;
+        }
+        log('Hit dropped block count', id);
+        __classPrivateFieldGet(this, _PendingTransactionTracker_droppedBlockCountByHash, "f").delete(hash);
+        return true;
+    });
+}, _PendingTransactionTracker_isNonceTaken = function _PendingTransactionTracker_isNonceTaken(txMeta) {
+    const { id, txParams } = txMeta;
+    return __classPrivateFieldGet(this, _PendingTransactionTracker_getTransactions, "f").call(this).some((tx) => tx.id !== id &&
+        tx.txParams.from === txParams.from &&
+        tx.status === types_1.TransactionStatus.confirmed &&
+        tx.txParams.nonce === txParams.nonce);
+}, _PendingTransactionTracker_getPendingTransactions = function _PendingTransactionTracker_getPendingTransactions(transactions) {
+    const currentChainId = __classPrivateFieldGet(this, _PendingTransactionTracker_getChainId, "f").call(this);
+    return (transactions !== null && transactions !== void 0 ? transactions : __classPrivateFieldGet(this, _PendingTransactionTracker_getTransactions, "f").call(this)).filter((tx) => tx.status === types_1.TransactionStatus.submitted &&
+        tx.chainId === currentChainId &&
+        !tx.verifiedOnBlockchain);
+}, _PendingTransactionTracker_warnTransaction = function _PendingTransactionTracker_warnTransaction(txMeta, error, message) {
+    txMeta.warning = {
+        error,
+        message,
+    };
+    __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_updateTransaction).call(this, txMeta, 'PendingTransactionTracker:#warnTransaction - Warning added');
+}, _PendingTransactionTracker_failTransaction = function _PendingTransactionTracker_failTransaction(txMeta, error) {
+    log('Transaction failed', txMeta.id, error);
+    this.hub.emit('transaction-failed', txMeta, error);
+}, _PendingTransactionTracker_dropTransaction = function _PendingTransactionTracker_dropTransaction(txMeta) {
+    log('Transaction dropped', txMeta.id);
+    this.hub.emit('transaction-dropped', txMeta);
+}, _PendingTransactionTracker_updateTransaction = function _PendingTransactionTracker_updateTransaction(txMeta, note) {
+    this.hub.emit('transaction-updated', txMeta, note);
+}, _PendingTransactionTracker_getTransactionReceipt = function _PendingTransactionTracker_getTransactionReceipt(txHash) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getTransactionReceipt', [txHash]);
+    });
+}, _PendingTransactionTracker_getBlockByHash = function _PendingTransactionTracker_getBlockByHash(blockHash, includeTransactionDetails) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getBlockByHash', [
+            blockHash,
+            includeTransactionDetails,
+        ]);
+    });
+}, _PendingTransactionTracker_getNetworkTransactionCount = function _PendingTransactionTracker_getNetworkTransactionCount(address) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getTransactionCount', [address]);
+    });
+};
+//# sourceMappingURL=PendingTransactionTracker.js.map
\ No newline at end of file
diff --git a/dist/helpers/PendingTransactionTracker.js.map b/dist/helpers/PendingTransactionTracker.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..74054b18a640049fd46eef81e8599cf127a9a6d6
--- /dev/null
+++ b/dist/helpers/PendingTransactionTracker.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PendingTransactionTracker.js","sourceRoot":"","sources":["../../src/helpers/PendingTransactionTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type { BlockTracker } from '@metamask/network-controller';\nimport { createModuleLogger } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport type NonceTracker from 'nonce-tracker';\n\nimport { projectLogger } from '../logger';\nimport type { TransactionState } from '../TransactionController';\nimport type { TransactionMeta, TransactionReceipt } from '../types';\nimport { TransactionStatus } from '../types';\n\n/**\n * We wait this many blocks before emitting a 'transaction-dropped' event\n * This is because we could be talking to a node that is out of sync\n */\nconst DROPPED_BLOCK_COUNT = 3;\n\nconst MAX_RETRY_BLOCK_DISTANCE = 50;\n\nconst KNOWN_TRANSACTION_ERRORS = [\n  'replacement transaction underpriced',\n  'known transaction',\n  'gas price too low to replace',\n  'transaction with the same hash was already imported',\n  'gateway timeout',\n  'nonce too low',\n];\n\nconst log = createModuleLogger(projectLogger, 'pending-transactions');\n\ntype SuccessfulTransactionReceipt = TransactionReceipt & {\n  blockNumber: string;\n  blockHash: string;\n};\n\ntype Events = {\n  'transaction-confirmed': [txMeta: TransactionMeta];\n  'transaction-dropped': [txMeta: TransactionMeta];\n  'transaction-failed': [txMeta: TransactionMeta, error: Error];\n  'transaction-updated': [txMeta: TransactionMeta, note: string];\n};\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface PendingTransactionTrackerEventEmitter extends EventEmitter {\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): this;\n\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n}\n\nexport class PendingTransactionTracker {\n  hub: PendingTransactionTrackerEventEmitter;\n\n  #approveTransaction: (transactionId: string) => Promise<void>;\n\n  #blockTracker: BlockTracker;\n\n  #droppedBlockCountByHash: Map<string, number>;\n\n  #getChainId: () => string;\n\n  #getEthQuery: () => EthQuery;\n\n  #getTransactions: () => TransactionMeta[];\n\n  #isResubmitEnabled: boolean;\n\n  #listener: any;\n\n  #nonceTracker: NonceTracker;\n\n  #onStateChange: (listener: (state: TransactionState) => void) => void;\n\n  #publishTransaction: (rawTx: string) => Promise<string>;\n\n  #running: boolean;\n\n  #beforeCheckPendingTransaction: (transactionMeta: TransactionMeta) => boolean;\n\n  #beforePublish: (transactionMeta: TransactionMeta) => boolean;\n\n  constructor({\n    approveTransaction,\n    blockTracker,\n    getChainId,\n    getEthQuery,\n    getTransactions,\n    isResubmitEnabled,\n    nonceTracker,\n    onStateChange,\n    publishTransaction,\n    hooks,\n  }: {\n    approveTransaction: (transactionId: string) => Promise<void>;\n    blockTracker: BlockTracker;\n    getChainId: () => string;\n    getEthQuery: () => EthQuery;\n    getTransactions: () => TransactionMeta[];\n    isResubmitEnabled?: boolean;\n    nonceTracker: NonceTracker;\n    onStateChange: (listener: (state: TransactionState) => void) => void;\n    publishTransaction: (rawTx: string) => Promise<string>;\n    hooks?: {\n      beforeCheckPendingTransaction?: (\n        transactionMeta: TransactionMeta,\n      ) => boolean;\n      beforePublish?: (transactionMeta: TransactionMeta) => boolean;\n    };\n  }) {\n    this.hub = new EventEmitter() as PendingTransactionTrackerEventEmitter;\n\n    this.#approveTransaction = approveTransaction;\n    this.#blockTracker = blockTracker;\n    this.#droppedBlockCountByHash = new Map();\n    this.#getChainId = getChainId;\n    this.#getEthQuery = getEthQuery;\n    this.#getTransactions = getTransactions;\n    this.#isResubmitEnabled = isResubmitEnabled ?? true;\n    this.#listener = this.#onLatestBlock.bind(this);\n    this.#nonceTracker = nonceTracker;\n    this.#onStateChange = onStateChange;\n    this.#publishTransaction = publishTransaction;\n    this.#running = false;\n    this.#beforePublish = hooks?.beforePublish ?? (() => true);\n    this.#beforeCheckPendingTransaction =\n      hooks?.beforeCheckPendingTransaction ?? (() => true);\n\n    this.#onStateChange((state) => {\n      const pendingTransactions = this.#getPendingTransactions(\n        state.transactions,\n      );\n\n      if (pendingTransactions.length) {\n        this.#start();\n      } else {\n        this.#stop();\n      }\n    });\n  }\n\n  #start() {\n    if (this.#running) {\n      return;\n    }\n\n    this.#blockTracker.on('latest', this.#listener);\n    this.#running = true;\n\n    log('Started polling');\n  }\n\n  #stop() {\n    if (!this.#running) {\n      return;\n    }\n\n    this.#blockTracker.removeListener('latest', this.#listener);\n    this.#running = false;\n\n    log('Stopped polling');\n  }\n\n  async #onLatestBlock(latestBlockNumber: string) {\n    const nonceGlobalLock = await this.#nonceTracker.getGlobalLock();\n\n    try {\n      await this.#checkTransactions();\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check transactions', error);\n    } finally {\n      nonceGlobalLock.releaseLock();\n    }\n\n    try {\n      await this.#resubmitTransactions(latestBlockNumber);\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to resubmit transactions', error);\n    }\n  }\n\n  async #checkTransactions() {\n    log('Checking transactions');\n\n    const pendingTransactions = this.#getPendingTransactions();\n\n    if (!pendingTransactions.length) {\n      log('No pending transactions to check');\n      return;\n    }\n\n    log('Found pending transactions to check', {\n      count: pendingTransactions.length,\n      ids: pendingTransactions.map((tx) => tx.id),\n    });\n\n    await Promise.all(\n      pendingTransactions.map((tx) => this.#checkTransaction(tx)),\n    );\n  }\n\n  async #resubmitTransactions(latestBlockNumber: string) {\n    if (!this.#isResubmitEnabled || !this.#running) {\n      return;\n    }\n\n    log('Resubmitting transactions');\n\n    const pendingTransactions = this.#getPendingTransactions();\n\n    if (!pendingTransactions.length) {\n      log('No pending transactions to resubmit');\n      return;\n    }\n\n    log('Found pending transactions to resubmit', {\n      count: pendingTransactions.length,\n      ids: pendingTransactions.map((tx) => tx.id),\n    });\n\n    for (const txMeta of pendingTransactions) {\n      try {\n        await this.#resubmitTransaction(txMeta, latestBlockNumber);\n      } catch (error: any) {\n        /* istanbul ignore next */\n        const errorMessage =\n          error.value?.message?.toLowerCase() || error.message.toLowerCase();\n\n        if (this.#isKnownTransactionError(errorMessage)) {\n          log('Ignoring known transaction error', errorMessage);\n          return;\n        }\n\n        this.#warnTransaction(\n          txMeta,\n          error.message,\n          'There was an error when resubmitting this transaction.',\n        );\n      }\n    }\n  }\n\n  #isKnownTransactionError(errorMessage: string) {\n    return KNOWN_TRANSACTION_ERRORS.some((knownError) =>\n      errorMessage.includes(knownError),\n    );\n  }\n\n  async #resubmitTransaction(\n    txMeta: TransactionMeta,\n    latestBlockNumber: string,\n  ) {\n    if (!this.#isResubmitDue(txMeta, latestBlockNumber)) {\n      return;\n    }\n\n    log('Resubmitting transaction', txMeta.id);\n\n    const { rawTx } = txMeta;\n\n    if (!this.#beforePublish(txMeta)) {\n      return;\n    }\n\n    if (!rawTx?.length) {\n      log('Approving transaction as no raw value');\n      await this.#approveTransaction(txMeta.id);\n      return;\n    }\n\n    await this.#publishTransaction(rawTx);\n\n    txMeta.retryCount = (txMeta.retryCount ?? 0) + 1;\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:transaction-retry - Retry count increased',\n    );\n  }\n\n  #isResubmitDue(txMeta: TransactionMeta, latestBlockNumber: string): boolean {\n    if (!txMeta.firstRetryBlockNumber) {\n      txMeta.firstRetryBlockNumber = latestBlockNumber;\n\n      this.#updateTransaction(\n        txMeta,\n        'PendingTransactionTracker:#isResubmitDue - First retry block number set',\n      );\n    }\n\n    const firstRetryBlockNumber =\n      txMeta.firstRetryBlockNumber || latestBlockNumber;\n\n    const blocksSinceFirstRetry =\n      Number.parseInt(latestBlockNumber, 16) -\n      Number.parseInt(firstRetryBlockNumber, 16);\n\n    const retryCount = txMeta.retryCount || 0;\n\n    // Exponential backoff to limit retries at publishing\n    // Capped at ~15 minutes between retries\n    const requiredBlocksSinceFirstRetry = Math.min(\n      MAX_RETRY_BLOCK_DISTANCE,\n      Math.pow(2, retryCount),\n    );\n\n    return blocksSinceFirstRetry >= requiredBlocksSinceFirstRetry;\n  }\n\n  async #checkTransaction(txMeta: TransactionMeta) {\n    const { hash, id } = txMeta;\n\n    if (!hash && this.#beforeCheckPendingTransaction(txMeta)) {\n      const error = new Error(\n        'We had an error while submitting this transaction, please try again.',\n      );\n\n      error.name = 'NoTxHashError';\n\n      this.#failTransaction(txMeta, error);\n\n      return;\n    }\n\n    if (this.#isNonceTaken(txMeta)) {\n      log('Nonce already taken', id);\n      this.#dropTransaction(txMeta);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getTransactionReceipt(hash);\n      const isSuccess = receipt?.status === '0x1';\n\n      if (receipt && !isSuccess) {\n        log('Transaction receipt has failed status');\n\n        this.#failTransaction(\n          txMeta,\n          new Error('Transaction dropped or replaced'),\n        );\n\n        return;\n      }\n\n      const { blockNumber, blockHash } = receipt || {};\n\n      if (isSuccess && blockNumber && blockHash) {\n        await this.#onTransactionConfirmed(txMeta, {\n          ...receipt,\n          blockNumber,\n          blockHash,\n        });\n\n        return;\n      }\n    } catch (error: any) {\n      log('Failed to check transaction', id, error);\n\n      this.#warnTransaction(\n        txMeta,\n        error.message,\n        'There was a problem loading this transaction.',\n      );\n\n      return;\n    }\n\n    if (await this.#isTransactionDropped(txMeta)) {\n      this.#dropTransaction(txMeta);\n    }\n  }\n\n  async #onTransactionConfirmed(\n    txMeta: TransactionMeta,\n    receipt: SuccessfulTransactionReceipt,\n  ) {\n    const { id } = txMeta;\n    const { blockHash } = receipt;\n\n    log('Transaction confirmed', id);\n\n    const { baseFeePerGas, timestamp: blockTimestamp } =\n      await this.#getBlockByHash(blockHash, false);\n\n    txMeta.baseFeePerGas = baseFeePerGas;\n    txMeta.blockTimestamp = blockTimestamp;\n    txMeta.status = TransactionStatus.confirmed;\n    txMeta.txParams.gasUsed = receipt.gasUsed;\n    txMeta.txReceipt = receipt;\n    txMeta.verifiedOnBlockchain = true;\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:#onTransactionConfirmed - Transaction confirmed',\n    );\n\n    this.hub.emit('transaction-confirmed', txMeta);\n  }\n\n  async #isTransactionDropped(txMeta: TransactionMeta) {\n    const {\n      hash,\n      id,\n      txParams: { nonce, from },\n    } = txMeta;\n\n    /* istanbul ignore next */\n    if (!nonce || !hash) {\n      return false;\n    }\n\n    const networkNextNonceHex = await this.#getNetworkTransactionCount(from);\n    const networkNextNonceNumber = parseInt(networkNextNonceHex, 16);\n    const nonceNumber = parseInt(nonce, 16);\n\n    if (nonceNumber >= networkNextNonceNumber) {\n      return false;\n    }\n\n    let droppedBlockCount = this.#droppedBlockCountByHash.get(hash);\n\n    if (droppedBlockCount === undefined) {\n      droppedBlockCount = 0;\n      this.#droppedBlockCountByHash.set(hash, droppedBlockCount);\n    }\n\n    if (droppedBlockCount < DROPPED_BLOCK_COUNT) {\n      log('Incrementing dropped block count', { id, droppedBlockCount });\n      this.#droppedBlockCountByHash.set(hash, droppedBlockCount + 1);\n      return false;\n    }\n\n    log('Hit dropped block count', id);\n\n    this.#droppedBlockCountByHash.delete(hash);\n    return true;\n  }\n\n  #isNonceTaken(txMeta: TransactionMeta): boolean {\n    const { id, txParams } = txMeta;\n\n    return this.#getTransactions().some(\n      (tx) =>\n        tx.id !== id &&\n        tx.txParams.from === txParams.from &&\n        tx.status === TransactionStatus.confirmed &&\n        tx.txParams.nonce === txParams.nonce,\n    );\n  }\n\n  #getPendingTransactions(transactions?: TransactionMeta[]): TransactionMeta[] {\n    const currentChainId = this.#getChainId();\n\n    return (transactions ?? this.#getTransactions()).filter(\n      (tx) =>\n        tx.status === TransactionStatus.submitted &&\n        tx.chainId === currentChainId &&\n        !tx.verifiedOnBlockchain,\n    );\n  }\n\n  #warnTransaction(txMeta: TransactionMeta, error: string, message: string) {\n    txMeta.warning = {\n      error,\n      message,\n    };\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:#warnTransaction - Warning added',\n    );\n  }\n\n  #failTransaction(txMeta: TransactionMeta, error: Error) {\n    log('Transaction failed', txMeta.id, error);\n    this.hub.emit('transaction-failed', txMeta, error);\n  }\n\n  #dropTransaction(txMeta: TransactionMeta) {\n    log('Transaction dropped', txMeta.id);\n    this.hub.emit('transaction-dropped', txMeta);\n  }\n\n  #updateTransaction(txMeta: TransactionMeta, note: string) {\n    this.hub.emit('transaction-updated', txMeta, note);\n  }\n\n  async #getTransactionReceipt(\n    txHash?: string,\n  ): Promise<TransactionReceipt | undefined> {\n    return await query(this.#getEthQuery(), 'getTransactionReceipt', [txHash]);\n  }\n\n  async #getBlockByHash(\n    blockHash: string,\n    includeTransactionDetails: boolean,\n  ): Promise<any> {\n    return await query(this.#getEthQuery(), 'getBlockByHash', [\n      blockHash,\n      includeTransactionDetails,\n    ]);\n  }\n\n  async #getNetworkTransactionCount(address: string): Promise<string> {\n    return await query(this.#getEthQuery(), 'getTransactionCount', [address]);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/history.d.ts b/dist/history.d.ts
deleted file mode 100644
index 2d292107d97b096e2e18d13fab38f60e0d3409bc..0000000000000000000000000000000000000000
--- a/dist/history.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import type { TransactionMeta } from './types';
-/**
- * Add initial history snapshot to the provided transactionMeta history.
- *
- * @param transactionMeta - TransactionMeta to add initial history snapshot to.
- */
-export declare function addInitialHistorySnapshot(transactionMeta: TransactionMeta): void;
-/**
- * Compares and adds history entry to the provided transactionMeta history.
- *
- * @param transactionMeta - TransactionMeta to add history entry to.
- * @param note - Note to add to history entry.
- */
-export declare function updateTransactionHistory(transactionMeta: TransactionMeta, note: string): void;
-//# sourceMappingURL=history.d.ts.map
\ No newline at end of file
diff --git a/dist/history.d.ts.map b/dist/history.d.ts.map
deleted file mode 100644
index 7a423a8e6dbd3f2092ea6f7bf8f69e2db0b476dd..0000000000000000000000000000000000000000
--- a/dist/history.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"history.d.ts","sourceRoot":"","sources":["../src/history.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAGV,eAAe,EAChB,MAAM,SAAS,CAAC;AAEjB;;;;GAIG;AACH,wBAAgB,yBAAyB,CAAC,eAAe,EAAE,eAAe,QAGzE;AAED;;;;;GAKG;AACH,wBAAgB,wBAAwB,CACtC,eAAe,EAAE,eAAe,EAChC,IAAI,EAAE,MAAM,GACX,IAAI,CAWN"}
\ No newline at end of file
diff --git a/dist/history.js b/dist/history.js
deleted file mode 100644
index cdac50549b695b7b5711b0021b0aed847f0dad31..0000000000000000000000000000000000000000
--- a/dist/history.js
+++ /dev/null
@@ -1,75 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.updateTransactionHistory = exports.addInitialHistorySnapshot = void 0;
-const fast_json_patch_1 = __importDefault(require("fast-json-patch"));
-const lodash_1 = require("lodash");
-/**
- * Add initial history snapshot to the provided transactionMeta history.
- *
- * @param transactionMeta - TransactionMeta to add initial history snapshot to.
- */
-function addInitialHistorySnapshot(transactionMeta) {
-    const snapshot = snapshotFromTransactionMeta(transactionMeta);
-    transactionMeta.history = [snapshot];
-}
-exports.addInitialHistorySnapshot = addInitialHistorySnapshot;
-/**
- * Compares and adds history entry to the provided transactionMeta history.
- *
- * @param transactionMeta - TransactionMeta to add history entry to.
- * @param note - Note to add to history entry.
- */
-function updateTransactionHistory(transactionMeta, note) {
-    var _a;
-    const currentState = snapshotFromTransactionMeta(transactionMeta);
-    const previousState = replayHistory(transactionMeta.history);
-    const historyEntry = generateHistoryEntry(previousState, currentState, note);
-    if (historyEntry.length) {
-        (_a = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.history) === null || _a === void 0 ? void 0 : _a.push(historyEntry);
-    }
-}
-exports.updateTransactionHistory = updateTransactionHistory;
-/**
- * Generates a history entry from the previous and new transaction metadata.
- *
- * @param previousState - The previous transaction metadata.
- * @param currentState - The new transaction metadata.
- * @param note - A note for the transaction metada update.
- * @returns An array of history operation.
- */
-function generateHistoryEntry(previousState, currentState, note) {
-    const historyOperationsEntry = fast_json_patch_1.default.compare(previousState, currentState);
-    // Add a note to the first operation, since it breaks if we append it to the entry
-    if (historyOperationsEntry[0]) {
-        if (note) {
-            historyOperationsEntry[0].note = note;
-        }
-        historyOperationsEntry[0].timestamp = Date.now();
-    }
-    return historyOperationsEntry;
-}
-/**
- * Recovers previous transactionMeta from passed history array.
- *
- * @param transactionHistory - The transaction metadata to replay.
- * @returns The transaction metadata.
- */
-function replayHistory(transactionHistory) {
-    const shortHistory = (0, lodash_1.cloneDeep)(transactionHistory);
-    return shortHistory.reduce((val, entry) => fast_json_patch_1.default.applyPatch(val, entry).newDocument);
-}
-/**
- * Clone the transaction meta data without the history property.
- *
- * @param transactionMeta - The transaction metadata to snapshot.
- * @returns A deep clone of transaction metadata without history property.
- */
-function snapshotFromTransactionMeta(transactionMeta) {
-    const snapshot = Object.assign({}, transactionMeta);
-    delete snapshot.history;
-    return (0, lodash_1.cloneDeep)(snapshot);
-}
-//# sourceMappingURL=history.js.map
\ No newline at end of file
diff --git a/dist/history.js.map b/dist/history.js.map
deleted file mode 100644
index 09322bef6364980d827e4353d4a9f69392627614..0000000000000000000000000000000000000000
--- a/dist/history.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"history.js","sourceRoot":"","sources":["../src/history.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAyC;AACzC,mCAAmC;AAQnC;;;;GAIG;AACH,SAAgB,yBAAyB,CAAC,eAAgC;IACxE,MAAM,QAAQ,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAC9D,eAAe,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AAHD,8DAGC;AAED;;;;;GAKG;AACH,SAAgB,wBAAwB,CACtC,eAAgC,EAChC,IAAY;;IAEZ,MAAM,YAAY,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,aAAa,CACjC,eAAe,CAAC,OAA6B,CAC9C,CAAC;IAEF,MAAM,YAAY,GAAG,oBAAoB,CAAC,aAAa,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAE7E,IAAI,YAAY,CAAC,MAAM,EAAE;QACvB,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,0CAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KAC9C;AACH,CAAC;AAdD,4DAcC;AAED;;;;;;;GAOG;AACH,SAAS,oBAAoB,CAC3B,aAAkB,EAClB,YAA6B,EAC7B,IAAY;IAEZ,MAAM,sBAAsB,GAAG,yBAAU,CAAC,OAAO,CAC/C,aAAa,EACb,YAAY,CACc,CAAC;IAC7B,kFAAkF;IAClF,IAAI,sBAAsB,CAAC,CAAC,CAAC,EAAE;QAC7B,IAAI,IAAI,EAAE;YACR,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;SACvC;QACD,sBAAsB,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KAClD;IACD,OAAO,sBAAsB,CAAC;AAChC,CAAC;AAED;;;;;GAKG;AACH,SAAS,aAAa,CACpB,kBAAsC;IAEtC,MAAM,YAAY,GAAG,IAAA,kBAAS,EAAC,kBAAkB,CAAC,CAAC;IACnD,OAAO,YAAY,CAAC,MAAM,CACxB,CAAC,GAAG,EAAE,KAAU,EAAE,EAAE,CAAC,yBAAU,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,WAAW,CAChD,CAAC;AACvB,CAAC;AAED;;;;;GAKG;AACH,SAAS,2BAA2B,CAClC,eAAgC;IAEhC,MAAM,QAAQ,qBAAQ,eAAe,CAAE,CAAC;IACxC,OAAO,QAAQ,CAAC,OAAO,CAAC;IACxB,OAAO,IAAA,kBAAS,EAAC,QAAQ,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import jsonDiffer from 'fast-json-patch';\nimport { cloneDeep } from 'lodash';\n\nimport type {\n  TransactionHistory,\n  TransactionHistoryEntry,\n  TransactionMeta,\n} from './types';\n\n/**\n * Add initial history snapshot to the provided transactionMeta history.\n *\n * @param transactionMeta - TransactionMeta to add initial history snapshot to.\n */\nexport function addInitialHistorySnapshot(transactionMeta: TransactionMeta) {\n  const snapshot = snapshotFromTransactionMeta(transactionMeta);\n  transactionMeta.history = [snapshot];\n}\n\n/**\n * Compares and adds history entry to the provided transactionMeta history.\n *\n * @param transactionMeta - TransactionMeta to add history entry to.\n * @param note - Note to add to history entry.\n */\nexport function updateTransactionHistory(\n  transactionMeta: TransactionMeta,\n  note: string,\n): void {\n  const currentState = snapshotFromTransactionMeta(transactionMeta);\n  const previousState = replayHistory(\n    transactionMeta.history as TransactionHistory,\n  );\n\n  const historyEntry = generateHistoryEntry(previousState, currentState, note);\n\n  if (historyEntry.length) {\n    transactionMeta?.history?.push(historyEntry);\n  }\n}\n\n/**\n * Generates a history entry from the previous and new transaction metadata.\n *\n * @param previousState - The previous transaction metadata.\n * @param currentState - The new transaction metadata.\n * @param note - A note for the transaction metada update.\n * @returns An array of history operation.\n */\nfunction generateHistoryEntry(\n  previousState: any,\n  currentState: TransactionMeta,\n  note: string,\n): TransactionHistoryEntry {\n  const historyOperationsEntry = jsonDiffer.compare(\n    previousState,\n    currentState,\n  ) as TransactionHistoryEntry;\n  // Add a note to the first operation, since it breaks if we append it to the entry\n  if (historyOperationsEntry[0]) {\n    if (note) {\n      historyOperationsEntry[0].note = note;\n    }\n    historyOperationsEntry[0].timestamp = Date.now();\n  }\n  return historyOperationsEntry;\n}\n\n/**\n * Recovers previous transactionMeta from passed history array.\n *\n * @param transactionHistory - The transaction metadata to replay.\n * @returns The transaction metadata.\n */\nfunction replayHistory(\n  transactionHistory: TransactionHistory,\n): TransactionMeta {\n  const shortHistory = cloneDeep(transactionHistory);\n  return shortHistory.reduce(\n    (val, entry: any) => jsonDiffer.applyPatch(val, entry).newDocument,\n  ) as TransactionMeta;\n}\n\n/**\n * Clone the transaction meta data without the history property.\n *\n * @param transactionMeta - The transaction metadata to snapshot.\n * @returns A deep clone of transaction metadata without history property.\n */\nfunction snapshotFromTransactionMeta(\n  transactionMeta: TransactionMeta,\n): TransactionMeta {\n  const snapshot = { ...transactionMeta };\n  delete snapshot.history;\n  return cloneDeep(snapshot);\n}\n"]}
\ No newline at end of file
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 9998101410342c4a5234f93405fa629960dc9110..cf9aae5c78c6acf610e8f0eda51b3d75b34bc9dc 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,5 +1,5 @@
 export * from './TransactionController';
-export type { EtherscanTransactionMeta } from './etherscan';
-export { isEIP1559Transaction } from './utils';
+export type { EtherscanTransactionMeta } from './utils/etherscan';
+export { isEIP1559Transaction } from './utils/utils';
 export * from './types';
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/dist/index.d.ts.map b/dist/index.d.ts.map
deleted file mode 100644
index 6b85676ed09647a3247aad3b0f50a17d32f2738d..0000000000000000000000000000000000000000
--- a/dist/index.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,yBAAyB,CAAC;AACxC,YAAY,EAAE,wBAAwB,EAAE,MAAM,aAAa,CAAC;AAC5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAC/C,cAAc,SAAS,CAAC"}
\ No newline at end of file
diff --git a/dist/index.js b/dist/index.js
index 602f51c125f609fc8e11aa36671b63188b1a9ff5..cfd026df986fbd35fdeb9d93940f003bde00cdb4 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -16,7 +16,7 @@ var __exportStar = (this && this.__exportStar) || function(m, exports) {
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.isEIP1559Transaction = void 0;
 __exportStar(require("./TransactionController"), exports);
-var utils_1 = require("./utils");
+var utils_1 = require("./utils/utils");
 Object.defineProperty(exports, "isEIP1559Transaction", { enumerable: true, get: function () { return utils_1.isEIP1559Transaction; } });
 __exportStar(require("./types"), exports);
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/dist/index.js.map b/dist/index.js.map
deleted file mode 100644
index c4fa911f8d6b99b6c5c088a4793f3dbbfc467ba1..0000000000000000000000000000000000000000
--- a/dist/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0DAAwC;AAExC,iCAA+C;AAAtC,6GAAA,oBAAoB,OAAA;AAC7B,0CAAwB","sourcesContent":["export * from './TransactionController';\nexport type { EtherscanTransactionMeta } from './etherscan';\nexport { isEIP1559Transaction } from './utils';\nexport * from './types';\n"]}
\ No newline at end of file
diff --git a/dist/logger.d.ts.map b/dist/logger.d.ts.map
deleted file mode 100644
index bb648efa761c202101a89b638d574fb8c68fa019..0000000000000000000000000000000000000000
--- a/dist/logger.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"logger.d.ts","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";AAAA,OAAO,EAAuB,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAE1E,eAAO,MAAM,aAAa,0BAAgD,CAAC;AAE3E,eAAO,MAAM,0BAA0B,0BAGtC,CAAC;AAEF,OAAO,EAAE,kBAAkB,EAAE,CAAC"}
\ No newline at end of file
diff --git a/dist/logger.js b/dist/logger.js
index 69ce8ecbe3d5e6f6f0887be4d590f7d9be2d82ec..bb55b171403efd998b40570fe3d30d8c3a796254 100644
--- a/dist/logger.js
+++ b/dist/logger.js
@@ -1,4 +1,5 @@
 "use strict";
+/* istanbul ignore file */
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.createModuleLogger = exports.incomingTransactionsLogger = exports.projectLogger = void 0;
 const utils_1 = require("@metamask/utils");
diff --git a/dist/logger.js.map b/dist/logger.js.map
deleted file mode 100644
index 616e0cd683c5927de6dca2611a4fc39de27062b5..0000000000000000000000000000000000000000
--- a/dist/logger.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";;;AAAA,2CAA0E;AASjE,mGATqB,0BAAkB,OASrB;AAPd,QAAA,aAAa,GAAG,IAAA,2BAAmB,EAAC,wBAAwB,CAAC,CAAC;AAE9D,QAAA,0BAA0B,GAAG,IAAA,0BAAkB,EAC1D,qBAAa,EACb,uBAAuB,CACxB,CAAC","sourcesContent":["import { createProjectLogger, createModuleLogger } from '@metamask/utils';\n\nexport const projectLogger = createProjectLogger('transaction-controller');\n\nexport const incomingTransactionsLogger = createModuleLogger(\n  projectLogger,\n  'incoming-transactions',\n);\n\nexport { createModuleLogger };\n"]}
\ No newline at end of file
diff --git a/dist/transaction-type.d.ts b/dist/transaction-type.d.ts
deleted file mode 100644
index d6723e70729d6ca5bb2b9365764dd0b9d92cac5b..0000000000000000000000000000000000000000
--- a/dist/transaction-type.d.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import type EthQuery from '@metamask/eth-query';
-import type { InferTransactionTypeResult, TransactionParams } from './types';
-export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
-/**
- * Determines the type of the transaction by analyzing the txParams.
- * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these
- * represent specific events that we specify manually at transaction creation.
- *
- * @param txParams - Parameters for the transaction.
- * @param ethQuery - EthQuery instance.
- * @returns A object with the transaction type and the contract code response in Hex.
- */
-export declare function determineTransactionType(txParams: TransactionParams, ethQuery: EthQuery): Promise<InferTransactionTypeResult>;
-//# sourceMappingURL=transaction-type.d.ts.map
\ No newline at end of file
diff --git a/dist/transaction-type.d.ts.map b/dist/transaction-type.d.ts.map
deleted file mode 100644
index 0721a7295d58f9be8f69eed78790fa28c2f43d1b..0000000000000000000000000000000000000000
--- a/dist/transaction-type.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"transaction-type.d.ts","sourceRoot":"","sources":["../src/transaction-type.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAGhD,OAAO,KAAK,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAG7E,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAMrE;;;;;;;;GAQG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,iBAAiB,EAC3B,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,0BAA0B,CAAC,CAiCrC"}
\ No newline at end of file
diff --git a/dist/transaction-type.js b/dist/transaction-type.js
deleted file mode 100644
index 6497fd02c027bbfc3f828bb47a2f582259d8debb..0000000000000000000000000000000000000000
--- a/dist/transaction-type.js
+++ /dev/null
@@ -1,114 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.determineTransactionType = exports.ESTIMATE_GAS_ERROR = void 0;
-const abi_1 = require("@ethersproject/abi");
-const controller_utils_1 = require("@metamask/controller-utils");
-const metamask_eth_abis_1 = require("@metamask/metamask-eth-abis");
-const types_1 = require("./types");
-exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
-const ERC20Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC20);
-const ERC721Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC721);
-const ERC1155Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC1155);
-/**
- * Determines the type of the transaction by analyzing the txParams.
- * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these
- * represent specific events that we specify manually at transaction creation.
- *
- * @param txParams - Parameters for the transaction.
- * @param ethQuery - EthQuery instance.
- * @returns A object with the transaction type and the contract code response in Hex.
- */
-function determineTransactionType(txParams, ethQuery) {
-    var _a;
-    return __awaiter(this, void 0, void 0, function* () {
-        const { data, to } = txParams;
-        const name = (_a = parseStandardTokenTransactionData(data)) === null || _a === void 0 ? void 0 : _a.name;
-        if (data && !to) {
-            return { type: types_1.TransactionType.deployContract, getCodeResponse: undefined };
-        }
-        const { contractCode: resultCode, isContractAddress } = yield readAddressAsContract(ethQuery, to);
-        if (!isContractAddress) {
-            return { type: types_1.TransactionType.simpleSend, getCodeResponse: resultCode };
-        }
-        const hasValue = txParams.value && Number(txParams.value) !== 0;
-        const tokenMethodName = [
-            types_1.TransactionType.tokenMethodApprove,
-            types_1.TransactionType.tokenMethodSetApprovalForAll,
-            types_1.TransactionType.tokenMethodTransfer,
-            types_1.TransactionType.tokenMethodTransferFrom,
-            types_1.TransactionType.tokenMethodSafeTransferFrom,
-        ].find((methodName) => methodName.toLowerCase() === (name === null || name === void 0 ? void 0 : name.toLowerCase()));
-        if (data && tokenMethodName && !hasValue) {
-            return { type: tokenMethodName, getCodeResponse: resultCode };
-        }
-        return {
-            type: types_1.TransactionType.contractInteraction,
-            getCodeResponse: resultCode,
-        };
-    });
-}
-exports.determineTransactionType = determineTransactionType;
-/**
- * Attempts to decode transaction data using ABIs for three different token standards: ERC20, ERC721, ERC1155.
- * The data will decode correctly if the transaction is an interaction with a contract that matches one of these
- * contract standards
- *
- * @param data - Encoded transaction data.
- * @returns A representation of an ethereum contract call.
- */
-function parseStandardTokenTransactionData(data) {
-    if (!data) {
-        return undefined;
-    }
-    try {
-        return ERC20Interface.parseTransaction({ data });
-    }
-    catch (_a) {
-        // ignore and next try to parse with erc721 ABI
-    }
-    try {
-        return ERC721Interface.parseTransaction({ data });
-    }
-    catch (_b) {
-        // ignore and next try to parse with erc1155 ABI
-    }
-    try {
-        return ERC1155Interface.parseTransaction({ data });
-    }
-    catch (_c) {
-        // ignore and return undefined
-    }
-    return undefined;
-}
-/**
- * Reads an Ethereum address and determines if it is a contract address.
- *
- * @param ethQuery - The Ethereum query object used to interact with the Ethereum blockchain.
- * @param address - The Ethereum address.
- * @returns An object containing the contract code and a boolean indicating if it is a contract address.
- */
-function readAddressAsContract(ethQuery, address) {
-    return __awaiter(this, void 0, void 0, function* () {
-        let contractCode;
-        try {
-            contractCode = yield (0, controller_utils_1.query)(ethQuery, 'getCode', [address]);
-        }
-        catch (e) {
-            contractCode = null;
-        }
-        const isContractAddress = contractCode
-            ? contractCode !== '0x' && contractCode !== '0x0'
-            : false;
-        return { contractCode, isContractAddress };
-    });
-}
-//# sourceMappingURL=transaction-type.js.map
\ No newline at end of file
diff --git a/dist/transaction-type.js.map b/dist/transaction-type.js.map
deleted file mode 100644
index fc7d6688b16bf302ad949725f78e6b505da8a266..0000000000000000000000000000000000000000
--- a/dist/transaction-type.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"transaction-type.js","sourceRoot":"","sources":["../src/transaction-type.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TransactionDescription } from '@ethersproject/abi';\nimport { Interface } from '@ethersproject/abi';\nimport { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport { abiERC721, abiERC20, abiERC1155 } from '@metamask/metamask-eth-abis';\n\nimport type { InferTransactionTypeResult, TransactionParams } from './types';\nimport { TransactionType } from './types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst ERC20Interface = new Interface(abiERC20);\nconst ERC721Interface = new Interface(abiERC721);\nconst ERC1155Interface = new Interface(abiERC1155);\n\n/**\n * Determines the type of the transaction by analyzing the txParams.\n * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these\n * represent specific events that we specify manually at transaction creation.\n *\n * @param txParams - Parameters for the transaction.\n * @param ethQuery - EthQuery instance.\n * @returns A object with the transaction type and the contract code response in Hex.\n */\nexport async function determineTransactionType(\n  txParams: TransactionParams,\n  ethQuery: EthQuery,\n): Promise<InferTransactionTypeResult> {\n  const { data, to } = txParams;\n  const name = parseStandardTokenTransactionData(data)?.name;\n\n  if (data && !to) {\n    return { type: TransactionType.deployContract, getCodeResponse: undefined };\n  }\n\n  const { contractCode: resultCode, isContractAddress } =\n    await readAddressAsContract(ethQuery, to);\n\n  if (!isContractAddress) {\n    return { type: TransactionType.simpleSend, getCodeResponse: resultCode };\n  }\n\n  const hasValue = txParams.value && Number(txParams.value) !== 0;\n\n  const tokenMethodName = [\n    TransactionType.tokenMethodApprove,\n    TransactionType.tokenMethodSetApprovalForAll,\n    TransactionType.tokenMethodTransfer,\n    TransactionType.tokenMethodTransferFrom,\n    TransactionType.tokenMethodSafeTransferFrom,\n  ].find((methodName) => methodName.toLowerCase() === name?.toLowerCase());\n\n  if (data && tokenMethodName && !hasValue) {\n    return { type: tokenMethodName, getCodeResponse: resultCode };\n  }\n\n  return {\n    type: TransactionType.contractInteraction,\n    getCodeResponse: resultCode,\n  };\n}\n\n/**\n * Attempts to decode transaction data using ABIs for three different token standards: ERC20, ERC721, ERC1155.\n * The data will decode correctly if the transaction is an interaction with a contract that matches one of these\n * contract standards\n *\n * @param data - Encoded transaction data.\n * @returns A representation of an ethereum contract call.\n */\nfunction parseStandardTokenTransactionData(\n  data?: string,\n): TransactionDescription | undefined {\n  if (!data) {\n    return undefined;\n  }\n\n  try {\n    return ERC20Interface.parseTransaction({ data });\n  } catch {\n    // ignore and next try to parse with erc721 ABI\n  }\n\n  try {\n    return ERC721Interface.parseTransaction({ data });\n  } catch {\n    // ignore and next try to parse with erc1155 ABI\n  }\n\n  try {\n    return ERC1155Interface.parseTransaction({ data });\n  } catch {\n    // ignore and return undefined\n  }\n\n  return undefined;\n}\n\n/**\n * Reads an Ethereum address and determines if it is a contract address.\n *\n * @param ethQuery - The Ethereum query object used to interact with the Ethereum blockchain.\n * @param address - The Ethereum address.\n * @returns An object containing the contract code and a boolean indicating if it is a contract address.\n */\nasync function readAddressAsContract(\n  ethQuery: EthQuery,\n  address?: string,\n): Promise<{\n  contractCode: string | null;\n  isContractAddress: boolean;\n}> {\n  let contractCode;\n  try {\n    contractCode = await query(ethQuery, 'getCode', [address]);\n  } catch (e) {\n    contractCode = null;\n  }\n\n  const isContractAddress = contractCode\n    ? contractCode !== '0x' && contractCode !== '0x0'\n    : false;\n  return { contractCode, isContractAddress };\n}\n"]}
\ No newline at end of file
diff --git a/dist/types.d.ts b/dist/types.d.ts
index fb94e7b8f531f2f0c86f44a9d678447d7205ade8..17c9fb78aed2b00afb16c4db15b3a975b9c9b6e8 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -1,18 +1,73 @@
+import type { AccessList } from '@ethereumjs/tx';
 import type { Hex } from '@metamask/utils';
 import type { Operation } from 'fast-json-patch';
+export declare type Events = {
+    ['incomingTransactionBlock']: [blockNumber: number];
+    ['post-transaction-balance-updated']: [
+        {
+            transactionMeta: TransactionMeta;
+            approvalTransactionMeta?: TransactionMeta;
+        }
+    ];
+    ['transaction-approved']: [
+        {
+            transactionMeta: TransactionMeta;
+            actionId?: string;
+        }
+    ];
+    ['transaction-confirmed']: [{
+        transactionMeta: TransactionMeta;
+    }];
+    ['transaction-dropped']: [{
+        transactionMeta: TransactionMeta;
+    }];
+    ['transaction-failed']: [
+        {
+            actionId?: string;
+            error: string;
+            transactionMeta: TransactionMeta;
+        }
+    ];
+    ['transaction-new-swap']: [{
+        transactionMeta: TransactionMeta;
+    }];
+    ['transaction-new-swap-approval']: [{
+        transactionMeta: TransactionMeta;
+    }];
+    ['transaction-rejected']: [
+        {
+            transactionMeta: TransactionMeta;
+            actionId?: string;
+        }
+    ];
+    ['transaction-submitted']: [
+        {
+            transactionMeta: TransactionMeta;
+            actionId?: string;
+        }
+    ];
+    ['unapprovedTransaction']: [transactionMeta: TransactionMeta];
+    [key: `${string}:finished`]: [transactionMeta: TransactionMeta];
+    [key: `${string}:confirmed`]: [transactionMeta: TransactionMeta];
+    [key: `${string}:speedup`]: [transactionMeta: TransactionMeta];
+};
 /**
  * Representation of transaction metadata.
  */
-export declare type TransactionMeta = ({
+export declare type TransactionMeta = TransactionMetaBase & ({
     status: Exclude<TransactionStatus, TransactionStatus.failed>;
-} & TransactionMetaBase) | ({
+} | {
     status: TransactionStatus.failed;
-    error: Error;
-} & TransactionMetaBase);
+    error: TransactionError;
+});
 /**
  * Information about a single transaction such as status and block number.
  */
 declare type TransactionMetaBase = {
+    /**
+     * ID of the transaction that approved the swap token transfer.
+     */
+    approvalTxId?: string;
     /**
      * Unique ID to prevent duplicate requests.
      */
@@ -33,18 +88,54 @@ declare type TransactionMetaBase = {
      * Network code as per EIP-155 for this transaction.
      */
     chainId: Hex;
+    /**
+     * A string representing a name of transaction contract method.
+     */
+    contractMethodName?: string;
+    /**
+     * The balance of the token that is being sent.
+     */
+    currentTokenBalance?: string;
+    /**
+     * Unique ID for custodian transaction.
+     */
+    custodyId?: string;
+    /**
+     * Custodian transaction status.
+     */
+    custodyStatus?: string;
+    /**
+     * The custom token amount is the amount set by the user.
+     */
+    customTokenAmount?: string;
+    /**
+     * The dapp proposed token amount.
+     */
+    dappProposedTokenAmount?: string;
     /**
      * Gas values provided by the dApp.
      */
     dappSuggestedGasFees?: DappSuggestedGasFees;
     /**
-     * The default estimate for gas.
+     * The initial gas values set when the transaction was first created.
      */
-    defaultGasEstimates?: string;
+    defaultGasEstimates?: DefaultGasEstimates;
     /**
      * String to indicate what device the transaction was confirmed on.
      */
     deviceConfirmedOn?: WalletDevice;
+    /**
+     * The address of the token being received of swap transaction.
+     */
+    destinationTokenAddress?: string;
+    /**
+     * The decimals of the token being received of swap transaction.
+     */
+    destinationTokenDecimals?: string;
+    /**
+     * The symbol of the token being received with swap.
+     */
+    destinationTokenSymbol?: string;
     /**
      * The estimated base fee of the transaction.
      */
@@ -57,6 +148,16 @@ declare type TransactionMetaBase = {
      * Which estimate level was used
      */
     estimateUsed?: string;
+    /**
+     * The chosen amount which will be the same as the originally proposed token
+     * amount if the user does not edit the  amount or will be a custom token
+     * amount set by the user.
+     */
+    finalApprovalAmount?: string;
+    /**
+     * The number of the latest block when the transaction submit was first retried.
+     */
+    firstRetryBlockNumber?: string;
     /**
      * A hex string of the transaction hash, used to identify the transaction on the network.
      */
@@ -83,10 +184,45 @@ declare type TransactionMetaBase = {
      * Origin this transaction was sent from.
      */
     origin?: string;
+    /**
+     * The original dapp proposed token approval amount before edit by user.
+     */
+    originalApprovalAmount?: string;
     /**
      * The original gas estimation of the transaction.
      */
     originalGasEstimate?: string;
+    /**
+     * When we speed up a transaction, we set the type as Retry and we lose
+     * information about type of transaction that is being set up, so we use
+     * original type to track that information.
+     */
+    originalType?: TransactionType;
+    /**
+     * Account transaction balance after swap.
+     */
+    postTxBalance?: string;
+    /**
+     * Account transaction balance before swap.
+     */
+    preTxBalance?: string;
+    /**
+     * The previous gas properties before they were updated.
+     */
+    previousGas?: {
+        /**
+         * Maxmimum number of units of gas to use for this transaction.
+         */
+        gasLimit?: string;
+        /**
+         * Maximum amount per gas to pay for the transaction, including the priority fee.
+         */
+        maxFeePerGas?: string;
+        /**
+         * Maximum amount per gas to give to validator as incentive.
+         */
+        maxPriorityFeePerGas?: string;
+    };
     /**
      * The transaction's 'r' value as a hex string.
      */
@@ -103,6 +239,10 @@ declare type TransactionMetaBase = {
      * When the transaction is dropped, this is the replacement transaction ID.
      */
     replacedById?: string;
+    /**
+     * The number of times that the transaction submit has been retried.
+     */
+    retryCount?: number;
     /**
      * The transaction's 's' value as a hex string.
      */
@@ -110,16 +250,43 @@ declare type TransactionMetaBase = {
     /**
      * Response from security validator.
      */
-    securityAlertResponse?: Record<string, unknown>;
+    securityAlertResponse?: SecurityAlertResponse;
+    /**
+     * Response from security provider.
+     */
+    securityProviderResponse?: Record<string, any>;
     /**
      * An array of entries that describe the user's journey through the send flow.
      * This is purely attached to state logs for troubleshooting and support.
      */
     sendFlowHistory?: SendFlowHistoryEntry[];
+    /**
+     * If the gas estimation fails, an object containing error and block information.
+     */
+    simulationFails?: {
+        reason?: string;
+        errorKey?: string;
+        debug: {
+            blockNumber?: string;
+            blockGasLimit?: string;
+        };
+    };
     /**
      * The time the transaction was submitted to the network, in Unix epoch time (ms).
      */
     submittedTime?: number;
+    /**
+     * The symbol of the token being swapped.
+     */
+    sourceTokenSymbol?: string;
+    /**
+     * The metadata of the swap transaction.
+     */
+    swapMetaData?: Record<string, unknown>;
+    /**
+     * The value of the token being swapped.
+     */
+    swapTokenValue?: string;
     /**
      * Timestamp associated with this transaction.
      */
@@ -164,6 +331,13 @@ declare type TransactionMetaBase = {
      * Whether the transaction is verified on the blockchain.
      */
     verifiedOnBlockchain?: boolean;
+    /**
+     * Warning information for the transaction.
+     */
+    warning?: {
+        error: string;
+        message: string;
+    };
 };
 export declare type SendFlowHistoryEntry = {
     /**
@@ -182,6 +356,7 @@ export declare type SendFlowHistoryEntry = {
  */
 export declare enum TransactionStatus {
     approved = "approved",
+    /** @deprecated Determined by the clients using the transaction type. No longer used. */
     cancelled = "cancelled",
     confirmed = "confirmed",
     dropped = "dropped",
@@ -300,6 +475,10 @@ export declare enum TransactionType {
  * Standard data concerning a transaction to be processed by the blockchain.
  */
 export interface TransactionParams {
+    /**
+     * A list of addresses and storage keys that the transaction plans to access.
+     */
+    accessList?: AccessList;
     /**
      * Network ID as per EIP-155.
      */
@@ -316,6 +495,14 @@ export interface TransactionParams {
      * Estimated base fee for this transaction.
      */
     estimatedBaseFee?: string;
+    /**
+     * Which estimate level that the API suggested.
+     */
+    estimateSuggested?: string;
+    /**
+     * Which estimate level was used
+     */
+    estimateUsed?: string;
     /**
      * Address to send this transaction from.
      */
@@ -463,6 +650,13 @@ export interface DappSuggestedGasFees {
     maxFeePerGas?: string;
     maxPriorityFeePerGas?: string;
 }
+/**
+ * Gas values saved by the user for a specific chain.
+ */
+export interface SavedGasFees {
+    maxBaseFee: string;
+    priorityFee: string;
+}
 /**
  * A transaction history operation that includes a note and timestamp.
  */
@@ -499,5 +693,101 @@ export declare type InferTransactionTypeResult = {
      */
     type: TransactionType;
 };
+/**
+ * A function for verifying a transaction, whether it is malicious or not.
+ */
+export declare type SecurityProviderRequest = (requestData: TransactionMeta, messageType: string) => Promise<any>;
+/**
+ * Specifies the shape of the base transaction parameters.
+ * Added in EIP-2718.
+ */
+export declare enum TransactionEnvelopeType {
+    /**
+     * A legacy transaction, the very first type.
+     */
+    legacy = "0x0",
+    /**
+     * EIP-2930 defined the access list transaction type that allowed for
+     * specifying the state that a transaction would act upon in advance and
+     * theoretically save on gas fees.
+     */
+    accessList = "0x1",
+    /**
+     * The type introduced comes from EIP-1559, Fee Market describes the addition
+     * of a baseFee to blocks that will be burned instead of distributed to
+     * miners. Transactions of this type have both a maxFeePerGas (maximum total
+     * amount in gwei per gas to spend on the transaction) which is inclusive of
+     * the maxPriorityFeePerGas (maximum amount of gwei per gas from the
+     * transaction fee to distribute to miner).
+     */
+    feeMarket = "0x2"
+}
+/**
+ * The source of the gas fee parameters on a transaction.
+ */
+export declare enum UserFeeLevel {
+    CUSTOM = "custom",
+    DAPP_SUGGESTED = "dappSuggested",
+    MEDIUM = "medium"
+}
+/**
+ * Initial gas values set when the transaction was first created.
+ */
+export declare type DefaultGasEstimates = {
+    /**
+     * Source of the gas fee values, such as `dappSuggested` or `medium`.
+     */
+    estimateType?: string;
+    /**
+     * Maxmimum number of units of gas to use for this transaction.
+     */
+    gas?: string;
+    /**
+     * Price per gas for legacy transactions.
+     */
+    gasPrice?: string;
+    /**
+     * Maximum amount per gas to pay for the transaction, including the priority fee.
+     */
+    maxFeePerGas?: string;
+    /**
+     * Maximum amount per gas to give to validator as incentive.
+     */
+    maxPriorityFeePerGas?: string;
+};
+/**
+ * Data concerning an error while processing a transaction.
+ */
+export declare type TransactionError = {
+    /**
+     * A descriptive error name.
+     */
+    name: string;
+    /**
+     * A descriptive error message providing details about the encountered error.
+     */
+    message: string;
+    /**
+     * The stack trace associated with the error, if available.
+     */
+    stack?: string;
+    /**
+     * An optional error code associated with the error.
+     */
+    code?: string;
+    /**
+     * The rpc property holds additional information related to the error.
+     */
+    rpc?: unknown;
+};
+/**
+ * Type for security alert response from transaction validator.
+ */
+export declare type SecurityAlertResponse = {
+    reason: string;
+    features?: string[];
+    result_type: string;
+    providerRequestsCount?: Record<string, number>;
+};
 export {};
 //# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/dist/types.d.ts.map b/dist/types.d.ts.map
deleted file mode 100644
index 2dc9ab63fcfaaff3aa096d141377b66446e1f13b..0000000000000000000000000000000000000000
--- a/dist/types.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.js b/dist/types.js
index 6bbf145ca4f31b0826fde7bc4ca9610cb02365c9..639f911e10b4c9092ad7a77f5dcba2c3a0c2f783 100644
--- a/dist/types.js
+++ b/dist/types.js
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.TransactionType = exports.WalletDevice = exports.TransactionStatus = void 0;
+exports.UserFeeLevel = exports.TransactionEnvelopeType = exports.TransactionType = exports.WalletDevice = exports.TransactionStatus = void 0;
 /**
  * The status of the transaction. Each status represents the state of the transaction internally
  * in the wallet. Some of these correspond with the state of the transaction on the network, but
@@ -9,6 +9,7 @@ exports.TransactionType = exports.WalletDevice = exports.TransactionStatus = voi
 var TransactionStatus;
 (function (TransactionStatus) {
     TransactionStatus["approved"] = "approved";
+    /** @deprecated Determined by the clients using the transaction type. No longer used. */
     TransactionStatus["cancelled"] = "cancelled";
     TransactionStatus["confirmed"] = "confirmed";
     TransactionStatus["dropped"] = "dropped";
@@ -125,4 +126,39 @@ var TransactionType;
      */
     TransactionType["tokenMethodSetApprovalForAll"] = "setapprovalforall";
 })(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
+/**
+ * Specifies the shape of the base transaction parameters.
+ * Added in EIP-2718.
+ */
+var TransactionEnvelopeType;
+(function (TransactionEnvelopeType) {
+    /**
+     * A legacy transaction, the very first type.
+     */
+    TransactionEnvelopeType["legacy"] = "0x0";
+    /**
+     * EIP-2930 defined the access list transaction type that allowed for
+     * specifying the state that a transaction would act upon in advance and
+     * theoretically save on gas fees.
+     */
+    TransactionEnvelopeType["accessList"] = "0x1";
+    /**
+     * The type introduced comes from EIP-1559, Fee Market describes the addition
+     * of a baseFee to blocks that will be burned instead of distributed to
+     * miners. Transactions of this type have both a maxFeePerGas (maximum total
+     * amount in gwei per gas to spend on the transaction) which is inclusive of
+     * the maxPriorityFeePerGas (maximum amount of gwei per gas from the
+     * transaction fee to distribute to miner).
+     */
+    TransactionEnvelopeType["feeMarket"] = "0x2";
+})(TransactionEnvelopeType = exports.TransactionEnvelopeType || (exports.TransactionEnvelopeType = {}));
+/**
+ * The source of the gas fee parameters on a transaction.
+ */
+var UserFeeLevel;
+(function (UserFeeLevel) {
+    UserFeeLevel["CUSTOM"] = "custom";
+    UserFeeLevel["DAPP_SUGGESTED"] = "dappSuggested";
+    UserFeeLevel["MEDIUM"] = "medium";
+})(UserFeeLevel = exports.UserFeeLevel || (exports.UserFeeLevel = {}));
 //# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/dist/types.js.map b/dist/types.js.map
deleted file mode 100644
index 7bca6309ea4e62b2fa4c1a99b9dbad0b35e89705..0000000000000000000000000000000000000000
--- a/dist/types.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAwNA;;;;GAIG;AACH,IAAY,iBAUX;AAVD,WAAY,iBAAiB;IAC3B,0CAAqB,CAAA;IACrB,4CAAuB,CAAA;IACvB,4CAAuB,CAAA;IACvB,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;IACjB,0CAAqB,CAAA;IACrB,sCAAiB,CAAA;IACjB,4CAAuB,CAAA;IACvB,8CAAyB,CAAA;AAC3B,CAAC,EAVW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAU5B;AAED;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,6CAA6B,CAAA;IAC7B,mDAAmC,CAAA;IACnC,sCAAsB,CAAA;AACxB,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB;AAED;;GAEG;AACH,IAAY,eA+GX;AA/GD,WAAY,eAAe;IACzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;;;OAIG;IACH,8DAA2C,CAAA;IAE3C;;OAEG;IACH,wDAAqC,CAAA;IAErC;;OAEG;IACH,6CAA0B,CAAA;IAE1B;;OAEG;IACH,2EAAwD,CAAA;IAExD;;OAEG;IACH,wCAAqB,CAAA;IAErB;;OAEG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,4CAAyB,CAAA;IAEzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;OAEG;IACH,sDAAmC,CAAA;IAEnC;;OAEG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,gCAAa,CAAA;IAEb;;;;;OAKG;IACH,gDAA6B,CAAA;IAE7B;;;OAGG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,mEAAgD,CAAA;IAEhD;;;OAGG;IACH,mDAAgC,CAAA;IAEhC;;;;OAIG;IACH,2DAAwC,CAAA;IAExC;;;OAGG;IACH,qEAAkD,CAAA;AACpD,CAAC,EA/GW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QA+G1B","sourcesContent":["import type { Hex } from '@metamask/utils';\nimport type { Operation } from 'fast-json-patch';\n\n/**\n * Representation of transaction metadata.\n */\nexport type TransactionMeta =\n  | ({\n      status: Exclude<TransactionStatus, TransactionStatus.failed>;\n    } & TransactionMetaBase)\n  | ({ status: TransactionStatus.failed; error: Error } & TransactionMetaBase);\n\n/**\n * Information about a single transaction such as status and block number.\n */\ntype TransactionMetaBase = {\n  /**\n   * Unique ID to prevent duplicate requests.\n   */\n  actionId?: string;\n\n  /**\n   * Base fee of the block as a hex value, introduced in EIP-1559.\n   */\n  baseFeePerGas?: Hex;\n\n  /**\n   * Number of the block where the transaction has been included.\n   */\n  blockNumber?: string;\n\n  /**\n   * The timestamp for when the block was collated.\n   */\n  blockTimestamp?: string;\n\n  /**\n   * Network code as per EIP-155 for this transaction.\n   */\n  chainId: Hex;\n\n  /**\n   * Gas values provided by the dApp.\n   */\n  dappSuggestedGasFees?: DappSuggestedGasFees;\n\n  /**\n   * The default estimate for gas.\n   */\n  defaultGasEstimates?: string;\n\n  /**\n   * String to indicate what device the transaction was confirmed on.\n   */\n  deviceConfirmedOn?: WalletDevice;\n\n  /**\n   * The estimated base fee of the transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * A hex string of the transaction hash, used to identify the transaction on the network.\n   */\n  hash?: string;\n\n  /**\n   * A history of mutations to TransactionMeta.\n   */\n  history?: TransactionHistory;\n\n  /**\n   * Generated UUID associated with this transaction.\n   */\n  id: string;\n\n  /**\n   * Whether the transaction is a transfer.\n   */\n  isTransfer?: boolean;\n\n  /**\n   * Network code as per EIP-155 for this transaction\n   *\n   * @deprecated Use `chainId` instead.\n   */\n  readonly networkID?: string;\n\n  /**\n   * Origin this transaction was sent from.\n   */\n  origin?: string;\n\n  /**\n   * The original gas estimation of the transaction.\n   */\n  originalGasEstimate?: string;\n\n  /**\n   * The transaction's 'r' value as a hex string.\n   */\n  r?: string;\n\n  /**\n   * Hex representation of the underlying transaction.\n   */\n  rawTx?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction hash.\n   */\n  replacedBy?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction ID.\n   */\n  replacedById?: string;\n\n  /**\n   * The transaction's 's' value as a hex string.\n   */\n  s?: string;\n\n  /**\n   * Response from security validator.\n   */\n  securityAlertResponse?: Record<string, unknown>;\n\n  /**\n   * An array of entries that describe the user's journey through the send flow.\n   * This is purely attached to state logs for troubleshooting and support.\n   */\n  sendFlowHistory?: SendFlowHistoryEntry[];\n\n  /**\n   * The time the transaction was submitted to the network, in Unix epoch time (ms).\n   */\n  submittedTime?: number;\n\n  /**\n   * Timestamp associated with this transaction.\n   */\n  time: number;\n\n  /**\n   * Whether transaction recipient is a smart contract.\n   */\n  toSmartContract?: boolean;\n\n  /**\n   * Additional transfer information.\n   */\n  transferInformation?: {\n    contractAddress: string;\n    decimals: number;\n    symbol: string;\n  };\n\n  /**\n   * Underlying Transaction object.\n   */\n  txParams: TransactionParams;\n\n  /**\n   * Transaction receipt.\n   */\n  txReceipt?: TransactionReceipt;\n\n  /**\n   * The type of transaction such as `cancel` or `swap`.\n   */\n  type?: TransactionType;\n\n  /**\n   * The gas limit supplied by user.\n   */\n  userEditedGasLimit?: boolean;\n\n  /**\n   * Estimate level user selected.\n   */\n  userFeeLevel?: string;\n\n  /**\n   * The transaction's 'v' value as a hex string.\n   */\n  v?: string;\n\n  /**\n   * Whether the transaction is verified on the blockchain.\n   */\n  verifiedOnBlockchain?: boolean;\n};\n\nexport type SendFlowHistoryEntry = {\n  /**\n   * String to indicate user interaction information.\n   */\n  entry: string;\n\n  /**\n   * Timestamp associated with this entry.\n   */\n  timestamp: number;\n};\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nexport enum TransactionStatus {\n  approved = 'approved',\n  cancelled = 'cancelled',\n  confirmed = 'confirmed',\n  dropped = 'dropped',\n  failed = 'failed',\n  rejected = 'rejected',\n  signed = 'signed',\n  submitted = 'submitted',\n  unapproved = 'unapproved',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * The type of the transaction.\n */\nexport enum TransactionType {\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  cancel = 'cancel',\n\n  /**\n   * A transaction that is interacting with a smart contract's methods that we\n   * have not treated as a special case, such as approve, transfer, and\n   * transferfrom.\n   */\n  contractInteraction = 'contractInteraction',\n\n  /**\n   * A transaction that deployed a smart contract.\n   */\n  deployContract = 'contractDeployment',\n\n  /**\n   * A transaction for Ethereum decryption.\n   */\n  ethDecrypt = 'eth_decrypt',\n\n  /**\n   * A transaction for getting an encryption public key.\n   */\n  ethGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n\n  /**\n   * An incoming (deposit) transaction.\n   */\n  incoming = 'incoming',\n\n  /**\n   * A transaction for personal sign.\n   */\n  personalSign = 'personal_sign',\n\n  /**\n   * When a transaction is failed it can be retried by\n   * resubmitting the same transaction with a higher gas fee. This type is also used\n   * to speed up pending transactions. This is accomplished by creating a new tx with\n   * the same nonce and higher gas fees.\n   */\n  retry = 'retry',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  simpleSend = 'simpleSend',\n\n  /**\n   * A transaction that is signing a message.\n   */\n  sign = 'eth_sign',\n\n  /**\n   * A transaction that is signing typed data.\n   */\n  signTypedData = 'eth_signTypedData',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  smart = 'smart',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps.\n   */\n  swap = 'swap',\n\n  /**\n   * Similar to the approve type, a swap approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Swaps contract. The first swap for any token\n   * will have an accompanying swapApproval transaction.\n   */\n  swapApproval = 'swapApproval',\n\n  /**\n   * A token transaction requesting an allowance of the token to spend on\n   * behalf of the user.\n   */\n  tokenMethodApprove = 'approve',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. The method is prefixed with safe because when calling\n   * this method the contract checks to ensure that the receiver is an address\n   * capable of handling the token being sent.\n   */\n  tokenMethodSafeTransferFrom = 'safetransferfrom',\n\n  /**\n   * A token transaction where the user is sending tokens that they own to\n   * another address.\n   */\n  tokenMethodTransfer = 'transfer',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. For more information on allowances, see the approve\n   * type.\n   */\n  tokenMethodTransferFrom = 'transferfrom',\n\n  /**\n   * A token transaction requesting an allowance of all of a user's tokens to\n   * spend on behalf of the user.\n   */\n  tokenMethodSetApprovalForAll = 'setapprovalforall',\n}\n\n/**\n * Standard data concerning a transaction to be processed by the blockchain.\n */\nexport interface TransactionParams {\n  /**\n   * Network ID as per EIP-155.\n   */\n  chainId?: Hex;\n\n  /**\n   * Data to pass with this transaction.\n   */\n  data?: string;\n\n  /**\n   * Error message for gas estimation failure.\n   */\n  estimateGasError?: string;\n\n  /**\n   * Estimated base fee for this transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Address to send this transaction from.\n   */\n  from: string;\n\n  /**\n   * same as gasLimit?\n   */\n  gas?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gasLimit?: string;\n\n  /**\n   * Price per gas for legacy txs\n   */\n  gasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority\n   * fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n\n  /**\n   * Unique number to prevent replay attacks.\n   */\n  nonce?: string;\n\n  /**\n   * Address to send this transaction to.\n   */\n  to?: string;\n\n  /**\n   * Value associated with this transaction.\n   */\n  value?: string;\n\n  /**\n   * Type of transaction.\n   * 0x0 indicates a legacy transaction.\n   */\n  type?: string;\n}\n\n/**\n * Standard data concerning a transaction processed by the blockchain.\n */\nexport interface TransactionReceipt {\n  /**\n   * The block hash of the block that this transaction was included in.\n   */\n  blockHash?: string;\n\n  /**\n   * The block number of the block that this transaction was included in.\n   */\n  blockNumber?: string;\n\n  /**\n   * Effective gas price the transaction was charged at.\n   */\n  effectiveGasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Total used gas in hex.\n   */\n  l1Fee?: string;\n\n  /**\n   * All the logs emitted by this transaction.\n   */\n  logs?: Log[];\n\n  /**\n   * The status of the transaction.\n   */\n  status?: string;\n\n  /**\n   * The index of this transaction in the list of transactions included in the block this transaction was mined in.\n   */\n  transactionIndex?: number;\n}\n\n/**\n * Represents an event that has been included in a transaction using the EVM `LOG` opcode.\n */\nexport interface Log {\n  /**\n   * Address of the contract that generated log.\n   */\n  address?: string;\n  /**\n   * List of topics for log.\n   */\n  topics?: string;\n}\n\n/**\n * The configuration required to fetch transaction data from a RemoteTransactionSource.\n */\nexport interface RemoteTransactionSourceRequest {\n  /**\n   * The address of the account to fetch transactions for.\n   */\n  address: string;\n\n  /**\n   * The chainId of the current network.\n   */\n  currentChainId: Hex;\n\n  /**\n   * Block number to start fetching transactions from.\n   */\n  fromBlock?: number;\n\n  /**\n   * Maximum number of transactions to retrieve.\n   */\n  limit?: number;\n}\n\n/**\n * An object capable of fetching transaction data from a remote source.\n * Used by the IncomingTransactionHelper to retrieve remote transaction data.\n */\nexport interface RemoteTransactionSource {\n  /**\n   * @param chainId - The chainId of the current network.\n   * @returns Whether the remote transaction source supports the specified network.\n   */\n  isSupportedNetwork: (chainId: Hex) => boolean;\n\n  /**\n   * @returns An array of additional keys to use when caching the last fetched block number.\n   */\n  getLastBlockVariations?: () => string[];\n\n  /**\n   * @param request - A request object containing data such as the address and chain ID.\n   * @returns An array of transaction metadata for the retrieved transactions.\n   */\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n\n/**\n * Gas values initially suggested by the dApp.\n */\nexport interface DappSuggestedGasFees {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n}\n\n/**\n * A transaction history operation that includes a note and timestamp.\n */\ntype ExtendedHistoryOperation = Operation & {\n  note?: string;\n  timestamp?: number;\n};\n\n/**\n * A transaction history entry that includes the ExtendedHistoryOperation as the first element.\n */\nexport type TransactionHistoryEntry = [\n  ExtendedHistoryOperation,\n  ...Operation[],\n];\n\n/**\n * A transaction history that includes the transaction meta as the first element.\n * And the rest of the elements are the operation arrays that were applied to the transaction meta.\n */\nexport type TransactionHistory = [\n  TransactionMeta,\n  ...TransactionHistoryEntry[],\n];\n\n/**\n * Result of inferring the transaction type.\n */\nexport type InferTransactionTypeResult = {\n  /**\n   * The contract code, in hex format if it exists. '0x0' or\n   * '0x' are also indicators of non-existent contract code.\n   */\n  getCodeResponse?: string | null;\n\n  /**\n   * The type of transaction\n   */\n  type: TransactionType;\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/etherscan.d.ts b/dist/utils/etherscan.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4a63542389a6c41ccef6af100710bee9cd347d4c
--- /dev/null
+++ b/dist/utils/etherscan.d.ts
@@ -0,0 +1,64 @@
+import type { Hex } from '@metamask/utils';
+export interface EtherscanTransactionMetaBase {
+    blockNumber: string;
+    blockHash: string;
+    confirmations: string;
+    contractAddress: string;
+    cumulativeGasUsed: string;
+    from: string;
+    gas: string;
+    gasPrice: string;
+    gasUsed: string;
+    hash: string;
+    nonce: string;
+    timeStamp: string;
+    to: string;
+    transactionIndex: string;
+    value: string;
+}
+export interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {
+    functionName: string;
+    input: string;
+    isError: string;
+    methodId: string;
+    txreceipt_status: string;
+}
+export interface EtherscanTokenTransactionMeta extends EtherscanTransactionMetaBase {
+    tokenDecimal: string;
+    tokenName: string;
+    tokenSymbol: string;
+}
+export interface EtherscanTransactionResponse<T extends EtherscanTransactionMetaBase> {
+    status: '0' | '1';
+    message?: string;
+    result: string | T[];
+}
+export interface EtherscanTransactionRequest {
+    address: string;
+    chainId: Hex;
+    fromBlock?: number;
+    limit?: number;
+}
+/**
+ * Retrieves transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch transactions.
+ * @param request.address - Address to retrieve transactions for.
+ * @param request.chainId - Current chain ID used to determine subdomain and domain.
+ * @param request.fromBlock - Block number to start fetching transactions from.
+ * @param request.limit - Number of transactions to retrieve.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+export declare function fetchEtherscanTransactions({ address, chainId, fromBlock, limit, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTransactionMeta>>;
+/**
+ * Retrieves token transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch token transactions.
+ * @param request.address - Address to retrieve token transactions for.
+ * @param request.chainId - Current chain ID used to determine subdomain and domain.
+ * @param request.fromBlock - Block number to start fetching token transactions from.
+ * @param request.limit - Number of token transactions to retrieve.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+export declare function fetchEtherscanTokenTransactions({ address, chainId, fromBlock, limit, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTokenTransactionMeta>>;
+//# sourceMappingURL=etherscan.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/etherscan.d.ts.map b/dist/utils/etherscan.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..bde0ec800b23bdfbbad67e126c54a0b972070cc3
--- /dev/null
+++ b/dist/utils/etherscan.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"etherscan.d.ts","sourceRoot":"","sources":["../../src/utils/etherscan.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAQ3C,MAAM,WAAW,4BAA4B;IAC3C,WAAW,EAAE,MAAM,CAAC;IACpB,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;IACtB,eAAe,EAAE,MAAM,CAAC;IACxB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,EAAE,EAAE,MAAM,CAAC;IACX,gBAAgB,EAAE,MAAM,CAAC;IACzB,KAAK,EAAE,MAAM,CAAC;CACf;AAKD,MAAM,WAAW,wBAAyB,SAAQ,4BAA4B;IAC5E,YAAY,EAAE,MAAM,CAAC;IACrB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,gBAAgB,EAAE,MAAM,CAAC;CAC1B;AAKD,MAAM,WAAW,6BACf,SAAQ,4BAA4B;IACpC,YAAY,EAAE,MAAM,CAAC;IACrB,SAAS,EAAE,MAAM,CAAC;IAClB,WAAW,EAAE,MAAM,CAAC;CACrB;AAKD,MAAM,WAAW,4BAA4B,CAC3C,CAAC,SAAS,4BAA4B;IAEtC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;CACtB;AAKD,MAAM,WAAW,2BAA2B;IAC1C,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED;;;;;;;;;GASG;AACH,wBAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,wBAAwB,CAAC,CACvD,CAOA;AAED;;;;;;;;;GASG;AACH,wBAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,6BAA6B,CAAC,CAC5D,CAOA"}
\ No newline at end of file
diff --git a/dist/utils/etherscan.js b/dist/utils/etherscan.js
new file mode 100644
index 0000000000000000000000000000000000000000..793254201f64cb538b813e9ed44db5802a50b5c1
--- /dev/null
+++ b/dist/utils/etherscan.js
@@ -0,0 +1,108 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.fetchEtherscanTokenTransactions = exports.fetchEtherscanTransactions = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const constants_1 = require("../constants");
+const logger_1 = require("../logger");
+/**
+ * Retrieves transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch transactions.
+ * @param request.address - Address to retrieve transactions for.
+ * @param request.chainId - Current chain ID used to determine subdomain and domain.
+ * @param request.fromBlock - Block number to start fetching transactions from.
+ * @param request.limit - Number of transactions to retrieve.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+function fetchEtherscanTransactions({ address, chainId, fromBlock, limit, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield fetchTransactions('txlist', {
+            address,
+            chainId,
+            fromBlock,
+            limit,
+        });
+    });
+}
+exports.fetchEtherscanTransactions = fetchEtherscanTransactions;
+/**
+ * Retrieves token transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch token transactions.
+ * @param request.address - Address to retrieve token transactions for.
+ * @param request.chainId - Current chain ID used to determine subdomain and domain.
+ * @param request.fromBlock - Block number to start fetching token transactions from.
+ * @param request.limit - Number of token transactions to retrieve.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+function fetchEtherscanTokenTransactions({ address, chainId, fromBlock, limit, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield fetchTransactions('tokentx', {
+            address,
+            chainId,
+            fromBlock,
+            limit,
+        });
+    });
+}
+exports.fetchEtherscanTokenTransactions = fetchEtherscanTokenTransactions;
+/**
+ * Retrieves transaction data from Etherscan from a specific endpoint.
+ *
+ * @param action - The Etherscan endpoint to use.
+ * @param options - Options bag.
+ * @param options.address - Address to retrieve transactions for.
+ * @param options.chainId - Current chain ID used to determine subdomain and domain.
+ * @param options.fromBlock - Block number to start fetching transactions from.
+ * @param options.limit - Number of transactions to retrieve.
+ * @returns An object containing the request status and an array of transaction data.
+ */
+function fetchTransactions(action, { address, chainId, fromBlock, limit, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const urlParams = {
+            module: 'account',
+            address,
+            startBlock: fromBlock === null || fromBlock === void 0 ? void 0 : fromBlock.toString(),
+            offset: limit === null || limit === void 0 ? void 0 : limit.toString(),
+            sort: 'desc',
+        };
+        const etherscanTxUrl = getEtherscanApiUrl(chainId, Object.assign(Object.assign({}, urlParams), { action }));
+        (0, logger_1.incomingTransactionsLogger)('Sending Etherscan request', etherscanTxUrl);
+        const response = (yield (0, controller_utils_1.handleFetch)(etherscanTxUrl));
+        return response;
+    });
+}
+/**
+ * Return a URL that can be used to fetch data from Etherscan.
+ *
+ * @param chainId - Current chain ID used to determine subdomain and domain.
+ * @param urlParams - The parameters used to construct the URL.
+ * @returns URL to access Etherscan data.
+ */
+function getEtherscanApiUrl(chainId, urlParams) {
+    const networkInfo = constants_1.ETHERSCAN_SUPPORTED_NETWORKS[chainId];
+    if (!networkInfo) {
+        throw new Error(`Etherscan does not support chain with ID: ${chainId}`);
+    }
+    const apiUrl = `https://${networkInfo.subdomain}.${networkInfo.domain}`;
+    let url = `${apiUrl}/api?`;
+    for (const paramKey of Object.keys(urlParams)) {
+        const value = urlParams[paramKey];
+        if (!value) {
+            continue;
+        }
+        url += `${paramKey}=${value}&`;
+    }
+    url += 'tag=latest&page=1';
+    return url;
+}
+//# sourceMappingURL=etherscan.js.map
\ No newline at end of file
diff --git a/dist/utils/etherscan.js.map b/dist/utils/etherscan.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..b38f825634a9cc80418f3b5420e93c695b0b6a61
--- /dev/null
+++ b/dist/utils/etherscan.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"etherscan.js","sourceRoot":"","sources":["../../src/utils/etherscan.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iEAAyD;AAGzD,4CAA4D;AAC5D,sCAA8D;AAiE9D;;;;;;;;;GASG;AACH,SAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACuB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,QAAQ,EAAE;YACvC,OAAO;YACP,OAAO;YACP,SAAS;YACT,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAdD,gEAcC;AAED;;;;;;;;;GASG;AACH,SAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACuB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,SAAS,EAAE;YACxC,OAAO;YACP,OAAO;YACP,SAAS;YACT,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAdD,0EAcC;AAED;;;;;;;;;;GAUG;AACH,SAAe,iBAAiB,CAC9B,MAAc,EACd,EACE,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GAMN;;QAED,MAAM,SAAS,GAAG;YAChB,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,UAAU,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,EAAE;YACjC,MAAM,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,EAAE;YACzB,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,MAAM,cAAc,GAAG,kBAAkB,CAAC,OAAO,kCAC5C,SAAS,KACZ,MAAM,IACN,CAAC;QAEH,IAAA,mCAAG,EAAC,2BAA2B,EAAE,cAAc,CAAC,CAAC;QAEjD,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAA,8BAAW,EACjC,cAAc,CACf,CAAoC,CAAC;QAEtC,OAAO,QAAQ,CAAC;IAClB,CAAC;CAAA;AAED;;;;;;GAMG;AACH,SAAS,kBAAkB,CACzB,OAAY,EACZ,SAA6C;IAI7C,MAAM,WAAW,GAAG,wCAA4B,CAAC,OAA2B,CAAC,CAAC;IAE9E,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,6CAA6C,OAAO,EAAE,CAAC,CAAC;KACzE;IAED,MAAM,MAAM,GAAG,WAAW,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;IACxE,IAAI,GAAG,GAAG,GAAG,MAAM,OAAO,CAAC;IAE3B,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QAC7C,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,EAAE;YACV,SAAS;SACV;QAED,GAAG,IAAI,GAAG,QAAQ,IAAI,KAAK,GAAG,CAAC;KAChC;IAED,GAAG,IAAI,mBAAmB,CAAC;IAE3B,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import { handleFetch } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from '../constants';\nimport { incomingTransactionsLogger as log } from '../logger';\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface EtherscanTransactionMetaBase {\n  blockNumber: string;\n  blockHash: string;\n  confirmations: string;\n  contractAddress: string;\n  cumulativeGasUsed: string;\n  from: string;\n  gas: string;\n  gasPrice: string;\n  gasUsed: string;\n  hash: string;\n  nonce: string;\n  timeStamp: string;\n  to: string;\n  transactionIndex: string;\n  value: string;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {\n  functionName: string;\n  input: string;\n  isError: string;\n  methodId: string;\n  txreceipt_status: string;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface EtherscanTokenTransactionMeta\n  extends EtherscanTransactionMetaBase {\n  tokenDecimal: string;\n  tokenName: string;\n  tokenSymbol: string;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface EtherscanTransactionResponse<\n  T extends EtherscanTransactionMetaBase,\n> {\n  status: '0' | '1';\n  message?: string;\n  result: string | T[];\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface EtherscanTransactionRequest {\n  address: string;\n  chainId: Hex;\n  fromBlock?: number;\n  limit?: number;\n}\n\n/**\n * Retrieves transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch transactions.\n * @param request.address - Address to retrieve transactions for.\n * @param request.chainId - Current chain ID used to determine subdomain and domain.\n * @param request.fromBlock - Block number to start fetching transactions from.\n * @param request.limit - Number of transactions to retrieve.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTransactionMeta>\n> {\n  return await fetchTransactions('txlist', {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  });\n}\n\n/**\n * Retrieves token transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch token transactions.\n * @param request.address - Address to retrieve token transactions for.\n * @param request.chainId - Current chain ID used to determine subdomain and domain.\n * @param request.fromBlock - Block number to start fetching token transactions from.\n * @param request.limit - Number of token transactions to retrieve.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTokenTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTokenTransactionMeta>\n> {\n  return await fetchTransactions('tokentx', {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  });\n}\n\n/**\n * Retrieves transaction data from Etherscan from a specific endpoint.\n *\n * @param action - The Etherscan endpoint to use.\n * @param options - Options bag.\n * @param options.address - Address to retrieve transactions for.\n * @param options.chainId - Current chain ID used to determine subdomain and domain.\n * @param options.fromBlock - Block number to start fetching transactions from.\n * @param options.limit - Number of transactions to retrieve.\n * @returns An object containing the request status and an array of transaction data.\n */\nasync function fetchTransactions<T extends EtherscanTransactionMetaBase>(\n  action: string,\n  {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  }: {\n    address: string;\n    chainId: Hex;\n    fromBlock?: number;\n    limit?: number;\n  },\n): Promise<EtherscanTransactionResponse<T>> {\n  const urlParams = {\n    module: 'account',\n    address,\n    startBlock: fromBlock?.toString(),\n    offset: limit?.toString(),\n    sort: 'desc',\n  };\n\n  const etherscanTxUrl = getEtherscanApiUrl(chainId, {\n    ...urlParams,\n    action,\n  });\n\n  log('Sending Etherscan request', etherscanTxUrl);\n\n  const response = (await handleFetch(\n    etherscanTxUrl,\n  )) as EtherscanTransactionResponse<T>;\n\n  return response;\n}\n\n/**\n * Return a URL that can be used to fetch data from Etherscan.\n *\n * @param chainId - Current chain ID used to determine subdomain and domain.\n * @param urlParams - The parameters used to construct the URL.\n * @returns URL to access Etherscan data.\n */\nfunction getEtherscanApiUrl(\n  chainId: Hex,\n  urlParams: Record<string, string | undefined>,\n): string {\n  type SupportedChainId = keyof typeof ETHERSCAN_SUPPORTED_NETWORKS;\n\n  const networkInfo = ETHERSCAN_SUPPORTED_NETWORKS[chainId as SupportedChainId];\n\n  if (!networkInfo) {\n    throw new Error(`Etherscan does not support chain with ID: ${chainId}`);\n  }\n\n  const apiUrl = `https://${networkInfo.subdomain}.${networkInfo.domain}`;\n  let url = `${apiUrl}/api?`;\n\n  for (const paramKey of Object.keys(urlParams)) {\n    const value = urlParams[paramKey];\n\n    if (!value) {\n      continue;\n    }\n\n    url += `${paramKey}=${value}&`;\n  }\n\n  url += 'tag=latest&page=1';\n\n  return url;\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/external-transactions.d.ts b/dist/utils/external-transactions.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..04efc8e554fa9511a70e52cd79b0e4a5756cc885
--- /dev/null
+++ b/dist/utils/external-transactions.d.ts
@@ -0,0 +1,10 @@
+import type { TransactionMeta } from '../types';
+/**
+ * Validates the external provided transaction meta.
+ *
+ * @param transactionMeta - The transaction meta to validate.
+ * @param confirmedTxs - The confirmed transactions in controller state.
+ * @param pendingTxs - The submitted transactions in controller state.
+ */
+export declare function validateConfirmedExternalTransaction(transactionMeta?: TransactionMeta, confirmedTxs?: TransactionMeta[], pendingTxs?: TransactionMeta[]): void;
+//# sourceMappingURL=external-transactions.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/external-transactions.d.ts.map b/dist/utils/external-transactions.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..fe57dc65e98dfed56e722b5a32b904766fd443c9
--- /dev/null
+++ b/dist/utils/external-transactions.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"external-transactions.d.ts","sourceRoot":"","sources":["../../src/utils/external-transactions.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAEhD;;;;;;GAMG;AACH,wBAAgB,oCAAoC,CAClD,eAAe,CAAC,EAAE,eAAe,EACjC,YAAY,CAAC,EAAE,eAAe,EAAE,EAChC,UAAU,CAAC,EAAE,eAAe,EAAE,QAoC/B"}
\ No newline at end of file
diff --git a/dist/utils/external-transactions.js b/dist/utils/external-transactions.js
new file mode 100644
index 0000000000000000000000000000000000000000..415eaf9a83b129262d9097621131381350f1cb22
--- /dev/null
+++ b/dist/utils/external-transactions.js
@@ -0,0 +1,36 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.validateConfirmedExternalTransaction = void 0;
+// These utility functions are exclusively used by `confirmExternalTransaction` method in controller
+const rpc_errors_1 = require("@metamask/rpc-errors");
+const types_1 = require("../types");
+/**
+ * Validates the external provided transaction meta.
+ *
+ * @param transactionMeta - The transaction meta to validate.
+ * @param confirmedTxs - The confirmed transactions in controller state.
+ * @param pendingTxs - The submitted transactions in controller state.
+ */
+function validateConfirmedExternalTransaction(transactionMeta, confirmedTxs, pendingTxs) {
+    if (!transactionMeta || !transactionMeta.txParams) {
+        throw rpc_errors_1.rpcErrors.invalidParams('"transactionMeta" or "transactionMeta.txParams" is missing');
+    }
+    if (transactionMeta.status !== types_1.TransactionStatus.confirmed) {
+        throw rpc_errors_1.rpcErrors.invalidParams('External transaction status should be "confirmed"');
+    }
+    const externalTxNonce = transactionMeta.txParams.nonce;
+    if (pendingTxs && pendingTxs.length > 0) {
+        const foundPendingTxByNonce = pendingTxs.find((tx) => { var _a; return ((_a = tx.txParams) === null || _a === void 0 ? void 0 : _a.nonce) === externalTxNonce; });
+        if (foundPendingTxByNonce) {
+            throw rpc_errors_1.rpcErrors.invalidParams('External transaction nonce should not be in pending txs');
+        }
+    }
+    if (confirmedTxs && confirmedTxs.length > 0) {
+        const foundConfirmedTxByNonce = confirmedTxs.find((tx) => { var _a; return ((_a = tx.txParams) === null || _a === void 0 ? void 0 : _a.nonce) === externalTxNonce; });
+        if (foundConfirmedTxByNonce) {
+            throw rpc_errors_1.rpcErrors.invalidParams('External transaction nonce should not be in confirmed txs');
+        }
+    }
+}
+exports.validateConfirmedExternalTransaction = validateConfirmedExternalTransaction;
+//# sourceMappingURL=external-transactions.js.map
\ No newline at end of file
diff --git a/dist/utils/external-transactions.js.map b/dist/utils/external-transactions.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..c0d7d83ad196a32a36525883a9100e2317567edc
--- /dev/null
+++ b/dist/utils/external-transactions.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"external-transactions.js","sourceRoot":"","sources":["../../src/utils/external-transactions.ts"],"names":[],"mappings":";;;AAAA,oGAAoG;AACpG,qDAAiD;AAEjD,oCAA6C;AAG7C;;;;;;GAMG;AACH,SAAgB,oCAAoC,CAClD,eAAiC,EACjC,YAAgC,EAChC,UAA8B;IAE9B,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;QACjD,MAAM,sBAAS,CAAC,aAAa,CAC3B,4DAA4D,CAC7D,CAAC;KACH;IAED,IAAI,eAAe,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,EAAE;QAC1D,MAAM,sBAAS,CAAC,aAAa,CAC3B,mDAAmD,CACpD,CAAC;KACH;IAED,MAAM,eAAe,GAAG,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IACvD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACvC,MAAM,qBAAqB,GAAG,UAAU,CAAC,IAAI,CAC3C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,0CAAE,KAAK,MAAK,eAAe,CAAA,EAAA,CAC/C,CAAC;QACF,IAAI,qBAAqB,EAAE;YACzB,MAAM,sBAAS,CAAC,aAAa,CAC3B,yDAAyD,CAC1D,CAAC;SACH;KACF;IAED,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3C,MAAM,uBAAuB,GAAG,YAAY,CAAC,IAAI,CAC/C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,0CAAE,KAAK,MAAK,eAAe,CAAA,EAAA,CAC/C,CAAC;QACF,IAAI,uBAAuB,EAAE;YAC3B,MAAM,sBAAS,CAAC,aAAa,CAC3B,2DAA2D,CAC5D,CAAC;SACH;KACF;AACH,CAAC;AAvCD,oFAuCC","sourcesContent":["// These utility functions are exclusively used by `confirmExternalTransaction` method in controller\nimport { rpcErrors } from '@metamask/rpc-errors';\n\nimport { TransactionStatus } from '../types';\nimport type { TransactionMeta } from '../types';\n\n/**\n * Validates the external provided transaction meta.\n *\n * @param transactionMeta - The transaction meta to validate.\n * @param confirmedTxs - The confirmed transactions in controller state.\n * @param pendingTxs - The submitted transactions in controller state.\n */\nexport function validateConfirmedExternalTransaction(\n  transactionMeta?: TransactionMeta,\n  confirmedTxs?: TransactionMeta[],\n  pendingTxs?: TransactionMeta[],\n) {\n  if (!transactionMeta || !transactionMeta.txParams) {\n    throw rpcErrors.invalidParams(\n      '\"transactionMeta\" or \"transactionMeta.txParams\" is missing',\n    );\n  }\n\n  if (transactionMeta.status !== TransactionStatus.confirmed) {\n    throw rpcErrors.invalidParams(\n      'External transaction status should be \"confirmed\"',\n    );\n  }\n\n  const externalTxNonce = transactionMeta.txParams.nonce;\n  if (pendingTxs && pendingTxs.length > 0) {\n    const foundPendingTxByNonce = pendingTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce,\n    );\n    if (foundPendingTxByNonce) {\n      throw rpcErrors.invalidParams(\n        'External transaction nonce should not be in pending txs',\n      );\n    }\n  }\n\n  if (confirmedTxs && confirmedTxs.length > 0) {\n    const foundConfirmedTxByNonce = confirmedTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce,\n    );\n    if (foundConfirmedTxByNonce) {\n      throw rpcErrors.invalidParams(\n        'External transaction nonce should not be in confirmed txs',\n      );\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/gas-fees.d.ts b/dist/utils/gas-fees.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..9ed9fddd65c4f6504aa018c793d6a4915873b4bc
--- /dev/null
+++ b/dist/utils/gas-fees.d.ts
@@ -0,0 +1,31 @@
+import type EthQuery from '@metamask/eth-query';
+import type { GasFeeState } from '@metamask/gas-fee-controller';
+import type { SavedGasFees, TransactionParams, TransactionMeta } from '../types';
+export declare type UpdateGasFeesRequest = {
+    eip1559: boolean;
+    ethQuery: EthQuery;
+    getSavedGasFees: () => SavedGasFees | undefined;
+    getGasFeeEstimates: () => Promise<GasFeeState>;
+    txMeta: TransactionMeta;
+};
+export declare type GetGasFeeRequest = UpdateGasFeesRequest & {
+    savedGasFees?: SavedGasFees;
+    initialParams: TransactionParams;
+    suggestedGasFees: Awaited<ReturnType<typeof getSuggestedGasFees>>;
+};
+export declare function updateGasFees(request: UpdateGasFeesRequest): Promise<void>;
+declare function getSuggestedGasFees(request: UpdateGasFeesRequest): Promise<{
+    maxFeePerGas?: undefined;
+    maxPriorityFeePerGas?: undefined;
+    gasPrice?: undefined;
+} | {
+    maxFeePerGas: `0x${string}`;
+    maxPriorityFeePerGas: `0x${string}`;
+    gasPrice?: undefined;
+} | {
+    gasPrice: string | undefined;
+    maxFeePerGas?: undefined;
+    maxPriorityFeePerGas?: undefined;
+}>;
+export {};
+//# sourceMappingURL=gas-fees.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/gas-fees.d.ts.map b/dist/utils/gas-fees.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..6b56c63f54d528032aaaa56fb718920899dbe38b
--- /dev/null
+++ b/dist/utils/gas-fees.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gas-fees.d.ts","sourceRoot":"","sources":["../../src/utils/gas-fees.ts"],"names":[],"mappings":"AAQA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAMhE,OAAO,KAAK,EACV,YAAY,EACZ,iBAAiB,EACjB,eAAe,EAEhB,MAAM,UAAU,CAAC;AAIlB,oBAAY,oBAAoB,GAAG;IACjC,OAAO,EAAE,OAAO,CAAC;IACjB,QAAQ,EAAE,QAAQ,CAAC;IACnB,eAAe,EAAE,MAAM,YAAY,GAAG,SAAS,CAAC;IAChD,kBAAkB,EAAE,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/C,MAAM,EAAE,eAAe,CAAC;CACzB,CAAC;AAEF,oBAAY,gBAAgB,GAAG,oBAAoB,GAAG;IACpD,YAAY,CAAC,EAAE,YAAY,CAAC;IAC5B,aAAa,EAAE,iBAAiB,CAAC;IACjC,gBAAgB,EAAE,OAAO,CAAC,UAAU,CAAC,OAAO,mBAAmB,CAAC,CAAC,CAAC;CACnE,CAAC;AAIF,wBAAsB,aAAa,CAAC,OAAO,EAAE,oBAAoB,iBA4ChE;AA6KD,iBAAe,mBAAmB,CAAC,OAAO,EAAE,oBAAoB;;;;;;;;;;;;GAwD/D"}
\ No newline at end of file
diff --git a/dist/utils/gas-fees.js b/dist/utils/gas-fees.js
new file mode 100644
index 0000000000000000000000000000000000000000..823fa99ce6763695231177916fd41a20b1c31fdb
--- /dev/null
+++ b/dist/utils/gas-fees.js
@@ -0,0 +1,212 @@
+"use strict";
+/* eslint-disable jsdoc/require-jsdoc */
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.updateGasFees = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const gas_fee_controller_1 = require("@metamask/gas-fee-controller");
+const utils_1 = require("@metamask/utils");
+const ethereumjs_util_1 = require("ethereumjs-util");
+const logger_1 = require("../logger");
+const types_1 = require("../types");
+const swaps_1 = require("./swaps");
+const log = (0, utils_1.createModuleLogger)(logger_1.projectLogger, 'gas-fees');
+function updateGasFees(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { txMeta } = request;
+        const initialParams = Object.assign({}, txMeta.txParams);
+        const isSwap = swaps_1.SWAP_TRANSACTION_TYPES.includes(txMeta.type);
+        const savedGasFees = isSwap ? undefined : request.getSavedGasFees();
+        const suggestedGasFees = yield getSuggestedGasFees(request);
+        log('Suggested gas fees', suggestedGasFees);
+        const getGasFeeRequest = Object.assign(Object.assign({}, request), { savedGasFees,
+            initialParams,
+            suggestedGasFees });
+        txMeta.txParams.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);
+        txMeta.txParams.maxPriorityFeePerGas =
+            getMaxPriorityFeePerGas(getGasFeeRequest);
+        txMeta.txParams.gasPrice = getGasPrice(getGasFeeRequest);
+        txMeta.userFeeLevel = getUserFeeLevel(getGasFeeRequest);
+        log('Updated gas fee properties', {
+            maxFeePerGas: txMeta.txParams.maxFeePerGas,
+            maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,
+            gasPrice: txMeta.txParams.gasPrice,
+        });
+        if (txMeta.txParams.maxFeePerGas || txMeta.txParams.maxPriorityFeePerGas) {
+            delete txMeta.txParams.gasPrice;
+        }
+        if (txMeta.txParams.gasPrice) {
+            delete txMeta.txParams.maxFeePerGas;
+            delete txMeta.txParams.maxPriorityFeePerGas;
+        }
+        updateDefaultGasEstimates(txMeta);
+    });
+}
+exports.updateGasFees = updateGasFees;
+function getMaxFeePerGas(request) {
+    const { savedGasFees, eip1559, initialParams, suggestedGasFees } = request;
+    if (!eip1559) {
+        return undefined;
+    }
+    if (savedGasFees) {
+        const maxFeePerGas = gweiDecimalToWeiHex(savedGasFees.maxBaseFee);
+        log('Using maxFeePerGas from savedGasFees', maxFeePerGas);
+        return maxFeePerGas;
+    }
+    if (initialParams.maxFeePerGas) {
+        log('Using maxFeePerGas from request', initialParams.maxFeePerGas);
+        return initialParams.maxFeePerGas;
+    }
+    if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {
+        log('Setting maxFeePerGas to gasPrice from request', initialParams.gasPrice);
+        return initialParams.gasPrice;
+    }
+    if (suggestedGasFees.maxFeePerGas) {
+        log('Using suggested maxFeePerGas', suggestedGasFees.maxFeePerGas);
+        return suggestedGasFees.maxFeePerGas;
+    }
+    if (suggestedGasFees.gasPrice) {
+        log('Setting maxFeePerGas to suggested gasPrice', suggestedGasFees.gasPrice);
+        return suggestedGasFees.gasPrice;
+    }
+    log('maxFeePerGas not set');
+    return undefined;
+}
+function getMaxPriorityFeePerGas(request) {
+    const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } = request;
+    if (!eip1559) {
+        return undefined;
+    }
+    if (savedGasFees) {
+        const maxPriorityFeePerGas = gweiDecimalToWeiHex(savedGasFees.priorityFee);
+        log('Using maxPriorityFeePerGas from savedGasFees.priorityFee', maxPriorityFeePerGas);
+        return maxPriorityFeePerGas;
+    }
+    if (initialParams.maxPriorityFeePerGas) {
+        log('Using maxPriorityFeePerGas from request', initialParams.maxPriorityFeePerGas);
+        return initialParams.maxPriorityFeePerGas;
+    }
+    if (initialParams.gasPrice && !initialParams.maxFeePerGas) {
+        log('Setting maxPriorityFeePerGas to gasPrice from request', initialParams.gasPrice);
+        return initialParams.gasPrice;
+    }
+    if (suggestedGasFees.maxPriorityFeePerGas) {
+        log('Using suggested maxPriorityFeePerGas', suggestedGasFees.maxPriorityFeePerGas);
+        return suggestedGasFees.maxPriorityFeePerGas;
+    }
+    if (txMeta.txParams.maxFeePerGas) {
+        log('Setting maxPriorityFeePerGas to maxFeePerGas', txMeta.txParams.maxFeePerGas);
+        return txMeta.txParams.maxFeePerGas;
+    }
+    log('maxPriorityFeePerGas not set');
+    return undefined;
+}
+function getGasPrice(request) {
+    const { eip1559, initialParams, suggestedGasFees } = request;
+    if (eip1559) {
+        return undefined;
+    }
+    if (initialParams.gasPrice) {
+        log('Using gasPrice from request', initialParams.gasPrice);
+        return initialParams.gasPrice;
+    }
+    if (suggestedGasFees.gasPrice) {
+        log('Using suggested gasPrice', suggestedGasFees.gasPrice);
+        return suggestedGasFees.gasPrice;
+    }
+    log('gasPrice not set');
+    return undefined;
+}
+function getUserFeeLevel(request) {
+    const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } = request;
+    if (!eip1559) {
+        return undefined;
+    }
+    if (savedGasFees) {
+        return types_1.UserFeeLevel.CUSTOM;
+    }
+    if (!initialParams.maxFeePerGas &&
+        !initialParams.maxPriorityFeePerGas &&
+        initialParams.gasPrice) {
+        return txMeta.origin === controller_utils_1.ORIGIN_METAMASK
+            ? types_1.UserFeeLevel.CUSTOM
+            : types_1.UserFeeLevel.DAPP_SUGGESTED;
+    }
+    if (!initialParams.maxFeePerGas &&
+        !initialParams.maxPriorityFeePerGas &&
+        suggestedGasFees.maxFeePerGas &&
+        suggestedGasFees.maxPriorityFeePerGas) {
+        return types_1.UserFeeLevel.MEDIUM;
+    }
+    if (txMeta.origin === controller_utils_1.ORIGIN_METAMASK) {
+        return types_1.UserFeeLevel.MEDIUM;
+    }
+    return types_1.UserFeeLevel.DAPP_SUGGESTED;
+}
+function updateDefaultGasEstimates(txMeta) {
+    if (!txMeta.defaultGasEstimates) {
+        txMeta.defaultGasEstimates = {};
+    }
+    txMeta.defaultGasEstimates.maxFeePerGas = txMeta.txParams.maxFeePerGas;
+    txMeta.defaultGasEstimates.maxPriorityFeePerGas =
+        txMeta.txParams.maxPriorityFeePerGas;
+    txMeta.defaultGasEstimates.gasPrice = txMeta.txParams.gasPrice;
+    txMeta.defaultGasEstimates.estimateType = txMeta.userFeeLevel;
+}
+function getSuggestedGasFees(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { eip1559, ethQuery, getGasFeeEstimates, txMeta } = request;
+        if ((!eip1559 && txMeta.txParams.gasPrice) ||
+            (eip1559 &&
+                txMeta.txParams.maxFeePerGas &&
+                txMeta.txParams.maxPriorityFeePerGas)) {
+            return {};
+        }
+        try {
+            const { gasFeeEstimates, gasEstimateType } = yield getGasFeeEstimates();
+            if (eip1559 && gasEstimateType === gas_fee_controller_1.GAS_ESTIMATE_TYPES.FEE_MARKET) {
+                const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {}, } = gasFeeEstimates;
+                if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {
+                    return {
+                        maxFeePerGas: gweiDecimalToWeiHex(suggestedMaxFeePerGas),
+                        maxPriorityFeePerGas: gweiDecimalToWeiHex(suggestedMaxPriorityFeePerGas),
+                    };
+                }
+            }
+            if (gasEstimateType === gas_fee_controller_1.GAS_ESTIMATE_TYPES.LEGACY) {
+                // The LEGACY type includes low, medium and high estimates of
+                // gas price values.
+                return {
+                    gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.medium),
+                };
+            }
+            if (gasEstimateType === gas_fee_controller_1.GAS_ESTIMATE_TYPES.ETH_GASPRICE) {
+                // The ETH_GASPRICE type just includes a single gas price property,
+                // which we can assume was retrieved from eth_gasPrice
+                return {
+                    gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.gasPrice),
+                };
+            }
+        }
+        catch (error) {
+            log('Failed to get suggested gas fees', error);
+        }
+        const gasPriceDecimal = (yield (0, controller_utils_1.query)(ethQuery, 'gasPrice'));
+        const gasPrice = gasPriceDecimal
+            ? (0, ethereumjs_util_1.addHexPrefix)(gasPriceDecimal.toString(16))
+            : undefined;
+        return { gasPrice };
+    });
+}
+function gweiDecimalToWeiHex(value) {
+    return (0, controller_utils_1.toHex)((0, controller_utils_1.gweiDecToWEIBN)(value));
+}
+//# sourceMappingURL=gas-fees.js.map
\ No newline at end of file
diff --git a/dist/utils/gas-fees.js.map b/dist/utils/gas-fees.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..464cc3db7002b341f879276cea4874764a84103b
--- /dev/null
+++ b/dist/utils/gas-fees.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"gas-fees.js","sourceRoot":"","sources":["../../src/utils/gas-fees.ts"],"names":[],"mappings":";AAAA,wCAAwC;;;;;;;;;;;;AAExC,iEAKoC;AAGpC,qEAAkE;AAClE,2CAAqD;AACrD,qDAA+C;AAE/C,sCAA0C;AAO1C,oCAAwC;AACxC,mCAAiD;AAgBjD,MAAM,GAAG,GAAG,IAAA,0BAAkB,EAAC,sBAAa,EAAE,UAAU,CAAC,CAAC;AAE1D,SAAsB,aAAa,CAAC,OAA6B;;QAC/D,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAC3B,MAAM,aAAa,qBAAQ,MAAM,CAAC,QAAQ,CAAE,CAAC;QAE7C,MAAM,MAAM,GAAG,8BAAsB,CAAC,QAAQ,CAC5C,MAAM,CAAC,IAAuB,CAC/B,CAAC;QACF,MAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;QAEpE,MAAM,gBAAgB,GAAG,MAAM,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAE5D,GAAG,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,CAAC;QAE5C,MAAM,gBAAgB,mCACjB,OAAO,KACV,YAAY;YACZ,aAAa;YACb,gBAAgB,GACjB,CAAC;QAEF,MAAM,CAAC,QAAQ,CAAC,YAAY,GAAG,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAEjE,MAAM,CAAC,QAAQ,CAAC,oBAAoB;YAClC,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC;QACzD,MAAM,CAAC,YAAY,GAAG,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAExD,GAAG,CAAC,4BAA4B,EAAE;YAChC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,YAAY;YAC1C,oBAAoB,EAAE,MAAM,CAAC,QAAQ,CAAC,oBAAoB;YAC1D,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ;SACnC,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,IAAI,MAAM,CAAC,QAAQ,CAAC,oBAAoB,EAAE;YACxE,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;SACjC;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAC5B,OAAO,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC;YACpC,OAAO,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC;SAC7C;QAED,yBAAyB,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;CAAA;AA5CD,sCA4CC;AAED,SAAS,eAAe,CAAC,OAAyB;IAChD,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC;IAE3E,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,YAAY,EAAE;QAChB,MAAM,YAAY,GAAG,mBAAmB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;QAC5E,GAAG,CAAC,sCAAsC,EAAE,YAAY,CAAC,CAAC;QAC1D,OAAO,YAAY,CAAC;KACrB;IAED,IAAI,aAAa,CAAC,YAAY,EAAE;QAC9B,GAAG,CAAC,iCAAiC,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC;QACnE,OAAO,aAAa,CAAC,YAAY,CAAC;KACnC;IAED,IAAI,aAAa,CAAC,QAAQ,IAAI,CAAC,aAAa,CAAC,oBAAoB,EAAE;QACjE,GAAG,CACD,+CAA+C,EAC/C,aAAa,CAAC,QAAQ,CACvB,CAAC;QACF,OAAO,aAAa,CAAC,QAAQ,CAAC;KAC/B;IAED,IAAI,gBAAgB,CAAC,YAAY,EAAE;QACjC,GAAG,CAAC,8BAA8B,EAAE,gBAAgB,CAAC,YAAY,CAAC,CAAC;QACnE,OAAO,gBAAgB,CAAC,YAAY,CAAC;KACtC;IAED,IAAI,gBAAgB,CAAC,QAAQ,EAAE;QAC7B,GAAG,CACD,4CAA4C,EAC5C,gBAAgB,CAAC,QAAQ,CAC1B,CAAC;QACF,OAAO,gBAAgB,CAAC,QAAQ,CAAC;KAClC;IAED,GAAG,CAAC,sBAAsB,CAAC,CAAC;IAC5B,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAS,uBAAuB,CAC9B,OAAyB;IAEzB,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,EAAE,GACtE,OAAO,CAAC;IAEV,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,YAAY,EAAE;QAChB,MAAM,oBAAoB,GAAG,mBAAmB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QAC3E,GAAG,CACD,0DAA0D,EAC1D,oBAAoB,CACrB,CAAC;QACF,OAAO,oBAAoB,CAAC;KAC7B;IAED,IAAI,aAAa,CAAC,oBAAoB,EAAE;QACtC,GAAG,CACD,yCAAyC,EACzC,aAAa,CAAC,oBAAoB,CACnC,CAAC;QACF,OAAO,aAAa,CAAC,oBAAoB,CAAC;KAC3C;IAED,IAAI,aAAa,CAAC,QAAQ,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE;QACzD,GAAG,CACD,uDAAuD,EACvD,aAAa,CAAC,QAAQ,CACvB,CAAC;QACF,OAAO,aAAa,CAAC,QAAQ,CAAC;KAC/B;IAED,IAAI,gBAAgB,CAAC,oBAAoB,EAAE;QACzC,GAAG,CACD,sCAAsC,EACtC,gBAAgB,CAAC,oBAAoB,CACtC,CAAC;QACF,OAAO,gBAAgB,CAAC,oBAAoB,CAAC;KAC9C;IAED,IAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE;QAChC,GAAG,CACD,8CAA8C,EAC9C,MAAM,CAAC,QAAQ,CAAC,YAAY,CAC7B,CAAC;QACF,OAAO,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC;KACrC;IAED,GAAG,CAAC,8BAA8B,CAAC,CAAC;IACpC,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAS,WAAW,CAAC,OAAyB;IAC5C,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC;IAE7D,IAAI,OAAO,EAAE;QACX,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,aAAa,CAAC,QAAQ,EAAE;QAC1B,GAAG,CAAC,6BAA6B,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC3D,OAAO,aAAa,CAAC,QAAQ,CAAC;KAC/B;IAED,IAAI,gBAAgB,CAAC,QAAQ,EAAE;QAC7B,GAAG,CAAC,0BAA0B,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAC3D,OAAO,gBAAgB,CAAC,QAAQ,CAAC;KAClC;IAED,GAAG,CAAC,kBAAkB,CAAC,CAAC;IACxB,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAS,eAAe,CAAC,OAAyB;IAChD,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,EAAE,GACtE,OAAO,CAAC;IAEV,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,YAAY,EAAE;QAChB,OAAO,oBAAY,CAAC,MAAM,CAAC;KAC5B;IAED,IACE,CAAC,aAAa,CAAC,YAAY;QAC3B,CAAC,aAAa,CAAC,oBAAoB;QACnC,aAAa,CAAC,QAAQ,EACtB;QACA,OAAO,MAAM,CAAC,MAAM,KAAK,kCAAe;YACtC,CAAC,CAAC,oBAAY,CAAC,MAAM;YACrB,CAAC,CAAC,oBAAY,CAAC,cAAc,CAAC;KACjC;IAED,IACE,CAAC,aAAa,CAAC,YAAY;QAC3B,CAAC,aAAa,CAAC,oBAAoB;QACnC,gBAAgB,CAAC,YAAY;QAC7B,gBAAgB,CAAC,oBAAoB,EACrC;QACA,OAAO,oBAAY,CAAC,MAAM,CAAC;KAC5B;IAED,IAAI,MAAM,CAAC,MAAM,KAAK,kCAAe,EAAE;QACrC,OAAO,oBAAY,CAAC,MAAM,CAAC;KAC5B;IAED,OAAO,oBAAY,CAAC,cAAc,CAAC;AACrC,CAAC;AAED,SAAS,yBAAyB,CAAC,MAAuB;IACxD,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;QAC/B,MAAM,CAAC,mBAAmB,GAAG,EAAE,CAAC;KACjC;IAED,MAAM,CAAC,mBAAmB,CAAC,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC;IAEvE,MAAM,CAAC,mBAAmB,CAAC,oBAAoB;QAC7C,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC;IAEvC,MAAM,CAAC,mBAAmB,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAC/D,MAAM,CAAC,mBAAmB,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;AAChE,CAAC;AAED,SAAe,mBAAmB,CAAC,OAA6B;;QAC9D,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAElE,IACE,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YACtC,CAAC,OAAO;gBACN,MAAM,CAAC,QAAQ,CAAC,YAAY;gBAC5B,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EACvC;YACA,OAAO,EAAE,CAAC;SACX;QAED,IAAI;YACF,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE,GAAG,MAAM,kBAAkB,EAAE,CAAC;YAExE,IAAI,OAAO,IAAI,eAAe,KAAK,uCAAkB,CAAC,UAAU,EAAE;gBAChE,MAAM,EACJ,MAAM,EAAE,EAAE,6BAA6B,EAAE,qBAAqB,EAAE,GAAG,EAAE,GACtE,GAAG,eAAe,CAAC;gBAEpB,IAAI,6BAA6B,IAAI,qBAAqB,EAAE;oBAC1D,OAAO;wBACL,YAAY,EAAE,mBAAmB,CAAC,qBAAqB,CAAC;wBACxD,oBAAoB,EAAE,mBAAmB,CACvC,6BAA6B,CAC9B;qBACF,CAAC;iBACH;aACF;YAED,IAAI,eAAe,KAAK,uCAAkB,CAAC,MAAM,EAAE;gBACjD,6DAA6D;gBAC7D,oBAAoB;gBACpB,OAAO;oBACL,QAAQ,EAAE,mBAAmB,CAAC,eAAe,CAAC,MAAM,CAAC;iBACtD,CAAC;aACH;YAED,IAAI,eAAe,KAAK,uCAAkB,CAAC,YAAY,EAAE;gBACvD,mEAAmE;gBACnE,sDAAsD;gBACtD,OAAO;oBACL,QAAQ,EAAE,mBAAmB,CAAC,eAAe,CAAC,QAAQ,CAAC;iBACxD,CAAC;aACH;SACF;QAAC,OAAO,KAAK,EAAE;YACd,GAAG,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;SAChD;QAED,MAAM,eAAe,GAAG,CAAC,MAAM,IAAA,wBAAK,EAAC,QAAQ,EAAE,UAAU,CAAC,CAAW,CAAC;QAEtE,MAAM,QAAQ,GAAG,eAAe;YAC9B,CAAC,CAAC,IAAA,8BAAY,EAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,SAAS,CAAC;QAEd,OAAO,EAAE,QAAQ,EAAE,CAAC;IACtB,CAAC;CAAA;AAED,SAAS,mBAAmB,CAAC,KAAa;IACxC,OAAO,IAAA,wBAAK,EAAC,IAAA,iCAAc,EAAC,KAAK,CAAC,CAAC,CAAC;AACtC,CAAC","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport {\n  ORIGIN_METAMASK,\n  gweiDecToWEIBN,\n  query,\n  toHex,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport { GAS_ESTIMATE_TYPES } from '@metamask/gas-fee-controller';\nimport { createModuleLogger } from '@metamask/utils';\nimport { addHexPrefix } from 'ethereumjs-util';\n\nimport { projectLogger } from '../logger';\nimport type {\n  SavedGasFees,\n  TransactionParams,\n  TransactionMeta,\n  TransactionType,\n} from '../types';\nimport { UserFeeLevel } from '../types';\nimport { SWAP_TRANSACTION_TYPES } from './swaps';\n\nexport type UpdateGasFeesRequest = {\n  eip1559: boolean;\n  ethQuery: EthQuery;\n  getSavedGasFees: () => SavedGasFees | undefined;\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  txMeta: TransactionMeta;\n};\n\nexport type GetGasFeeRequest = UpdateGasFeesRequest & {\n  savedGasFees?: SavedGasFees;\n  initialParams: TransactionParams;\n  suggestedGasFees: Awaited<ReturnType<typeof getSuggestedGasFees>>;\n};\n\nconst log = createModuleLogger(projectLogger, 'gas-fees');\n\nexport async function updateGasFees(request: UpdateGasFeesRequest) {\n  const { txMeta } = request;\n  const initialParams = { ...txMeta.txParams };\n\n  const isSwap = SWAP_TRANSACTION_TYPES.includes(\n    txMeta.type as TransactionType,\n  );\n  const savedGasFees = isSwap ? undefined : request.getSavedGasFees();\n\n  const suggestedGasFees = await getSuggestedGasFees(request);\n\n  log('Suggested gas fees', suggestedGasFees);\n\n  const getGasFeeRequest = {\n    ...request,\n    savedGasFees,\n    initialParams,\n    suggestedGasFees,\n  };\n\n  txMeta.txParams.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);\n\n  txMeta.txParams.maxPriorityFeePerGas =\n    getMaxPriorityFeePerGas(getGasFeeRequest);\n\n  txMeta.txParams.gasPrice = getGasPrice(getGasFeeRequest);\n  txMeta.userFeeLevel = getUserFeeLevel(getGasFeeRequest);\n\n  log('Updated gas fee properties', {\n    maxFeePerGas: txMeta.txParams.maxFeePerGas,\n    maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,\n    gasPrice: txMeta.txParams.gasPrice,\n  });\n\n  if (txMeta.txParams.maxFeePerGas || txMeta.txParams.maxPriorityFeePerGas) {\n    delete txMeta.txParams.gasPrice;\n  }\n\n  if (txMeta.txParams.gasPrice) {\n    delete txMeta.txParams.maxFeePerGas;\n    delete txMeta.txParams.maxPriorityFeePerGas;\n  }\n\n  updateDefaultGasEstimates(txMeta);\n}\n\nfunction getMaxFeePerGas(request: GetGasFeeRequest): string | undefined {\n  const { savedGasFees, eip1559, initialParams, suggestedGasFees } = request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    const maxFeePerGas = gweiDecimalToWeiHex(savedGasFees.maxBaseFee as string);\n    log('Using maxFeePerGas from savedGasFees', maxFeePerGas);\n    return maxFeePerGas;\n  }\n\n  if (initialParams.maxFeePerGas) {\n    log('Using maxFeePerGas from request', initialParams.maxFeePerGas);\n    return initialParams.maxFeePerGas;\n  }\n\n  if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {\n    log(\n      'Setting maxFeePerGas to gasPrice from request',\n      initialParams.gasPrice,\n    );\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxFeePerGas) {\n    log('Using suggested maxFeePerGas', suggestedGasFees.maxFeePerGas);\n    return suggestedGasFees.maxFeePerGas;\n  }\n\n  if (suggestedGasFees.gasPrice) {\n    log(\n      'Setting maxFeePerGas to suggested gasPrice',\n      suggestedGasFees.gasPrice,\n    );\n    return suggestedGasFees.gasPrice;\n  }\n\n  log('maxFeePerGas not set');\n  return undefined;\n}\n\nfunction getMaxPriorityFeePerGas(\n  request: GetGasFeeRequest,\n): string | undefined {\n  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } =\n    request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    const maxPriorityFeePerGas = gweiDecimalToWeiHex(savedGasFees.priorityFee);\n    log(\n      'Using maxPriorityFeePerGas from savedGasFees.priorityFee',\n      maxPriorityFeePerGas,\n    );\n    return maxPriorityFeePerGas;\n  }\n\n  if (initialParams.maxPriorityFeePerGas) {\n    log(\n      'Using maxPriorityFeePerGas from request',\n      initialParams.maxPriorityFeePerGas,\n    );\n    return initialParams.maxPriorityFeePerGas;\n  }\n\n  if (initialParams.gasPrice && !initialParams.maxFeePerGas) {\n    log(\n      'Setting maxPriorityFeePerGas to gasPrice from request',\n      initialParams.gasPrice,\n    );\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxPriorityFeePerGas) {\n    log(\n      'Using suggested maxPriorityFeePerGas',\n      suggestedGasFees.maxPriorityFeePerGas,\n    );\n    return suggestedGasFees.maxPriorityFeePerGas;\n  }\n\n  if (txMeta.txParams.maxFeePerGas) {\n    log(\n      'Setting maxPriorityFeePerGas to maxFeePerGas',\n      txMeta.txParams.maxFeePerGas,\n    );\n    return txMeta.txParams.maxFeePerGas;\n  }\n\n  log('maxPriorityFeePerGas not set');\n  return undefined;\n}\n\nfunction getGasPrice(request: GetGasFeeRequest): string | undefined {\n  const { eip1559, initialParams, suggestedGasFees } = request;\n\n  if (eip1559) {\n    return undefined;\n  }\n\n  if (initialParams.gasPrice) {\n    log('Using gasPrice from request', initialParams.gasPrice);\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.gasPrice) {\n    log('Using suggested gasPrice', suggestedGasFees.gasPrice);\n    return suggestedGasFees.gasPrice;\n  }\n\n  log('gasPrice not set');\n  return undefined;\n}\n\nfunction getUserFeeLevel(request: GetGasFeeRequest): UserFeeLevel | undefined {\n  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } =\n    request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    return UserFeeLevel.CUSTOM;\n  }\n\n  if (\n    !initialParams.maxFeePerGas &&\n    !initialParams.maxPriorityFeePerGas &&\n    initialParams.gasPrice\n  ) {\n    return txMeta.origin === ORIGIN_METAMASK\n      ? UserFeeLevel.CUSTOM\n      : UserFeeLevel.DAPP_SUGGESTED;\n  }\n\n  if (\n    !initialParams.maxFeePerGas &&\n    !initialParams.maxPriorityFeePerGas &&\n    suggestedGasFees.maxFeePerGas &&\n    suggestedGasFees.maxPriorityFeePerGas\n  ) {\n    return UserFeeLevel.MEDIUM;\n  }\n\n  if (txMeta.origin === ORIGIN_METAMASK) {\n    return UserFeeLevel.MEDIUM;\n  }\n\n  return UserFeeLevel.DAPP_SUGGESTED;\n}\n\nfunction updateDefaultGasEstimates(txMeta: TransactionMeta) {\n  if (!txMeta.defaultGasEstimates) {\n    txMeta.defaultGasEstimates = {};\n  }\n\n  txMeta.defaultGasEstimates.maxFeePerGas = txMeta.txParams.maxFeePerGas;\n\n  txMeta.defaultGasEstimates.maxPriorityFeePerGas =\n    txMeta.txParams.maxPriorityFeePerGas;\n\n  txMeta.defaultGasEstimates.gasPrice = txMeta.txParams.gasPrice;\n  txMeta.defaultGasEstimates.estimateType = txMeta.userFeeLevel;\n}\n\nasync function getSuggestedGasFees(request: UpdateGasFeesRequest) {\n  const { eip1559, ethQuery, getGasFeeEstimates, txMeta } = request;\n\n  if (\n    (!eip1559 && txMeta.txParams.gasPrice) ||\n    (eip1559 &&\n      txMeta.txParams.maxFeePerGas &&\n      txMeta.txParams.maxPriorityFeePerGas)\n  ) {\n    return {};\n  }\n\n  try {\n    const { gasFeeEstimates, gasEstimateType } = await getGasFeeEstimates();\n\n    if (eip1559 && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n      const {\n        medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {},\n      } = gasFeeEstimates;\n\n      if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n        return {\n          maxFeePerGas: gweiDecimalToWeiHex(suggestedMaxFeePerGas),\n          maxPriorityFeePerGas: gweiDecimalToWeiHex(\n            suggestedMaxPriorityFeePerGas,\n          ),\n        };\n      }\n    }\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n      // The LEGACY type includes low, medium and high estimates of\n      // gas price values.\n      return {\n        gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.medium),\n      };\n    }\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n      // The ETH_GASPRICE type just includes a single gas price property,\n      // which we can assume was retrieved from eth_gasPrice\n      return {\n        gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.gasPrice),\n      };\n    }\n  } catch (error) {\n    log('Failed to get suggested gas fees', error);\n  }\n\n  const gasPriceDecimal = (await query(ethQuery, 'gasPrice')) as number;\n\n  const gasPrice = gasPriceDecimal\n    ? addHexPrefix(gasPriceDecimal.toString(16))\n    : undefined;\n\n  return { gasPrice };\n}\n\nfunction gweiDecimalToWeiHex(value: string) {\n  return toHex(gweiDecToWEIBN(value));\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/gas.d.ts b/dist/utils/gas.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..a3abd31506aaa9fee37de2eec7d913712ec920a1
--- /dev/null
+++ b/dist/utils/gas.d.ts
@@ -0,0 +1,27 @@
+/// <reference types="debug" />
+import type EthQuery from '@metamask/eth-query';
+import type { ProviderConfig } from '@metamask/network-controller';
+import type { TransactionMeta, TransactionParams } from '../types';
+export declare type UpdateGasRequest = {
+    ethQuery: EthQuery;
+    providerConfig: ProviderConfig;
+    txMeta: TransactionMeta;
+};
+export declare const log: import("debug").Debugger;
+export declare const FIXED_GAS = "0x5208";
+export declare const DEFAULT_GAS_MULTIPLIER = 1.5;
+export declare function updateGas(request: UpdateGasRequest): Promise<void>;
+export declare function estimateGas(txParams: TransactionParams, ethQuery: EthQuery): Promise<{
+    blockGasLimit: string;
+    estimatedGas: string;
+    simulationFails: {
+        reason: any;
+        errorKey: any;
+        debug: {
+            blockNumber: string;
+            blockGasLimit: string;
+        };
+    } | undefined;
+}>;
+export declare function addGasBuffer(estimatedGas: string, blockGasLimit: string, multiplier: number): string;
+//# sourceMappingURL=gas.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/gas.d.ts.map b/dist/utils/gas.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..f4b75f4d730ac1f119aefe4d68104231871d0a1b
--- /dev/null
+++ b/dist/utils/gas.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gas.d.ts","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":";AASA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAC;AAKnE,OAAO,KAAK,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAEnE,oBAAY,gBAAgB,GAAG;IAC7B,QAAQ,EAAE,QAAQ,CAAC;IACnB,cAAc,EAAE,cAAc,CAAC;IAC/B,MAAM,EAAE,eAAe,CAAC;CACzB,CAAC;AAEF,eAAO,MAAM,GAAG,0BAA2C,CAAC;AAE5D,eAAO,MAAM,SAAS,WAAW,CAAC;AAClC,eAAO,MAAM,sBAAsB,MAAM,CAAC;AAE1C,wBAAsB,SAAS,CAAC,OAAO,EAAE,gBAAgB,iBAkBxD;AAED,wBAAsB,WAAW,CAC/B,QAAQ,EAAE,iBAAiB,EAC3B,QAAQ,EAAE,QAAQ;;;;;;;;;;;GAsCnB;AAED,wBAAgB,YAAY,CAC1B,YAAY,EAAE,MAAM,EACpB,aAAa,EAAE,MAAM,EACrB,UAAU,EAAE,MAAM,UAqBnB"}
\ No newline at end of file
diff --git a/dist/utils/gas.js b/dist/utils/gas.js
new file mode 100644
index 0000000000000000000000000000000000000000..6925031fd5ca42ae604d39d56c5bd6ac1ac02d81
--- /dev/null
+++ b/dist/utils/gas.js
@@ -0,0 +1,134 @@
+"use strict";
+/* eslint-disable jsdoc/require-jsdoc */
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.addGasBuffer = exports.estimateGas = exports.updateGas = exports.DEFAULT_GAS_MULTIPLIER = exports.FIXED_GAS = exports.log = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const utils_1 = require("@metamask/utils");
+const ethereumjs_util_1 = require("ethereumjs-util");
+const logger_1 = require("../logger");
+exports.log = (0, utils_1.createModuleLogger)(logger_1.projectLogger, 'gas');
+exports.FIXED_GAS = '0x5208';
+exports.DEFAULT_GAS_MULTIPLIER = 1.5;
+function updateGas(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { txMeta } = request;
+        const initialParams = Object.assign({}, txMeta.txParams);
+        const [gas, simulationFails] = yield getGas(request);
+        txMeta.txParams.gas = gas;
+        txMeta.simulationFails = simulationFails;
+        if (!initialParams.gas) {
+            txMeta.originalGasEstimate = txMeta.txParams.gas;
+        }
+        if (!txMeta.defaultGasEstimates) {
+            txMeta.defaultGasEstimates = {};
+        }
+        txMeta.defaultGasEstimates.gas = txMeta.txParams.gas;
+    });
+}
+exports.updateGas = updateGas;
+function estimateGas(txParams, ethQuery) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const request = Object.assign({}, txParams);
+        const { data, value } = request;
+        const { gasLimit: gasLimitHex, number: blockNumber } = yield getLatestBlock(ethQuery);
+        const gasLimitBN = (0, controller_utils_1.hexToBN)(gasLimitHex);
+        request.data = data ? (0, ethereumjs_util_1.addHexPrefix)(data) : data;
+        request.gas = (0, controller_utils_1.BNToHex)((0, controller_utils_1.fractionBN)(gasLimitBN, 19, 20));
+        request.value = value || '0x0';
+        let estimatedGas = request.gas;
+        let simulationFails;
+        try {
+            estimatedGas = yield (0, controller_utils_1.query)(ethQuery, 'estimateGas', [request]);
+        }
+        catch (error) {
+            simulationFails = {
+                reason: error.message,
+                errorKey: error.errorKey,
+                debug: {
+                    blockNumber,
+                    blockGasLimit: gasLimitHex,
+                },
+            };
+            (0, exports.log)('Estimation failed', Object.assign(Object.assign({}, simulationFails), { fallback: estimateGas }));
+        }
+        return {
+            blockGasLimit: gasLimitHex,
+            estimatedGas,
+            simulationFails,
+        };
+    });
+}
+exports.estimateGas = estimateGas;
+function addGasBuffer(estimatedGas, blockGasLimit, multiplier) {
+    const estimatedGasBN = (0, controller_utils_1.hexToBN)(estimatedGas);
+    const maxGasBN = (0, controller_utils_1.hexToBN)(blockGasLimit).muln(0.9);
+    const paddedGasBN = estimatedGasBN.muln(multiplier);
+    if (estimatedGasBN.gt(maxGasBN)) {
+        const estimatedGasHex = (0, ethereumjs_util_1.addHexPrefix)(estimatedGas);
+        (0, exports.log)('Using estimated value', estimatedGasHex);
+        return estimatedGasHex;
+    }
+    if (paddedGasBN.lt(maxGasBN)) {
+        const paddedHex = (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(paddedGasBN));
+        (0, exports.log)('Using padded estimate', paddedHex, multiplier);
+        return paddedHex;
+    }
+    const maxHex = (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(maxGasBN));
+    (0, exports.log)('Using 90% of block gas limit', maxHex);
+    return maxHex;
+}
+exports.addGasBuffer = addGasBuffer;
+function getGas(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { providerConfig, txMeta } = request;
+        if (txMeta.txParams.gas) {
+            (0, exports.log)('Using value from request', txMeta.txParams.gas);
+            return [txMeta.txParams.gas];
+        }
+        if (yield requiresFixedGas(request)) {
+            (0, exports.log)('Using fixed value', exports.FIXED_GAS);
+            return [exports.FIXED_GAS];
+        }
+        const { blockGasLimit, estimatedGas, simulationFails } = yield estimateGas(txMeta.txParams, request.ethQuery);
+        if (providerConfig.type === controller_utils_1.NetworkType.rpc) {
+            (0, exports.log)('Using original estimate as custom network');
+            return [estimatedGas, simulationFails];
+        }
+        const bufferedGas = addGasBuffer(estimatedGas, blockGasLimit, exports.DEFAULT_GAS_MULTIPLIER);
+        return [bufferedGas, simulationFails];
+    });
+}
+function requiresFixedGas({ ethQuery, txMeta, providerConfig, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const isCustomNetwork = providerConfig.type === controller_utils_1.NetworkType.rpc;
+        const { txParams: { to, data }, } = txMeta;
+        if (isCustomNetwork) {
+            return false;
+        }
+        if (!to) {
+            return true;
+        }
+        const code = yield getCode(ethQuery, to);
+        return !data && (!code || code === '0x');
+    });
+}
+function getCode(ethQuery, address) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(ethQuery, 'getCode', [address]);
+    });
+}
+function getLatestBlock(ethQuery) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(ethQuery, 'getBlockByNumber', ['latest', false]);
+    });
+}
+//# sourceMappingURL=gas.js.map
\ No newline at end of file
diff --git a/dist/utils/gas.js.map b/dist/utils/gas.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..8f163117b4dc59c8fd42ed9b68799d49ea7affba
--- /dev/null
+++ b/dist/utils/gas.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"gas.js","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport {\n  BNToHex,\n  NetworkType,\n  fractionBN,\n  hexToBN,\n  query,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type { ProviderConfig } from '@metamask/network-controller';\nimport { createModuleLogger } from '@metamask/utils';\nimport { addHexPrefix } from 'ethereumjs-util';\n\nimport { projectLogger } from '../logger';\nimport type { TransactionMeta, TransactionParams } from '../types';\n\nexport type UpdateGasRequest = {\n  ethQuery: EthQuery;\n  providerConfig: ProviderConfig;\n  txMeta: TransactionMeta;\n};\n\nexport const log = createModuleLogger(projectLogger, 'gas');\n\nexport const FIXED_GAS = '0x5208';\nexport const DEFAULT_GAS_MULTIPLIER = 1.5;\n\nexport async function updateGas(request: UpdateGasRequest) {\n  const { txMeta } = request;\n  const initialParams = { ...txMeta.txParams };\n\n  const [gas, simulationFails] = await getGas(request);\n\n  txMeta.txParams.gas = gas;\n  txMeta.simulationFails = simulationFails;\n\n  if (!initialParams.gas) {\n    txMeta.originalGasEstimate = txMeta.txParams.gas;\n  }\n\n  if (!txMeta.defaultGasEstimates) {\n    txMeta.defaultGasEstimates = {};\n  }\n\n  txMeta.defaultGasEstimates.gas = txMeta.txParams.gas;\n}\n\nexport async function estimateGas(\n  txParams: TransactionParams,\n  ethQuery: EthQuery,\n) {\n  const request = { ...txParams };\n  const { data, value } = request;\n\n  const { gasLimit: gasLimitHex, number: blockNumber } = await getLatestBlock(\n    ethQuery,\n  );\n\n  const gasLimitBN = hexToBN(gasLimitHex);\n\n  request.data = data ? addHexPrefix(data) : data;\n  request.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n  request.value = value || '0x0';\n\n  let estimatedGas = request.gas;\n  let simulationFails;\n\n  try {\n    estimatedGas = await query(ethQuery, 'estimateGas', [request]);\n  } catch (error: any) {\n    simulationFails = {\n      reason: error.message,\n      errorKey: error.errorKey,\n      debug: {\n        blockNumber,\n        blockGasLimit: gasLimitHex,\n      },\n    };\n\n    log('Estimation failed', { ...simulationFails, fallback: estimateGas });\n  }\n\n  return {\n    blockGasLimit: gasLimitHex,\n    estimatedGas,\n    simulationFails,\n  };\n}\n\nexport function addGasBuffer(\n  estimatedGas: string,\n  blockGasLimit: string,\n  multiplier: number,\n) {\n  const estimatedGasBN = hexToBN(estimatedGas);\n  const maxGasBN = hexToBN(blockGasLimit).muln(0.9);\n  const paddedGasBN = estimatedGasBN.muln(multiplier);\n\n  if (estimatedGasBN.gt(maxGasBN)) {\n    const estimatedGasHex = addHexPrefix(estimatedGas);\n    log('Using estimated value', estimatedGasHex);\n    return estimatedGasHex;\n  }\n\n  if (paddedGasBN.lt(maxGasBN)) {\n    const paddedHex = addHexPrefix(BNToHex(paddedGasBN));\n    log('Using padded estimate', paddedHex, multiplier);\n    return paddedHex;\n  }\n\n  const maxHex = addHexPrefix(BNToHex(maxGasBN));\n  log('Using 90% of block gas limit', maxHex);\n  return maxHex;\n}\n\nasync function getGas(\n  request: UpdateGasRequest,\n): Promise<[string, TransactionMeta['simulationFails']?]> {\n  const { providerConfig, txMeta } = request;\n\n  if (txMeta.txParams.gas) {\n    log('Using value from request', txMeta.txParams.gas);\n    return [txMeta.txParams.gas];\n  }\n\n  if (await requiresFixedGas(request)) {\n    log('Using fixed value', FIXED_GAS);\n    return [FIXED_GAS];\n  }\n\n  const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(\n    txMeta.txParams,\n    request.ethQuery,\n  );\n\n  if (providerConfig.type === NetworkType.rpc) {\n    log('Using original estimate as custom network');\n    return [estimatedGas, simulationFails];\n  }\n\n  const bufferedGas = addGasBuffer(\n    estimatedGas,\n    blockGasLimit,\n    DEFAULT_GAS_MULTIPLIER,\n  );\n\n  return [bufferedGas, simulationFails];\n}\n\nasync function requiresFixedGas({\n  ethQuery,\n  txMeta,\n  providerConfig,\n}: UpdateGasRequest): Promise<boolean> {\n  const isCustomNetwork = providerConfig.type === NetworkType.rpc;\n\n  const {\n    txParams: { to, data },\n  } = txMeta;\n\n  if (isCustomNetwork) {\n    return false;\n  }\n\n  if (!to) {\n    return true;\n  }\n\n  const code = await getCode(ethQuery, to);\n\n  return !data && (!code || code === '0x');\n}\n\nasync function getCode(\n  ethQuery: EthQuery,\n  address: string,\n): Promise<string | undefined> {\n  return await query(ethQuery, 'getCode', [address]);\n}\n\nasync function getLatestBlock(\n  ethQuery: EthQuery,\n): Promise<{ gasLimit: string; number: string }> {\n  return await query(ethQuery, 'getBlockByNumber', ['latest', false]);\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/history.d.ts b/dist/utils/history.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..bafbf48c933c39f7b9d2659dc06cfbb0ff46862b
--- /dev/null
+++ b/dist/utils/history.d.ts
@@ -0,0 +1,15 @@
+import type { TransactionMeta } from '../types';
+/**
+ * Add initial history snapshot to the provided transactionMeta history.
+ *
+ * @param transactionMeta - TransactionMeta to add initial history snapshot to.
+ */
+export declare function addInitialHistorySnapshot(transactionMeta: TransactionMeta): void;
+/**
+ * Compares and adds history entry to the provided transactionMeta history.
+ *
+ * @param transactionMeta - TransactionMeta to add history entry to.
+ * @param note - Note to add to history entry.
+ */
+export declare function updateTransactionHistory(transactionMeta: TransactionMeta, note: string): void;
+//# sourceMappingURL=history.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/history.d.ts.map b/dist/utils/history.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..718fc26b1000d4b9b560627db187de6e0accc3f3
--- /dev/null
+++ b/dist/utils/history.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"history.d.ts","sourceRoot":"","sources":["../../src/utils/history.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAGV,eAAe,EAChB,MAAM,UAAU,CAAC;AAElB;;;;GAIG;AACH,wBAAgB,yBAAyB,CAAC,eAAe,EAAE,eAAe,QAGzE;AAED;;;;;GAKG;AACH,wBAAgB,wBAAwB,CACtC,eAAe,EAAE,eAAe,EAChC,IAAI,EAAE,MAAM,GACX,IAAI,CAWN"}
\ No newline at end of file
diff --git a/dist/utils/history.js b/dist/utils/history.js
new file mode 100644
index 0000000000000000000000000000000000000000..cdac50549b695b7b5711b0021b0aed847f0dad31
--- /dev/null
+++ b/dist/utils/history.js
@@ -0,0 +1,75 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.updateTransactionHistory = exports.addInitialHistorySnapshot = void 0;
+const fast_json_patch_1 = __importDefault(require("fast-json-patch"));
+const lodash_1 = require("lodash");
+/**
+ * Add initial history snapshot to the provided transactionMeta history.
+ *
+ * @param transactionMeta - TransactionMeta to add initial history snapshot to.
+ */
+function addInitialHistorySnapshot(transactionMeta) {
+    const snapshot = snapshotFromTransactionMeta(transactionMeta);
+    transactionMeta.history = [snapshot];
+}
+exports.addInitialHistorySnapshot = addInitialHistorySnapshot;
+/**
+ * Compares and adds history entry to the provided transactionMeta history.
+ *
+ * @param transactionMeta - TransactionMeta to add history entry to.
+ * @param note - Note to add to history entry.
+ */
+function updateTransactionHistory(transactionMeta, note) {
+    var _a;
+    const currentState = snapshotFromTransactionMeta(transactionMeta);
+    const previousState = replayHistory(transactionMeta.history);
+    const historyEntry = generateHistoryEntry(previousState, currentState, note);
+    if (historyEntry.length) {
+        (_a = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.history) === null || _a === void 0 ? void 0 : _a.push(historyEntry);
+    }
+}
+exports.updateTransactionHistory = updateTransactionHistory;
+/**
+ * Generates a history entry from the previous and new transaction metadata.
+ *
+ * @param previousState - The previous transaction metadata.
+ * @param currentState - The new transaction metadata.
+ * @param note - A note for the transaction metada update.
+ * @returns An array of history operation.
+ */
+function generateHistoryEntry(previousState, currentState, note) {
+    const historyOperationsEntry = fast_json_patch_1.default.compare(previousState, currentState);
+    // Add a note to the first operation, since it breaks if we append it to the entry
+    if (historyOperationsEntry[0]) {
+        if (note) {
+            historyOperationsEntry[0].note = note;
+        }
+        historyOperationsEntry[0].timestamp = Date.now();
+    }
+    return historyOperationsEntry;
+}
+/**
+ * Recovers previous transactionMeta from passed history array.
+ *
+ * @param transactionHistory - The transaction metadata to replay.
+ * @returns The transaction metadata.
+ */
+function replayHistory(transactionHistory) {
+    const shortHistory = (0, lodash_1.cloneDeep)(transactionHistory);
+    return shortHistory.reduce((val, entry) => fast_json_patch_1.default.applyPatch(val, entry).newDocument);
+}
+/**
+ * Clone the transaction meta data without the history property.
+ *
+ * @param transactionMeta - The transaction metadata to snapshot.
+ * @returns A deep clone of transaction metadata without history property.
+ */
+function snapshotFromTransactionMeta(transactionMeta) {
+    const snapshot = Object.assign({}, transactionMeta);
+    delete snapshot.history;
+    return (0, lodash_1.cloneDeep)(snapshot);
+}
+//# sourceMappingURL=history.js.map
\ No newline at end of file
diff --git a/dist/utils/history.js.map b/dist/utils/history.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..c1f5bda4196248059a5c2e2fbed18024cef854b6
--- /dev/null
+++ b/dist/utils/history.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"history.js","sourceRoot":"","sources":["../../src/utils/history.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAyC;AACzC,mCAAmC;AAQnC;;;;GAIG;AACH,SAAgB,yBAAyB,CAAC,eAAgC;IACxE,MAAM,QAAQ,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAC9D,eAAe,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AAHD,8DAGC;AAED;;;;;GAKG;AACH,SAAgB,wBAAwB,CACtC,eAAgC,EAChC,IAAY;;IAEZ,MAAM,YAAY,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,aAAa,CACjC,eAAe,CAAC,OAA6B,CAC9C,CAAC;IAEF,MAAM,YAAY,GAAG,oBAAoB,CAAC,aAAa,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAE7E,IAAI,YAAY,CAAC,MAAM,EAAE;QACvB,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,0CAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KAC9C;AACH,CAAC;AAdD,4DAcC;AAED;;;;;;;GAOG;AACH,SAAS,oBAAoB,CAC3B,aAAkB,EAClB,YAA6B,EAC7B,IAAY;IAEZ,MAAM,sBAAsB,GAAG,yBAAU,CAAC,OAAO,CAC/C,aAAa,EACb,YAAY,CACc,CAAC;IAC7B,kFAAkF;IAClF,IAAI,sBAAsB,CAAC,CAAC,CAAC,EAAE;QAC7B,IAAI,IAAI,EAAE;YACR,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;SACvC;QACD,sBAAsB,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KAClD;IACD,OAAO,sBAAsB,CAAC;AAChC,CAAC;AAED;;;;;GAKG;AACH,SAAS,aAAa,CACpB,kBAAsC;IAEtC,MAAM,YAAY,GAAG,IAAA,kBAAS,EAAC,kBAAkB,CAAC,CAAC;IACnD,OAAO,YAAY,CAAC,MAAM,CACxB,CAAC,GAAG,EAAE,KAAU,EAAE,EAAE,CAAC,yBAAU,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,WAAW,CAChD,CAAC;AACvB,CAAC;AAED;;;;;GAKG;AACH,SAAS,2BAA2B,CAClC,eAAgC;IAEhC,MAAM,QAAQ,qBAAQ,eAAe,CAAE,CAAC;IACxC,OAAO,QAAQ,CAAC,OAAO,CAAC;IACxB,OAAO,IAAA,kBAAS,EAAC,QAAQ,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import jsonDiffer from 'fast-json-patch';\nimport { cloneDeep } from 'lodash';\n\nimport type {\n  TransactionHistory,\n  TransactionHistoryEntry,\n  TransactionMeta,\n} from '../types';\n\n/**\n * Add initial history snapshot to the provided transactionMeta history.\n *\n * @param transactionMeta - TransactionMeta to add initial history snapshot to.\n */\nexport function addInitialHistorySnapshot(transactionMeta: TransactionMeta) {\n  const snapshot = snapshotFromTransactionMeta(transactionMeta);\n  transactionMeta.history = [snapshot];\n}\n\n/**\n * Compares and adds history entry to the provided transactionMeta history.\n *\n * @param transactionMeta - TransactionMeta to add history entry to.\n * @param note - Note to add to history entry.\n */\nexport function updateTransactionHistory(\n  transactionMeta: TransactionMeta,\n  note: string,\n): void {\n  const currentState = snapshotFromTransactionMeta(transactionMeta);\n  const previousState = replayHistory(\n    transactionMeta.history as TransactionHistory,\n  );\n\n  const historyEntry = generateHistoryEntry(previousState, currentState, note);\n\n  if (historyEntry.length) {\n    transactionMeta?.history?.push(historyEntry);\n  }\n}\n\n/**\n * Generates a history entry from the previous and new transaction metadata.\n *\n * @param previousState - The previous transaction metadata.\n * @param currentState - The new transaction metadata.\n * @param note - A note for the transaction metada update.\n * @returns An array of history operation.\n */\nfunction generateHistoryEntry(\n  previousState: any,\n  currentState: TransactionMeta,\n  note: string,\n): TransactionHistoryEntry {\n  const historyOperationsEntry = jsonDiffer.compare(\n    previousState,\n    currentState,\n  ) as TransactionHistoryEntry;\n  // Add a note to the first operation, since it breaks if we append it to the entry\n  if (historyOperationsEntry[0]) {\n    if (note) {\n      historyOperationsEntry[0].note = note;\n    }\n    historyOperationsEntry[0].timestamp = Date.now();\n  }\n  return historyOperationsEntry;\n}\n\n/**\n * Recovers previous transactionMeta from passed history array.\n *\n * @param transactionHistory - The transaction metadata to replay.\n * @returns The transaction metadata.\n */\nfunction replayHistory(\n  transactionHistory: TransactionHistory,\n): TransactionMeta {\n  const shortHistory = cloneDeep(transactionHistory);\n  return shortHistory.reduce(\n    (val, entry: any) => jsonDiffer.applyPatch(val, entry).newDocument,\n  ) as TransactionMeta;\n}\n\n/**\n * Clone the transaction meta data without the history property.\n *\n * @param transactionMeta - The transaction metadata to snapshot.\n * @returns A deep clone of transaction metadata without history property.\n */\nfunction snapshotFromTransactionMeta(\n  transactionMeta: TransactionMeta,\n): TransactionMeta {\n  const snapshot = { ...transactionMeta };\n  delete snapshot.history;\n  return cloneDeep(snapshot);\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/swaps.d.ts b/dist/utils/swaps.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c2eb3a103f7a5e4ae6b3ca49de5c1c687ba5f9e9
--- /dev/null
+++ b/dist/utils/swaps.d.ts
@@ -0,0 +1,81 @@
+import type EthQuery from '@metamask/eth-query';
+import type { Events, TransactionMeta } from '../types';
+import { TransactionType } from '../types';
+/**
+ * Interval in milliseconds between checks of post transaction balance
+ */
+export declare const UPDATE_POST_TX_BALANCE_TIMEOUT = 5000;
+/**
+ * Retry attempts for checking post transaction balance
+ */
+export declare const UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;
+/**
+ * An address that the metaswap-api recognizes as the default token for the current network, in place of the token address that ERC-20 tokens have
+ */
+export declare const DEFAULT_TOKEN_ADDRESS = "0x0000000000000000000000000000000000000000";
+interface SwapsTokenObject {
+    /**
+     * The name for the network
+     */
+    name: string;
+    /**
+     * An address that the metaswap-api recognizes as the default token
+     */
+    address: string;
+    /**
+     * Number of digits after decimal point
+     */
+    decimals: number;
+}
+export declare const SWAPS_CHAINID_DEFAULT_TOKEN_MAP: {
+    readonly "0x1": SwapsTokenObject;
+    readonly "0x539": SwapsTokenObject;
+    readonly "0x38": SwapsTokenObject;
+    readonly "0x89": SwapsTokenObject;
+    readonly "0x5": SwapsTokenObject;
+    readonly "0xa86a": SwapsTokenObject;
+    readonly "0xa": SwapsTokenObject;
+    readonly "0xa4b1": SwapsTokenObject;
+    readonly "0x144": SwapsTokenObject;
+};
+export declare const SWAP_TRANSACTION_TYPES: TransactionType[];
+/**
+ * Updates the transaction meta object with the swap information
+ *
+ * @param transactionMeta - The transaction meta object to update
+ * @param transactionType - The type of the transaction
+ * @param swaps - The swaps object
+ * @param swaps.hasApproveTx - Whether the swap has an approval transaction
+ * @param swaps.meta - The swap meta object
+ * @param updateSwapsTransactionRequest - Dependency bag
+ * @param updateSwapsTransactionRequest.isSwapsDisabled - Whether swaps are disabled
+ * @param updateSwapsTransactionRequest.cancelTransaction - Function to cancel a transaction
+ * @param updateSwapsTransactionRequest.controllerHubEmitter - Function to emit an event to the controller hub
+ */
+export declare function updateSwapsTransaction(transactionMeta: TransactionMeta, transactionType: TransactionType, swaps: {
+    hasApproveTx?: boolean;
+    meta?: Partial<TransactionMeta>;
+}, { isSwapsDisabled, cancelTransaction, controllerHubEmitter, }: {
+    isSwapsDisabled: boolean;
+    cancelTransaction: (transactionId: string) => void;
+    controllerHubEmitter: <T extends keyof Events>(eventName: T, ...args: Events[T]) => boolean;
+}): Promise<void>;
+/**
+ * Attempts to update the post transaction balance of the provided transaction
+ *
+ * @param transactionMeta - Transaction meta object to update
+ * @param updatePostTransactionBalanceRequest - Dependency bag
+ * @param updatePostTransactionBalanceRequest.ethQuery - EthQuery object
+ * @param updatePostTransactionBalanceRequest.getTransaction - Reading function for the latest transaction state
+ * @param updatePostTransactionBalanceRequest.updateTransaction - Updating transaction function
+ */
+export declare function updatePostTransactionBalance(transactionMeta: TransactionMeta, { ethQuery, getTransaction, updateTransaction, }: {
+    ethQuery: EthQuery;
+    getTransaction: (transactionId: string) => TransactionMeta | undefined;
+    updateTransaction: (transactionMeta: TransactionMeta, note: string) => void;
+}): Promise<{
+    updatedTransactionMeta: TransactionMeta;
+    approvalTransactionMeta?: TransactionMeta;
+}>;
+export {};
+//# sourceMappingURL=swaps.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/swaps.d.ts.map b/dist/utils/swaps.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..5de86188b36efebe43c8c84d5ac8a31505d8913e
--- /dev/null
+++ b/dist/utils/swaps.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"swaps.d.ts","sourceRoot":"","sources":["../../src/utils/swaps.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAIhD,OAAO,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAG3C;;GAEG;AACH,eAAO,MAAM,8BAA8B,OAAO,CAAC;AAEnD;;GAEG;AACH,eAAO,MAAM,+BAA+B,IAAI,CAAC;AAIjD;;GAEG;AACH,eAAO,MAAM,qBAAqB,+CACY,CAAC;AAI/C,UAAU,gBAAgB;IACxB;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IACb;;OAEG;IACH,OAAO,EAAE,MAAM,CAAC;IAChB;;OAEG;IACH,QAAQ,EAAE,MAAM,CAAC;CAClB;AAkDD,eAAO,MAAM,+BAA+B;;;;;;;;;;CAUlC,CAAC;AAEX,eAAO,MAAM,sBAAsB,mBAGlC,CAAC;AAEF;;;;;;;;;;;;GAYG;AACH,wBAAsB,sBAAsB,CAC1C,eAAe,EAAE,eAAe,EAChC,eAAe,EAAE,eAAe,EAChC,KAAK,EAAE;IACL,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB,IAAI,CAAC,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;CACjC,EACD,EACE,eAAe,EACf,iBAAiB,EACjB,oBAAoB,GACrB,EAAE;IACD,eAAe,EAAE,OAAO,CAAC;IACzB,iBAAiB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,IAAI,CAAC;IACnD,oBAAoB,EAAE,CAAC,CAAC,SAAS,MAAM,MAAM,EAC3C,SAAS,EAAE,CAAC,EACZ,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,KACf,OAAO,CAAC;CACd,iBAyCF;AAED;;;;;;;;GAQG;AACH,wBAAsB,4BAA4B,CAChD,eAAe,EAAE,eAAe,EAChC,EACE,QAAQ,EACR,cAAc,EACd,iBAAiB,GAClB,EAAE;IACD,QAAQ,EAAE,QAAQ,CAAC;IACnB,cAAc,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,eAAe,GAAG,SAAS,CAAC;IACvE,iBAAiB,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;CAC7E,GACA,OAAO,CAAC;IACT,sBAAsB,EAAE,eAAe,CAAC;IACxC,uBAAuB,CAAC,EAAE,eAAe,CAAC;CAC3C,CAAC,CAqCD"}
\ No newline at end of file
diff --git a/dist/utils/swaps.js b/dist/utils/swaps.js
new file mode 100644
index 0000000000000000000000000000000000000000..444b783c2edee0f2dd67eba6f4033a9b5a992ae7
--- /dev/null
+++ b/dist/utils/swaps.js
@@ -0,0 +1,240 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.updatePostTransactionBalance = exports.updateSwapsTransaction = exports.SWAP_TRANSACTION_TYPES = exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = exports.DEFAULT_TOKEN_ADDRESS = exports.UPDATE_POST_TX_BALANCE_ATTEMPTS = exports.UPDATE_POST_TX_BALANCE_TIMEOUT = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const lodash_1 = require("lodash");
+const constants_1 = require("../constants");
+const types_1 = require("../types");
+const utils_1 = require("./utils");
+/**
+ * Interval in milliseconds between checks of post transaction balance
+ */
+exports.UPDATE_POST_TX_BALANCE_TIMEOUT = 5000;
+/**
+ * Retry attempts for checking post transaction balance
+ */
+exports.UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;
+const SWAPS_TESTNET_CHAIN_ID = '0x539';
+/**
+ * An address that the metaswap-api recognizes as the default token for the current network, in place of the token address that ERC-20 tokens have
+ */
+exports.DEFAULT_TOKEN_ADDRESS = '0x0000000000000000000000000000000000000000';
+const ETH_SWAPS_TOKEN_OBJECT = {
+    name: 'Ether',
+    address: exports.DEFAULT_TOKEN_ADDRESS,
+    decimals: 18,
+};
+const BNB_SWAPS_TOKEN_OBJECT = {
+    name: 'Binance Coin',
+    address: exports.DEFAULT_TOKEN_ADDRESS,
+    decimals: 18,
+};
+const MATIC_SWAPS_TOKEN_OBJECT = {
+    name: 'Matic',
+    address: exports.DEFAULT_TOKEN_ADDRESS,
+    decimals: 18,
+};
+const AVAX_SWAPS_TOKEN_OBJECT = {
+    name: 'Avalanche',
+    address: exports.DEFAULT_TOKEN_ADDRESS,
+    decimals: 18,
+};
+const TEST_ETH_SWAPS_TOKEN_OBJECT = {
+    name: 'Test Ether',
+    address: exports.DEFAULT_TOKEN_ADDRESS,
+    decimals: 18,
+};
+const GOERLI_SWAPS_TOKEN_OBJECT = {
+    name: 'Ether',
+    address: exports.DEFAULT_TOKEN_ADDRESS,
+    decimals: 18,
+};
+const ARBITRUM_SWAPS_TOKEN_OBJECT = Object.assign({}, ETH_SWAPS_TOKEN_OBJECT);
+const OPTIMISM_SWAPS_TOKEN_OBJECT = Object.assign({}, ETH_SWAPS_TOKEN_OBJECT);
+const ZKSYNC_ERA_SWAPS_TOKEN_OBJECT = Object.assign({}, ETH_SWAPS_TOKEN_OBJECT);
+exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = {
+    [constants_1.CHAIN_IDS.MAINNET]: ETH_SWAPS_TOKEN_OBJECT,
+    [SWAPS_TESTNET_CHAIN_ID]: TEST_ETH_SWAPS_TOKEN_OBJECT,
+    [constants_1.CHAIN_IDS.BSC]: BNB_SWAPS_TOKEN_OBJECT,
+    [constants_1.CHAIN_IDS.POLYGON]: MATIC_SWAPS_TOKEN_OBJECT,
+    [constants_1.CHAIN_IDS.GOERLI]: GOERLI_SWAPS_TOKEN_OBJECT,
+    [constants_1.CHAIN_IDS.AVALANCHE]: AVAX_SWAPS_TOKEN_OBJECT,
+    [constants_1.CHAIN_IDS.OPTIMISM]: OPTIMISM_SWAPS_TOKEN_OBJECT,
+    [constants_1.CHAIN_IDS.ARBITRUM]: ARBITRUM_SWAPS_TOKEN_OBJECT,
+    [constants_1.CHAIN_IDS.ZKSYNC_ERA]: ZKSYNC_ERA_SWAPS_TOKEN_OBJECT,
+};
+exports.SWAP_TRANSACTION_TYPES = [
+    types_1.TransactionType.swap,
+    types_1.TransactionType.swapApproval,
+];
+/**
+ * Updates the transaction meta object with the swap information
+ *
+ * @param transactionMeta - The transaction meta object to update
+ * @param transactionType - The type of the transaction
+ * @param swaps - The swaps object
+ * @param swaps.hasApproveTx - Whether the swap has an approval transaction
+ * @param swaps.meta - The swap meta object
+ * @param updateSwapsTransactionRequest - Dependency bag
+ * @param updateSwapsTransactionRequest.isSwapsDisabled - Whether swaps are disabled
+ * @param updateSwapsTransactionRequest.cancelTransaction - Function to cancel a transaction
+ * @param updateSwapsTransactionRequest.controllerHubEmitter - Function to emit an event to the controller hub
+ */
+function updateSwapsTransaction(transactionMeta, transactionType, swaps, { isSwapsDisabled, cancelTransaction, controllerHubEmitter, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        if (isSwapsDisabled || !exports.SWAP_TRANSACTION_TYPES.includes(transactionType)) {
+            return;
+        }
+        // The simulationFails property is added if the estimateGas call fails. In cases
+        // when no swaps approval tx is required, this indicates that the swap will likely
+        // fail. There was an earlier estimateGas call made by the swaps controller,
+        // but it is possible that external conditions have change since then, and
+        // a previously succeeding estimate gas call could now fail. By checking for
+        // the `simulationFails` property here, we can reduce the number of swap
+        // transactions that get published to the blockchain only to fail and thereby
+        // waste the user's funds on gas.
+        if (transactionType === types_1.TransactionType.swap &&
+            (swaps === null || swaps === void 0 ? void 0 : swaps.hasApproveTx) === false &&
+            transactionMeta.simulationFails) {
+            yield cancelTransaction(transactionMeta.id);
+            throw new Error('Simulation failed');
+        }
+        const swapsMeta = swaps === null || swaps === void 0 ? void 0 : swaps.meta;
+        if (!swapsMeta) {
+            return;
+        }
+        if (transactionType === types_1.TransactionType.swapApproval) {
+            updateSwapApprovalTransaction(transactionMeta, swapsMeta);
+            controllerHubEmitter('transaction-new-swap-approval', {
+                transactionMeta,
+            });
+        }
+        if (transactionType === types_1.TransactionType.swap) {
+            updateSwapTransaction(transactionMeta, swapsMeta);
+            controllerHubEmitter('transaction-new-swap', {
+                transactionMeta,
+            });
+        }
+    });
+}
+exports.updateSwapsTransaction = updateSwapsTransaction;
+/**
+ * Attempts to update the post transaction balance of the provided transaction
+ *
+ * @param transactionMeta - Transaction meta object to update
+ * @param updatePostTransactionBalanceRequest - Dependency bag
+ * @param updatePostTransactionBalanceRequest.ethQuery - EthQuery object
+ * @param updatePostTransactionBalanceRequest.getTransaction - Reading function for the latest transaction state
+ * @param updatePostTransactionBalanceRequest.updateTransaction - Updating transaction function
+ */
+function updatePostTransactionBalance(transactionMeta, { ethQuery, getTransaction, updateTransaction, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const transactionId = transactionMeta.id;
+        let latestTransactionMeta, approvalTransactionMeta;
+        for (let i = 0; i < exports.UPDATE_POST_TX_BALANCE_ATTEMPTS; i++) {
+            const postTransactionBalance = yield (0, controller_utils_1.query)(ethQuery, 'getBalance', [
+                transactionMeta.txParams.from,
+            ]);
+            latestTransactionMeta = getTransaction(transactionId);
+            approvalTransactionMeta = latestTransactionMeta.approvalTxId
+                ? getTransaction(latestTransactionMeta.approvalTxId)
+                : undefined;
+            latestTransactionMeta.postTxBalance = postTransactionBalance.toString(16);
+            const isDefaultTokenAddress = isSwapsDefaultTokenAddress(transactionMeta.destinationTokenAddress, transactionMeta.chainId);
+            if (!isDefaultTokenAddress ||
+                transactionMeta.preTxBalance !== latestTransactionMeta.postTxBalance) {
+                break;
+            }
+            yield sleep(exports.UPDATE_POST_TX_BALANCE_TIMEOUT);
+        }
+        updateTransaction(latestTransactionMeta, 'TransactionController#updatePostTransactionBalance - Add post transaction balance');
+        return {
+            updatedTransactionMeta: latestTransactionMeta,
+            approvalTransactionMeta,
+        };
+    });
+}
+exports.updatePostTransactionBalance = updatePostTransactionBalance;
+/**
+ * Updates the transaction meta object with the swap information
+ *
+ * @param transactionMeta - Transaction meta object to update
+ * @param propsToUpdate - Properties to update
+ * @param propsToUpdate.sourceTokenSymbol - Symbol of the token to be swapped
+ * @param propsToUpdate.destinationTokenSymbol - Symbol of the token to be received
+ * @param propsToUpdate.type - Type of the transaction
+ * @param propsToUpdate.destinationTokenDecimals - Decimals of the token to be received
+ * @param propsToUpdate.destinationTokenAddress - Address of the token to be received
+ * @param propsToUpdate.swapMetaData - Metadata of the swap
+ * @param propsToUpdate.swapTokenValue - Value of the token to be swapped
+ * @param propsToUpdate.estimatedBaseFee - Estimated base fee of the transaction
+ * @param propsToUpdate.approvalTxId - Transaction id of the approval transaction
+ */
+function updateSwapTransaction(transactionMeta, { sourceTokenSymbol, destinationTokenSymbol, type, destinationTokenDecimals, destinationTokenAddress, swapMetaData, swapTokenValue, estimatedBaseFee, approvalTxId, }) {
+    (0, utils_1.validateIfTransactionUnapproved)(transactionMeta, 'updateSwapTransaction');
+    let swapTransaction = {
+        sourceTokenSymbol,
+        destinationTokenSymbol,
+        type,
+        destinationTokenDecimals,
+        destinationTokenAddress,
+        swapMetaData,
+        swapTokenValue,
+        estimatedBaseFee,
+        approvalTxId,
+    };
+    swapTransaction = (0, lodash_1.pickBy)(swapTransaction);
+    (0, lodash_1.merge)(transactionMeta, swapTransaction);
+}
+/**
+ * Updates the transaction meta object with the swap approval information
+ *
+ * @param transactionMeta - Transaction meta object to update
+ * @param propsToUpdate - Properties to update
+ * @param propsToUpdate.type - Type of the transaction
+ * @param propsToUpdate.sourceTokenSymbol - Symbol of the token to be swapped
+ */
+function updateSwapApprovalTransaction(transactionMeta, { type, sourceTokenSymbol }) {
+    (0, utils_1.validateIfTransactionUnapproved)(transactionMeta, 'updateSwapApprovalTransaction');
+    let swapApprovalTransaction = { type, sourceTokenSymbol };
+    swapApprovalTransaction = (0, lodash_1.pickBy)({
+        type,
+        sourceTokenSymbol,
+    });
+    (0, lodash_1.merge)(transactionMeta, swapApprovalTransaction);
+}
+/**
+ * Checks whether the provided address is strictly equal to the address for
+ * the default swaps token of the provided chain.
+ *
+ * @param address - The string to compare to the default token address
+ * @param chainId - The hex encoded chain ID of the default swaps token to check
+ * @returns Whether the address is the provided chain's default token address
+ */
+function isSwapsDefaultTokenAddress(address, chainId) {
+    var _a;
+    if (!address || !chainId) {
+        return false;
+    }
+    return (address ===
+        ((_a = exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]) === null || _a === void 0 ? void 0 : _a.address));
+}
+/**
+ * Sleeps for the provided number of milliseconds
+ *
+ * @param ms - Number of milliseconds to sleep
+ * @returns Promise that resolves after the provided number of milliseconds
+ */
+function sleep(ms) {
+    return new Promise((resolve) => setTimeout(resolve, ms));
+}
+//# sourceMappingURL=swaps.js.map
\ No newline at end of file
diff --git a/dist/utils/swaps.js.map b/dist/utils/swaps.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..797123b2a773c846b2d9c8a5191f09968d9e7ba8
--- /dev/null
+++ b/dist/utils/swaps.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"swaps.js","sourceRoot":"","sources":["../../src/utils/swaps.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport { merge, pickBy } from 'lodash';\n\nimport { CHAIN_IDS } from '../constants';\nimport type { Events, TransactionMeta } from '../types';\nimport { TransactionType } from '../types';\nimport { validateIfTransactionUnapproved } from './utils';\n\n/**\n * Interval in milliseconds between checks of post transaction balance\n */\nexport const UPDATE_POST_TX_BALANCE_TIMEOUT = 5000;\n\n/**\n * Retry attempts for checking post transaction balance\n */\nexport const UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;\n\nconst SWAPS_TESTNET_CHAIN_ID = '0x539';\n\n/**\n * An address that the metaswap-api recognizes as the default token for the current network, in place of the token address that ERC-20 tokens have\n */\nexport const DEFAULT_TOKEN_ADDRESS =\n  '0x0000000000000000000000000000000000000000';\n\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface SwapsTokenObject {\n  /**\n   * The name for the network\n   */\n  name: string;\n  /**\n   * An address that the metaswap-api recognizes as the default token\n   */\n  address: string;\n  /**\n   * Number of digits after decimal point\n   */\n  decimals: number;\n}\n\nconst ETH_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n};\n\nconst BNB_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Binance Coin',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst MATIC_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Matic',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst AVAX_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Avalanche',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst TEST_ETH_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Test Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst GOERLI_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst ARBITRUM_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nconst OPTIMISM_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nconst ZKSYNC_ERA_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nexport const SWAPS_CHAINID_DEFAULT_TOKEN_MAP = {\n  [CHAIN_IDS.MAINNET]: ETH_SWAPS_TOKEN_OBJECT,\n  [SWAPS_TESTNET_CHAIN_ID]: TEST_ETH_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.BSC]: BNB_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.POLYGON]: MATIC_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.GOERLI]: GOERLI_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.AVALANCHE]: AVAX_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.OPTIMISM]: OPTIMISM_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.ARBITRUM]: ARBITRUM_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.ZKSYNC_ERA]: ZKSYNC_ERA_SWAPS_TOKEN_OBJECT,\n} as const;\n\nexport const SWAP_TRANSACTION_TYPES = [\n  TransactionType.swap,\n  TransactionType.swapApproval,\n];\n\n/**\n * Updates the transaction meta object with the swap information\n *\n * @param transactionMeta - The transaction meta object to update\n * @param transactionType - The type of the transaction\n * @param swaps - The swaps object\n * @param swaps.hasApproveTx - Whether the swap has an approval transaction\n * @param swaps.meta - The swap meta object\n * @param updateSwapsTransactionRequest - Dependency bag\n * @param updateSwapsTransactionRequest.isSwapsDisabled - Whether swaps are disabled\n * @param updateSwapsTransactionRequest.cancelTransaction - Function to cancel a transaction\n * @param updateSwapsTransactionRequest.controllerHubEmitter - Function to emit an event to the controller hub\n */\nexport async function updateSwapsTransaction(\n  transactionMeta: TransactionMeta,\n  transactionType: TransactionType,\n  swaps: {\n    hasApproveTx?: boolean;\n    meta?: Partial<TransactionMeta>;\n  },\n  {\n    isSwapsDisabled,\n    cancelTransaction,\n    controllerHubEmitter,\n  }: {\n    isSwapsDisabled: boolean;\n    cancelTransaction: (transactionId: string) => void;\n    controllerHubEmitter: <T extends keyof Events>(\n      eventName: T,\n      ...args: Events[T]\n    ) => boolean;\n  },\n) {\n  if (isSwapsDisabled || !SWAP_TRANSACTION_TYPES.includes(transactionType)) {\n    return;\n  }\n  // The simulationFails property is added if the estimateGas call fails. In cases\n  // when no swaps approval tx is required, this indicates that the swap will likely\n  // fail. There was an earlier estimateGas call made by the swaps controller,\n  // but it is possible that external conditions have change since then, and\n  // a previously succeeding estimate gas call could now fail. By checking for\n  // the `simulationFails` property here, we can reduce the number of swap\n  // transactions that get published to the blockchain only to fail and thereby\n  // waste the user's funds on gas.\n  if (\n    transactionType === TransactionType.swap &&\n    swaps?.hasApproveTx === false &&\n    transactionMeta.simulationFails\n  ) {\n    await cancelTransaction(transactionMeta.id);\n    throw new Error('Simulation failed');\n  }\n\n  const swapsMeta = swaps?.meta as Partial<TransactionMeta>;\n\n  if (!swapsMeta) {\n    return;\n  }\n\n  if (transactionType === TransactionType.swapApproval) {\n    updateSwapApprovalTransaction(transactionMeta, swapsMeta);\n    controllerHubEmitter('transaction-new-swap-approval', {\n      transactionMeta,\n    });\n  }\n\n  if (transactionType === TransactionType.swap) {\n    updateSwapTransaction(transactionMeta, swapsMeta);\n    controllerHubEmitter('transaction-new-swap', {\n      transactionMeta,\n    });\n  }\n}\n\n/**\n * Attempts to update the post transaction balance of the provided transaction\n *\n * @param transactionMeta - Transaction meta object to update\n * @param updatePostTransactionBalanceRequest - Dependency bag\n * @param updatePostTransactionBalanceRequest.ethQuery - EthQuery object\n * @param updatePostTransactionBalanceRequest.getTransaction - Reading function for the latest transaction state\n * @param updatePostTransactionBalanceRequest.updateTransaction - Updating transaction function\n */\nexport async function updatePostTransactionBalance(\n  transactionMeta: TransactionMeta,\n  {\n    ethQuery,\n    getTransaction,\n    updateTransaction,\n  }: {\n    ethQuery: EthQuery;\n    getTransaction: (transactionId: string) => TransactionMeta | undefined;\n    updateTransaction: (transactionMeta: TransactionMeta, note: string) => void;\n  },\n): Promise<{\n  updatedTransactionMeta: TransactionMeta;\n  approvalTransactionMeta?: TransactionMeta;\n}> {\n  const transactionId = transactionMeta.id;\n\n  let latestTransactionMeta, approvalTransactionMeta;\n  for (let i = 0; i < UPDATE_POST_TX_BALANCE_ATTEMPTS; i++) {\n    const postTransactionBalance = await query(ethQuery, 'getBalance', [\n      transactionMeta.txParams.from,\n    ]);\n    latestTransactionMeta = getTransaction(transactionId) as TransactionMeta;\n    approvalTransactionMeta = latestTransactionMeta.approvalTxId\n      ? getTransaction(latestTransactionMeta.approvalTxId)\n      : undefined;\n\n    latestTransactionMeta.postTxBalance = postTransactionBalance.toString(16);\n    const isDefaultTokenAddress = isSwapsDefaultTokenAddress(\n      transactionMeta.destinationTokenAddress as string,\n      transactionMeta.chainId,\n    );\n\n    if (\n      !isDefaultTokenAddress ||\n      transactionMeta.preTxBalance !== latestTransactionMeta.postTxBalance\n    ) {\n      break;\n    }\n\n    await sleep(UPDATE_POST_TX_BALANCE_TIMEOUT);\n  }\n\n  updateTransaction(\n    latestTransactionMeta as TransactionMeta,\n    'TransactionController#updatePostTransactionBalance - Add post transaction balance',\n  );\n  return {\n    updatedTransactionMeta: latestTransactionMeta as TransactionMeta,\n    approvalTransactionMeta,\n  };\n}\n\n/**\n * Updates the transaction meta object with the swap information\n *\n * @param transactionMeta - Transaction meta object to update\n * @param propsToUpdate - Properties to update\n * @param propsToUpdate.sourceTokenSymbol - Symbol of the token to be swapped\n * @param propsToUpdate.destinationTokenSymbol - Symbol of the token to be received\n * @param propsToUpdate.type - Type of the transaction\n * @param propsToUpdate.destinationTokenDecimals - Decimals of the token to be received\n * @param propsToUpdate.destinationTokenAddress - Address of the token to be received\n * @param propsToUpdate.swapMetaData - Metadata of the swap\n * @param propsToUpdate.swapTokenValue - Value of the token to be swapped\n * @param propsToUpdate.estimatedBaseFee - Estimated base fee of the transaction\n * @param propsToUpdate.approvalTxId - Transaction id of the approval transaction\n */\nfunction updateSwapTransaction(\n  transactionMeta: TransactionMeta,\n  {\n    sourceTokenSymbol,\n    destinationTokenSymbol,\n    type,\n    destinationTokenDecimals,\n    destinationTokenAddress,\n    swapMetaData,\n    swapTokenValue,\n    estimatedBaseFee,\n    approvalTxId,\n  }: Partial<TransactionMeta>,\n) {\n  validateIfTransactionUnapproved(transactionMeta, 'updateSwapTransaction');\n\n  let swapTransaction = {\n    sourceTokenSymbol,\n    destinationTokenSymbol,\n    type,\n    destinationTokenDecimals,\n    destinationTokenAddress,\n    swapMetaData,\n    swapTokenValue,\n    estimatedBaseFee,\n    approvalTxId,\n  };\n  swapTransaction = pickBy(swapTransaction) as any;\n  merge(transactionMeta, swapTransaction);\n}\n\n/**\n * Updates the transaction meta object with the swap approval information\n *\n * @param transactionMeta - Transaction meta object to update\n * @param propsToUpdate - Properties to update\n * @param propsToUpdate.type - Type of the transaction\n * @param propsToUpdate.sourceTokenSymbol - Symbol of the token to be swapped\n */\nfunction updateSwapApprovalTransaction(\n  transactionMeta: TransactionMeta,\n  { type, sourceTokenSymbol }: Partial<TransactionMeta>,\n) {\n  validateIfTransactionUnapproved(\n    transactionMeta,\n    'updateSwapApprovalTransaction',\n  );\n\n  let swapApprovalTransaction = { type, sourceTokenSymbol } as any;\n  swapApprovalTransaction = pickBy({\n    type,\n    sourceTokenSymbol,\n  }) as Partial<TransactionMeta>;\n  merge(transactionMeta, swapApprovalTransaction);\n}\n\n/**\n * Checks whether the provided address is strictly equal to the address for\n * the default swaps token of the provided chain.\n *\n * @param address - The string to compare to the default token address\n * @param chainId - The hex encoded chain ID of the default swaps token to check\n * @returns Whether the address is the provided chain's default token address\n */\nfunction isSwapsDefaultTokenAddress(address: string, chainId: string) {\n  if (!address || !chainId) {\n    return false;\n  }\n\n  return (\n    address ===\n    SWAPS_CHAINID_DEFAULT_TOKEN_MAP[\n      chainId as keyof typeof SWAPS_CHAINID_DEFAULT_TOKEN_MAP\n    ]?.address\n  );\n}\n\n/**\n * Sleeps for the provided number of milliseconds\n *\n * @param ms - Number of milliseconds to sleep\n * @returns Promise that resolves after the provided number of milliseconds\n */\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/transaction-type.d.ts b/dist/utils/transaction-type.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8528ffc7259c2615edff868157617a91717d778f
--- /dev/null
+++ b/dist/utils/transaction-type.d.ts
@@ -0,0 +1,14 @@
+import type EthQuery from '@metamask/eth-query';
+import type { InferTransactionTypeResult, TransactionParams } from '../types';
+export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
+/**
+ * Determines the type of the transaction by analyzing the txParams.
+ * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these
+ * represent specific events that we specify manually at transaction creation.
+ *
+ * @param txParams - Parameters for the transaction.
+ * @param ethQuery - EthQuery instance.
+ * @returns A object with the transaction type and the contract code response in Hex.
+ */
+export declare function determineTransactionType(txParams: TransactionParams, ethQuery: EthQuery): Promise<InferTransactionTypeResult>;
+//# sourceMappingURL=transaction-type.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/transaction-type.d.ts.map b/dist/utils/transaction-type.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..76cff858ef4f3ffe1896f8cf524242113dd5f771
--- /dev/null
+++ b/dist/utils/transaction-type.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"transaction-type.d.ts","sourceRoot":"","sources":["../../src/utils/transaction-type.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAGhD,OAAO,KAAK,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAG9E,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAMrE;;;;;;;;GAQG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,iBAAiB,EAC3B,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,0BAA0B,CAAC,CAiCrC"}
\ No newline at end of file
diff --git a/dist/utils/transaction-type.js b/dist/utils/transaction-type.js
new file mode 100644
index 0000000000000000000000000000000000000000..301c60b283a9d272ff73e738f5832bfc964a1882
--- /dev/null
+++ b/dist/utils/transaction-type.js
@@ -0,0 +1,114 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.determineTransactionType = exports.ESTIMATE_GAS_ERROR = void 0;
+const abi_1 = require("@ethersproject/abi");
+const controller_utils_1 = require("@metamask/controller-utils");
+const metamask_eth_abis_1 = require("@metamask/metamask-eth-abis");
+const types_1 = require("../types");
+exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
+const ERC20Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC20);
+const ERC721Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC721);
+const ERC1155Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC1155);
+/**
+ * Determines the type of the transaction by analyzing the txParams.
+ * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these
+ * represent specific events that we specify manually at transaction creation.
+ *
+ * @param txParams - Parameters for the transaction.
+ * @param ethQuery - EthQuery instance.
+ * @returns A object with the transaction type and the contract code response in Hex.
+ */
+function determineTransactionType(txParams, ethQuery) {
+    var _a;
+    return __awaiter(this, void 0, void 0, function* () {
+        const { data, to } = txParams;
+        const name = (_a = parseStandardTokenTransactionData(data)) === null || _a === void 0 ? void 0 : _a.name;
+        if (data && !to) {
+            return { type: types_1.TransactionType.deployContract, getCodeResponse: undefined };
+        }
+        const { contractCode: resultCode, isContractAddress } = yield readAddressAsContract(ethQuery, to);
+        if (!isContractAddress) {
+            return { type: types_1.TransactionType.simpleSend, getCodeResponse: resultCode };
+        }
+        const hasValue = txParams.value && Number(txParams.value) !== 0;
+        const tokenMethodName = [
+            types_1.TransactionType.tokenMethodApprove,
+            types_1.TransactionType.tokenMethodSetApprovalForAll,
+            types_1.TransactionType.tokenMethodTransfer,
+            types_1.TransactionType.tokenMethodTransferFrom,
+            types_1.TransactionType.tokenMethodSafeTransferFrom,
+        ].find((methodName) => methodName.toLowerCase() === (name === null || name === void 0 ? void 0 : name.toLowerCase()));
+        if (data && tokenMethodName && !hasValue) {
+            return { type: tokenMethodName, getCodeResponse: resultCode };
+        }
+        return {
+            type: types_1.TransactionType.contractInteraction,
+            getCodeResponse: resultCode,
+        };
+    });
+}
+exports.determineTransactionType = determineTransactionType;
+/**
+ * Attempts to decode transaction data using ABIs for three different token standards: ERC20, ERC721, ERC1155.
+ * The data will decode correctly if the transaction is an interaction with a contract that matches one of these
+ * contract standards
+ *
+ * @param data - Encoded transaction data.
+ * @returns A representation of an ethereum contract call.
+ */
+function parseStandardTokenTransactionData(data) {
+    if (!data) {
+        return undefined;
+    }
+    try {
+        return ERC20Interface.parseTransaction({ data });
+    }
+    catch (_a) {
+        // ignore and next try to parse with erc721 ABI
+    }
+    try {
+        return ERC721Interface.parseTransaction({ data });
+    }
+    catch (_b) {
+        // ignore and next try to parse with erc1155 ABI
+    }
+    try {
+        return ERC1155Interface.parseTransaction({ data });
+    }
+    catch (_c) {
+        // ignore and return undefined
+    }
+    return undefined;
+}
+/**
+ * Reads an Ethereum address and determines if it is a contract address.
+ *
+ * @param ethQuery - The Ethereum query object used to interact with the Ethereum blockchain.
+ * @param address - The Ethereum address.
+ * @returns An object containing the contract code and a boolean indicating if it is a contract address.
+ */
+function readAddressAsContract(ethQuery, address) {
+    return __awaiter(this, void 0, void 0, function* () {
+        let contractCode;
+        try {
+            contractCode = yield (0, controller_utils_1.query)(ethQuery, 'getCode', [address]);
+        }
+        catch (e) {
+            contractCode = null;
+        }
+        const isContractAddress = contractCode
+            ? contractCode !== '0x' && contractCode !== '0x0'
+            : false;
+        return { contractCode, isContractAddress };
+    });
+}
+//# sourceMappingURL=transaction-type.js.map
\ No newline at end of file
diff --git a/dist/utils/transaction-type.js.map b/dist/utils/transaction-type.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..f0bbb384a9ebe42aa49aaa28f58267771837918b
--- /dev/null
+++ b/dist/utils/transaction-type.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"transaction-type.js","sourceRoot":"","sources":["../../src/utils/transaction-type.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TransactionDescription } from '@ethersproject/abi';\nimport { Interface } from '@ethersproject/abi';\nimport { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport { abiERC721, abiERC20, abiERC1155 } from '@metamask/metamask-eth-abis';\n\nimport type { InferTransactionTypeResult, TransactionParams } from '../types';\nimport { TransactionType } from '../types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst ERC20Interface = new Interface(abiERC20);\nconst ERC721Interface = new Interface(abiERC721);\nconst ERC1155Interface = new Interface(abiERC1155);\n\n/**\n * Determines the type of the transaction by analyzing the txParams.\n * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these\n * represent specific events that we specify manually at transaction creation.\n *\n * @param txParams - Parameters for the transaction.\n * @param ethQuery - EthQuery instance.\n * @returns A object with the transaction type and the contract code response in Hex.\n */\nexport async function determineTransactionType(\n  txParams: TransactionParams,\n  ethQuery: EthQuery,\n): Promise<InferTransactionTypeResult> {\n  const { data, to } = txParams;\n  const name = parseStandardTokenTransactionData(data)?.name;\n\n  if (data && !to) {\n    return { type: TransactionType.deployContract, getCodeResponse: undefined };\n  }\n\n  const { contractCode: resultCode, isContractAddress } =\n    await readAddressAsContract(ethQuery, to);\n\n  if (!isContractAddress) {\n    return { type: TransactionType.simpleSend, getCodeResponse: resultCode };\n  }\n\n  const hasValue = txParams.value && Number(txParams.value) !== 0;\n\n  const tokenMethodName = [\n    TransactionType.tokenMethodApprove,\n    TransactionType.tokenMethodSetApprovalForAll,\n    TransactionType.tokenMethodTransfer,\n    TransactionType.tokenMethodTransferFrom,\n    TransactionType.tokenMethodSafeTransferFrom,\n  ].find((methodName) => methodName.toLowerCase() === name?.toLowerCase());\n\n  if (data && tokenMethodName && !hasValue) {\n    return { type: tokenMethodName, getCodeResponse: resultCode };\n  }\n\n  return {\n    type: TransactionType.contractInteraction,\n    getCodeResponse: resultCode,\n  };\n}\n\n/**\n * Attempts to decode transaction data using ABIs for three different token standards: ERC20, ERC721, ERC1155.\n * The data will decode correctly if the transaction is an interaction with a contract that matches one of these\n * contract standards\n *\n * @param data - Encoded transaction data.\n * @returns A representation of an ethereum contract call.\n */\nfunction parseStandardTokenTransactionData(\n  data?: string,\n): TransactionDescription | undefined {\n  if (!data) {\n    return undefined;\n  }\n\n  try {\n    return ERC20Interface.parseTransaction({ data });\n  } catch {\n    // ignore and next try to parse with erc721 ABI\n  }\n\n  try {\n    return ERC721Interface.parseTransaction({ data });\n  } catch {\n    // ignore and next try to parse with erc1155 ABI\n  }\n\n  try {\n    return ERC1155Interface.parseTransaction({ data });\n  } catch {\n    // ignore and return undefined\n  }\n\n  return undefined;\n}\n\n/**\n * Reads an Ethereum address and determines if it is a contract address.\n *\n * @param ethQuery - The Ethereum query object used to interact with the Ethereum blockchain.\n * @param address - The Ethereum address.\n * @returns An object containing the contract code and a boolean indicating if it is a contract address.\n */\nasync function readAddressAsContract(\n  ethQuery: EthQuery,\n  address?: string,\n): Promise<{\n  contractCode: string | null;\n  isContractAddress: boolean;\n}> {\n  let contractCode;\n  try {\n    contractCode = await query(ethQuery, 'getCode', [address]);\n  } catch (e) {\n    contractCode = null;\n  }\n\n  const isContractAddress = contractCode\n    ? contractCode !== '0x' && contractCode !== '0x0'\n    : false;\n  return { contractCode, isContractAddress };\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/utils.d.ts b/dist/utils/utils.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..af0b5a7a648c416a1a7db67635aa34b187705d2a
--- /dev/null
+++ b/dist/utils/utils.d.ts
@@ -0,0 +1,62 @@
+import type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';
+import type { GasPriceValue, FeeMarketEIP1559Values } from '../TransactionController';
+import { TransactionStatus } from '../types';
+import type { TransactionParams, TransactionMeta, TransactionError } from '../types';
+export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
+/**
+ * Normalizes properties on transaction params.
+ *
+ * @param txParams - The transaction params to normalize.
+ * @returns Normalized transaction params.
+ */
+export declare function normalizeTxParams(txParams: TransactionParams): TransactionParams;
+/**
+ * Checks if a transaction is EIP-1559 by checking for the existence of
+ * maxFeePerGas and maxPriorityFeePerGas within its parameters.
+ *
+ * @param txParams - Transaction params object to add.
+ * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.
+ */
+export declare function isEIP1559Transaction(txParams: TransactionParams): boolean;
+export declare const validateGasValues: (gasValues: GasPriceValue | FeeMarketEIP1559Values) => void;
+export declare const isFeeMarketEIP1559Values: (gasValues?: GasPriceValue | FeeMarketEIP1559Values) => gasValues is FeeMarketEIP1559Values;
+export declare const isGasPriceValue: (gasValues?: GasPriceValue | FeeMarketEIP1559Values) => gasValues is GasPriceValue;
+export declare const getIncreasedPriceHex: (value: number, rate: number) => string;
+export declare const getIncreasedPriceFromExisting: (value: string | undefined, rate: number) => string;
+/**
+ * Validates that the proposed value is greater than or equal to the minimum value.
+ *
+ * @param proposed - The proposed value.
+ * @param min - The minimum value.
+ * @returns The proposed value.
+ * @throws Will throw if the proposed value is too low.
+ */
+export declare function validateMinimumIncrease(proposed: string, min: string): string;
+/**
+ * Helper function to filter and format transactions for the nonce tracker.
+ *
+ * @param fromAddress - Address of the account from which the transactions to filter from are sent.
+ * @param transactionStatus - Status of the transactions for which to filter.
+ * @param transactions - Array of transactionMeta objects that have been prefiltered.
+ * @returns Array of transactions formatted for the nonce tracker.
+ */
+export declare function getAndFormatTransactionsForNonceTracker(fromAddress: string, transactionStatus: TransactionStatus, transactions: TransactionMeta[]): NonceTrackerTransaction[];
+/**
+ * Validates that a transaction is unapproved.
+ * Throws if the transaction is not unapproved.
+ *
+ * @param transactionMeta - The transaction metadata to check.
+ * @param fnName - The name of the function calling this helper.
+ */
+export declare function validateIfTransactionUnapproved(transactionMeta: TransactionMeta | undefined, fnName: string): void;
+/**
+ * Normalizes properties on transaction params.
+ *
+ * @param error - The error to be normalize.
+ * @returns Normalized transaction error.
+ */
+export declare function normalizeTxError(error: Error & {
+    code?: string;
+    value?: unknown;
+}): TransactionError;
+//# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/utils.d.ts.map b/dist/utils/utils.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..864a8cc381e50119c10eff84282dc64349319351
--- /dev/null
+++ b/dist/utils/utils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,WAAW,IAAI,uBAAuB,EAAE,MAAM,iCAAiC,CAAC;AAE9F,OAAO,KAAK,EACV,aAAa,EACb,sBAAsB,EACvB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAC7C,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EACjB,MAAM,UAAU,CAAC;AAElB,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAmBrE;;;;;GAKG;AACH,wBAAgB,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,qBAQ5D;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAUlD,CAAC;AAEF,eAAO,MAAM,wBAAwB,eACvB,aAAa,GAAG,sBAAsB,wCAGuB,CAAC;AAE5E,eAAO,MAAM,eAAe,eACd,aAAa,GAAG,sBAAsB,+BAEE,CAAC;AAEvD,eAAO,MAAM,oBAAoB,UAAW,MAAM,QAAQ,MAAM,KAAG,MACF,CAAC;AAElE,eAAO,MAAM,6BAA6B,UACjC,MAAM,GAAG,SAAS,QACnB,MAAM,KACX,MAEF,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,UAQpE;AAED;;;;;;;GAOG;AACH,wBAAgB,uCAAuC,CACrD,WAAW,EAAE,MAAM,EACnB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,EAAE,eAAe,EAAE,GAC9B,uBAAuB,EAAE,CAsB3B;AAED;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAQf;AAED;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,KAAK,EAAE,KAAK,GAAG;IAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAAC,KAAK,CAAC,EAAE,OAAO,CAAA;CAAE,GAChD,gBAAgB,CAQlB"}
\ No newline at end of file
diff --git a/dist/utils/utils.js b/dist/utils/utils.js
new file mode 100644
index 0000000000000000000000000000000000000000..1d44e53909a113fe0f715d6f3738597f50a653d6
--- /dev/null
+++ b/dist/utils/utils.js
@@ -0,0 +1,149 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.normalizeTxError = exports.validateIfTransactionUnapproved = exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const utils_1 = require("@metamask/utils");
+const ethereumjs_util_1 = require("ethereumjs-util");
+const types_1 = require("../types");
+exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
+const NORMALIZERS = {
+    data: (data) => (0, ethereumjs_util_1.addHexPrefix)(data),
+    from: (from) => (0, ethereumjs_util_1.addHexPrefix)(from).toLowerCase(),
+    gas: (gas) => (0, ethereumjs_util_1.addHexPrefix)(gas),
+    gasLimit: (gas) => (0, ethereumjs_util_1.addHexPrefix)(gas),
+    gasPrice: (gasPrice) => (0, ethereumjs_util_1.addHexPrefix)(gasPrice),
+    nonce: (nonce) => (0, ethereumjs_util_1.addHexPrefix)(nonce),
+    to: (to) => (0, ethereumjs_util_1.addHexPrefix)(to).toLowerCase(),
+    value: (value) => (0, ethereumjs_util_1.addHexPrefix)(value),
+    maxFeePerGas: (maxFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxFeePerGas),
+    maxPriorityFeePerGas: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
+    estimatedBaseFee: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
+    type: (type) => (type === '0x0' ? '0x0' : undefined),
+};
+/**
+ * Normalizes properties on transaction params.
+ *
+ * @param txParams - The transaction params to normalize.
+ * @returns Normalized transaction params.
+ */
+function normalizeTxParams(txParams) {
+    const normalizedTxParams = { from: '' };
+    for (const key of (0, utils_1.getKnownPropertyNames)(NORMALIZERS)) {
+        if (txParams[key]) {
+            normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);
+        }
+    }
+    return normalizedTxParams;
+}
+exports.normalizeTxParams = normalizeTxParams;
+/**
+ * Checks if a transaction is EIP-1559 by checking for the existence of
+ * maxFeePerGas and maxPriorityFeePerGas within its parameters.
+ *
+ * @param txParams - Transaction params object to add.
+ * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.
+ */
+function isEIP1559Transaction(txParams) {
+    const hasOwnProp = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);
+    return (hasOwnProp(txParams, 'maxFeePerGas') &&
+        hasOwnProp(txParams, 'maxPriorityFeePerGas'));
+}
+exports.isEIP1559Transaction = isEIP1559Transaction;
+const validateGasValues = (gasValues) => {
+    Object.keys(gasValues).forEach((key) => {
+        const value = gasValues[key];
+        if (typeof value !== 'string' || !(0, ethereumjs_util_1.isHexString)(value)) {
+            throw new TypeError(`expected hex string for ${key} but received: ${value}`);
+        }
+    });
+};
+exports.validateGasValues = validateGasValues;
+const isFeeMarketEIP1559Values = (gasValues) => (gasValues === null || gasValues === void 0 ? void 0 : gasValues.maxFeePerGas) !== undefined ||
+    (gasValues === null || gasValues === void 0 ? void 0 : gasValues.maxPriorityFeePerGas) !== undefined;
+exports.isFeeMarketEIP1559Values = isFeeMarketEIP1559Values;
+const isGasPriceValue = (gasValues) => (gasValues === null || gasValues === void 0 ? void 0 : gasValues.gasPrice) !== undefined;
+exports.isGasPriceValue = isGasPriceValue;
+const getIncreasedPriceHex = (value, rate) => (0, ethereumjs_util_1.addHexPrefix)(`${parseInt(`${value * rate}`, 10).toString(16)}`);
+exports.getIncreasedPriceHex = getIncreasedPriceHex;
+const getIncreasedPriceFromExisting = (value, rate) => {
+    return (0, exports.getIncreasedPriceHex)((0, controller_utils_1.convertHexToDecimal)(value), rate);
+};
+exports.getIncreasedPriceFromExisting = getIncreasedPriceFromExisting;
+/**
+ * Validates that the proposed value is greater than or equal to the minimum value.
+ *
+ * @param proposed - The proposed value.
+ * @param min - The minimum value.
+ * @returns The proposed value.
+ * @throws Will throw if the proposed value is too low.
+ */
+function validateMinimumIncrease(proposed, min) {
+    const proposedDecimal = (0, controller_utils_1.convertHexToDecimal)(proposed);
+    const minDecimal = (0, controller_utils_1.convertHexToDecimal)(min);
+    if (proposedDecimal >= minDecimal) {
+        return proposed;
+    }
+    const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;
+    throw new Error(errorMsg);
+}
+exports.validateMinimumIncrease = validateMinimumIncrease;
+/**
+ * Helper function to filter and format transactions for the nonce tracker.
+ *
+ * @param fromAddress - Address of the account from which the transactions to filter from are sent.
+ * @param transactionStatus - Status of the transactions for which to filter.
+ * @param transactions - Array of transactionMeta objects that have been prefiltered.
+ * @returns Array of transactions formatted for the nonce tracker.
+ */
+function getAndFormatTransactionsForNonceTracker(fromAddress, transactionStatus, transactions) {
+    return transactions
+        .filter(({ status, txParams: { from } }) => status === transactionStatus &&
+        from.toLowerCase() === fromAddress.toLowerCase())
+        .map(({ status, txParams: { from, gas, value, nonce } }) => {
+        // the only value we care about is the nonce
+        // but we need to return the other values to satisfy the type
+        // TODO: refactor nonceTracker to not require this
+        return {
+            status,
+            history: [{}],
+            txParams: {
+                from: from !== null && from !== void 0 ? from : '',
+                gas: gas !== null && gas !== void 0 ? gas : '',
+                value: value !== null && value !== void 0 ? value : '',
+                nonce: nonce !== null && nonce !== void 0 ? nonce : '',
+            },
+        };
+    });
+}
+exports.getAndFormatTransactionsForNonceTracker = getAndFormatTransactionsForNonceTracker;
+/**
+ * Validates that a transaction is unapproved.
+ * Throws if the transaction is not unapproved.
+ *
+ * @param transactionMeta - The transaction metadata to check.
+ * @param fnName - The name of the function calling this helper.
+ */
+function validateIfTransactionUnapproved(transactionMeta, fnName) {
+    if ((transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.status) !== types_1.TransactionStatus.unapproved) {
+        throw new Error(`TransactionsController: Can only call ${fnName} on an unapproved transaction.
+      Current tx status: ${transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.status}`);
+    }
+}
+exports.validateIfTransactionUnapproved = validateIfTransactionUnapproved;
+/**
+ * Normalizes properties on transaction params.
+ *
+ * @param error - The error to be normalize.
+ * @returns Normalized transaction error.
+ */
+function normalizeTxError(error) {
+    return {
+        name: error.name,
+        message: error.message,
+        stack: error.stack,
+        code: error === null || error === void 0 ? void 0 : error.code,
+        rpc: error === null || error === void 0 ? void 0 : error.value,
+    };
+}
+exports.normalizeTxError = normalizeTxError;
+//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/dist/utils/utils.js.map b/dist/utils/utils.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..8d440818dd0b5b37a031229620424797deddf101
--- /dev/null
+++ b/dist/utils/utils.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":";;;AAAA,iEAAiE;AACjE,2CAAwD;AACxD,qDAA4D;AAO5D,oCAA6C;AAOhC,QAAA,kBAAkB,GAAG,kCAAkC,CAAC;AAErE,MAAM,WAAW,GAAgD;IAC/D,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,IAAI,CAAC;IAC1C,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,IAAI,CAAC,CAAC,WAAW,EAAE;IACxD,GAAG,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,GAAG,CAAC;IACvC,QAAQ,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,GAAG,CAAC;IAC5C,QAAQ,EAAE,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,QAAQ,CAAC;IACtD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,KAAK,CAAC;IAC7C,EAAE,EAAE,CAAC,EAAU,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,EAAE,CAAC,CAAC,WAAW,EAAE;IAClD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,KAAK,CAAC;IAC7C,YAAY,EAAE,CAAC,YAAoB,EAAE,EAAE,CAAC,IAAA,8BAAY,EAAC,YAAY,CAAC;IAClE,oBAAoB,EAAE,CAAC,oBAA4B,EAAE,EAAE,CACrD,IAAA,8BAAY,EAAC,oBAAoB,CAAC;IACpC,gBAAgB,EAAE,CAAC,oBAA4B,EAAE,EAAE,CACjD,IAAA,8BAAY,EAAC,oBAAoB,CAAC;IACpC,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;CAC7D,CAAC;AAEF;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,QAA2B;IAC3D,MAAM,kBAAkB,GAAsB,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;IAC3D,KAAK,MAAM,GAAG,IAAI,IAAA,6BAAqB,EAAC,WAAW,CAAC,EAAE;QACpD,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;YACjB,kBAAkB,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;SAC3D;KACF;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AARD,8CAQC;AAED;;;;;;GAMG;AACH,SAAgB,oBAAoB,CAAC,QAA2B;IAC9D,MAAM,UAAU,GAAG,CAAC,GAAsB,EAAE,GAAW,EAAE,EAAE,CACzD,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACjD,OAAO,CACL,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC;QACpC,UAAU,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAC7C,CAAC;AACJ,CAAC;AAPD,oDAOC;AAEM,MAAM,iBAAiB,GAAG,CAC/B,SAAiD,EACjD,EAAE;IACF,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACrC,MAAM,KAAK,GAAI,SAAiB,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,IAAA,6BAAW,EAAC,KAAK,CAAC,EAAE;YACpD,MAAM,IAAI,SAAS,CACjB,2BAA2B,GAAG,kBAAkB,KAAK,EAAE,CACxD,CAAC;SACH;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAXW,QAAA,iBAAiB,qBAW5B;AAEK,MAAM,wBAAwB,GAAG,CACtC,SAAkD,EACb,EAAE,CACvC,CAAC,SAAoC,aAApC,SAAS,uBAAT,SAAS,CAA6B,YAAY,MAAK,SAAS;IACjE,CAAC,SAAoC,aAApC,SAAS,uBAAT,SAAS,CAA6B,oBAAoB,MAAK,SAAS,CAAC;AAJ/D,QAAA,wBAAwB,4BAIuC;AAErE,MAAM,eAAe,GAAG,CAC7B,SAAkD,EACtB,EAAE,CAC9B,CAAC,SAA2B,aAA3B,SAAS,uBAAT,SAAS,CAAoB,QAAQ,MAAK,SAAS,CAAC;AAH1C,QAAA,eAAe,mBAG2B;AAEhD,MAAM,oBAAoB,GAAG,CAAC,KAAa,EAAE,IAAY,EAAU,EAAE,CAC1E,IAAA,8BAAY,EAAC,GAAG,QAAQ,CAAC,GAAG,KAAK,GAAG,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AADrD,QAAA,oBAAoB,wBACiC;AAE3D,MAAM,6BAA6B,GAAG,CAC3C,KAAyB,EACzB,IAAY,EACJ,EAAE;IACV,OAAO,IAAA,4BAAoB,EAAC,IAAA,sCAAmB,EAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;AAChE,CAAC,CAAC;AALW,QAAA,6BAA6B,iCAKxC;AAEF;;;;;;;GAOG;AACH,SAAgB,uBAAuB,CAAC,QAAgB,EAAE,GAAW;IACnE,MAAM,eAAe,GAAG,IAAA,sCAAmB,EAAC,QAAQ,CAAC,CAAC;IACtD,MAAM,UAAU,GAAG,IAAA,sCAAmB,EAAC,GAAG,CAAC,CAAC;IAC5C,IAAI,eAAe,IAAI,UAAU,EAAE;QACjC,OAAO,QAAQ,CAAC;KACjB;IACD,MAAM,QAAQ,GAAG,uBAAuB,eAAe,6CAA6C,UAAU,EAAE,CAAC;IACjH,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC5B,CAAC;AARD,0DAQC;AAED;;;;;;;GAOG;AACH,SAAgB,uCAAuC,CACrD,WAAmB,EACnB,iBAAoC,EACpC,YAA+B;IAE/B,OAAO,YAAY;SAChB,MAAM,CACL,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CACjC,MAAM,KAAK,iBAAiB;QAC5B,IAAI,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE,CACnD;SACA,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;QACzD,4CAA4C;QAC5C,6DAA6D;QAC7D,kDAAkD;QAClD,OAAO;YACL,MAAM;YACN,OAAO,EAAE,CAAC,EAAE,CAAC;YACb,QAAQ,EAAE;gBACR,IAAI,EAAE,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,EAAE;gBAChB,GAAG,EAAE,GAAG,aAAH,GAAG,cAAH,GAAG,GAAI,EAAE;gBACd,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE;gBAClB,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE;aACnB;SACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACP,CAAC;AA1BD,0FA0BC;AAED;;;;;;GAMG;AACH,SAAgB,+BAA+B,CAC7C,eAA4C,EAC5C,MAAc;IAEd,IAAI,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,MAAM,MAAK,yBAAiB,CAAC,UAAU,EAAE;QAC5D,MAAM,IAAI,KAAK,CACb,yCAAyC,MAAM;2BAC1B,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,MAAM,EAAE,CAC/C,CAAC;KACH;AACH,CAAC;AAVD,0EAUC;AAED;;;;;GAKG;AACH,SAAgB,gBAAgB,CAC9B,KAAiD;IAEjD,OAAO;QACL,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,IAAI,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI;QACjB,GAAG,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK;KAClB,CAAC;AACJ,CAAC;AAVD,4CAUC","sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { getKnownPropertyNames } from '@metamask/utils';\nimport { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';\n\nimport type {\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from '../TransactionController';\nimport { TransactionStatus } from '../types';\nimport type {\n  TransactionParams,\n  TransactionMeta,\n  TransactionError,\n} from '../types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasLimit: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  type: (type: string) => (type === '0x0' ? '0x0' : undefined),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTxParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n  for (const key of getKnownPropertyNames(NORMALIZERS)) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);\n    }\n  }\n  return normalizedTxParams;\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n\n/**\n * Helper function to filter and format transactions for the nonce tracker.\n *\n * @param fromAddress - Address of the account from which the transactions to filter from are sent.\n * @param transactionStatus - Status of the transactions for which to filter.\n * @param transactions - Array of transactionMeta objects that have been prefiltered.\n * @returns Array of transactions formatted for the nonce tracker.\n */\nexport function getAndFormatTransactionsForNonceTracker(\n  fromAddress: string,\n  transactionStatus: TransactionStatus,\n  transactions: TransactionMeta[],\n): NonceTrackerTransaction[] {\n  return transactions\n    .filter(\n      ({ status, txParams: { from } }) =>\n        status === transactionStatus &&\n        from.toLowerCase() === fromAddress.toLowerCase(),\n    )\n    .map(({ status, txParams: { from, gas, value, nonce } }) => {\n      // the only value we care about is the nonce\n      // but we need to return the other values to satisfy the type\n      // TODO: refactor nonceTracker to not require this\n      return {\n        status,\n        history: [{}],\n        txParams: {\n          from: from ?? '',\n          gas: gas ?? '',\n          value: value ?? '',\n          nonce: nonce ?? '',\n        },\n      };\n    });\n}\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `TransactionsController: Can only call ${fnName} on an unapproved transaction.\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param error - The error to be normalize.\n * @returns Normalized transaction error.\n */\nexport function normalizeTxError(\n  error: Error & { code?: string; value?: unknown },\n): TransactionError {\n  return {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    code: error?.code,\n    rpc: error?.value,\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/validation.d.ts b/dist/utils/validation.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6c1d8bc9dbe92ce8d80b4feb6a001ff4a3850b12
--- /dev/null
+++ b/dist/utils/validation.d.ts
@@ -0,0 +1,20 @@
+import { type TransactionParams } from '../types';
+/**
+ * Validates whether a transaction initiated by a specific 'from' address is permitted by the origin.
+ *
+ * @param permittedAddresses - The permitted accounts for the given origin.
+ * @param selectedAddress - The currently selected Ethereum address in the wallet.
+ * @param from - The address from which the transaction is initiated.
+ * @param origin - The origin or source of the transaction.
+ * @throws Throws an error if the transaction is not permitted.
+ */
+export declare function validateTransactionOrigin(permittedAddresses: string[], selectedAddress: string, from: string, origin: string): Promise<void>;
+/**
+ * Validates the transaction params for required properties and throws in
+ * the event of any validation error.
+ *
+ * @param txParams - Transaction params object to validate.
+ * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
+ */
+export declare function validateTxParams(txParams: TransactionParams, isEIP1559Compatible?: boolean): void;
+//# sourceMappingURL=validation.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/validation.d.ts.map b/dist/utils/validation.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..ca496836ee43b31a16afdb2894d15ce6af513fb8
--- /dev/null
+++ b/dist/utils/validation.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"validation.d.ts","sourceRoot":"","sources":["../../src/utils/validation.ts"],"names":[],"mappings":"AAKA,OAAO,EAA2B,KAAK,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAK3E;;;;;;;;GAQG;AACH,wBAAsB,yBAAyB,CAC7C,kBAAkB,EAAE,MAAM,EAAE,EAC5B,eAAe,EAAE,MAAM,EACvB,IAAI,EAAE,MAAM,EACZ,MAAM,EAAE,MAAM,iBAqBf;AAED;;;;;;GAMG;AACH,wBAAgB,gBAAgB,CAC9B,QAAQ,EAAE,iBAAiB,EAC3B,mBAAmB,UAAO,QAS3B"}
\ No newline at end of file
diff --git a/dist/utils/validation.js b/dist/utils/validation.js
new file mode 100644
index 0000000000000000000000000000000000000000..d53ee25c3b5ebebd303719e31da1c7d7c2b1d0db
--- /dev/null
+++ b/dist/utils/validation.js
@@ -0,0 +1,257 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.validateTxParams = exports.validateTransactionOrigin = void 0;
+const abi_1 = require("@ethersproject/abi");
+const controller_utils_1 = require("@metamask/controller-utils");
+const metamask_eth_abis_1 = require("@metamask/metamask-eth-abis");
+const rpc_errors_1 = require("@metamask/rpc-errors");
+const types_1 = require("../types");
+const utils_1 = require("./utils");
+/**
+ * Validates whether a transaction initiated by a specific 'from' address is permitted by the origin.
+ *
+ * @param permittedAddresses - The permitted accounts for the given origin.
+ * @param selectedAddress - The currently selected Ethereum address in the wallet.
+ * @param from - The address from which the transaction is initiated.
+ * @param origin - The origin or source of the transaction.
+ * @throws Throws an error if the transaction is not permitted.
+ */
+function validateTransactionOrigin(permittedAddresses, selectedAddress, from, origin) {
+    return __awaiter(this, void 0, void 0, function* () {
+        if (origin === controller_utils_1.ORIGIN_METAMASK) {
+            // Ensure the 'from' address matches the currently selected address
+            if (from !== selectedAddress) {
+                throw rpc_errors_1.rpcErrors.internal({
+                    message: `Internally initiated transaction is using invalid account.`,
+                    data: {
+                        origin,
+                        fromAddress: from,
+                        selectedAddress,
+                    },
+                });
+            }
+            return;
+        }
+        // Check if the origin has permissions to initiate transactions from the specified address
+        if (!permittedAddresses.includes(from)) {
+            throw rpc_errors_1.providerErrors.unauthorized({ data: { origin } });
+        }
+    });
+}
+exports.validateTransactionOrigin = validateTransactionOrigin;
+/**
+ * Validates the transaction params for required properties and throws in
+ * the event of any validation error.
+ *
+ * @param txParams - Transaction params object to validate.
+ * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
+ */
+function validateTxParams(txParams, isEIP1559Compatible = true) {
+    validateEIP1559Compatibility(txParams, isEIP1559Compatible);
+    validateParamFrom(txParams.from);
+    validateParamRecipient(txParams);
+    validateParamValue(txParams.value);
+    validateParamData(txParams.data);
+    validateParamChainId(txParams.chainId);
+    validateGasFeeParams(txParams);
+}
+exports.validateTxParams = validateTxParams;
+/**
+ * Validates EIP-1559 compatibility for transaction creation.
+ *
+ * @param txParams - The transaction parameters to validate.
+ * @param isEIP1559Compatible - Indicates if the current network supports EIP-1559.
+ * @throws Throws invalid params if the transaction specifies EIP-1559 but the network does not support it.
+ */
+function validateEIP1559Compatibility(txParams, isEIP1559Compatible) {
+    if ((0, utils_1.isEIP1559Transaction)(txParams) && !isEIP1559Compatible) {
+        throw rpc_errors_1.rpcErrors.invalidParams('Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559');
+    }
+}
+/**
+ * Validates value property, ensuring it is a valid positive integer number
+ * denominated in wei.
+ *
+ * @param value - The value to validate, expressed as a string.
+ * @throws Throws an error if the value is not a valid positive integer
+ * number denominated in wei.
+ * - If the value contains a hyphen (-), it is considered invalid.
+ * - If the value contains a decimal point (.), it is considered invalid.
+ * - If the value is not a finite number, is NaN, or is not a safe integer, it is considered invalid.
+ */
+function validateParamValue(value) {
+    if (value !== undefined) {
+        if (value.includes('-')) {
+            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction value "${value}": not a positive number.`);
+        }
+        if (value.includes('.')) {
+            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction value "${value}": number must be in wei.`);
+        }
+        const intValue = parseInt(value, 10);
+        const isValid = Number.isFinite(intValue) &&
+            !Number.isNaN(intValue) &&
+            !isNaN(Number(value)) &&
+            Number.isSafeInteger(intValue);
+        if (!isValid) {
+            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction value ${value}: number must be a valid number.`);
+        }
+    }
+}
+/**
+ * Validates the recipient address in a transaction's parameters.
+ *
+ * @param txParams - The transaction parameters object to validate.
+ * @throws Throws an error if the recipient address is invalid:
+ * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,
+ * the "to" field is removed from the transaction parameters.
+ * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.
+ */
+function validateParamRecipient(txParams) {
+    if (txParams.to === '0x' || txParams.to === undefined) {
+        if (txParams.data) {
+            delete txParams.to;
+        }
+        else {
+            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "to" address.`);
+        }
+    }
+    else if (txParams.to !== undefined && !(0, controller_utils_1.isValidHexAddress)(txParams.to)) {
+        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "to" address.`);
+    }
+}
+/**
+ * Validates the recipient address in a transaction's parameters.
+ *
+ * @param from - The from property to validate.
+ * @throws Throws an error if the recipient address is invalid:
+ * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,
+ * the "to" field is removed from the transaction parameters.
+ * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.
+ */
+function validateParamFrom(from) {
+    if (!from || typeof from !== 'string') {
+        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "from" address ${from}: not a string.`);
+    }
+    if (!(0, controller_utils_1.isValidHexAddress)(from)) {
+        throw rpc_errors_1.rpcErrors.invalidParams('Invalid "from" address.');
+    }
+}
+/**
+ * Validates input data for transactions.
+ *
+ * @param value - The input data to validate.
+ * @throws Throws invalid params if the input data is invalid.
+ */
+function validateParamData(value) {
+    if (value) {
+        const ERC20Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC20);
+        try {
+            ERC20Interface.parseTransaction({ data: value });
+        }
+        catch (error) {
+            if (error.message.match(/BUFFER_OVERRUN/u)) {
+                throw rpc_errors_1.rpcErrors.invalidParams('Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN.');
+            }
+        }
+    }
+}
+/**
+ * Validates chainId type.
+ *
+ * @param chainId - The chainId to validate.
+ */
+function validateParamChainId(chainId) {
+    if (chainId !== undefined &&
+        typeof chainId !== 'number' &&
+        typeof chainId !== 'string') {
+        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction params: chainId is not a Number or hex string. got: (${chainId})`);
+    }
+}
+/**
+ * Validates gas values.
+ *
+ * @param txParams - The transaction parameters to validate.
+ */
+function validateGasFeeParams(txParams) {
+    if (txParams.gasPrice) {
+        ensureProperTransactionEnvelopeTypeProvided(txParams, 'gasPrice');
+        ensureMutuallyExclusiveFieldsNotProvided(txParams, 'gasPrice', 'maxFeePerGas');
+        ensureMutuallyExclusiveFieldsNotProvided(txParams, 'gasPrice', 'maxPriorityFeePerGas');
+        ensureFieldIsString(txParams, 'gasPrice');
+    }
+    if (txParams.maxFeePerGas) {
+        ensureProperTransactionEnvelopeTypeProvided(txParams, 'maxFeePerGas');
+        ensureMutuallyExclusiveFieldsNotProvided(txParams, 'maxFeePerGas', 'gasPrice');
+        ensureFieldIsString(txParams, 'maxFeePerGas');
+    }
+    if (txParams.maxPriorityFeePerGas) {
+        ensureProperTransactionEnvelopeTypeProvided(txParams, 'maxPriorityFeePerGas');
+        ensureMutuallyExclusiveFieldsNotProvided(txParams, 'maxPriorityFeePerGas', 'gasPrice');
+        ensureFieldIsString(txParams, 'maxPriorityFeePerGas');
+    }
+}
+/**
+ * Ensures that the provided txParams has the proper 'type' specified for the
+ * given field, if it is provided. If types do not match throws an
+ * invalidParams error.
+ *
+ * @param txParams - The transaction parameters object
+ * @param field - The current field being validated
+ * @throws {ethErrors.rpc.invalidParams} Throws if type does not match the
+ * expectations for provided field.
+ */
+function ensureProperTransactionEnvelopeTypeProvided(txParams, field) {
+    switch (field) {
+        case 'maxFeePerGas':
+        case 'maxPriorityFeePerGas':
+            if (txParams.type &&
+                txParams.type !== types_1.TransactionEnvelopeType.feeMarket) {
+                throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction envelope type: specified type "${txParams.type}" but including maxFeePerGas and maxPriorityFeePerGas requires type: "${types_1.TransactionEnvelopeType.feeMarket}"`);
+            }
+            break;
+        case 'gasPrice':
+        default:
+            if (txParams.type &&
+                txParams.type === types_1.TransactionEnvelopeType.feeMarket) {
+                throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction envelope type: specified type "${txParams.type}" but included a gasPrice instead of maxFeePerGas and maxPriorityFeePerGas`);
+            }
+    }
+}
+/**
+ * Given two fields, ensure that the second field is not included in txParams,
+ * and if it is throw an invalidParams error.
+ *
+ * @param txParams - The transaction parameters object
+ * @param fieldBeingValidated - The current field being validated
+ * @param mutuallyExclusiveField - The field to ensure is not provided
+ * @throws {ethErrors.rpc.invalidParams} Throws if mutuallyExclusiveField is
+ * present in txParams.
+ */
+function ensureMutuallyExclusiveFieldsNotProvided(txParams, fieldBeingValidated, mutuallyExclusiveField) {
+    if (typeof txParams[mutuallyExclusiveField] !== 'undefined') {
+        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction params: specified ${fieldBeingValidated} but also included ${mutuallyExclusiveField}, these cannot be mixed`);
+    }
+}
+/**
+ * Ensures that the provided value for field is a string, throws an
+ * invalidParams error if field is not a string.
+ *
+ * @param txParams - The transaction parameters object
+ * @param field - The current field being validated
+ * @throws {rpcErrors.invalidParams} Throws if field is not a string
+ */
+function ensureFieldIsString(txParams, field) {
+    if (typeof txParams[field] !== 'string') {
+        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction params: ${field} is not a string. got: (${txParams[field]})`);
+    }
+}
+//# sourceMappingURL=validation.js.map
\ No newline at end of file
diff --git a/dist/utils/validation.js.map b/dist/utils/validation.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..d755681cf7b2bc8191e6d24e85c0ee542e9024c1
--- /dev/null
+++ b/dist/utils/validation.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/utils/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Interface } from '@ethersproject/abi';\nimport { ORIGIN_METAMASK, isValidHexAddress } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport { providerErrors, rpcErrors } from '@metamask/rpc-errors';\n\nimport { TransactionEnvelopeType, type TransactionParams } from '../types';\nimport { isEIP1559Transaction } from './utils';\n\ntype GasFieldsToValidate = 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas';\n\n/**\n * Validates whether a transaction initiated by a specific 'from' address is permitted by the origin.\n *\n * @param permittedAddresses - The permitted accounts for the given origin.\n * @param selectedAddress - The currently selected Ethereum address in the wallet.\n * @param from - The address from which the transaction is initiated.\n * @param origin - The origin or source of the transaction.\n * @throws Throws an error if the transaction is not permitted.\n */\nexport async function validateTransactionOrigin(\n  permittedAddresses: string[],\n  selectedAddress: string,\n  from: string,\n  origin: string,\n) {\n  if (origin === ORIGIN_METAMASK) {\n    // Ensure the 'from' address matches the currently selected address\n    if (from !== selectedAddress) {\n      throw rpcErrors.internal({\n        message: `Internally initiated transaction is using invalid account.`,\n        data: {\n          origin,\n          fromAddress: from,\n          selectedAddress,\n        },\n      });\n    }\n    return;\n  }\n\n  // Check if the origin has permissions to initiate transactions from the specified address\n  if (!permittedAddresses.includes(from)) {\n    throw providerErrors.unauthorized({ data: { origin } });\n  }\n}\n\n/**\n * Validates the transaction params for required properties and throws in\n * the event of any validation error.\n *\n * @param txParams - Transaction params object to validate.\n * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.\n */\nexport function validateTxParams(\n  txParams: TransactionParams,\n  isEIP1559Compatible = true,\n) {\n  validateEIP1559Compatibility(txParams, isEIP1559Compatible);\n  validateParamFrom(txParams.from);\n  validateParamRecipient(txParams);\n  validateParamValue(txParams.value);\n  validateParamData(txParams.data);\n  validateParamChainId(txParams.chainId);\n  validateGasFeeParams(txParams);\n}\n\n/**\n * Validates EIP-1559 compatibility for transaction creation.\n *\n * @param txParams - The transaction parameters to validate.\n * @param isEIP1559Compatible - Indicates if the current network supports EIP-1559.\n * @throws Throws invalid params if the transaction specifies EIP-1559 but the network does not support it.\n */\nfunction validateEIP1559Compatibility(\n  txParams: TransactionParams,\n  isEIP1559Compatible: boolean,\n) {\n  if (isEIP1559Transaction(txParams) && !isEIP1559Compatible) {\n    throw rpcErrors.invalidParams(\n      'Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559',\n    );\n  }\n}\n\n/**\n * Validates value property, ensuring it is a valid positive integer number\n * denominated in wei.\n *\n * @param value - The value to validate, expressed as a string.\n * @throws Throws an error if the value is not a valid positive integer\n * number denominated in wei.\n * - If the value contains a hyphen (-), it is considered invalid.\n * - If the value contains a decimal point (.), it is considered invalid.\n * - If the value is not a finite number, is NaN, or is not a safe integer, it is considered invalid.\n */\nfunction validateParamValue(value?: string) {\n  if (value !== undefined) {\n    if (value.includes('-')) {\n      throw rpcErrors.invalidParams(\n        `Invalid transaction value \"${value}\": not a positive number.`,\n      );\n    }\n\n    if (value.includes('.')) {\n      throw rpcErrors.invalidParams(\n        `Invalid transaction value \"${value}\": number must be in wei.`,\n      );\n    }\n    const intValue = parseInt(value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw rpcErrors.invalidParams(\n        `Invalid transaction value ${value}: number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * Validates the recipient address in a transaction's parameters.\n *\n * @param txParams - The transaction parameters object to validate.\n * @throws Throws an error if the recipient address is invalid:\n * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,\n * the \"to\" field is removed from the transaction parameters.\n * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.\n */\nfunction validateParamRecipient(txParams: TransactionParams) {\n  if (txParams.to === '0x' || txParams.to === undefined) {\n    if (txParams.data) {\n      delete txParams.to;\n    } else {\n      throw rpcErrors.invalidParams(`Invalid \"to\" address.`);\n    }\n  } else if (txParams.to !== undefined && !isValidHexAddress(txParams.to)) {\n    throw rpcErrors.invalidParams(`Invalid \"to\" address.`);\n  }\n}\n\n/**\n * Validates the recipient address in a transaction's parameters.\n *\n * @param from - The from property to validate.\n * @throws Throws an error if the recipient address is invalid:\n * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,\n * the \"to\" field is removed from the transaction parameters.\n * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.\n */\nfunction validateParamFrom(from: string) {\n  if (!from || typeof from !== 'string') {\n    throw rpcErrors.invalidParams(\n      `Invalid \"from\" address ${from}: not a string.`,\n    );\n  }\n  if (!isValidHexAddress(from)) {\n    throw rpcErrors.invalidParams('Invalid \"from\" address.');\n  }\n}\n\n/**\n * Validates input data for transactions.\n *\n * @param value - The input data to validate.\n * @throws Throws invalid params if the input data is invalid.\n */\nfunction validateParamData(value?: string) {\n  if (value) {\n    const ERC20Interface = new Interface(abiERC20);\n    try {\n      ERC20Interface.parseTransaction({ data: value });\n    } catch (error: any) {\n      if (error.message.match(/BUFFER_OVERRUN/u)) {\n        throw rpcErrors.invalidParams(\n          'Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN.',\n        );\n      }\n    }\n  }\n}\n\n/**\n * Validates chainId type.\n *\n * @param chainId - The chainId to validate.\n */\nfunction validateParamChainId(chainId: number | string | undefined) {\n  if (\n    chainId !== undefined &&\n    typeof chainId !== 'number' &&\n    typeof chainId !== 'string'\n  ) {\n    throw rpcErrors.invalidParams(\n      `Invalid transaction params: chainId is not a Number or hex string. got: (${chainId})`,\n    );\n  }\n}\n\n/**\n * Validates gas values.\n *\n * @param txParams - The transaction parameters to validate.\n */\nfunction validateGasFeeParams(txParams: TransactionParams) {\n  if (txParams.gasPrice) {\n    ensureProperTransactionEnvelopeTypeProvided(txParams, 'gasPrice');\n    ensureMutuallyExclusiveFieldsNotProvided(\n      txParams,\n      'gasPrice',\n      'maxFeePerGas',\n    );\n    ensureMutuallyExclusiveFieldsNotProvided(\n      txParams,\n      'gasPrice',\n      'maxPriorityFeePerGas',\n    );\n    ensureFieldIsString(txParams, 'gasPrice');\n  }\n\n  if (txParams.maxFeePerGas) {\n    ensureProperTransactionEnvelopeTypeProvided(txParams, 'maxFeePerGas');\n    ensureMutuallyExclusiveFieldsNotProvided(\n      txParams,\n      'maxFeePerGas',\n      'gasPrice',\n    );\n    ensureFieldIsString(txParams, 'maxFeePerGas');\n  }\n\n  if (txParams.maxPriorityFeePerGas) {\n    ensureProperTransactionEnvelopeTypeProvided(\n      txParams,\n      'maxPriorityFeePerGas',\n    );\n    ensureMutuallyExclusiveFieldsNotProvided(\n      txParams,\n      'maxPriorityFeePerGas',\n      'gasPrice',\n    );\n    ensureFieldIsString(txParams, 'maxPriorityFeePerGas');\n  }\n}\n\n/**\n * Ensures that the provided txParams has the proper 'type' specified for the\n * given field, if it is provided. If types do not match throws an\n * invalidParams error.\n *\n * @param txParams - The transaction parameters object\n * @param field - The current field being validated\n * @throws {ethErrors.rpc.invalidParams} Throws if type does not match the\n * expectations for provided field.\n */\nfunction ensureProperTransactionEnvelopeTypeProvided(\n  txParams: TransactionParams,\n  field: GasFieldsToValidate,\n) {\n  switch (field) {\n    case 'maxFeePerGas':\n    case 'maxPriorityFeePerGas':\n      if (\n        txParams.type &&\n        txParams.type !== TransactionEnvelopeType.feeMarket\n      ) {\n        throw rpcErrors.invalidParams(\n          `Invalid transaction envelope type: specified type \"${txParams.type}\" but including maxFeePerGas and maxPriorityFeePerGas requires type: \"${TransactionEnvelopeType.feeMarket}\"`,\n        );\n      }\n      break;\n    case 'gasPrice':\n    default:\n      if (\n        txParams.type &&\n        txParams.type === TransactionEnvelopeType.feeMarket\n      ) {\n        throw rpcErrors.invalidParams(\n          `Invalid transaction envelope type: specified type \"${txParams.type}\" but included a gasPrice instead of maxFeePerGas and maxPriorityFeePerGas`,\n        );\n      }\n  }\n}\n\n/**\n * Given two fields, ensure that the second field is not included in txParams,\n * and if it is throw an invalidParams error.\n *\n * @param txParams - The transaction parameters object\n * @param fieldBeingValidated - The current field being validated\n * @param mutuallyExclusiveField - The field to ensure is not provided\n * @throws {ethErrors.rpc.invalidParams} Throws if mutuallyExclusiveField is\n * present in txParams.\n */\nfunction ensureMutuallyExclusiveFieldsNotProvided(\n  txParams: TransactionParams,\n  fieldBeingValidated: GasFieldsToValidate,\n  mutuallyExclusiveField: GasFieldsToValidate,\n) {\n  if (typeof txParams[mutuallyExclusiveField] !== 'undefined') {\n    throw rpcErrors.invalidParams(\n      `Invalid transaction params: specified ${fieldBeingValidated} but also included ${mutuallyExclusiveField}, these cannot be mixed`,\n    );\n  }\n}\n\n/**\n * Ensures that the provided value for field is a string, throws an\n * invalidParams error if field is not a string.\n *\n * @param txParams - The transaction parameters object\n * @param field - The current field being validated\n * @throws {rpcErrors.invalidParams} Throws if field is not a string\n */\nfunction ensureFieldIsString(\n  txParams: TransactionParams,\n  field: GasFieldsToValidate,\n) {\n  if (typeof txParams[field] !== 'string') {\n    throw rpcErrors.invalidParams(\n      `Invalid transaction params: ${field} is not a string. got: (${txParams[field]})`,\n    );\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils.d.ts b/dist/utils.d.ts
deleted file mode 100644
index 1049d83b18f43a35a07b7aa91e41dfabd28abdef..0000000000000000000000000000000000000000
--- a/dist/utils.d.ts
+++ /dev/null
@@ -1,60 +0,0 @@
-import type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';
-import type { GasPriceValue, FeeMarketEIP1559Values } from './TransactionController';
-import { TransactionStatus } from './types';
-import type { TransactionParams, TransactionMeta } from './types';
-export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
-/**
- * Normalizes properties on transaction params.
- *
- * @param txParams - The transaction params to normalize.
- * @returns Normalized transaction params.
- */
-export declare function normalizeTxParams(txParams: TransactionParams): TransactionParams;
-/**
- * Validates the transaction params for required properties and throws in
- * the event of any validation error.
- *
- * @param txParams - Transaction params object to validate.
- * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
- */
-export declare function validateTxParams(txParams: TransactionParams, isEIP1559Compatible?: boolean): void;
-/**
- * Checks if a transaction is EIP-1559 by checking for the existence of
- * maxFeePerGas and maxPriorityFeePerGas within its parameters.
- *
- * @param txParams - Transaction params object to add.
- * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.
- */
-export declare function isEIP1559Transaction(txParams: TransactionParams): boolean;
-export declare const validateGasValues: (gasValues: GasPriceValue | FeeMarketEIP1559Values) => void;
-export declare const isFeeMarketEIP1559Values: (gasValues?: GasPriceValue | FeeMarketEIP1559Values) => gasValues is FeeMarketEIP1559Values;
-export declare const isGasPriceValue: (gasValues?: GasPriceValue | FeeMarketEIP1559Values) => gasValues is GasPriceValue;
-export declare const getIncreasedPriceHex: (value: number, rate: number) => string;
-export declare const getIncreasedPriceFromExisting: (value: string | undefined, rate: number) => string;
-/**
- * Validates that the proposed value is greater than or equal to the minimum value.
- *
- * @param proposed - The proposed value.
- * @param min - The minimum value.
- * @returns The proposed value.
- * @throws Will throw if the proposed value is too low.
- */
-export declare function validateMinimumIncrease(proposed: string, min: string): string;
-/**
- * Helper function to filter and format transactions for the nonce tracker.
- *
- * @param fromAddress - Address of the account from which the transactions to filter from are sent.
- * @param transactionStatus - Status of the transactions for which to filter.
- * @param transactions - Array of transactionMeta objects that have been prefiltered.
- * @returns Array of transactions formatted for the nonce tracker.
- */
-export declare function getAndFormatTransactionsForNonceTracker(fromAddress: string, transactionStatus: TransactionStatus, transactions: TransactionMeta[]): NonceTrackerTransaction[];
-/**
- * Validates that a transaction is unapproved.
- * Throws if the transaction is not unapproved.
- *
- * @param transactionMeta - The transaction metadata to check.
- * @param fnName - The name of the function calling this helper.
- */
-export declare function validateIfTransactionUnapproved(transactionMeta: TransactionMeta | undefined, fnName: string): void;
-//# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/dist/utils.d.ts.map b/dist/utils.d.ts.map
deleted file mode 100644
index 01c0c6638685642ce82bda693b2fa2fbb06205a7..0000000000000000000000000000000000000000
--- a/dist/utils.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAMA,OAAO,KAAK,EAAE,WAAW,IAAI,uBAAuB,EAAE,MAAM,iCAAiC,CAAC;AAE9F,OAAO,KAAK,EACV,aAAa,EACb,sBAAsB,EACvB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,KAAK,EAAE,iBAAiB,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAElE,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAmBrE;;;;;GAKG;AACH,wBAAgB,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,qBAS5D;AAED;;;;;;GAMG;AACH,wBAAgB,gBAAgB,CAC9B,QAAQ,EAAE,iBAAiB,EAC3B,mBAAmB,UAAO,QAyD3B;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAUlD,CAAC;AAEF,eAAO,MAAM,wBAAwB,eACvB,aAAa,GAAG,sBAAsB,wCAGuB,CAAC;AAE5E,eAAO,MAAM,eAAe,eACd,aAAa,GAAG,sBAAsB,+BAEE,CAAC;AAEvD,eAAO,MAAM,oBAAoB,UAAW,MAAM,QAAQ,MAAM,KAAG,MACF,CAAC;AAElE,eAAO,MAAM,6BAA6B,UACjC,MAAM,GAAG,SAAS,QACnB,MAAM,KACX,MAEF,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,UAQpE;AAED;;;;;;;GAOG;AACH,wBAAgB,uCAAuC,CACrD,WAAW,EAAE,MAAM,EACnB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,EAAE,eAAe,EAAE,GAC9B,uBAAuB,EAAE,CAsB3B;AAED;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAQf"}
\ No newline at end of file
diff --git a/dist/utils.js b/dist/utils.js
deleted file mode 100644
index 835d1e47a79dd5d8d088f9ec4fb35d014813ba1f..0000000000000000000000000000000000000000
--- a/dist/utils.js
+++ /dev/null
@@ -1,180 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.validateIfTransactionUnapproved = exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.validateTxParams = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
-const controller_utils_1 = require("@metamask/controller-utils");
-const rpc_errors_1 = require("@metamask/rpc-errors");
-const ethereumjs_util_1 = require("ethereumjs-util");
-const types_1 = require("./types");
-exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
-const NORMALIZERS = {
-    data: (data) => (0, ethereumjs_util_1.addHexPrefix)(data),
-    from: (from) => (0, ethereumjs_util_1.addHexPrefix)(from).toLowerCase(),
-    gas: (gas) => (0, ethereumjs_util_1.addHexPrefix)(gas),
-    gasLimit: (gas) => (0, ethereumjs_util_1.addHexPrefix)(gas),
-    gasPrice: (gasPrice) => (0, ethereumjs_util_1.addHexPrefix)(gasPrice),
-    nonce: (nonce) => (0, ethereumjs_util_1.addHexPrefix)(nonce),
-    to: (to) => (0, ethereumjs_util_1.addHexPrefix)(to).toLowerCase(),
-    value: (value) => (0, ethereumjs_util_1.addHexPrefix)(value),
-    maxFeePerGas: (maxFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxFeePerGas),
-    maxPriorityFeePerGas: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
-    estimatedBaseFee: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
-    type: (type) => (type === '0x0' ? '0x0' : undefined),
-};
-/**
- * Normalizes properties on transaction params.
- *
- * @param txParams - The transaction params to normalize.
- * @returns Normalized transaction params.
- */
-function normalizeTxParams(txParams) {
-    const normalizedTxParams = { from: '' };
-    let key;
-    for (key in NORMALIZERS) {
-        if (txParams[key]) {
-            normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);
-        }
-    }
-    return normalizedTxParams;
-}
-exports.normalizeTxParams = normalizeTxParams;
-/**
- * Validates the transaction params for required properties and throws in
- * the event of any validation error.
- *
- * @param txParams - Transaction params object to validate.
- * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
- */
-function validateTxParams(txParams, isEIP1559Compatible = true) {
-    if (!txParams.from ||
-        typeof txParams.from !== 'string' ||
-        !(0, controller_utils_1.isValidHexAddress)(txParams.from)) {
-        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "from" address: ${txParams.from} must be a valid string.`);
-    }
-    if (isEIP1559Transaction(txParams) && !isEIP1559Compatible) {
-        throw rpc_errors_1.rpcErrors.invalidParams('Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559');
-    }
-    if (txParams.to === '0x' || txParams.to === undefined) {
-        if (txParams.data) {
-            delete txParams.to;
-        }
-        else {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "to" address: ${txParams.to} must be a valid string.`);
-        }
-    }
-    else if (txParams.to !== undefined && !(0, controller_utils_1.isValidHexAddress)(txParams.to)) {
-        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "to" address: ${txParams.to} must be a valid string.`);
-    }
-    if (txParams.value !== undefined) {
-        const value = txParams.value.toString();
-        if (value.includes('-')) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} is not a positive number.`);
-        }
-        if (value.includes('.')) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} number must be denominated in wei.`);
-        }
-        const intValue = parseInt(txParams.value, 10);
-        const isValid = Number.isFinite(intValue) &&
-            !Number.isNaN(intValue) &&
-            !isNaN(Number(value)) &&
-            Number.isSafeInteger(intValue);
-        if (!isValid) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} number must be a valid number.`);
-        }
-    }
-}
-exports.validateTxParams = validateTxParams;
-/**
- * Checks if a transaction is EIP-1559 by checking for the existence of
- * maxFeePerGas and maxPriorityFeePerGas within its parameters.
- *
- * @param txParams - Transaction params object to add.
- * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.
- */
-function isEIP1559Transaction(txParams) {
-    const hasOwnProp = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);
-    return (hasOwnProp(txParams, 'maxFeePerGas') &&
-        hasOwnProp(txParams, 'maxPriorityFeePerGas'));
-}
-exports.isEIP1559Transaction = isEIP1559Transaction;
-const validateGasValues = (gasValues) => {
-    Object.keys(gasValues).forEach((key) => {
-        const value = gasValues[key];
-        if (typeof value !== 'string' || !(0, ethereumjs_util_1.isHexString)(value)) {
-            throw new TypeError(`expected hex string for ${key} but received: ${value}`);
-        }
-    });
-};
-exports.validateGasValues = validateGasValues;
-const isFeeMarketEIP1559Values = (gasValues) => (gasValues === null || gasValues === void 0 ? void 0 : gasValues.maxFeePerGas) !== undefined ||
-    (gasValues === null || gasValues === void 0 ? void 0 : gasValues.maxPriorityFeePerGas) !== undefined;
-exports.isFeeMarketEIP1559Values = isFeeMarketEIP1559Values;
-const isGasPriceValue = (gasValues) => (gasValues === null || gasValues === void 0 ? void 0 : gasValues.gasPrice) !== undefined;
-exports.isGasPriceValue = isGasPriceValue;
-const getIncreasedPriceHex = (value, rate) => (0, ethereumjs_util_1.addHexPrefix)(`${parseInt(`${value * rate}`, 10).toString(16)}`);
-exports.getIncreasedPriceHex = getIncreasedPriceHex;
-const getIncreasedPriceFromExisting = (value, rate) => {
-    return (0, exports.getIncreasedPriceHex)((0, controller_utils_1.convertHexToDecimal)(value), rate);
-};
-exports.getIncreasedPriceFromExisting = getIncreasedPriceFromExisting;
-/**
- * Validates that the proposed value is greater than or equal to the minimum value.
- *
- * @param proposed - The proposed value.
- * @param min - The minimum value.
- * @returns The proposed value.
- * @throws Will throw if the proposed value is too low.
- */
-function validateMinimumIncrease(proposed, min) {
-    const proposedDecimal = (0, controller_utils_1.convertHexToDecimal)(proposed);
-    const minDecimal = (0, controller_utils_1.convertHexToDecimal)(min);
-    if (proposedDecimal >= minDecimal) {
-        return proposed;
-    }
-    const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;
-    throw new Error(errorMsg);
-}
-exports.validateMinimumIncrease = validateMinimumIncrease;
-/**
- * Helper function to filter and format transactions for the nonce tracker.
- *
- * @param fromAddress - Address of the account from which the transactions to filter from are sent.
- * @param transactionStatus - Status of the transactions for which to filter.
- * @param transactions - Array of transactionMeta objects that have been prefiltered.
- * @returns Array of transactions formatted for the nonce tracker.
- */
-function getAndFormatTransactionsForNonceTracker(fromAddress, transactionStatus, transactions) {
-    return transactions
-        .filter(({ status, txParams: { from } }) => status === transactionStatus &&
-        from.toLowerCase() === fromAddress.toLowerCase())
-        .map(({ status, txParams: { from, gas, value, nonce } }) => {
-        // the only value we care about is the nonce
-        // but we need to return the other values to satisfy the type
-        // TODO: refactor nonceTracker to not require this
-        return {
-            status,
-            history: [{}],
-            txParams: {
-                from: from !== null && from !== void 0 ? from : '',
-                gas: gas !== null && gas !== void 0 ? gas : '',
-                value: value !== null && value !== void 0 ? value : '',
-                nonce: nonce !== null && nonce !== void 0 ? nonce : '',
-            },
-        };
-    });
-}
-exports.getAndFormatTransactionsForNonceTracker = getAndFormatTransactionsForNonceTracker;
-/**
- * Validates that a transaction is unapproved.
- * Throws if the transaction is not unapproved.
- *
- * @param transactionMeta - The transaction metadata to check.
- * @param fnName - The name of the function calling this helper.
- */
-function validateIfTransactionUnapproved(transactionMeta, fnName) {
-    if ((transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.status) !== types_1.TransactionStatus.unapproved) {
-        throw new Error(`Can only call ${fnName} on an unapproved transaction.
-      Current tx status: ${transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.status}`);
-    }
-}
-exports.validateIfTransactionUnapproved = validateIfTransactionUnapproved;
-//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/dist/utils.js.map b/dist/utils.js.map
deleted file mode 100644
index 013009a958e3d81146cdad86460848b4f2dc74de..0000000000000000000000000000000000000000
--- a/dist/utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  isValidHexAddress,\n} from '@metamask/controller-utils';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';\n\nimport type {\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from './TransactionController';\nimport { TransactionStatus } from './types';\nimport type { TransactionParams, TransactionMeta } from './types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasLimit: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  type: (type: string) => (type === '0x0' ? '0x0' : undefined),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTxParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n  let key: keyof TransactionParams;\n  for (key in NORMALIZERS) {\n    if (txParams[key as keyof TransactionParams]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]) as never;\n    }\n  }\n  return normalizedTxParams;\n}\n\n/**\n * Validates the transaction params for required properties and throws in\n * the event of any validation error.\n *\n * @param txParams - Transaction params object to validate.\n * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.\n */\nexport function validateTxParams(\n  txParams: TransactionParams,\n  isEIP1559Compatible = true,\n) {\n  if (\n    !txParams.from ||\n    typeof txParams.from !== 'string' ||\n    !isValidHexAddress(txParams.from)\n  ) {\n    throw rpcErrors.invalidParams(\n      `Invalid \"from\" address: ${txParams.from} must be a valid string.`,\n    );\n  }\n\n  if (isEIP1559Transaction(txParams) && !isEIP1559Compatible) {\n    throw rpcErrors.invalidParams(\n      'Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559',\n    );\n  }\n\n  if (txParams.to === '0x' || txParams.to === undefined) {\n    if (txParams.data) {\n      delete txParams.to;\n    } else {\n      throw rpcErrors.invalidParams(\n        `Invalid \"to\" address: ${txParams.to} must be a valid string.`,\n      );\n    }\n  } else if (txParams.to !== undefined && !isValidHexAddress(txParams.to)) {\n    throw rpcErrors.invalidParams(\n      `Invalid \"to\" address: ${txParams.to} must be a valid string.`,\n    );\n  }\n\n  if (txParams.value !== undefined) {\n    const value = txParams.value.toString();\n    if (value.includes('-')) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} is not a positive number.`,\n      );\n    }\n\n    if (value.includes('.')) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} number must be denominated in wei.`,\n      );\n    }\n    const intValue = parseInt(txParams.value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n\n/**\n * Helper function to filter and format transactions for the nonce tracker.\n *\n * @param fromAddress - Address of the account from which the transactions to filter from are sent.\n * @param transactionStatus - Status of the transactions for which to filter.\n * @param transactions - Array of transactionMeta objects that have been prefiltered.\n * @returns Array of transactions formatted for the nonce tracker.\n */\nexport function getAndFormatTransactionsForNonceTracker(\n  fromAddress: string,\n  transactionStatus: TransactionStatus,\n  transactions: TransactionMeta[],\n): NonceTrackerTransaction[] {\n  return transactions\n    .filter(\n      ({ status, txParams: { from } }) =>\n        status === transactionStatus &&\n        from.toLowerCase() === fromAddress.toLowerCase(),\n    )\n    .map(({ status, txParams: { from, gas, value, nonce } }) => {\n      // the only value we care about is the nonce\n      // but we need to return the other values to satisfy the type\n      // TODO: refactor nonceTracker to not require this\n      return {\n        status,\n        history: [{}],\n        txParams: {\n          from: from ?? '',\n          gas: gas ?? '',\n          value: value ?? '',\n          nonce: nonce ?? '',\n        },\n      };\n    });\n}\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `Can only call ${fnName} on an unapproved transaction.\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n"]}
\ No newline at end of file
