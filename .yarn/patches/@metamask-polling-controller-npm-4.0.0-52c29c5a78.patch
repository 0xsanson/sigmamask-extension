diff --git a/dist/AbstractPollingController.d.ts b/dist/AbstractPollingController.d.ts
index e9ab1a668e3035b780d1e44fcfc387e68316431e..4e0bf84fe3fd0cbd3b697773ddabf4529d54212a 100644
--- a/dist/AbstractPollingController.d.ts
+++ b/dist/AbstractPollingController.d.ts
@@ -19,8 +19,8 @@ declare type Constructor = new (...args: any[]) => object;
  * @returns The composed class.
  */
 export declare function AbstractPollingControllerBaseMixin<TBase extends Constructor>(Base: TBase): (abstract new (...args: any[]) => {
-    readonly "__#93085@#pollingTokenSets": Map<PollingTokenSetId, Set<string>>;
-    "__#93085@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    readonly "__#9315@#pollingTokenSets": Map<PollingTokenSetId, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
     _executePoll(networkClientId: NetworkClientId, options: Json): Promise<void>;
     _startPollingByNetworkClientId(networkClientId: NetworkClientId, options: Json): void;
     _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;
diff --git a/dist/AbstractPollingController.d.ts.map b/dist/AbstractPollingController.d.ts.map
index 45ec961de56f7131c9b567e334f96aaa2ea08889..80947da1ec1a6c1384533df97c455b6dcea735fd 100644
--- a/dist/AbstractPollingController.d.ts.map
+++ b/dist/AbstractPollingController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"AbstractPollingController.d.ts","sourceRoot":"","sources":["../src/AbstractPollingController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,KAAK,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAI5C,oBAAY,kBAAkB,GAAG;IAC/B,6BAA6B,CAC3B,eAAe,EAAE,eAAe,EAChC,OAAO,EAAE,IAAI,GACZ,MAAM,CAAC;IAEV,cAAc,IAAI,IAAI,CAAC;IAEvB,yBAAyB,CAAC,YAAY,EAAE,MAAM,GAAG,IAAI,CAAC;IAEtD,kCAAkC,CAChC,eAAe,EAAE,eAAe,EAChC,QAAQ,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,IAAI,EACpD,OAAO,EAAE,IAAI,GACZ,IAAI,CAAC;IAER,YAAY,CAAC,eAAe,EAAE,eAAe,EAAE,OAAO,EAAE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7E,8BAA8B,CAC5B,eAAe,EAAE,eAAe,EAChC,OAAO,EAAE,IAAI,GACZ,IAAI,CAAC;IACR,+BAA+B,CAAC,GAAG,EAAE,iBAAiB,GAAG,IAAI,CAAC;CAC/D,CAAC;AAEF,eAAO,MAAM,MAAM,oBACA,eAAe,WACvB,IAAI,KACZ,iBAA+D,CAAC;AAEnE,oBAAY,iBAAiB,GAAG,GAAG,eAAe,IAAI,MAAM,EAAE,CAAC;AAI/D,aAAK,WAAW,GAAG,KAAK,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,MAAM,CAAC;AAElD;;;;;GAKG;AACH,wBAAgB,kCAAkC,CAAC,KAAK,SAAS,WAAW,EAC1E,IAAI,EAAE,KAAK;2CAMmB,IAAI,iBAAiB,EAAE,IAAI,MAAM,CAAC,CAAC;wGAIf,IAAI;kCAIjC,eAAe,WACvB,IAAI,GACZ,QAAQ,IAAI,CAAC;oDAGG,eAAe,WACvB,IAAI,GACZ,IAAI;yCAEuC,iBAAiB,GAAG,IAAI;mDAGnD,eAAe,YACvB,IAAI,GACZ,MAAM;;4CAuB+B,MAAM;wDA8B3B,eAAe,8BACJ,eAAe,KAAK,IAAI,YAC3C,IAAI;WASlB"}
\ No newline at end of file
+{"version":3,"file":"AbstractPollingController.d.ts","sourceRoot":"","sources":["../src/AbstractPollingController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,KAAK,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAI5C,oBAAY,kBAAkB,GAAG;IAC/B,6BAA6B,CAC3B,eAAe,EAAE,eAAe,EAChC,OAAO,EAAE,IAAI,GACZ,MAAM,CAAC;IAEV,cAAc,IAAI,IAAI,CAAC;IAEvB,yBAAyB,CAAC,YAAY,EAAE,MAAM,GAAG,IAAI,CAAC;IAEtD,kCAAkC,CAChC,eAAe,EAAE,eAAe,EAChC,QAAQ,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,IAAI,EACpD,OAAO,EAAE,IAAI,GACZ,IAAI,CAAC;IAER,YAAY,CAAC,eAAe,EAAE,eAAe,EAAE,OAAO,EAAE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7E,8BAA8B,CAC5B,eAAe,EAAE,eAAe,EAChC,OAAO,EAAE,IAAI,GACZ,IAAI,CAAC;IACR,+BAA+B,CAAC,GAAG,EAAE,iBAAiB,GAAG,IAAI,CAAC;CAC/D,CAAC;AAEF,eAAO,MAAM,MAAM,oBACA,eAAe,WACvB,IAAI,KACZ,iBAA+D,CAAC;AAEnE,oBAAY,iBAAiB,GAAG,GAAG,eAAe,IAAI,MAAM,EAAE,CAAC;AAI/D,aAAK,WAAW,GAAG,KAAK,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,MAAM,CAAC;AAElD;;;;;GAKG;AACH,wBAAgB,kCAAkC,CAAC,KAAK,SAAS,WAAW,EAC1E,IAAI,EAAE,KAAK;0CAMmB,IAAI,iBAAiB,EAAE,IAAI,MAAM,CAAC,CAAC;uGAIf,IAAI;kCAIjC,eAAe,WACvB,IAAI,GACZ,QAAQ,IAAI,CAAC;oDAGG,eAAe,WACvB,IAAI,GACZ,IAAI;yCAEuC,iBAAiB,GAAG,IAAI;mDAGnD,eAAe,YACvB,IAAI,GACZ,MAAM;;4CAuB+B,MAAM;wDA8B3B,eAAe,8BACJ,eAAe,KAAK,IAAI,YAC3C,IAAI;WASlB"}
\ No newline at end of file
diff --git a/dist/BlockTrackerPollingController.d.ts b/dist/BlockTrackerPollingController.d.ts
index c8f4eb74587abc89c12137fd63f5aaaa60b0d98f..d96c6ddabac643dd7a69e5b648dbd10ac10c5e78 100644
--- a/dist/BlockTrackerPollingController.d.ts
+++ b/dist/BlockTrackerPollingController.d.ts
@@ -5,12 +5,12 @@ import type { PollingTokenSetId } from './AbstractPollingController';
 declare class Empty {
 }
 export declare const BlockTrackerPollingControllerOnly: (abstract new (...args: any[]) => {
-    "__#93086@#activeListeners": Record<string, (options: Json) => Promise<void>>;
+    "__#9316@#activeListeners": Record<string, (options: Json) => Promise<void>>;
     _getNetworkClientById(networkClientId: NetworkClientId): NetworkClient | undefined;
     _startPollingByNetworkClientId(networkClientId: NetworkClientId, options: Json): void;
     _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;
-    readonly "__#93085@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
-    "__#93085@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
     _executePoll(networkClientId: string, options: Json): Promise<void>;
     startPollingByNetworkClientId(networkClientId: string, options?: Json): string;
     stopAllPolling(): void;
@@ -18,12 +18,12 @@ export declare const BlockTrackerPollingControllerOnly: (abstract new (...args:
     onPollingCompleteByNetworkClientId(networkClientId: string, callback: (networkClientId: string) => void, options?: Json): void;
 }) & typeof Empty;
 export declare const BlockTrackerPollingController: (abstract new (...args: any[]) => {
-    "__#93086@#activeListeners": Record<string, (options: Json) => Promise<void>>;
+    "__#9316@#activeListeners": Record<string, (options: Json) => Promise<void>>;
     _getNetworkClientById(networkClientId: NetworkClientId): NetworkClient | undefined;
     _startPollingByNetworkClientId(networkClientId: NetworkClientId, options: Json): void;
     _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;
-    readonly "__#93085@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
-    "__#93085@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
     _executePoll(networkClientId: string, options: Json): Promise<void>;
     startPollingByNetworkClientId(networkClientId: string, options?: Json): string;
     stopAllPolling(): void;
@@ -31,12 +31,12 @@ export declare const BlockTrackerPollingController: (abstract new (...args: any[
     onPollingCompleteByNetworkClientId(networkClientId: string, callback: (networkClientId: string) => void, options?: Json): void;
 }) & typeof BaseController;
 export declare const BlockTrackerPollingControllerV1: (abstract new (...args: any[]) => {
-    "__#93086@#activeListeners": Record<string, (options: Json) => Promise<void>>;
+    "__#9316@#activeListeners": Record<string, (options: Json) => Promise<void>>;
     _getNetworkClientById(networkClientId: NetworkClientId): NetworkClient | undefined;
     _startPollingByNetworkClientId(networkClientId: NetworkClientId, options: Json): void;
     _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;
-    readonly "__#93085@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
-    "__#93085@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
     _executePoll(networkClientId: string, options: Json): Promise<void>;
     startPollingByNetworkClientId(networkClientId: string, options?: Json): string;
     stopAllPolling(): void;
diff --git a/dist/BlockTrackerPollingController.d.ts.map b/dist/BlockTrackerPollingController.d.ts.map
index 1a68f698860d64b253b256415f3564ab3d87667f..8cbd493959d7ff7284db1055465027cd47bd2470 100644
--- a/dist/BlockTrackerPollingController.d.ts.map
+++ b/dist/BlockTrackerPollingController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"BlockTrackerPollingController.d.ts","sourceRoot":"","sources":["../src/BlockTrackerPollingController.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAC7E,OAAO,KAAK,EACV,eAAe,EACf,aAAa,EACd,MAAM,8BAA8B,CAAC;AACtC,OAAO,KAAK,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAM5C,OAAO,KAAK,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAsErE,cAAM,KAAK;CAAG;AAEd,eAAO,MAAM,iCAAiC;0DArDC,IAAI,KAAK,QAAQ,IAAI,CAAC;2CAG9C,eAAe,GAC/B,aAAa,GAAG,SAAS;oDAGT,eAAe,WACvB,IAAI;yCAwBsB,iBAAiB;;;;;;;;iBAsBf,CAAC;AAC5C,eAAO,MAAM,6BAA6B;0DAvDK,IAAI,KAAK,QAAQ,IAAI,CAAC;2CAG9C,eAAe,GAC/B,aAAa,GAAG,SAAS;oDAGT,eAAe,WACvB,IAAI;yCAwBsB,iBAAiB;;;;;;;;0BAwBN,CAAC;AACrD,eAAO,MAAM,+BAA+B;0DAzDG,IAAI,KAAK,QAAQ,IAAI,CAAC;2CAG9C,eAAe,GAC/B,aAAa,GAAG,SAAS;oDAGT,eAAe,WACvB,IAAI;yCAwBsB,iBAAiB;;;;;;;;4BA0BJ,CAAC"}
\ No newline at end of file
+{"version":3,"file":"BlockTrackerPollingController.d.ts","sourceRoot":"","sources":["../src/BlockTrackerPollingController.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAC7E,OAAO,KAAK,EACV,eAAe,EACf,aAAa,EACd,MAAM,8BAA8B,CAAC;AACtC,OAAO,KAAK,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAM5C,OAAO,KAAK,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAsErE,cAAM,KAAK;CAAG;AAEd,eAAO,MAAM,iCAAiC;yDArDC,IAAI,KAAK,QAAQ,IAAI,CAAC;2CAG9C,eAAe,GAC/B,aAAa,GAAG,SAAS;oDAGT,eAAe,WACvB,IAAI;yCAwBsB,iBAAiB;;;;;;;;iBAsBf,CAAC;AAC5C,eAAO,MAAM,6BAA6B;yDAvDK,IAAI,KAAK,QAAQ,IAAI,CAAC;2CAG9C,eAAe,GAC/B,aAAa,GAAG,SAAS;oDAGT,eAAe,WACvB,IAAI;yCAwBsB,iBAAiB;;;;;;;;0BAwBN,CAAC;AACrD,eAAO,MAAM,+BAA+B;yDAzDG,IAAI,KAAK,QAAQ,IAAI,CAAC;2CAG9C,eAAe,GAC/B,aAAa,GAAG,SAAS;oDAGT,eAAe,WACvB,IAAI;yCAwBsB,iBAAiB;;;;;;;;4BA0BJ,CAAC"}
\ No newline at end of file
diff --git a/dist/StaticIntervalPollingController.d.ts b/dist/StaticIntervalPollingController.d.ts
index 478638b0d418dd9813a185a7e6dfc17ec58c5217..a66099041a73d3f9ed4b201a9aa5c6afcc820247 100644
--- a/dist/StaticIntervalPollingController.d.ts
+++ b/dist/StaticIntervalPollingController.d.ts
@@ -10,14 +10,14 @@ import type { PollingTokenSetId } from './AbstractPollingController';
 declare class Empty {
 }
 export declare const StaticIntervalPollingControllerOnly: (abstract new (...args: any[]) => {
-    readonly "__#93087@#intervalIds": Record<PollingTokenSetId, NodeJS.Timeout>;
-    "__#93087@#intervalLength": number | undefined;
+    readonly "__#9317@#intervalIds": Record<PollingTokenSetId, NodeJS.Timeout>;
+    "__#9317@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPollingByNetworkClientId(networkClientId: NetworkClientId, options: Json): void;
     _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;
-    readonly "__#93085@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
-    "__#93085@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
     _executePoll(networkClientId: string, options: Json): Promise<void>;
     startPollingByNetworkClientId(networkClientId: string, options?: Json): string;
     stopAllPolling(): void;
@@ -25,14 +25,14 @@ export declare const StaticIntervalPollingControllerOnly: (abstract new (...args
     onPollingCompleteByNetworkClientId(networkClientId: string, callback: (networkClientId: string) => void, options?: Json): void;
 }) & typeof Empty;
 export declare const StaticIntervalPollingController: (abstract new (...args: any[]) => {
-    readonly "__#93087@#intervalIds": Record<PollingTokenSetId, NodeJS.Timeout>;
-    "__#93087@#intervalLength": number | undefined;
+    readonly "__#9317@#intervalIds": Record<PollingTokenSetId, NodeJS.Timeout>;
+    "__#9317@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPollingByNetworkClientId(networkClientId: NetworkClientId, options: Json): void;
     _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;
-    readonly "__#93085@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
-    "__#93085@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
     _executePoll(networkClientId: string, options: Json): Promise<void>;
     startPollingByNetworkClientId(networkClientId: string, options?: Json): string;
     stopAllPolling(): void;
@@ -40,14 +40,14 @@ export declare const StaticIntervalPollingController: (abstract new (...args: an
     onPollingCompleteByNetworkClientId(networkClientId: string, callback: (networkClientId: string) => void, options?: Json): void;
 }) & typeof BaseController;
 export declare const StaticIntervalPollingControllerV1: (abstract new (...args: any[]) => {
-    readonly "__#93087@#intervalIds": Record<PollingTokenSetId, NodeJS.Timeout>;
-    "__#93087@#intervalLength": number | undefined;
+    readonly "__#9317@#intervalIds": Record<PollingTokenSetId, NodeJS.Timeout>;
+    "__#9317@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPollingByNetworkClientId(networkClientId: NetworkClientId, options: Json): void;
     _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;
-    readonly "__#93085@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
-    "__#93085@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
     _executePoll(networkClientId: string, options: Json): Promise<void>;
     startPollingByNetworkClientId(networkClientId: string, options?: Json): string;
     stopAllPolling(): void;
diff --git a/dist/StaticIntervalPollingController.d.ts.map b/dist/StaticIntervalPollingController.d.ts.map
index 21fbea8421d2e954345c6f348632accdfd403a5a..e640bdf52426a12c0c0b2cc91143c5e24cf282a3 100644
--- a/dist/StaticIntervalPollingController.d.ts.map
+++ b/dist/StaticIntervalPollingController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"StaticIntervalPollingController.d.ts","sourceRoot":"","sources":["../src/StaticIntervalPollingController.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAC7E,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,KAAK,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAM5C,OAAO,KAAK,EAEV,iBAAiB,EAClB,MAAM,6BAA6B,CAAC;AAqErC,cAAM,KAAK;CAAG;AAEd,eAAO,MAAM,mCAAmC;sCAnDrB,OAAO,iBAAiB,EAAE,OAAO,OAAO,CAAC;gCAE/C,MAAM,GAAG,SAAS;sCAED,MAAM;;oDASrB,eAAe,WACvB,IAAI;yCAuBsB,iBAAiB;;;;;;;;iBAeb,CAAC;AAC9C,eAAO,MAAM,+BAA+B;sCArDjB,OAAO,iBAAiB,EAAE,OAAO,OAAO,CAAC;gCAE/C,MAAM,GAAG,SAAS;sCAED,MAAM;;oDASrB,eAAe,WACvB,IAAI;yCAuBsB,iBAAiB;;;;;;;;0BAiBJ,CAAC;AACvD,eAAO,MAAM,iCAAiC;sCAvDnB,OAAO,iBAAiB,EAAE,OAAO,OAAO,CAAC;gCAE/C,MAAM,GAAG,SAAS;sCAED,MAAM;;oDASrB,eAAe,WACvB,IAAI;yCAuBsB,iBAAiB;;;;;;;;4BAmBF,CAAC"}
\ No newline at end of file
+{"version":3,"file":"StaticIntervalPollingController.d.ts","sourceRoot":"","sources":["../src/StaticIntervalPollingController.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAC7E,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,KAAK,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAM5C,OAAO,KAAK,EAEV,iBAAiB,EAClB,MAAM,6BAA6B,CAAC;AAqErC,cAAM,KAAK;CAAG;AAEd,eAAO,MAAM,mCAAmC;qCAnDrB,OAAO,iBAAiB,EAAE,OAAO,OAAO,CAAC;+BAE/C,MAAM,GAAG,SAAS;sCAED,MAAM;;oDASrB,eAAe,WACvB,IAAI;yCAuBsB,iBAAiB;;;;;;;;iBAeb,CAAC;AAC9C,eAAO,MAAM,+BAA+B;qCArDjB,OAAO,iBAAiB,EAAE,OAAO,OAAO,CAAC;+BAE/C,MAAM,GAAG,SAAS;sCAED,MAAM;;oDASrB,eAAe,WACvB,IAAI;yCAuBsB,iBAAiB;;;;;;;;0BAiBJ,CAAC;AACvD,eAAO,MAAM,iCAAiC;qCAvDnB,OAAO,iBAAiB,EAAE,OAAO,OAAO,CAAC;+BAE/C,MAAM,GAAG,SAAS;sCAED,MAAM;;oDASrB,eAAe,WACvB,IAAI;yCAuBsB,iBAAiB;;;;;;;;4BAmBF,CAAC"}
\ No newline at end of file
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 445cf59bb8a50cf02ea75d8ecd747c8f21e5baee..3c2661203dac35070b1eeba21caae04d61cc71ab 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,4 +1,52 @@
+import { StaticIntervalPollingControllerOnly, StaticIntervalPollingController, StaticIntervalPollingControllerV1 } from './StaticIntervalPollingController';
 export { BlockTrackerPollingControllerOnly, BlockTrackerPollingController, BlockTrackerPollingControllerV1, } from './BlockTrackerPollingController';
-export { StaticIntervalPollingControllerOnly, StaticIntervalPollingController, StaticIntervalPollingControllerV1, } from './StaticIntervalPollingController';
 export type { IPollingController } from './AbstractPollingController';
+declare const PollingControllerOnly: (abstract new (...args: any[]) => {
+    readonly "__#9317@#intervalIds": Record<`${string}:${string}`, NodeJS.Timeout>;
+    "__#9317@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPollingByNetworkClientId(networkClientId: string, options: import("@metamask/utils").Json): void;
+    _stopPollingByPollingTokenSetId(key: `${string}:${string}`): void;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    _executePoll(networkClientId: string, options: import("@metamask/utils").Json): Promise<void>;
+    startPollingByNetworkClientId(networkClientId: string, options?: import("@metamask/utils").Json): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingCompleteByNetworkClientId(networkClientId: string, callback: (networkClientId: string) => void, options?: import("@metamask/utils").Json): void;
+}) & {
+    new (): {};
+};
+declare const PollingController: (abstract new (...args: any[]) => {
+    readonly "__#9317@#intervalIds": Record<`${string}:${string}`, NodeJS.Timeout>;
+    "__#9317@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPollingByNetworkClientId(networkClientId: string, options: import("@metamask/utils").Json): void;
+    _stopPollingByPollingTokenSetId(key: `${string}:${string}`): void;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    _executePoll(networkClientId: string, options: import("@metamask/utils").Json): Promise<void>;
+    startPollingByNetworkClientId(networkClientId: string, options?: import("@metamask/utils").Json): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingCompleteByNetworkClientId(networkClientId: string, callback: (networkClientId: string) => void, options?: import("@metamask/utils").Json): void;
+}) & typeof import("@metamask/base-controller").BaseController;
+declare const PollingControllerV1: (abstract new (...args: any[]) => {
+    readonly "__#9317@#intervalIds": Record<`${string}:${string}`, NodeJS.Timeout>;
+    "__#9317@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPollingByNetworkClientId(networkClientId: string, options: import("@metamask/utils").Json): void;
+    _stopPollingByPollingTokenSetId(key: `${string}:${string}`): void;
+    readonly "__#9315@#pollingTokenSets": Map<`${string}:${string}`, Set<string>>;
+    "__#9315@#callbacks": Map<`${string}:${string}`, Set<(PollingTokenSetId: `${string}:${string}`) => void>>;
+    _executePoll(networkClientId: string, options: import("@metamask/utils").Json): Promise<void>;
+    startPollingByNetworkClientId(networkClientId: string, options?: import("@metamask/utils").Json): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingCompleteByNetworkClientId(networkClientId: string, callback: (networkClientId: string) => void, options?: import("@metamask/utils").Json): void;
+}) & typeof import("@metamask/base-controller").BaseControllerV1;
+export { StaticIntervalPollingControllerOnly, StaticIntervalPollingController, StaticIntervalPollingControllerV1, PollingControllerOnly, PollingController, PollingControllerV1, };
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/dist/index.d.ts.map b/dist/index.d.ts.map
index fa341122aed742670d539a0c01939ce644d03cac..64d5110229069dc9aadf2c97e8ba1eaadbe0cc9e 100644
--- a/dist/index.d.ts.map
+++ b/dist/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iCAAiC,EACjC,6BAA6B,EAC7B,+BAA+B,GAChC,MAAM,iCAAiC,CAAC;AAEzC,OAAO,EACL,mCAAmC,EACnC,+BAA+B,EAC/B,iCAAiC,GAClC,MAAM,mCAAmC,CAAC;AAE3C,YAAY,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,mCAAmC,EACnC,+BAA+B,EAC/B,iCAAiC,EAClC,MAAM,mCAAmC,CAAC;AAE3C,OAAO,EACL,iCAAiC,EACjC,6BAA6B,EAC7B,+BAA+B,GAChC,MAAM,iCAAiC,CAAC;AAEzC,YAAY,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AAEtE,QAAA,MAAM,qBAAqB;;;;;;;;;;;;;;;;CAAsC,CAAC;AAClE,QAAA,MAAM,iBAAiB;;;;;;;;;;;;;;8DAAkC,CAAC;AAC1D,QAAA,MAAM,mBAAmB;;;;;;;;;;;;;;gEAAoC,CAAC;AAE9D,OAAO,EACL,mCAAmC,EACnC,+BAA+B,EAC/B,iCAAiC,EACjC,qBAAqB,EACrB,iBAAiB,EACjB,mBAAmB,GACpB,CAAC"}
\ No newline at end of file
diff --git a/dist/index.js b/dist/index.js
index 845b5161a23e7d5bd20df47b1cbfa29f75733aae..f15e352cb169ef8310e372c175b30b4301a746c7 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,12 +1,18 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.StaticIntervalPollingControllerV1 = exports.StaticIntervalPollingController = exports.StaticIntervalPollingControllerOnly = exports.BlockTrackerPollingControllerV1 = exports.BlockTrackerPollingController = exports.BlockTrackerPollingControllerOnly = void 0;
+exports.PollingControllerV1 = exports.PollingController = exports.PollingControllerOnly = exports.StaticIntervalPollingControllerV1 = exports.StaticIntervalPollingController = exports.StaticIntervalPollingControllerOnly = exports.BlockTrackerPollingControllerV1 = exports.BlockTrackerPollingController = exports.BlockTrackerPollingControllerOnly = void 0;
+const StaticIntervalPollingController_1 = require("./StaticIntervalPollingController");
+Object.defineProperty(exports, "StaticIntervalPollingControllerOnly", { enumerable: true, get: function () { return StaticIntervalPollingController_1.StaticIntervalPollingControllerOnly; } });
+Object.defineProperty(exports, "StaticIntervalPollingController", { enumerable: true, get: function () { return StaticIntervalPollingController_1.StaticIntervalPollingController; } });
+Object.defineProperty(exports, "StaticIntervalPollingControllerV1", { enumerable: true, get: function () { return StaticIntervalPollingController_1.StaticIntervalPollingControllerV1; } });
 var BlockTrackerPollingController_1 = require("./BlockTrackerPollingController");
 Object.defineProperty(exports, "BlockTrackerPollingControllerOnly", { enumerable: true, get: function () { return BlockTrackerPollingController_1.BlockTrackerPollingControllerOnly; } });
 Object.defineProperty(exports, "BlockTrackerPollingController", { enumerable: true, get: function () { return BlockTrackerPollingController_1.BlockTrackerPollingController; } });
 Object.defineProperty(exports, "BlockTrackerPollingControllerV1", { enumerable: true, get: function () { return BlockTrackerPollingController_1.BlockTrackerPollingControllerV1; } });
-var StaticIntervalPollingController_1 = require("./StaticIntervalPollingController");
-Object.defineProperty(exports, "StaticIntervalPollingControllerOnly", { enumerable: true, get: function () { return StaticIntervalPollingController_1.StaticIntervalPollingControllerOnly; } });
-Object.defineProperty(exports, "StaticIntervalPollingController", { enumerable: true, get: function () { return StaticIntervalPollingController_1.StaticIntervalPollingController; } });
-Object.defineProperty(exports, "StaticIntervalPollingControllerV1", { enumerable: true, get: function () { return StaticIntervalPollingController_1.StaticIntervalPollingControllerV1; } });
+const PollingControllerOnly = StaticIntervalPollingController_1.StaticIntervalPollingControllerOnly;
+exports.PollingControllerOnly = PollingControllerOnly;
+const PollingController = StaticIntervalPollingController_1.StaticIntervalPollingController;
+exports.PollingController = PollingController;
+const PollingControllerV1 = StaticIntervalPollingController_1.StaticIntervalPollingControllerV1;
+exports.PollingControllerV1 = PollingControllerV1;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/dist/index.js.map b/dist/index.js.map
index 6496076075049083f1cb981a701b128da42b7737..cb34a0b5401455a1caa3d56fdad969f613b38a9a 100644
--- a/dist/index.js.map
+++ b/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,iFAIyC;AAHvC,kJAAA,iCAAiC,OAAA;AACjC,8IAAA,6BAA6B,OAAA;AAC7B,gJAAA,+BAA+B,OAAA;AAGjC,qFAI2C;AAHzC,sJAAA,mCAAmC,OAAA;AACnC,kJAAA,+BAA+B,OAAA;AAC/B,oJAAA,iCAAiC,OAAA","sourcesContent":["export {\n  BlockTrackerPollingControllerOnly,\n  BlockTrackerPollingController,\n  BlockTrackerPollingControllerV1,\n} from './BlockTrackerPollingController';\n\nexport {\n  StaticIntervalPollingControllerOnly,\n  StaticIntervalPollingController,\n  StaticIntervalPollingControllerV1,\n} from './StaticIntervalPollingController';\n\nexport type { IPollingController } from './AbstractPollingController';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,uFAI2C;AAezC,oHAlBA,qEAAmC,OAkBA;AACnC,gHAlBA,iEAA+B,OAkBA;AAC/B,kHAlBA,mEAAiC,OAkBA;AAfnC,iFAIyC;AAHvC,kJAAA,iCAAiC,OAAA;AACjC,8IAAA,6BAA6B,OAAA;AAC7B,gJAAA,+BAA+B,OAAA;AAKjC,MAAM,qBAAqB,GAAG,qEAAmC,CAAC;AAQhE,sDAAqB;AAPvB,MAAM,iBAAiB,GAAG,iEAA+B,CAAC;AAQxD,8CAAiB;AAPnB,MAAM,mBAAmB,GAAG,mEAAiC,CAAC;AAQ5D,kDAAmB","sourcesContent":["import {\n  StaticIntervalPollingControllerOnly,\n  StaticIntervalPollingController,\n  StaticIntervalPollingControllerV1,\n} from './StaticIntervalPollingController';\n\nexport {\n  BlockTrackerPollingControllerOnly,\n  BlockTrackerPollingController,\n  BlockTrackerPollingControllerV1,\n} from './BlockTrackerPollingController';\n\nexport type { IPollingController } from './AbstractPollingController';\n\nconst PollingControllerOnly = StaticIntervalPollingControllerOnly;\nconst PollingController = StaticIntervalPollingController;\nconst PollingControllerV1 = StaticIntervalPollingControllerV1;\n\nexport {\n  StaticIntervalPollingControllerOnly,\n  StaticIntervalPollingController,\n  StaticIntervalPollingControllerV1,\n  PollingControllerOnly,\n  PollingController,\n  PollingControllerV1,\n};\n"]}
\ No newline at end of file
