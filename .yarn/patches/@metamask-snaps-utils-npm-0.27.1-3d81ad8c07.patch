diff --git a/dist/index.browser.d.ts b/dist/index.browser.d.ts
index b26e4a9ebb8478101068e00fd258ff3baba3aa8a..584ef5922a923d9acbc7f9d1c12d34f24eda67f6 100644
--- a/dist/index.browser.d.ts
+++ b/dist/index.browser.d.ts
@@ -14,3 +14,4 @@ export * from './snaps';
 export * from './types';
 export * from './versions';
 export * from './virtual-file/index.browser';
+export * from './registry';
diff --git a/dist/index.browser.js b/dist/index.browser.js
index 01d8d04503600e6af4a25109b47bdd2d28a64168..d46cfce639c31db6f288a102964ff5b5c1bd7935 100644
--- a/dist/index.browser.js
+++ b/dist/index.browser.js
@@ -30,4 +30,5 @@ __exportStar(require("./snaps"), exports);
 __exportStar(require("./types"), exports);
 __exportStar(require("./versions"), exports);
 __exportStar(require("./virtual-file/index.browser"), exports);
+__exportStar(require("./registry"), exports);
 //# sourceMappingURL=index.browser.js.map
\ No newline at end of file
diff --git a/dist/index.browser.js.map b/dist/index.browser.js.map
index e987be55d3b69bd08fa8c318887009e07be66064..bad70ec0530e7bf6eb6ed4205a0a0ea1e2823ce9 100644
--- a/dist/index.browser.js.map
+++ b/dist/index.browser.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.browser.js","sourceRoot":"","sources":["../src/index.browser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,4CAA0B;AAC1B,+CAA6B;AAC7B,uDAAqC;AACrC,4CAA0B;AAC1B,4CAA0B;AAC1B,6CAA2B;AAC3B,6CAA2B;AAC3B,2DAAyC;AACzC,8CAA4B;AAC5B,iDAA+B;AAC/B,2CAAyB;AACzB,yCAAuB;AACvB,0CAAwB;AACxB,0CAAwB;AACxB,6CAA2B;AAC3B,+DAA6C","sourcesContent":["export * from './caveats';\nexport * from './deep-clone';\nexport * from './default-endowments';\nexport * from './entropy';\nexport * from './flatMap';\nexport * from './handlers';\nexport * from './json-rpc';\nexport * from './manifest/index.browser';\nexport * from './namespace';\nexport * from './notification';\nexport * from './object';\nexport * from './path';\nexport * from './snaps';\nexport * from './types';\nexport * from './versions';\nexport * from './virtual-file/index.browser';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.browser.js","sourceRoot":"","sources":["../src/index.browser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,4CAA0B;AAC1B,+CAA6B;AAC7B,uDAAqC;AACrC,4CAA0B;AAC1B,4CAA0B;AAC1B,6CAA2B;AAC3B,6CAA2B;AAC3B,2DAAyC;AACzC,8CAA4B;AAC5B,iDAA+B;AAC/B,2CAAyB;AACzB,yCAAuB;AACvB,0CAAwB;AACxB,0CAAwB;AACxB,6CAA2B;AAC3B,+DAA6C;AAC7C,6CAA2B","sourcesContent":["export * from './caveats';\nexport * from './deep-clone';\nexport * from './default-endowments';\nexport * from './entropy';\nexport * from './flatMap';\nexport * from './handlers';\nexport * from './json-rpc';\nexport * from './manifest/index.browser';\nexport * from './namespace';\nexport * from './notification';\nexport * from './object';\nexport * from './path';\nexport * from './snaps';\nexport * from './types';\nexport * from './versions';\nexport * from './virtual-file/index.browser';\nexport * from './registry';\n"]}
\ No newline at end of file
diff --git a/dist/index.d.ts b/dist/index.d.ts
index f0d38849405b6c737ba10ee9fec07cbda285ca0e..548c1bcb9a31e7e5bedb8a26cc9ea25d4147f529 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -20,3 +20,4 @@ export * from './snaps';
 export * from './types';
 export * from './versions';
 export * from './virtual-file';
+export * from './registry';
diff --git a/dist/index.js b/dist/index.js
index b0c4460d5fcb8f53db1645d24f61a726f8ce4cc9..5322c5df4c0ad7f55a79d6626bdf9578a8b7aef1 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -36,4 +36,5 @@ __exportStar(require("./snaps"), exports);
 __exportStar(require("./types"), exports);
 __exportStar(require("./versions"), exports);
 __exportStar(require("./virtual-file"), exports);
+__exportStar(require("./registry"), exports);
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/dist/index.js.map b/dist/index.js.map
index 57c6edc2bd972dc34a943df3b9f6e0abe9d1b440..958c53e512ca84873cadbe82152efef73b18dddb 100644
--- a/dist/index.js.map
+++ b/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,4CAA0B;AAC1B,4CAA0B;AAC1B,+CAA6B;AAC7B,uDAAqC;AACrC,4CAA0B;AAC1B,yCAAuB;AACvB,4CAA0B;AAC1B,uCAAqB;AACrB,6CAA2B;AAC3B,6CAA2B;AAC3B,6CAA2B;AAC3B,yCAAuB;AACvB,8CAA4B;AAC5B,iDAA+B;AAC/B,wCAAsB;AACtB,2CAAyB;AACzB,yCAAuB;AACvB,iDAA+B;AAC/B,0CAAwB;AACxB,0CAAwB;AACxB,6CAA2B;AAC3B,iDAA+B","sourcesContent":["export * from './caveats';\nexport * from './cronjob';\nexport * from './deep-clone';\nexport * from './default-endowments';\nexport * from './entropy';\nexport * from './eval';\nexport * from './flatMap';\nexport * from './fs';\nexport * from './handlers';\nexport * from './json-rpc';\nexport * from './manifest';\nexport * from './mock';\nexport * from './namespace';\nexport * from './notification';\nexport * from './npm';\nexport * from './object';\nexport * from './path';\nexport * from './post-process';\nexport * from './snaps';\nexport * from './types';\nexport * from './versions';\nexport * from './virtual-file';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,4CAA0B;AAC1B,4CAA0B;AAC1B,+CAA6B;AAC7B,uDAAqC;AACrC,4CAA0B;AAC1B,yCAAuB;AACvB,4CAA0B;AAC1B,uCAAqB;AACrB,6CAA2B;AAC3B,6CAA2B;AAC3B,6CAA2B;AAC3B,yCAAuB;AACvB,8CAA4B;AAC5B,iDAA+B;AAC/B,wCAAsB;AACtB,2CAAyB;AACzB,yCAAuB;AACvB,iDAA+B;AAC/B,0CAAwB;AACxB,0CAAwB;AACxB,6CAA2B;AAC3B,iDAA+B;AAC/B,6CAA2B","sourcesContent":["export * from './caveats';\nexport * from './cronjob';\nexport * from './deep-clone';\nexport * from './default-endowments';\nexport * from './entropy';\nexport * from './eval';\nexport * from './flatMap';\nexport * from './fs';\nexport * from './handlers';\nexport * from './json-rpc';\nexport * from './manifest';\nexport * from './mock';\nexport * from './namespace';\nexport * from './notification';\nexport * from './npm';\nexport * from './object';\nexport * from './path';\nexport * from './post-process';\nexport * from './snaps';\nexport * from './types';\nexport * from './versions';\nexport * from './virtual-file';\nexport * from './registry';\n"]}
\ No newline at end of file
diff --git a/dist/manifest/validation.d.ts b/dist/manifest/validation.d.ts
index bfc5a96127a30e3c243cf7cf9c1b55ec3d83f2f7..a45bfb690b8b32c6d01ed5e1beabd0d2e00d322f 100644
--- a/dist/manifest/validation.d.ts
+++ b/dist/manifest/validation.d.ts
@@ -212,6 +212,7 @@ export declare const PermissionsStruct: Struct<{
     }>;
 }>;
 export declare type SnapPermissions = Infer<typeof PermissionsStruct>;
+export declare const ChecksumStruct: Struct<string, null>;
 export declare const SnapManifestStruct: Struct<{
     version: import("../versions").SemVerVersion;
     description: string;
diff --git a/dist/manifest/validation.js b/dist/manifest/validation.js
index f9e80d0c35fc6f2c1de2e569337c058a0035639f..1dbd44daca5a7fae424ad453698ef2cce24ef280 100644
--- a/dist/manifest/validation.js
+++ b/dist/manifest/validation.js
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.createSnapManifest = exports.assertIsSnapManifest = exports.isSnapManifest = exports.SnapManifestStruct = exports.PermissionsStruct = exports.SnapGetBip32EntropyPermissionsStruct = exports.Bip32EntropyStruct = exports.bip32entropy = exports.Bip32PathStruct = exports.base64 = void 0;
+exports.createSnapManifest = exports.assertIsSnapManifest = exports.isSnapManifest = exports.SnapManifestStruct = exports.ChecksumStruct = exports.PermissionsStruct = exports.SnapGetBip32EntropyPermissionsStruct = exports.Bip32EntropyStruct = exports.bip32entropy = exports.Bip32PathStruct = exports.base64 = void 0;
 const utils_1 = require("@metamask/utils");
 const superstruct_1 = require("superstruct");
 const cronjob_1 = require("../cronjob");
@@ -100,6 +100,7 @@ exports.PermissionsStruct = (0, superstruct_1.type)({
 });
 /* eslint-enable @typescript-eslint/naming-convention */
 const relativePath = (struct) => (0, superstruct_1.coerce)(struct, struct, (value) => (0, path_1.normalizeRelative)(value));
+exports.ChecksumStruct = (0, superstruct_1.size)((0, exports.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);
 exports.SnapManifestStruct = (0, superstruct_1.object)({
     version: versions_1.VersionStruct,
     description: (0, superstruct_1.size)((0, superstruct_1.string)(), 1, 280),
@@ -109,7 +110,7 @@ exports.SnapManifestStruct = (0, superstruct_1.object)({
         url: (0, superstruct_1.size)((0, superstruct_1.string)(), 1, Infinity),
     })),
     source: (0, superstruct_1.object)({
-        shasum: (0, superstruct_1.size)((0, exports.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44),
+        shasum: exports.ChecksumStruct,
         location: (0, superstruct_1.object)({
             npm: (0, superstruct_1.object)({
                 filePath: relativePath((0, superstruct_1.size)((0, superstruct_1.string)(), 1, Infinity)),
diff --git a/dist/manifest/validation.js.map b/dist/manifest/validation.js.map
index a0e98117e005e0034d145b84973f570c2be79622..d9f7c8d2e2a209674f434b0175a68ddae77d266d 100644
--- a/dist/manifest/validation.js.map
+++ b/dist/manifest/validation.js.map
@@ -1 +1 @@
-{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/manifest/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert, assertStruct } from '@metamask/utils';\nimport {\n  array,\n  boolean,\n  coerce,\n  create,\n  enums,\n  Infer,\n  integer,\n  is,\n  literal,\n  object,\n  optional,\n  pattern,\n  refine,\n  size,\n  string,\n  Struct,\n  type,\n  union,\n} from 'superstruct';\n\nimport { CronjobSpecificationArrayStruct } from '../cronjob';\nimport { SIP_6_MAGIC_VALUE, STATE_ENCRYPTION_MAGIC_VALUE } from '../entropy';\nimport { RpcOriginsStruct } from '../json-rpc';\nimport { NamespacesStruct } from '../namespace';\nimport { normalizeRelative } from '../path';\nimport { NameStruct, NpmSnapFileNames } from '../types';\nimport { VersionStruct } from '../versions';\n\n// BIP-43 purposes that cannot be used for entropy derivation. These are in the\n// string form, ending with `'`.\nconst FORBIDDEN_PURPOSES: string[] = [\n  SIP_6_MAGIC_VALUE,\n  STATE_ENCRYPTION_MAGIC_VALUE,\n];\n\nexport type Base64Opts = {\n  /**\n   * Is the `=` padding at the end required or not.\n   *\n   * @default false\n   */\n  // Padding is optional in RFC 4648, that's why the default value is false\n  paddingRequired?: boolean;\n  /**\n   * Which character set should be used.\n   * The sets are based on {@link https://datatracker.ietf.org/doc/html/rfc4648 RFC 4648}.\n   *\n   * @default 'base64'\n   */\n  characterSet?: 'base64' | 'base64url';\n};\n\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param opts - Optional options to specialize base64 validation. See {@link Base64Opts} documentation.\n * @returns A superstruct validating base64.\n */\nexport const base64 = <T extends string, S>(\n  struct: Struct<T, S>,\n  opts: Base64Opts = {},\n) => {\n  const paddingRequired = opts.paddingRequired ?? false;\n  const characterSet = opts.characterSet ?? 'base64';\n\n  let letters: string;\n  if (characterSet === 'base64') {\n    letters = String.raw`[A-Za-z0-9+\\/]`;\n  } else {\n    assert(characterSet === 'base64url');\n    letters = String.raw`[-_A-Za-z0-9]`;\n  }\n\n  let re: RegExp;\n  if (paddingRequired) {\n    re = new RegExp(\n      `^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`,\n      'u',\n    );\n  } else {\n    re = new RegExp(\n      `^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`,\n      'u',\n    );\n  }\n\n  return pattern(struct, re);\n};\n\nconst BIP32_INDEX_REGEX = /^\\d+'?$/u;\nexport const Bip32PathStruct = refine(\n  array(string()),\n  'BIP-32 path',\n  (path) => {\n    if (path.length === 0) {\n      return 'Path must be a non-empty BIP-32 derivation path array';\n    }\n\n    if (path[0] !== 'm') {\n      return 'Path must start with \"m\".';\n    }\n\n    if (path.length < 3) {\n      return 'Paths must have a length of at least three.';\n    }\n\n    if (path.slice(1).some((part) => !BIP32_INDEX_REGEX.test(part))) {\n      return 'Path must be a valid BIP-32 derivation path array.';\n    }\n\n    if (FORBIDDEN_PURPOSES.includes(path[1])) {\n      return `The purpose \"${path[1]}\" is not allowed for entropy derivation.`;\n    }\n\n    return true;\n  },\n);\n\nexport const bip32entropy = <T extends { path: string[]; curve: string }, S>(\n  struct: Struct<T, S>,\n) =>\n  refine(struct, 'BIP-32 entropy', (value) => {\n    if (\n      value.curve === 'ed25519' &&\n      value.path.slice(1).some((part) => !part.endsWith(\"'\"))\n    ) {\n      return 'Ed25519 does not support unhardened paths.';\n    }\n\n    return true;\n  });\n\n// Used outside @metamask/snap-utils\nexport const Bip32EntropyStruct = bip32entropy(\n  type({\n    path: Bip32PathStruct,\n    curve: enums(['ed25519', 'secp256k1']),\n  }),\n);\n\nexport type Bip32Entropy = Infer<typeof Bip32EntropyStruct>;\n\nexport const SnapGetBip32EntropyPermissionsStruct = size(\n  array(Bip32EntropyStruct),\n  1,\n  Infinity,\n);\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const PermissionsStruct = type({\n  'endowment:long-running': optional(object({})),\n  'endowment:network-access': optional(object({})),\n  'endowment:transaction-insight': optional(\n    object({\n      allowTransactionOrigin: optional(boolean()),\n    }),\n  ),\n  'endowment:cronjob': optional(\n    object({ jobs: CronjobSpecificationArrayStruct }),\n  ),\n  'endowment:rpc': optional(RpcOriginsStruct),\n  snap_confirm: optional(object({})),\n  snap_manageState: optional(object({})),\n  snap_notify: optional(object({})),\n  snap_getBip32Entropy: optional(SnapGetBip32EntropyPermissionsStruct),\n  snap_getBip32PublicKey: optional(SnapGetBip32EntropyPermissionsStruct),\n  snap_getBip44Entropy: optional(\n    size(\n      array(object({ coinType: size(integer(), 0, 2 ** 32 - 1) })),\n      1,\n      Infinity,\n    ),\n  ),\n  snap_getEntropy: optional(object({})),\n  'endowment:keyring': optional(\n    object({\n      namespaces: NamespacesStruct,\n    }),\n  ),\n});\n/* eslint-enable @typescript-eslint/naming-convention */\n\nconst relativePath = <Type extends string>(struct: Struct<Type>) =>\n  coerce(struct, struct, (value) => normalizeRelative(value));\n\nexport type SnapPermissions = Infer<typeof PermissionsStruct>;\n\nexport const SnapManifestStruct = object({\n  version: VersionStruct,\n  description: size(string(), 1, 280),\n  proposedName: size(\n    pattern(\n      string(),\n      /^(?:[A-Za-z0-9-_]+( [A-Za-z0-9-_]+)*)|(?:(?:@[A-Za-z0-9-*~][A-Za-z0-9-*._~]*\\/)?[A-Za-z0-9-~][A-Za-z0-9-._~]*)$/u,\n    ),\n    1,\n    214,\n  ),\n  repository: optional(\n    object({\n      type: size(string(), 1, Infinity),\n      url: size(string(), 1, Infinity),\n    }),\n  ),\n  source: object({\n    shasum: size(base64(string(), { paddingRequired: true }), 44, 44),\n    location: object({\n      npm: object({\n        filePath: relativePath(size(string(), 1, Infinity)),\n        iconPath: optional(relativePath(size(string(), 1, Infinity))),\n        packageName: NameStruct,\n        registry: union([\n          literal('https://registry.npmjs.org'),\n          literal('https://registry.npmjs.org/'),\n        ]),\n      }),\n    }),\n  }),\n  initialPermissions: PermissionsStruct,\n  manifestVersion: literal('0.1'),\n});\n\nexport type SnapManifest = Infer<typeof SnapManifestStruct>;\n\n/**\n * Check if the given value is a valid {@link SnapManifest} object.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link SnapManifest} object.\n */\nexport function isSnapManifest(value: unknown): value is SnapManifest {\n  return is(value, SnapManifestStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link SnapManifest} object.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid {@link SnapManifest} object.\n */\nexport function assertIsSnapManifest(\n  value: unknown,\n): asserts value is SnapManifest {\n  assertStruct(\n    value,\n    SnapManifestStruct,\n    `\"${NpmSnapFileNames.Manifest}\" is invalid`,\n  );\n}\n\n/**\n * Creates a {@link SnapManifest} object from JSON.\n *\n *\n * @param value - The value to check.\n * @throws If the value cannot be coerced to a {@link SnapManifest} object.\n * @returns The created {@link SnapManifest} object.\n */\nexport function createSnapManifest(value: unknown): SnapManifest {\n  // TODO: Add a utility to prefix these errors similar to assertStruct\n  return create(value, SnapManifestStruct);\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/manifest/validation.ts"],"names":[],"mappings":";;;AAAA,2CAAuD;AACvD,6CAmBqB;AAErB,wCAA6D;AAC7D,wCAA6E;AAC7E,0CAA+C;AAC/C,4CAAgD;AAChD,kCAA4C;AAC5C,oCAAwD;AACxD,0CAA4C;AAE5C,+EAA+E;AAC/E,gCAAgC;AAChC,MAAM,kBAAkB,GAAa;IACnC,2BAAiB;IACjB,sCAA4B;CAC7B,CAAC;AAmBF;;;;;;GAMG;AACI,MAAM,MAAM,GAAG,CACpB,MAAoB,EACpB,OAAmB,EAAE,EACrB,EAAE;;IACF,MAAM,eAAe,GAAG,MAAA,IAAI,CAAC,eAAe,mCAAI,KAAK,CAAC;IACtD,MAAM,YAAY,GAAG,MAAA,IAAI,CAAC,YAAY,mCAAI,QAAQ,CAAC;IAEnD,IAAI,OAAe,CAAC;IACpB,IAAI,YAAY,KAAK,QAAQ,EAAE;QAC7B,OAAO,GAAG,MAAM,CAAC,GAAG,CAAA,gBAAgB,CAAC;KACtC;SAAM;QACL,IAAA,cAAM,EAAC,YAAY,KAAK,WAAW,CAAC,CAAC;QACrC,OAAO,GAAG,MAAM,CAAC,GAAG,CAAA,eAAe,CAAC;KACrC;IAED,IAAI,EAAU,CAAC;IACf,IAAI,eAAe,EAAE;QACnB,EAAE,GAAG,IAAI,MAAM,CACb,OAAO,OAAO,WAAW,OAAO,QAAQ,OAAO,UAAU,EACzD,GAAG,CACJ,CAAC;KACH;SAAM;QACL,EAAE,GAAG,IAAI,MAAM,CACb,OAAO,OAAO,WAAW,OAAO,SAAS,OAAO,QAAQ,OAAO,UAAU,EACzE,GAAG,CACJ,CAAC;KACH;IAED,OAAO,IAAA,qBAAO,EAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAC7B,CAAC,CAAC;AA7BW,QAAA,MAAM,UA6BjB;AAEF,MAAM,iBAAiB,GAAG,UAAU,CAAC;AACxB,QAAA,eAAe,GAAG,IAAA,oBAAM,EACnC,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC,EACf,aAAa,EACb,CAAC,IAAI,EAAE,EAAE;IACP,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,uDAAuD,CAAC;KAChE;IAED,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACnB,OAAO,2BAA2B,CAAC;KACpC;IAED,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,OAAO,6CAA6C,CAAC;KACtD;IAED,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;QAC/D,OAAO,oDAAoD,CAAC;KAC7D;IAED,IAAI,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QACxC,OAAO,gBAAgB,IAAI,CAAC,CAAC,CAAC,0CAA0C,CAAC;KAC1E;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CACF,CAAC;AAEK,MAAM,YAAY,GAAG,CAC1B,MAAoB,EACpB,EAAE,CACF,IAAA,oBAAM,EAAC,MAAM,EAAE,gBAAgB,EAAE,CAAC,KAAK,EAAE,EAAE;IACzC,IACE,KAAK,CAAC,KAAK,KAAK,SAAS;QACzB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EACvD;QACA,OAAO,4CAA4C,CAAC;KACrD;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC,CAAC;AAZQ,QAAA,YAAY,gBAYpB;AAEL,oCAAoC;AACvB,QAAA,kBAAkB,GAAG,IAAA,oBAAY,EAC5C,IAAA,kBAAI,EAAC;IACH,IAAI,EAAE,uBAAe;IACrB,KAAK,EAAE,IAAA,mBAAK,EAAC,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;CACvC,CAAC,CACH,CAAC;AAIW,QAAA,oCAAoC,GAAG,IAAA,kBAAI,EACtD,IAAA,mBAAK,EAAC,0BAAkB,CAAC,EACzB,CAAC,EACD,QAAQ,CACT,CAAC;AAEF,yDAAyD;AAC5C,QAAA,iBAAiB,GAAG,IAAA,kBAAI,EAAC;IACpC,wBAAwB,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IAC9C,0BAA0B,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IAChD,+BAA+B,EAAE,IAAA,sBAAQ,EACvC,IAAA,oBAAM,EAAC;QACL,sBAAsB,EAAE,IAAA,sBAAQ,EAAC,IAAA,qBAAO,GAAE,CAAC;KAC5C,CAAC,CACH;IACD,mBAAmB,EAAE,IAAA,sBAAQ,EAC3B,IAAA,oBAAM,EAAC,EAAE,IAAI,EAAE,yCAA+B,EAAE,CAAC,CAClD;IACD,eAAe,EAAE,IAAA,sBAAQ,EAAC,2BAAgB,CAAC;IAC3C,YAAY,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IAClC,gBAAgB,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IACtC,WAAW,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IACjC,oBAAoB,EAAE,IAAA,sBAAQ,EAAC,4CAAoC,CAAC;IACpE,sBAAsB,EAAE,IAAA,sBAAQ,EAAC,4CAAoC,CAAC;IACtE,oBAAoB,EAAE,IAAA,sBAAQ,EAC5B,IAAA,kBAAI,EACF,IAAA,mBAAK,EAAC,IAAA,oBAAM,EAAC,EAAE,QAAQ,EAAE,IAAA,kBAAI,EAAC,IAAA,qBAAO,GAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAC5D,CAAC,EACD,QAAQ,CACT,CACF;IACD,eAAe,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IACrC,mBAAmB,EAAE,IAAA,sBAAQ,EAC3B,IAAA,oBAAM,EAAC;QACL,UAAU,EAAE,4BAAgB;KAC7B,CAAC,CACH;CACF,CAAC,CAAC;AACH,wDAAwD;AAExD,MAAM,YAAY,GAAG,CAAsB,MAAoB,EAAE,EAAE,CACjE,IAAA,oBAAM,EAAC,MAAM,EAAE,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAA,wBAAiB,EAAC,KAAK,CAAC,CAAC,CAAC;AAIjD,QAAA,cAAc,GAAG,IAAA,kBAAI,EAChC,IAAA,cAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,EAC3C,EAAE,EACF,EAAE,CACH,CAAC;AAEW,QAAA,kBAAkB,GAAG,IAAA,oBAAM,EAAC;IACvC,OAAO,EAAE,wBAAa;IACtB,WAAW,EAAE,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,GAAG,CAAC;IACnC,YAAY,EAAE,IAAA,kBAAI,EAChB,IAAA,qBAAO,EACL,IAAA,oBAAM,GAAE,EACR,kHAAkH,CACnH,EACD,CAAC,EACD,GAAG,CACJ;IACD,UAAU,EAAE,IAAA,sBAAQ,EAClB,IAAA,oBAAM,EAAC;QACL,IAAI,EAAE,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,QAAQ,CAAC;QACjC,GAAG,EAAE,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,QAAQ,CAAC;KACjC,CAAC,CACH;IACD,MAAM,EAAE,IAAA,oBAAM,EAAC;QACb,MAAM,EAAE,sBAAc;QACtB,QAAQ,EAAE,IAAA,oBAAM,EAAC;YACf,GAAG,EAAE,IAAA,oBAAM,EAAC;gBACV,QAAQ,EAAE,YAAY,CAAC,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;gBACnD,QAAQ,EAAE,IAAA,sBAAQ,EAAC,YAAY,CAAC,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAC7D,WAAW,EAAE,kBAAU;gBACvB,QAAQ,EAAE,IAAA,mBAAK,EAAC;oBACd,IAAA,qBAAO,EAAC,4BAA4B,CAAC;oBACrC,IAAA,qBAAO,EAAC,6BAA6B,CAAC;iBACvC,CAAC;aACH,CAAC;SACH,CAAC;KACH,CAAC;IACF,kBAAkB,EAAE,yBAAiB;IACrC,eAAe,EAAE,IAAA,qBAAO,EAAC,KAAK,CAAC;CAChC,CAAC,CAAC;AAIH;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,KAAc;IAC3C,OAAO,IAAA,gBAAE,EAAC,KAAK,EAAE,0BAAkB,CAAC,CAAC;AACvC,CAAC;AAFD,wCAEC;AAED;;;;;GAKG;AACH,SAAgB,oBAAoB,CAClC,KAAc;IAEd,IAAA,oBAAY,EACV,KAAK,EACL,0BAAkB,EAClB,IAAI,wBAAgB,CAAC,QAAQ,cAAc,CAC5C,CAAC;AACJ,CAAC;AARD,oDAQC;AAED;;;;;;;GAOG;AACH,SAAgB,kBAAkB,CAAC,KAAc;IAC/C,qEAAqE;IACrE,OAAO,IAAA,oBAAM,EAAC,KAAK,EAAE,0BAAkB,CAAC,CAAC;AAC3C,CAAC;AAHD,gDAGC","sourcesContent":["import { assert, assertStruct } from '@metamask/utils';\nimport {\n  array,\n  boolean,\n  coerce,\n  create,\n  enums,\n  Infer,\n  integer,\n  is,\n  literal,\n  object,\n  optional,\n  pattern,\n  refine,\n  size,\n  string,\n  Struct,\n  type,\n  union,\n} from 'superstruct';\n\nimport { CronjobSpecificationArrayStruct } from '../cronjob';\nimport { SIP_6_MAGIC_VALUE, STATE_ENCRYPTION_MAGIC_VALUE } from '../entropy';\nimport { RpcOriginsStruct } from '../json-rpc';\nimport { NamespacesStruct } from '../namespace';\nimport { normalizeRelative } from '../path';\nimport { NameStruct, NpmSnapFileNames } from '../types';\nimport { VersionStruct } from '../versions';\n\n// BIP-43 purposes that cannot be used for entropy derivation. These are in the\n// string form, ending with `'`.\nconst FORBIDDEN_PURPOSES: string[] = [\n  SIP_6_MAGIC_VALUE,\n  STATE_ENCRYPTION_MAGIC_VALUE,\n];\n\nexport type Base64Opts = {\n  /**\n   * Is the `=` padding at the end required or not.\n   *\n   * @default false\n   */\n  // Padding is optional in RFC 4648, that's why the default value is false\n  paddingRequired?: boolean;\n  /**\n   * Which character set should be used.\n   * The sets are based on {@link https://datatracker.ietf.org/doc/html/rfc4648 RFC 4648}.\n   *\n   * @default 'base64'\n   */\n  characterSet?: 'base64' | 'base64url';\n};\n\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param opts - Optional options to specialize base64 validation. See {@link Base64Opts} documentation.\n * @returns A superstruct validating base64.\n */\nexport const base64 = <T extends string, S>(\n  struct: Struct<T, S>,\n  opts: Base64Opts = {},\n) => {\n  const paddingRequired = opts.paddingRequired ?? false;\n  const characterSet = opts.characterSet ?? 'base64';\n\n  let letters: string;\n  if (characterSet === 'base64') {\n    letters = String.raw`[A-Za-z0-9+\\/]`;\n  } else {\n    assert(characterSet === 'base64url');\n    letters = String.raw`[-_A-Za-z0-9]`;\n  }\n\n  let re: RegExp;\n  if (paddingRequired) {\n    re = new RegExp(\n      `^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`,\n      'u',\n    );\n  } else {\n    re = new RegExp(\n      `^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`,\n      'u',\n    );\n  }\n\n  return pattern(struct, re);\n};\n\nconst BIP32_INDEX_REGEX = /^\\d+'?$/u;\nexport const Bip32PathStruct = refine(\n  array(string()),\n  'BIP-32 path',\n  (path) => {\n    if (path.length === 0) {\n      return 'Path must be a non-empty BIP-32 derivation path array';\n    }\n\n    if (path[0] !== 'm') {\n      return 'Path must start with \"m\".';\n    }\n\n    if (path.length < 3) {\n      return 'Paths must have a length of at least three.';\n    }\n\n    if (path.slice(1).some((part) => !BIP32_INDEX_REGEX.test(part))) {\n      return 'Path must be a valid BIP-32 derivation path array.';\n    }\n\n    if (FORBIDDEN_PURPOSES.includes(path[1])) {\n      return `The purpose \"${path[1]}\" is not allowed for entropy derivation.`;\n    }\n\n    return true;\n  },\n);\n\nexport const bip32entropy = <T extends { path: string[]; curve: string }, S>(\n  struct: Struct<T, S>,\n) =>\n  refine(struct, 'BIP-32 entropy', (value) => {\n    if (\n      value.curve === 'ed25519' &&\n      value.path.slice(1).some((part) => !part.endsWith(\"'\"))\n    ) {\n      return 'Ed25519 does not support unhardened paths.';\n    }\n\n    return true;\n  });\n\n// Used outside @metamask/snap-utils\nexport const Bip32EntropyStruct = bip32entropy(\n  type({\n    path: Bip32PathStruct,\n    curve: enums(['ed25519', 'secp256k1']),\n  }),\n);\n\nexport type Bip32Entropy = Infer<typeof Bip32EntropyStruct>;\n\nexport const SnapGetBip32EntropyPermissionsStruct = size(\n  array(Bip32EntropyStruct),\n  1,\n  Infinity,\n);\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const PermissionsStruct = type({\n  'endowment:long-running': optional(object({})),\n  'endowment:network-access': optional(object({})),\n  'endowment:transaction-insight': optional(\n    object({\n      allowTransactionOrigin: optional(boolean()),\n    }),\n  ),\n  'endowment:cronjob': optional(\n    object({ jobs: CronjobSpecificationArrayStruct }),\n  ),\n  'endowment:rpc': optional(RpcOriginsStruct),\n  snap_confirm: optional(object({})),\n  snap_manageState: optional(object({})),\n  snap_notify: optional(object({})),\n  snap_getBip32Entropy: optional(SnapGetBip32EntropyPermissionsStruct),\n  snap_getBip32PublicKey: optional(SnapGetBip32EntropyPermissionsStruct),\n  snap_getBip44Entropy: optional(\n    size(\n      array(object({ coinType: size(integer(), 0, 2 ** 32 - 1) })),\n      1,\n      Infinity,\n    ),\n  ),\n  snap_getEntropy: optional(object({})),\n  'endowment:keyring': optional(\n    object({\n      namespaces: NamespacesStruct,\n    }),\n  ),\n});\n/* eslint-enable @typescript-eslint/naming-convention */\n\nconst relativePath = <Type extends string>(struct: Struct<Type>) =>\n  coerce(struct, struct, (value) => normalizeRelative(value));\n\nexport type SnapPermissions = Infer<typeof PermissionsStruct>;\n\nexport const ChecksumStruct = size(\n  base64(string(), { paddingRequired: true }),\n  44,\n  44,\n);\n\nexport const SnapManifestStruct = object({\n  version: VersionStruct,\n  description: size(string(), 1, 280),\n  proposedName: size(\n    pattern(\n      string(),\n      /^(?:[A-Za-z0-9-_]+( [A-Za-z0-9-_]+)*)|(?:(?:@[A-Za-z0-9-*~][A-Za-z0-9-*._~]*\\/)?[A-Za-z0-9-~][A-Za-z0-9-._~]*)$/u,\n    ),\n    1,\n    214,\n  ),\n  repository: optional(\n    object({\n      type: size(string(), 1, Infinity),\n      url: size(string(), 1, Infinity),\n    }),\n  ),\n  source: object({\n    shasum: ChecksumStruct,\n    location: object({\n      npm: object({\n        filePath: relativePath(size(string(), 1, Infinity)),\n        iconPath: optional(relativePath(size(string(), 1, Infinity))),\n        packageName: NameStruct,\n        registry: union([\n          literal('https://registry.npmjs.org'),\n          literal('https://registry.npmjs.org/'),\n        ]),\n      }),\n    }),\n  }),\n  initialPermissions: PermissionsStruct,\n  manifestVersion: literal('0.1'),\n});\n\nexport type SnapManifest = Infer<typeof SnapManifestStruct>;\n\n/**\n * Check if the given value is a valid {@link SnapManifest} object.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link SnapManifest} object.\n */\nexport function isSnapManifest(value: unknown): value is SnapManifest {\n  return is(value, SnapManifestStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link SnapManifest} object.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid {@link SnapManifest} object.\n */\nexport function assertIsSnapManifest(\n  value: unknown,\n): asserts value is SnapManifest {\n  assertStruct(\n    value,\n    SnapManifestStruct,\n    `\"${NpmSnapFileNames.Manifest}\" is invalid`,\n  );\n}\n\n/**\n * Creates a {@link SnapManifest} object from JSON.\n *\n *\n * @param value - The value to check.\n * @throws If the value cannot be coerced to a {@link SnapManifest} object.\n * @returns The created {@link SnapManifest} object.\n */\nexport function createSnapManifest(value: unknown): SnapManifest {\n  // TODO: Add a utility to prefix these errors similar to assertStruct\n  return create(value, SnapManifestStruct);\n}\n"]}
\ No newline at end of file
diff --git a/dist/registry.d.ts b/dist/registry.d.ts
new file mode 100755
index 0000000000000000000000000000000000000000..a98491ccfba01cc0da962751476d1a25e8e262d4
--- /dev/null
+++ b/dist/registry.d.ts
@@ -0,0 +1,86 @@
+import { Infer } from 'superstruct';
+import { SnapId } from './types';
+import { SemVerVersion } from './versions';
+export declare type SnapRegistryInfo = {
+    version: SemVerVersion;
+    checksum: string;
+};
+export declare type SnapRegistryRequest = Record<SnapId, SnapRegistryInfo>;
+export declare enum SnapRegistryStatus {
+    Unverified = 0,
+    Blocked = 1,
+    Verified = 2
+}
+export declare type SnapRegistryBlockReason = Infer<typeof BlockReasonStruct>;
+export declare type SnapRegistryResult = {
+    status: SnapRegistryStatus;
+    reason?: SnapRegistryBlockReason;
+};
+export interface SnapRegistry {
+    get(snaps: SnapRegistryRequest): Promise<Record<SnapId, SnapRegistryResult>>;
+}
+declare const BlockReasonStruct: import("superstruct").Struct<{
+    url?: string | undefined;
+    explanation?: string | undefined;
+}, {
+    explanation: import("superstruct").Struct<string | undefined, null>;
+    url: import("superstruct").Struct<string | undefined, null>;
+}>;
+export declare const JsonSnapRegistryDatabaseStruct: import("superstruct").Struct<{
+    verifiedSnaps: Record<string, {
+        id: string;
+        versions: Record<SemVerVersion, {
+            checksum: string;
+        }>;
+    }>;
+    blockedSnaps: ({
+        id: string;
+        versionRange: import("./versions").SemVerRange;
+        reason?: {
+            url?: string | undefined;
+            explanation?: string | undefined;
+        } | undefined;
+    } | {
+        checksum: string;
+        reason?: {
+            url?: string | undefined;
+            explanation?: string | undefined;
+        } | undefined;
+    })[];
+}, {
+    verifiedSnaps: import("superstruct").Struct<Record<string, {
+        id: string;
+        versions: Record<SemVerVersion, {
+            checksum: string;
+        }>;
+    }>, null>;
+    blockedSnaps: import("superstruct").Struct<({
+        id: string;
+        versionRange: import("./versions").SemVerRange;
+        reason?: {
+            url?: string | undefined;
+            explanation?: string | undefined;
+        } | undefined;
+    } | {
+        checksum: string;
+        reason?: {
+            url?: string | undefined;
+            explanation?: string | undefined;
+        } | undefined;
+    })[], import("superstruct").Struct<{
+        id: string;
+        versionRange: import("./versions").SemVerRange;
+        reason?: {
+            url?: string | undefined;
+            explanation?: string | undefined;
+        } | undefined;
+    } | {
+        checksum: string;
+        reason?: {
+            url?: string | undefined;
+            explanation?: string | undefined;
+        } | undefined;
+    }, null>>;
+}>;
+export declare type JsonSnapRegistryDatabase = Infer<typeof JsonSnapRegistryDatabaseStruct>;
+export {};
diff --git a/dist/registry.js b/dist/registry.js
new file mode 100755
index 0000000000000000000000000000000000000000..c607bc2fced34d162b30754bacc71b5a75641fef
--- /dev/null
+++ b/dist/registry.js
@@ -0,0 +1,37 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.JsonSnapRegistryDatabaseStruct = exports.SnapRegistryStatus = void 0;
+const superstruct_1 = require("superstruct");
+const manifest_1 = require("./manifest");
+const versions_1 = require("./versions");
+// TODO: Decide on names for these
+var SnapRegistryStatus;
+(function (SnapRegistryStatus) {
+    SnapRegistryStatus[SnapRegistryStatus["Unverified"] = 0] = "Unverified";
+    SnapRegistryStatus[SnapRegistryStatus["Blocked"] = 1] = "Blocked";
+    SnapRegistryStatus[SnapRegistryStatus["Verified"] = 2] = "Verified";
+})(SnapRegistryStatus = exports.SnapRegistryStatus || (exports.SnapRegistryStatus = {}));
+const VerifiedSnapVersionStruct = (0, superstruct_1.object)({
+    checksum: manifest_1.ChecksumStruct,
+});
+const VerifiedSnapStruct = (0, superstruct_1.object)({
+    id: (0, superstruct_1.string)(),
+    versions: (0, superstruct_1.record)(versions_1.VersionStruct, VerifiedSnapVersionStruct),
+});
+const BlockReasonStruct = (0, superstruct_1.object)({
+    explanation: (0, superstruct_1.optional)((0, superstruct_1.string)()),
+    url: (0, superstruct_1.optional)((0, superstruct_1.string)()),
+});
+const BlockedSnapStruct = (0, superstruct_1.union)([
+    (0, superstruct_1.object)({
+        id: (0, superstruct_1.string)(),
+        versionRange: versions_1.VersionRangeStruct,
+        reason: (0, superstruct_1.optional)(BlockReasonStruct),
+    }),
+    (0, superstruct_1.object)({ checksum: manifest_1.ChecksumStruct, reason: (0, superstruct_1.optional)(BlockReasonStruct) }),
+]);
+exports.JsonSnapRegistryDatabaseStruct = (0, superstruct_1.object)({
+    verifiedSnaps: (0, superstruct_1.record)((0, superstruct_1.string)(), VerifiedSnapStruct),
+    blockedSnaps: (0, superstruct_1.array)(BlockedSnapStruct),
+});
+//# sourceMappingURL=registry.js.map
\ No newline at end of file
diff --git a/dist/registry.js.map b/dist/registry.js.map
new file mode 100755
index 0000000000000000000000000000000000000000..28c77b44baa499e1edad183c6c05ef13fb5fa89f
--- /dev/null
+++ b/dist/registry.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"registry.js","sourceRoot":"","sources":["../src/registry.ts"],"names":[],"mappings":";;;AAAA,6CAQqB;AAErB,yCAA4C;AAE5C,yCAA8E;AAK9E,kCAAkC;AAClC,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC5B,uEAAU,CAAA;IACV,iEAAO,CAAA;IACP,mEAAQ,CAAA;AACV,CAAC,EAJW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAI7B;AAcD,MAAM,yBAAyB,GAAG,IAAA,oBAAM,EAAC;IACvC,QAAQ,EAAE,yBAAc;CACzB,CAAC,CAAC;AAEH,MAAM,kBAAkB,GAAG,IAAA,oBAAM,EAAC;IAChC,EAAE,EAAE,IAAA,oBAAM,GAAE;IACZ,QAAQ,EAAE,IAAA,oBAAM,EAAC,wBAAa,EAAE,yBAAyB,CAAC;CAC3D,CAAC,CAAC;AAEH,MAAM,iBAAiB,GAAG,IAAA,oBAAM,EAAC;IAC/B,WAAW,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;IAC/B,GAAG,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;CACxB,CAAC,CAAC;AAEH,MAAM,iBAAiB,GAAG,IAAA,mBAAK,EAAC;IAC9B,IAAA,oBAAM,EAAC;QACL,EAAE,EAAE,IAAA,oBAAM,GAAE;QACZ,YAAY,EAAE,6BAAkB;QAChC,MAAM,EAAE,IAAA,sBAAQ,EAAC,iBAAiB,CAAC;KACpC,CAAC;IACF,IAAA,oBAAM,EAAC,EAAE,QAAQ,EAAE,yBAAc,EAAE,MAAM,EAAE,IAAA,sBAAQ,EAAC,iBAAiB,CAAC,EAAE,CAAC;CAC1E,CAAC,CAAC;AAEU,QAAA,8BAA8B,GAAG,IAAA,oBAAM,EAAC;IACnD,aAAa,EAAE,IAAA,oBAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,kBAAkB,CAAC;IACnD,YAAY,EAAE,IAAA,mBAAK,EAAC,iBAAiB,CAAC;CACvC,CAAC,CAAC","sourcesContent":["import {\n  object,\n  string,\n  record,\n  optional,\n  union,\n  array,\n  Infer,\n} from 'superstruct';\n\nimport { ChecksumStruct } from './manifest';\nimport { SnapId } from './types';\nimport { SemVerVersion, VersionRangeStruct, VersionStruct } from './versions';\n\nexport type SnapRegistryInfo = { version: SemVerVersion; checksum: string };\nexport type SnapRegistryRequest = Record<SnapId, SnapRegistryInfo>;\n\n// TODO: Decide on names for these\nexport enum SnapRegistryStatus {\n  Unverified,\n  Blocked,\n  Verified,\n}\n\nexport type SnapRegistryBlockReason = Infer<typeof BlockReasonStruct>;\n\nexport type SnapRegistryResult = {\n  status: SnapRegistryStatus;\n  reason?: SnapRegistryBlockReason;\n};\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface SnapRegistry {\n  get(snaps: SnapRegistryRequest): Promise<Record<SnapId, SnapRegistryResult>>;\n}\n\nconst VerifiedSnapVersionStruct = object({\n  checksum: ChecksumStruct,\n});\n\nconst VerifiedSnapStruct = object({\n  id: string(),\n  versions: record(VersionStruct, VerifiedSnapVersionStruct),\n});\n\nconst BlockReasonStruct = object({\n  explanation: optional(string()),\n  url: optional(string()),\n});\n\nconst BlockedSnapStruct = union([\n  object({\n    id: string(),\n    versionRange: VersionRangeStruct,\n    reason: optional(BlockReasonStruct),\n  }),\n  object({ checksum: ChecksumStruct, reason: optional(BlockReasonStruct) }),\n]);\n\nexport const JsonSnapRegistryDatabaseStruct = object({\n  verifiedSnaps: record(string(), VerifiedSnapStruct),\n  blockedSnaps: array(BlockedSnapStruct),\n});\n\nexport type JsonSnapRegistryDatabase = Infer<\n  typeof JsonSnapRegistryDatabaseStruct\n>;\n"]}
\ No newline at end of file
diff --git a/dist/snaps.d.ts b/dist/snaps.d.ts
index 12660d7ece4a52722ff17eb556519f305889b937..55923917ef1e7c7e2dec60baf82e8709b8f376e1 100644
--- a/dist/snaps.d.ts
+++ b/dist/snaps.d.ts
@@ -2,6 +2,7 @@ import { Json } from '@metamask/utils';
 import { SerializedEthereumRpcError } from 'eth-rpc-errors/dist/classes';
 import { Struct } from 'superstruct';
 import { SnapManifest, SnapPermissions } from './manifest/validation';
+import { SnapRegistryBlockReason } from './registry';
 import { SnapId, SnapIdPrefixes, SnapValidationFailureReason } from './types';
 import { SemVerVersion } from './versions';
 export declare const SNAP_PREFIX = "wallet_snap_";
@@ -15,10 +16,6 @@ export declare const PROPOSED_NAME_REGEX: RegExp;
 export declare type RequestedSnapPermissions = {
     [permission: string]: Record<string, Json>;
 };
-export declare type BlockedSnapInfo = {
-    infoUrl?: string;
-    reason?: string;
-};
 export declare enum SnapStatus {
     Installing = "installing",
     Updating = "updating",
@@ -82,7 +79,7 @@ export declare type Snap = {
     /**
      * Information detailing why the snap is blocked.
      */
-    blockInformation?: BlockedSnapInfo;
+    blockInformation?: SnapRegistryBlockReason;
     /**
      * The name of the permission used to invoke the Snap.
      */
diff --git a/dist/snaps.js.map b/dist/snaps.js.map
index 41b13009489c36e4554d15306fcf5c96a1c4e4a0..7465b55104301ae8980f9d9d4ea12f39a3ca4527 100644
--- a/dist/snaps.js.map
+++ b/dist/snaps.js.map
@@ -1 +1 @@
-{"version":3,"file":"snaps.js","sourceRoot":"","sources":["../src/snaps.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert, Json } from '@metamask/utils';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { base64 } from '@scure/base';\nimport { SerializedEthereumRpcError } from 'eth-rpc-errors/dist/classes';\nimport {\n  empty,\n  enums,\n  intersection,\n  literal,\n  refine,\n  string,\n  Struct,\n  validate,\n} from 'superstruct';\nimport validateNPMPackage from 'validate-npm-package-name';\n\nimport { SnapManifest, SnapPermissions } from './manifest/validation';\nimport {\n  SnapId,\n  SnapIdPrefixes,\n  SnapValidationFailureReason,\n  uri,\n} from './types';\nimport { SemVerVersion } from './versions';\n\nexport const SNAP_PREFIX = 'wallet_snap_';\n\nexport const SNAP_PREFIX_REGEX = new RegExp(`^${SNAP_PREFIX}`, 'u');\n\n// This RegEx matches valid npm package names (with some exceptions) and space-\n// separated alphanumerical words, optionally with dashes and underscores.\n// The RegEx consists of two parts. The first part matches space-separated\n// words. It is based on the following Stackoverflow answer:\n// https://stackoverflow.com/a/34974982\n// The second part, after the pipe operator, is the same RegEx used for the\n// `name` field of the official package.json JSON Schema, except that we allow\n// mixed-case letters. It was originally copied from:\n// https://github.com/SchemaStore/schemastore/blob/81a16897c1dabfd98c72242a5fd62eb080ff76d8/src/schemas/json/package.json#L132-L138\nexport const PROPOSED_NAME_REGEX =\n  /^(?:[A-Za-z0-9-_]+( [A-Za-z0-9-_]+)*)|(?:(?:@[A-Za-z0-9-*~][A-Za-z0-9-*._~]*\\/)?[A-Za-z0-9-~][A-Za-z0-9-._~]*)$/u;\n\n/**\n * wallet_enable / wallet_installSnaps permission typing.\n *\n * @deprecated This type is confusing and not descriptive, people confused it with typing initialPermissions, remove when removing wallet_enable.\n */\nexport type RequestedSnapPermissions = {\n  [permission: string]: Record<string, Json>;\n};\n\nexport type BlockedSnapInfo = { infoUrl?: string; reason?: string };\n\nexport enum SnapStatus {\n  Installing = 'installing',\n  Updating = 'updating',\n  Running = 'running',\n  Stopped = 'stopped',\n  Crashed = 'crashed',\n}\n\nexport enum SnapStatusEvents {\n  Start = 'START',\n  Stop = 'STOP',\n  Crash = 'CRASH',\n  Update = 'UPDATE',\n}\n\nexport type StatusContext = { snapId: string };\nexport type StatusEvents = { type: SnapStatusEvents };\nexport type StatusStates = {\n  value: SnapStatus;\n  context: StatusContext;\n};\nexport type Status = StatusStates['value'];\n\nexport type VersionHistory = {\n  origin: string;\n  version: string;\n  // Unix timestamp\n  date: number;\n};\n\nexport type PersistedSnap = Snap & {\n  /**\n   * The source code of the Snap.\n   */\n  sourceCode: string;\n};\n\n/**\n * A Snap as it exists in {@link SnapController} state.\n */\nexport type Snap = {\n  /**\n   * Whether the Snap is enabled, which determines if it can be started.\n   */\n  enabled: boolean;\n\n  /**\n   * The ID of the Snap.\n   */\n  id: SnapId;\n\n  /**\n   * The initial permissions of the Snap, which will be requested when it is\n   * installed.\n   */\n  initialPermissions: SnapPermissions;\n\n  /**\n   * The Snap's manifest file.\n   */\n  manifest: SnapManifest;\n\n  /**\n   * Whether the Snap is blocked.\n   */\n  blocked: boolean;\n\n  /**\n   * Information detailing why the snap is blocked.\n   */\n  blockInformation?: BlockedSnapInfo;\n\n  /**\n   * The name of the permission used to invoke the Snap.\n   */\n  permissionName: string;\n\n  /**\n   * The current status of the Snap, e.g. whether it's running or stopped.\n   */\n  status: Status;\n\n  /**\n   * The version of the Snap.\n   */\n  version: SemVerVersion;\n\n  /**\n   * The version history of the Snap.\n   * Can be used to derive when the Snap was installed, when it was updated to a certain version and who requested the change.\n   */\n  versionHistory: VersionHistory[];\n};\n\nexport type TruncatedSnapFields =\n  | 'id'\n  | 'initialPermissions'\n  | 'permissionName'\n  | 'version'\n  | 'enabled'\n  | 'blocked';\n\n/**\n * A {@link Snap} object with the fields that are relevant to an external\n * caller.\n */\nexport type TruncatedSnap = Pick<Snap, TruncatedSnapFields>;\n\nexport type ProcessSnapResult =\n  | TruncatedSnap\n  | { error: SerializedEthereumRpcError };\n\nexport type InstallSnapsResult = Record<SnapId, ProcessSnapResult>;\n\n/**\n * An error indicating that a Snap validation failure is programmatically\n * fixable during development.\n */\nexport class ProgrammaticallyFixableSnapError extends Error {\n  reason: SnapValidationFailureReason;\n\n  constructor(message: string, reason: SnapValidationFailureReason) {\n    super(message);\n    this.reason = reason;\n  }\n}\n\n/**\n * Calculates the Base64-encoded SHA-256 digest of a Snap source code string.\n *\n * @param sourceCode - The UTF-8 string source code of a Snap.\n * @returns The Base64-encoded SHA-256 digest of the source code.\n */\nexport function getSnapSourceShasum(sourceCode: string): string {\n  return base64.encode(sha256(sourceCode));\n}\n\nexport type ValidatedSnapId = `local:${string}` | `npm:${string}`;\n\n/**\n * Checks whether the `source.shasum` property of a Snap manifest matches the\n * shasum of a snap source code string.\n *\n * @param manifest - The manifest whose shasum to validate.\n * @param sourceCode - The source code of the snap.\n * @param errorMessage - The error message to throw if validation fails.\n */\nexport function validateSnapShasum(\n  manifest: SnapManifest,\n  sourceCode: string,\n  errorMessage = 'Invalid Snap manifest: manifest shasum does not match computed shasum.',\n): void {\n  if (manifest.source.shasum !== getSnapSourceShasum(sourceCode)) {\n    throw new ProgrammaticallyFixableSnapError(\n      errorMessage,\n      SnapValidationFailureReason.ShasumMismatch,\n    );\n  }\n}\n\nexport const LOCALHOST_HOSTNAMES = ['localhost', '127.0.0.1', '[::1]'] as const;\n\nconst LocalSnapIdSubUrlStruct = uri({\n  protocol: enums(['http:', 'https:']),\n  hostname: enums(LOCALHOST_HOSTNAMES),\n  hash: empty(string()),\n  search: empty(string()),\n});\nexport const LocalSnapIdStruct = refine(string(), 'local Snap Id', (value) => {\n  if (!value.startsWith(SnapIdPrefixes.local)) {\n    return `Expected local Snap ID, got \"${value}\".`;\n  }\n\n  const [error] = validate(\n    value.slice(SnapIdPrefixes.local.length),\n    LocalSnapIdSubUrlStruct,\n  );\n  return error ?? true;\n});\nexport const NpmSnapIdStruct = intersection([\n  string(),\n  uri({\n    protocol: literal(SnapIdPrefixes.npm),\n    pathname: refine(string(), 'package name', function* (value) {\n      const normalized = value.startsWith('/') ? value.slice(1) : value;\n      const { errors, validForNewPackages, warnings } =\n        validateNPMPackage(normalized);\n      if (!validForNewPackages) {\n        if (errors === undefined) {\n          assert(warnings !== undefined);\n          yield* warnings;\n        } else {\n          yield* errors;\n        }\n      }\n      return true;\n    }),\n    search: empty(string()),\n    hash: empty(string()),\n  }),\n]) as unknown as Struct<string, null>;\n\nexport const HttpSnapIdStruct = intersection([\n  string(),\n  uri({\n    protocol: enums(['http:', 'https:']),\n    search: empty(string()),\n    hash: empty(string()),\n  }),\n]) as unknown as Struct<string, null>;\n\n/**\n * Extracts the snap prefix from a snap ID.\n *\n * @param snapId - The snap ID to extract the prefix from.\n * @returns The snap prefix from a snap id, e.g. `npm:`.\n */\nexport function getSnapPrefix(snapId: string): SnapIdPrefixes {\n  const prefix = Object.values(SnapIdPrefixes).find((possiblePrefix) =>\n    snapId.startsWith(possiblePrefix),\n  );\n  if (prefix !== undefined) {\n    return prefix;\n  }\n  throw new Error(`Invalid or no prefix found for \"${snapId}\"`);\n}\n\n/**\n * Computes the permission name of a snap from its snap ID.\n *\n * @param snapId - The snap ID.\n * @returns The permission name corresponding to the given snap ID.\n */\nexport function getSnapPermissionName(snapId: string): string {\n  return SNAP_PREFIX + snapId;\n}\n\n/**\n * Asserts the provided object is a snapId with a supported prefix.\n *\n * @param snapId - The object to validate.\n * @throws {@link Error}. If the validation fails.\n */\nexport function validateSnapId(\n  snapId: unknown,\n): asserts snapId is ValidatedSnapId {\n  if (!snapId || typeof snapId !== 'string') {\n    throw new Error(`Invalid snap id. Not a string.`);\n  }\n\n  for (const prefix of Object.values(SnapIdPrefixes)) {\n    if (snapId.startsWith(prefix) && snapId.replace(prefix, '').length > 0) {\n      return;\n    }\n  }\n\n  throw new Error(`Invalid snap id. Unknown prefix. Received: \"${snapId}\".`);\n}\n\n/**\n * Typeguard to ensure a chainId follows the CAIP-2 standard.\n *\n * @param chainId - The chainId being tested.\n * @returns `true` if the value is a valid CAIP chain id, and `false` otherwise.\n */\nexport function isCaipChainId(chainId: unknown): chainId is string {\n  return (\n    typeof chainId === 'string' &&\n    /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})$/u.test(\n      chainId,\n    )\n  );\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"snaps.js","sourceRoot":"","sources":["../src/snaps.ts"],"names":[],"mappings":";;;;;;AAAA,2CAA+C;AAC/C,iDAA8C;AAC9C,sCAAqC;AAErC,6CASqB;AACrB,0FAA2D;AAI3D,mCAKiB;AAGJ,QAAA,WAAW,GAAG,cAAc,CAAC;AAE7B,QAAA,iBAAiB,GAAG,IAAI,MAAM,CAAC,IAAI,mBAAW,EAAE,EAAE,GAAG,CAAC,CAAC;AAEpE,+EAA+E;AAC/E,0EAA0E;AAC1E,0EAA0E;AAC1E,4DAA4D;AAC5D,uCAAuC;AACvC,2EAA2E;AAC3E,8EAA8E;AAC9E,qDAAqD;AACrD,mIAAmI;AACtH,QAAA,mBAAmB,GAC9B,kHAAkH,CAAC;AAWrH,IAAY,UAMX;AAND,WAAY,UAAU;IACpB,uCAAyB,CAAA;IACzB,mCAAqB,CAAA;IACrB,iCAAmB,CAAA;IACnB,iCAAmB,CAAA;IACnB,iCAAmB,CAAA;AACrB,CAAC,EANW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAMrB;AAED,IAAY,gBAKX;AALD,WAAY,gBAAgB;IAC1B,mCAAe,CAAA;IACf,iCAAa,CAAA;IACb,mCAAe,CAAA;IACf,qCAAiB,CAAA;AACnB,CAAC,EALW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAK3B;AAqGD;;;GAGG;AACH,MAAa,gCAAiC,SAAQ,KAAK;IAGzD,YAAY,OAAe,EAAE,MAAmC;QAC9D,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;CACF;AAPD,4EAOC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,UAAkB;IACpD,OAAO,aAAM,CAAC,MAAM,CAAC,IAAA,eAAM,EAAC,UAAU,CAAC,CAAC,CAAC;AAC3C,CAAC;AAFD,kDAEC;AAID;;;;;;;GAOG;AACH,SAAgB,kBAAkB,CAChC,QAAsB,EACtB,UAAkB,EAClB,YAAY,GAAG,wEAAwE;IAEvF,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,KAAK,mBAAmB,CAAC,UAAU,CAAC,EAAE;QAC9D,MAAM,IAAI,gCAAgC,CACxC,YAAY,EACZ,mCAA2B,CAAC,cAAc,CAC3C,CAAC;KACH;AACH,CAAC;AAXD,gDAWC;AAEY,QAAA,mBAAmB,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,CAAU,CAAC;AAEhF,MAAM,uBAAuB,GAAG,IAAA,WAAG,EAAC;IAClC,QAAQ,EAAE,IAAA,mBAAK,EAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACpC,QAAQ,EAAE,IAAA,mBAAK,EAAC,2BAAmB,CAAC;IACpC,IAAI,EAAE,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC;IACrB,MAAM,EAAE,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC;CACxB,CAAC,CAAC;AACU,QAAA,iBAAiB,GAAG,IAAA,oBAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE;IAC3E,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,sBAAc,CAAC,KAAK,CAAC,EAAE;QAC3C,OAAO,gCAAgC,KAAK,IAAI,CAAC;KAClD;IAED,MAAM,CAAC,KAAK,CAAC,GAAG,IAAA,sBAAQ,EACtB,KAAK,CAAC,KAAK,CAAC,sBAAc,CAAC,KAAK,CAAC,MAAM,CAAC,EACxC,uBAAuB,CACxB,CAAC;IACF,OAAO,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC;AACvB,CAAC,CAAC,CAAC;AACU,QAAA,eAAe,GAAG,IAAA,0BAAY,EAAC;IAC1C,IAAA,oBAAM,GAAE;IACR,IAAA,WAAG,EAAC;QACF,QAAQ,EAAE,IAAA,qBAAO,EAAC,sBAAc,CAAC,GAAG,CAAC;QACrC,QAAQ,EAAE,IAAA,oBAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,cAAc,EAAE,QAAQ,CAAC,EAAE,KAAK;YACzD,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAClE,MAAM,EAAE,MAAM,EAAE,mBAAmB,EAAE,QAAQ,EAAE,GAC7C,IAAA,mCAAkB,EAAC,UAAU,CAAC,CAAC;YACjC,IAAI,CAAC,mBAAmB,EAAE;gBACxB,IAAI,MAAM,KAAK,SAAS,EAAE;oBACxB,IAAA,cAAM,EAAC,QAAQ,KAAK,SAAS,CAAC,CAAC;oBAC/B,KAAK,CAAC,CAAC,QAAQ,CAAC;iBACjB;qBAAM;oBACL,KAAK,CAAC,CAAC,MAAM,CAAC;iBACf;aACF;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QACF,MAAM,EAAE,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC;QACvB,IAAI,EAAE,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC;KACtB,CAAC;CACH,CAAoC,CAAC;AAEzB,QAAA,gBAAgB,GAAG,IAAA,0BAAY,EAAC;IAC3C,IAAA,oBAAM,GAAE;IACR,IAAA,WAAG,EAAC;QACF,QAAQ,EAAE,IAAA,mBAAK,EAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACpC,MAAM,EAAE,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC;QACvB,IAAI,EAAE,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC;KACtB,CAAC;CACH,CAAoC,CAAC;AAEtC;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,MAAc;IAC1C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,sBAAc,CAAC,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,EAAE,CACnE,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAClC,CAAC;IACF,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,OAAO,MAAM,CAAC;KACf;IACD,MAAM,IAAI,KAAK,CAAC,mCAAmC,MAAM,GAAG,CAAC,CAAC;AAChE,CAAC;AARD,sCAQC;AAED;;;;;GAKG;AACH,SAAgB,qBAAqB,CAAC,MAAc;IAClD,OAAO,mBAAW,GAAG,MAAM,CAAC;AAC9B,CAAC;AAFD,sDAEC;AAED;;;;;GAKG;AACH,SAAgB,cAAc,CAC5B,MAAe;IAEf,IAAI,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QACzC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;KACnD;IAED,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,sBAAc,CAAC,EAAE;QAClD,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACtE,OAAO;SACR;KACF;IAED,MAAM,IAAI,KAAK,CAAC,+CAA+C,MAAM,IAAI,CAAC,CAAC;AAC7E,CAAC;AAdD,wCAcC;AAED;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,OAAgB;IAC5C,OAAO,CACL,OAAO,OAAO,KAAK,QAAQ;QAC3B,kEAAkE,CAAC,IAAI,CACrE,OAAO,CACR,CACF,CAAC;AACJ,CAAC;AAPD,sCAOC","sourcesContent":["import { assert, Json } from '@metamask/utils';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { base64 } from '@scure/base';\nimport { SerializedEthereumRpcError } from 'eth-rpc-errors/dist/classes';\nimport {\n  empty,\n  enums,\n  intersection,\n  literal,\n  refine,\n  string,\n  Struct,\n  validate,\n} from 'superstruct';\nimport validateNPMPackage from 'validate-npm-package-name';\n\nimport { SnapManifest, SnapPermissions } from './manifest/validation';\nimport { SnapRegistryBlockReason } from './registry';\nimport {\n  SnapId,\n  SnapIdPrefixes,\n  SnapValidationFailureReason,\n  uri,\n} from './types';\nimport { SemVerVersion } from './versions';\n\nexport const SNAP_PREFIX = 'wallet_snap_';\n\nexport const SNAP_PREFIX_REGEX = new RegExp(`^${SNAP_PREFIX}`, 'u');\n\n// This RegEx matches valid npm package names (with some exceptions) and space-\n// separated alphanumerical words, optionally with dashes and underscores.\n// The RegEx consists of two parts. The first part matches space-separated\n// words. It is based on the following Stackoverflow answer:\n// https://stackoverflow.com/a/34974982\n// The second part, after the pipe operator, is the same RegEx used for the\n// `name` field of the official package.json JSON Schema, except that we allow\n// mixed-case letters. It was originally copied from:\n// https://github.com/SchemaStore/schemastore/blob/81a16897c1dabfd98c72242a5fd62eb080ff76d8/src/schemas/json/package.json#L132-L138\nexport const PROPOSED_NAME_REGEX =\n  /^(?:[A-Za-z0-9-_]+( [A-Za-z0-9-_]+)*)|(?:(?:@[A-Za-z0-9-*~][A-Za-z0-9-*._~]*\\/)?[A-Za-z0-9-~][A-Za-z0-9-._~]*)$/u;\n\n/**\n * wallet_enable / wallet_installSnaps permission typing.\n *\n * @deprecated This type is confusing and not descriptive, people confused it with typing initialPermissions, remove when removing wallet_enable.\n */\nexport type RequestedSnapPermissions = {\n  [permission: string]: Record<string, Json>;\n};\n\nexport enum SnapStatus {\n  Installing = 'installing',\n  Updating = 'updating',\n  Running = 'running',\n  Stopped = 'stopped',\n  Crashed = 'crashed',\n}\n\nexport enum SnapStatusEvents {\n  Start = 'START',\n  Stop = 'STOP',\n  Crash = 'CRASH',\n  Update = 'UPDATE',\n}\n\nexport type StatusContext = { snapId: string };\nexport type StatusEvents = { type: SnapStatusEvents };\nexport type StatusStates = {\n  value: SnapStatus;\n  context: StatusContext;\n};\nexport type Status = StatusStates['value'];\n\nexport type VersionHistory = {\n  origin: string;\n  version: string;\n  // Unix timestamp\n  date: number;\n};\n\nexport type PersistedSnap = Snap & {\n  /**\n   * The source code of the Snap.\n   */\n  sourceCode: string;\n};\n\n/**\n * A Snap as it exists in {@link SnapController} state.\n */\nexport type Snap = {\n  /**\n   * Whether the Snap is enabled, which determines if it can be started.\n   */\n  enabled: boolean;\n\n  /**\n   * The ID of the Snap.\n   */\n  id: SnapId;\n\n  /**\n   * The initial permissions of the Snap, which will be requested when it is\n   * installed.\n   */\n  initialPermissions: SnapPermissions;\n\n  /**\n   * The Snap's manifest file.\n   */\n  manifest: SnapManifest;\n\n  /**\n   * Whether the Snap is blocked.\n   */\n  blocked: boolean;\n\n  /**\n   * Information detailing why the snap is blocked.\n   */\n  blockInformation?: SnapRegistryBlockReason;\n\n  /**\n   * The name of the permission used to invoke the Snap.\n   */\n  permissionName: string;\n\n  /**\n   * The current status of the Snap, e.g. whether it's running or stopped.\n   */\n  status: Status;\n\n  /**\n   * The version of the Snap.\n   */\n  version: SemVerVersion;\n\n  /**\n   * The version history of the Snap.\n   * Can be used to derive when the Snap was installed, when it was updated to a certain version and who requested the change.\n   */\n  versionHistory: VersionHistory[];\n};\n\nexport type TruncatedSnapFields =\n  | 'id'\n  | 'initialPermissions'\n  | 'permissionName'\n  | 'version'\n  | 'enabled'\n  | 'blocked';\n\n/**\n * A {@link Snap} object with the fields that are relevant to an external\n * caller.\n */\nexport type TruncatedSnap = Pick<Snap, TruncatedSnapFields>;\n\nexport type ProcessSnapResult =\n  | TruncatedSnap\n  | { error: SerializedEthereumRpcError };\n\nexport type InstallSnapsResult = Record<SnapId, ProcessSnapResult>;\n\n/**\n * An error indicating that a Snap validation failure is programmatically\n * fixable during development.\n */\nexport class ProgrammaticallyFixableSnapError extends Error {\n  reason: SnapValidationFailureReason;\n\n  constructor(message: string, reason: SnapValidationFailureReason) {\n    super(message);\n    this.reason = reason;\n  }\n}\n\n/**\n * Calculates the Base64-encoded SHA-256 digest of a Snap source code string.\n *\n * @param sourceCode - The UTF-8 string source code of a Snap.\n * @returns The Base64-encoded SHA-256 digest of the source code.\n */\nexport function getSnapSourceShasum(sourceCode: string): string {\n  return base64.encode(sha256(sourceCode));\n}\n\nexport type ValidatedSnapId = `local:${string}` | `npm:${string}`;\n\n/**\n * Checks whether the `source.shasum` property of a Snap manifest matches the\n * shasum of a snap source code string.\n *\n * @param manifest - The manifest whose shasum to validate.\n * @param sourceCode - The source code of the snap.\n * @param errorMessage - The error message to throw if validation fails.\n */\nexport function validateSnapShasum(\n  manifest: SnapManifest,\n  sourceCode: string,\n  errorMessage = 'Invalid Snap manifest: manifest shasum does not match computed shasum.',\n): void {\n  if (manifest.source.shasum !== getSnapSourceShasum(sourceCode)) {\n    throw new ProgrammaticallyFixableSnapError(\n      errorMessage,\n      SnapValidationFailureReason.ShasumMismatch,\n    );\n  }\n}\n\nexport const LOCALHOST_HOSTNAMES = ['localhost', '127.0.0.1', '[::1]'] as const;\n\nconst LocalSnapIdSubUrlStruct = uri({\n  protocol: enums(['http:', 'https:']),\n  hostname: enums(LOCALHOST_HOSTNAMES),\n  hash: empty(string()),\n  search: empty(string()),\n});\nexport const LocalSnapIdStruct = refine(string(), 'local Snap Id', (value) => {\n  if (!value.startsWith(SnapIdPrefixes.local)) {\n    return `Expected local Snap ID, got \"${value}\".`;\n  }\n\n  const [error] = validate(\n    value.slice(SnapIdPrefixes.local.length),\n    LocalSnapIdSubUrlStruct,\n  );\n  return error ?? true;\n});\nexport const NpmSnapIdStruct = intersection([\n  string(),\n  uri({\n    protocol: literal(SnapIdPrefixes.npm),\n    pathname: refine(string(), 'package name', function* (value) {\n      const normalized = value.startsWith('/') ? value.slice(1) : value;\n      const { errors, validForNewPackages, warnings } =\n        validateNPMPackage(normalized);\n      if (!validForNewPackages) {\n        if (errors === undefined) {\n          assert(warnings !== undefined);\n          yield* warnings;\n        } else {\n          yield* errors;\n        }\n      }\n      return true;\n    }),\n    search: empty(string()),\n    hash: empty(string()),\n  }),\n]) as unknown as Struct<string, null>;\n\nexport const HttpSnapIdStruct = intersection([\n  string(),\n  uri({\n    protocol: enums(['http:', 'https:']),\n    search: empty(string()),\n    hash: empty(string()),\n  }),\n]) as unknown as Struct<string, null>;\n\n/**\n * Extracts the snap prefix from a snap ID.\n *\n * @param snapId - The snap ID to extract the prefix from.\n * @returns The snap prefix from a snap id, e.g. `npm:`.\n */\nexport function getSnapPrefix(snapId: string): SnapIdPrefixes {\n  const prefix = Object.values(SnapIdPrefixes).find((possiblePrefix) =>\n    snapId.startsWith(possiblePrefix),\n  );\n  if (prefix !== undefined) {\n    return prefix;\n  }\n  throw new Error(`Invalid or no prefix found for \"${snapId}\"`);\n}\n\n/**\n * Computes the permission name of a snap from its snap ID.\n *\n * @param snapId - The snap ID.\n * @returns The permission name corresponding to the given snap ID.\n */\nexport function getSnapPermissionName(snapId: string): string {\n  return SNAP_PREFIX + snapId;\n}\n\n/**\n * Asserts the provided object is a snapId with a supported prefix.\n *\n * @param snapId - The object to validate.\n * @throws {@link Error}. If the validation fails.\n */\nexport function validateSnapId(\n  snapId: unknown,\n): asserts snapId is ValidatedSnapId {\n  if (!snapId || typeof snapId !== 'string') {\n    throw new Error(`Invalid snap id. Not a string.`);\n  }\n\n  for (const prefix of Object.values(SnapIdPrefixes)) {\n    if (snapId.startsWith(prefix) && snapId.replace(prefix, '').length > 0) {\n      return;\n    }\n  }\n\n  throw new Error(`Invalid snap id. Unknown prefix. Received: \"${snapId}\".`);\n}\n\n/**\n * Typeguard to ensure a chainId follows the CAIP-2 standard.\n *\n * @param chainId - The chainId being tested.\n * @returns `true` if the value is a valid CAIP chain id, and `false` otherwise.\n */\nexport function isCaipChainId(chainId: unknown): chainId is string {\n  return (\n    typeof chainId === 'string' &&\n    /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})$/u.test(\n      chainId,\n    )\n  );\n}\n"]}
\ No newline at end of file
