diff --git a/dist/TransactionController.d.ts b/dist/TransactionController.d.ts
index c6885975354d86f8907605de8971b4b22fe4f14a..0c361f1ea42421ededf9865ea27bc239b8600a61 100644
--- a/dist/TransactionController.d.ts
+++ b/dist/TransactionController.d.ts
@@ -8,7 +8,7 @@ import type { GasFeeState } from '@metamask/gas-fee-controller';
 import type { BlockTracker, NetworkState, Provider } from '@metamask/network-controller';
 import type { Hex } from '@metamask/utils';
 import { EventEmitter } from 'events';
-import type { NonceLock } from 'nonce-tracker/dist/NonceTracker';
+import type { NonceLock } from 'nonce-tracker';
 import type { Events, SavedGasFees, SecurityProviderRequest, SendFlowHistoryEntry, TransactionParams, TransactionMeta, TransactionReceipt, WalletDevice, SecurityAlertResponse } from './types';
 import { TransactionType, TransactionStatus } from './types';
 export declare const HARDFORK = Hardfork.London;
@@ -174,7 +174,7 @@ export declare class TransactionController extends BaseController<TransactionCon
         disableSendFlowHistory: boolean;
         disableSwaps: boolean;
         getSavedGasFees?: (chainId: Hex) => SavedGasFees | undefined;
-        getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;
+        getCurrentAccountEIP1559Compatibility?: () => Promise<boolean>;
         getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;
         getGasFeeEstimates?: () => Promise<GasFeeState>;
         getNetworkState: () => NetworkState;
@@ -402,6 +402,27 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.
      */
     getNonceLock(address: string): Promise<NonceLock>;
+    /**
+     * Updates the editable parameters of a transaction.
+     *
+     * @param txId - The ID of the transaction to update.
+     * @param params - The editable parameters to update.
+     * @param params.data - Data to pass with the transaction.
+     * @param params.gas - Maximum number of units of gas to use for the transaction.
+     * @param params.gasPrice - Price per gas for legacy transactions.
+     * @param params.from - Address to send the transaction from.
+     * @param params.to - Address to send the transaction to.
+     * @param params.value - Value associated with the transaction.
+     * @returns The updated transaction metadata.
+     */
+    updateEditableParams(txId: string, { data, gas, gasPrice, from, to, value, }: {
+        data?: string;
+        gas?: string;
+        gasPrice?: string;
+        from?: string;
+        to?: string;
+        value?: string;
+    }): Promise<TransactionMeta | undefined>;
     /**
      * Signs and returns the raw transaction data for provided transaction params list.
      *
@@ -414,17 +435,35 @@ export declare class TransactionController extends BaseController<TransactionCon
      *
      * @param transactionId - The ID of the transaction to update.
      * @param options - The custodial transaction options to update.
-     * @param options.custodyStatus - The new custody status value to be assigned.
      * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.
      * @param options.hash - The new hash value to be assigned.
      * @param options.status - The new status value to be assigned.
      */
-    updateCustodialTransaction(transactionId: string, { custodyStatus, errorMessage, hash, status, }: {
-        custodyStatus?: string;
+    updateCustodialTransaction(transactionId: string, { errorMessage, hash, status, }: {
         errorMessage?: string;
         hash?: string;
         status?: TransactionStatus;
     }): void;
+    /**
+     * Creates approvals for all unapproved transactions persisted.
+     */
+    initApprovals(): void;
+    /**
+     * Search transaction metadata for matching entries.
+     *
+     * @param opts - Options bag.
+     * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.
+     * @param opts.initialList - The transactions to search. Defaults to the current state.
+     * @param opts.filterToCurrentNetwork - Whether to filter the results to the current network. Defaults to true.
+     * @param opts.limit - The maximum number of transactions to return. No limit by default.
+     * @returns An array of transactions matching the provided options.
+     */
+    getTransactions({ searchCriteria, initialList, filterToCurrentNetwork, limit, }?: {
+        searchCriteria?: any;
+        initialList?: TransactionMeta[];
+        filterToCurrentNetwork?: boolean;
+        limit?: number;
+    }): TransactionMeta[];
     private signExternalTransaction;
     /**
      * Removes unapproved transactions from state.
@@ -438,10 +477,6 @@ export declare class TransactionController extends BaseController<TransactionCon
      * Create approvals for all unapproved transactions on current chain.
      */
     private createApprovalsForUnapprovedTransactions;
-    /**
-     * Update the gas values of all unapproved transactions on current chain.
-     */
-    private loadGasValuesForUnapprovedTransactions;
     /**
      * Force to submit approved transactions on current chain.
      */
@@ -551,6 +586,10 @@ export declare class TransactionController extends BaseController<TransactionCon
     private getEIP1559Compatibility;
     private addPendingTransactionTrackerListeners;
     private signTransaction;
+    private onTransactionStatusChange;
+    private getNonceTrackerTransactions;
+    private onConfirmedTransaction;
+    private updatePostBalance;
 }
-export default TransactionController;
+export {};
 //# sourceMappingURL=TransactionController.d.ts.map
\ No newline at end of file
diff --git a/dist/TransactionController.d.ts.map b/dist/TransactionController.d.ts.map
deleted file mode 100644
index 25152afbacb9738a753cb5e9d4259b2de8832ffb..0000000000000000000000000000000000000000
--- a/dist/TransactionController.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.d.ts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/TransactionController.js b/dist/TransactionController.js
index 48780bcd0e1e722dfa557b41a830588b8b11bef2..6bb1fa737d9b86f30875f69e73376fa113f05050 100644
--- a/dist/TransactionController.js
+++ b/dist/TransactionController.js
@@ -24,7 +24,7 @@ const eth_method_registry_1 = __importDefault(require("eth-method-registry"));
 const ethereumjs_util_1 = require("ethereumjs-util");
 const events_1 = require("events");
 const lodash_1 = require("lodash");
-const nonce_tracker_1 = __importDefault(require("nonce-tracker"));
+const nonce_tracker_1 = require("nonce-tracker");
 const uuid_1 = require("uuid");
 const EtherscanRemoteTransactionSource_1 = require("./helpers/EtherscanRemoteTransactionSource");
 const IncomingTransactionHelper_1 = require("./helpers/IncomingTransactionHelper");
@@ -123,7 +123,7 @@ class TransactionController extends base_controller_1.BaseController {
         this.registry = new eth_method_registry_1.default({ provider });
         this.getSavedGasFees = getSavedGasFees !== null && getSavedGasFees !== void 0 ? getSavedGasFees : ((_chainId) => undefined);
         this.getCurrentAccountEIP1559Compatibility =
-            getCurrentAccountEIP1559Compatibility;
+            getCurrentAccountEIP1559Compatibility !== null && getCurrentAccountEIP1559Compatibility !== void 0 ? getCurrentAccountEIP1559Compatibility : (() => Promise.resolve(true));
         this.getCurrentNetworkEIP1559Compatibility =
             getCurrentNetworkEIP1559Compatibility;
         this.getGasFeeEstimates =
@@ -140,11 +140,12 @@ class TransactionController extends base_controller_1.BaseController {
         this.beforePublish = (_d = hooks === null || hooks === void 0 ? void 0 : hooks.beforePublish) !== null && _d !== void 0 ? _d : (() => true);
         this.getAdditionalSignArguments =
             (_e = hooks === null || hooks === void 0 ? void 0 : hooks.getAdditionalSignArguments) !== null && _e !== void 0 ? _e : (() => []);
-        this.nonceTracker = new nonce_tracker_1.default({
+        this.nonceTracker = new nonce_tracker_1.NonceTracker({
+            // @ts-expect-error provider types misaligned: SafeEventEmitterProvider vs Record<string,string>
             provider,
             blockTracker,
-            getPendingTransactions: (address) => (0, utils_1.getAndFormatTransactionsForNonceTracker)(address, types_1.TransactionStatus.submitted, this.state.transactions),
-            getConfirmedTransactions: (address) => (0, utils_1.getAndFormatTransactionsForNonceTracker)(address, types_1.TransactionStatus.confirmed, this.state.transactions),
+            getPendingTransactions: this.getNonceTrackerTransactions.bind(this, types_1.TransactionStatus.submitted),
+            getConfirmedTransactions: this.getNonceTrackerTransactions.bind(this, types_1.TransactionStatus.confirmed),
         });
         this.incomingTransactionHelper = new IncomingTransactionHelper_1.IncomingTransactionHelper({
             blockTracker,
@@ -192,6 +193,7 @@ class TransactionController extends base_controller_1.BaseController {
             transactionMeta: newTransactionMeta,
         });
         this.updateTransaction(newTransactionMeta, 'TransactionController#failTransaction - Add error message and set status to failed');
+        this.onTransactionStatusChange(newTransactionMeta);
         this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);
     }
     registryLookup(fourBytePrefix) {
@@ -249,7 +251,7 @@ class TransactionController extends base_controller_1.BaseController {
      */
     addTransaction(txParams, { actionId, deviceConfirmedOn, method, origin, requireApproval, securityAlertResponse, sendFlowHistory, swaps = {}, type, } = {}) {
         return __awaiter(this, void 0, void 0, function* () {
-            const chainId = this.getChainId();
+            (0, logger_1.projectLogger)('Adding transaction', txParams);
             txParams = (0, utils_1.normalizeTxParams)(txParams);
             const isEIP1559Compatible = yield this.getEIP1559Compatibility();
             (0, validation_1.validateTxParams)(txParams, isEIP1559Compatible);
@@ -259,6 +261,7 @@ class TransactionController extends base_controller_1.BaseController {
             const dappSuggestedGasFees = this.generateDappSuggestedGasFees(txParams, origin);
             const transactionType = type !== null && type !== void 0 ? type : (yield (0, transaction_type_1.determineTransactionType)(txParams, this.ethQuery)).type;
             const existingTransactionMeta = this.getTransactionWithActionId(actionId);
+            const chainId = this.getChainId();
             // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.
             const transactionMeta = existingTransactionMeta || {
                 // Add actionId to txMeta to check if same actionId is seen again
@@ -338,6 +341,8 @@ class TransactionController extends base_controller_1.BaseController {
                 return;
             }
             if (gasValues) {
+                // Not good practice to reassign a parameter but temporarily avoiding a larger refactor.
+                gasValues = (0, utils_1.normalizeGasFeeValues)(gasValues);
                 (0, utils_1.validateGasValues)(gasValues);
             }
             const transactionMeta = this.getTransaction(transactionId);
@@ -373,7 +378,7 @@ class TransactionController extends base_controller_1.BaseController {
                     gasLimit: transactionMeta.txParams.gas,
                     maxFeePerGas: newMaxFeePerGas,
                     maxPriorityFeePerGas: newMaxPriorityFeePerGas,
-                    type: '2',
+                    type: types_1.TransactionEnvelopeType.feeMarket,
                     nonce: transactionMeta.txParams.nonce,
                     to: transactionMeta.txParams.from,
                     value: '0x0',
@@ -432,6 +437,8 @@ class TransactionController extends base_controller_1.BaseController {
                 return;
             }
             if (gasValues) {
+                // Not good practice to reassign a parameter but temporarily avoiding a larger refactor.
+                gasValues = (0, utils_1.normalizeGasFeeValues)(gasValues);
                 (0, utils_1.validateGasValues)(gasValues);
             }
             const transactionMeta = this.state.transactions.find(({ id }) => id === transactionId);
@@ -464,7 +471,7 @@ class TransactionController extends base_controller_1.BaseController {
                 (0, utils_1.validateMinimumIncrease)(maxPriorityFeePerGasValues, minMaxPriorityFeePerGas)) ||
                 (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);
             const txParams = newMaxFeePerGas && newMaxPriorityFeePerGas
-                ? Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, maxFeePerGas: newMaxFeePerGas, maxPriorityFeePerGas: newMaxPriorityFeePerGas, type: '2' }) : Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, gasPrice: newGasPrice });
+                ? Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, maxFeePerGas: newMaxFeePerGas, maxPriorityFeePerGas: newMaxPriorityFeePerGas, type: types_1.TransactionEnvelopeType.feeMarket }) : Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas, gasPrice: newGasPrice });
             const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
             const signedTx = yield this.sign(unsignedEthTx, transactionMeta.txParams.from);
             yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
@@ -606,29 +613,16 @@ class TransactionController extends base_controller_1.BaseController {
                 this.markNonceDuplicatesDropped(transactionId);
                 // Update external provided transaction with updated gas values and confirmed status.
                 this.updateTransaction(transactionMeta, 'TransactionController:confirmExternalTransaction - Add external transaction');
-                if (transactionMeta.type === types_1.TransactionType.swap) {
-                    (0, swaps_1.updatePostTransactionBalance)(transactionMeta, {
-                        ethQuery: this.ethQuery,
-                        getTransaction: this.getTransaction.bind(this),
-                        updateTransaction: this.updateTransaction.bind(this),
-                    })
-                        .then(({ updatedTransactionMeta, approvalTransactionMeta }) => {
-                        this.hub.emit('post-transaction-balance-updated', {
-                            transactionMeta: updatedTransactionMeta,
-                            approvalTransactionMeta,
-                        });
-                    })
-                        .catch((error) => {
-                        /* istanbul ignore next */
-                        (0, logger_1.projectLogger)('Error while updating post transaction balance', error);
-                    });
-                }
+                this.onTransactionStatusChange(transactionMeta);
+                // Intentional given potential duration of process.
+                // eslint-disable-next-line @typescript-eslint/no-floating-promises
+                this.updatePostBalance(transactionMeta);
                 this.hub.emit('transaction-confirmed', {
                     transactionMeta,
                 });
             }
             catch (error) {
-                console.error(error);
+                console.error('Failed to confirm external transaction', error);
             }
         });
     }
@@ -749,6 +743,44 @@ class TransactionController extends base_controller_1.BaseController {
             return this.nonceTracker.getNonceLock(address);
         });
     }
+    /**
+     * Updates the editable parameters of a transaction.
+     *
+     * @param txId - The ID of the transaction to update.
+     * @param params - The editable parameters to update.
+     * @param params.data - Data to pass with the transaction.
+     * @param params.gas - Maximum number of units of gas to use for the transaction.
+     * @param params.gasPrice - Price per gas for legacy transactions.
+     * @param params.from - Address to send the transaction from.
+     * @param params.to - Address to send the transaction to.
+     * @param params.value - Value associated with the transaction.
+     * @returns The updated transaction metadata.
+     */
+    updateEditableParams(txId, { data, gas, gasPrice, from, to, value, }) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const transactionMeta = this.getTransaction(txId);
+            if (!transactionMeta) {
+                throw new Error(`Cannot update editable params as no transaction metadata found`);
+            }
+            (0, utils_1.validateIfTransactionUnapproved)(transactionMeta, 'updateEditableParams');
+            const editableParams = {
+                txParams: {
+                    data,
+                    from,
+                    to,
+                    value,
+                    gas,
+                    gasPrice,
+                },
+            };
+            editableParams.txParams = (0, lodash_1.pickBy)(editableParams.txParams);
+            const updatedTransaction = (0, lodash_1.merge)(transactionMeta, editableParams);
+            const { type } = yield (0, transaction_type_1.determineTransactionType)(updatedTransaction.txParams, this.ethQuery);
+            updatedTransaction.type = type;
+            this.updateTransaction(updatedTransaction, `Update Editable Params for ${txId}`);
+            return this.getTransaction(txId);
+        });
+    }
     /**
      * Signs and returns the raw transaction data for provided transaction params list.
      *
@@ -801,14 +833,12 @@ class TransactionController extends base_controller_1.BaseController {
      *
      * @param transactionId - The ID of the transaction to update.
      * @param options - The custodial transaction options to update.
-     * @param options.custodyStatus - The new custody status value to be assigned.
      * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.
      * @param options.hash - The new hash value to be assigned.
      * @param options.status - The new status value to be assigned.
      */
-    updateCustodialTransaction(transactionId, { custodyStatus, errorMessage, hash, status, }) {
-        let transactionMeta;
-        transactionMeta = this.getTransaction(transactionId);
+    updateCustodialTransaction(transactionId, { errorMessage, hash, status, }) {
+        const transactionMeta = this.getTransaction(transactionId);
         if (!transactionMeta) {
             throw new Error(`Cannot update custodial transaction as no transaction metadata found`);
         }
@@ -823,23 +853,112 @@ class TransactionController extends base_controller_1.BaseController {
             ].includes(status)) {
             throw new Error(`Cannot update custodial transaction with status: ${status}`);
         }
-        if (status === types_1.TransactionStatus.signed) {
-            transactionMeta.status = status;
-        }
+        const updatedTransactionMeta = (0, lodash_1.merge)(transactionMeta, (0, lodash_1.pickBy)({ hash, status }));
         if (status === types_1.TransactionStatus.submitted) {
-            transactionMeta.submittedTime = new Date().getTime();
-            transactionMeta.status = status;
+            updatedTransactionMeta.submittedTime = new Date().getTime();
         }
         if (status === types_1.TransactionStatus.failed) {
-            transactionMeta = Object.assign(Object.assign({}, transactionMeta), { error: (0, utils_1.normalizeTxError)(new Error(errorMessage)), status: types_1.TransactionStatus.failed });
+            updatedTransactionMeta.error = (0, utils_1.normalizeTxError)(new Error(errorMessage));
         }
-        if (custodyStatus) {
-            transactionMeta.custodyStatus = custodyStatus;
+        this.updateTransaction(updatedTransactionMeta, `TransactionController:updateCustodialTransaction - Custodial transaction updated`);
+    }
+    /**
+     * Creates approvals for all unapproved transactions persisted.
+     */
+    initApprovals() {
+        const chainId = this.getChainId();
+        const unapprovedTxs = this.state.transactions.filter((transaction) => transaction.status === types_1.TransactionStatus.unapproved &&
+            transaction.chainId === chainId);
+        for (const txMeta of unapprovedTxs) {
+            this.processApproval(txMeta, {
+                shouldShowRequest: false,
+            }).catch((error) => {
+                if ((error === null || error === void 0 ? void 0 : error.code) === rpc_errors_1.errorCodes.provider.userRejectedRequest) {
+                    return;
+                }
+                console.error('Error during persisted transaction approval', error);
+            });
         }
-        if (hash) {
-            transactionMeta.hash = hash;
+    }
+    /**
+     * Search transaction metadata for matching entries.
+     *
+     * @param opts - Options bag.
+     * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.
+     * @param opts.initialList - The transactions to search. Defaults to the current state.
+     * @param opts.filterToCurrentNetwork - Whether to filter the results to the current network. Defaults to true.
+     * @param opts.limit - The maximum number of transactions to return. No limit by default.
+     * @returns An array of transactions matching the provided options.
+     */
+    getTransactions({ searchCriteria = {}, initialList, filterToCurrentNetwork = true, limit, } = {}) {
+        const chainId = this.getChainId();
+        // searchCriteria is an object that might have values that aren't predicate
+        // methods. When providing any other value type (string, number, etc), we
+        // consider this shorthand for "check the value at key for strict equality
+        // with the provided value". To conform this object to be only methods, we
+        // mapValues (lodash) such that every value on the object is a method that
+        // returns a boolean.
+        const predicateMethods = (0, lodash_1.mapValues)(searchCriteria, (predicate) => {
+            return typeof predicate === 'function'
+                ? predicate
+                : (v) => v === predicate;
+        });
+        const transactionsToFilter = initialList !== null && initialList !== void 0 ? initialList : this.state.transactions;
+        // Combine sortBy and pickBy to transform our state object into an array of
+        // matching transactions that are sorted by time.
+        const filteredTransactions = (0, lodash_1.sortBy)((0, lodash_1.pickBy)(transactionsToFilter, (transaction) => {
+            if (filterToCurrentNetwork && transaction.chainId !== chainId) {
+                return false;
+            }
+            // iterate over the predicateMethods keys to check if the transaction
+            // matches the searchCriteria
+            for (const [key, predicate] of Object.entries(predicateMethods)) {
+                // We return false early as soon as we know that one of the specified
+                // search criteria do not match the transaction. This prevents
+                // needlessly checking all criteria when we already know the criteria
+                // are not fully satisfied. We check both txParams and the base
+                // object as predicate keys can be either.
+                if (key in transaction.txParams) {
+                    if (predicate(transaction.txParams[key]) === false) {
+                        return false;
+                    }
+                }
+                else if (predicate(transaction[key]) === false) {
+                    return false;
+                }
+            }
+            return true;
+        }), 'time');
+        if (limit !== undefined) {
+            // We need to have all transactions of a given nonce in order to display
+            // necessary details in the UI. We use the size of this set to determine
+            // whether we have reached the limit provided, thus ensuring that all
+            // transactions of nonces we include will be sent to the UI.
+            const nonces = new Set();
+            const txs = [];
+            // By default, the transaction list we filter from is sorted by time ASC.
+            // To ensure that filtered results prefers the newest transactions we
+            // iterate from right to left, inserting transactions into front of a new
+            // array. The original order is preserved, but we ensure that newest txs
+            // are preferred.
+            for (let i = filteredTransactions.length - 1; i > -1; i--) {
+                const txMeta = filteredTransactions[i];
+                const { nonce } = txMeta.txParams;
+                if (!nonces.has(nonce)) {
+                    if (nonces.size < limit) {
+                        nonces.add(nonce);
+                    }
+                    else {
+                        continue;
+                    }
+                }
+                // Push transaction into the beginning of our array to ensure the
+                // original order is preserved.
+                txs.unshift(txMeta);
+            }
+            return txs;
         }
-        this.updateTransaction(transactionMeta, `TransactionController:updateCustodialTransaction - Custodial transaction updated`);
+        return filteredTransactions;
     }
     signExternalTransaction(transactionParams) {
         return __awaiter(this, void 0, void 0, function* () {
@@ -874,7 +993,8 @@ class TransactionController extends base_controller_1.BaseController {
     }
     updateGasProperties(transactionMeta) {
         return __awaiter(this, void 0, void 0, function* () {
-            const isEIP1559Compatible = yield this.getEIP1559Compatibility();
+            const isEIP1559Compatible = (yield this.getEIP1559Compatibility()) &&
+                transactionMeta.txParams.type !== types_1.TransactionEnvelopeType.legacy;
             const chainId = this.getChainId();
             yield (0, gas_1.updateGas)({
                 ethQuery: this.ethQuery,
@@ -895,8 +1015,6 @@ class TransactionController extends base_controller_1.BaseController {
         return this.state.transactions.filter((transaction) => transaction.status === status && transaction.chainId === chainId);
     }
     onBootCleanup() {
-        this.createApprovalsForUnapprovedTransactions();
-        this.loadGasValuesForUnapprovedTransactions();
         this.submitApprovedTransactions();
     }
     /**
@@ -916,26 +1034,6 @@ class TransactionController extends base_controller_1.BaseController {
             });
         }
     }
-    /**
-     * Update the gas values of all unapproved transactions on current chain.
-     */
-    loadGasValuesForUnapprovedTransactions() {
-        return __awaiter(this, void 0, void 0, function* () {
-            const unapprovedTransactions = this.getCurrentChainTransactionsByStatus(types_1.TransactionStatus.unapproved);
-            const results = yield Promise.allSettled(unapprovedTransactions.map((transactionMeta) => __awaiter(this, void 0, void 0, function* () {
-                yield this.updateGasProperties(transactionMeta);
-                this.updateTransaction(transactionMeta, 'TransactionController:loadGasValuesForUnapprovedTransactions - Gas values updated');
-            })));
-            for (const [index, result] of results.entries()) {
-                if (result.status === 'rejected') {
-                    const transactionMeta = unapprovedTransactions[index];
-                    this.failTransaction(transactionMeta, result.reason);
-                    /* istanbul ignore next */
-                    console.error('Error while loading gas values for persisted transaction id: ', transactionMeta.id, result.reason);
-                }
-            }
-        });
-    }
     /**
      * Force to submit approved transactions on current chain.
      */
@@ -965,6 +1063,13 @@ class TransactionController extends base_controller_1.BaseController {
                             shouldShowRequest,
                         });
                         resultCallbacks = acceptResult.resultCallbacks;
+                        if (resultCallbacks) {
+                            this.hub.once(`${transactionId}:publish-skip`, () => {
+                                resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.success();
+                                // Remove the reference to prevent additional reports once submitted.
+                                resultCallbacks = undefined;
+                            });
+                        }
                     }
                     const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);
                     if (!isTxCompleted) {
@@ -1036,7 +1141,6 @@ class TransactionController extends base_controller_1.BaseController {
                     (0, logger_1.projectLogger)('Skipping approval as signing in progress', transactionId);
                     return;
                 }
-                const { approved: status } = types_1.TransactionStatus;
                 let nonceToUse = nonce;
                 // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction
                 // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce
@@ -1044,23 +1148,19 @@ class TransactionController extends base_controller_1.BaseController {
                     nonceLock = yield this.nonceTracker.getNonceLock(from);
                     nonceToUse = (0, ethereumjs_util_1.addHexPrefix)(nonceLock.nextNonce.toString(16));
                 }
-                transactionMeta.status = status;
+                transactionMeta.status = types_1.TransactionStatus.approved;
                 transactionMeta.txParams.nonce = nonceToUse;
                 transactionMeta.txParams.chainId = chainId;
                 const baseTxParams = Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas });
                 this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction approved');
+                this.onTransactionStatusChange(transactionMeta);
                 const isEIP1559 = (0, utils_1.isEIP1559Transaction)(transactionMeta.txParams);
                 const txParams = isEIP1559
-                    ? Object.assign(Object.assign({}, baseTxParams), { maxFeePerGas: transactionMeta.txParams.maxFeePerGas, maxPriorityFeePerGas: transactionMeta.txParams.maxPriorityFeePerGas, estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee, 
-                        // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set
-                        type: '2' }) : baseTxParams;
-                // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set
-                if (isEIP1559) {
-                    delete txParams.gasPrice;
-                }
-                const rawTx = yield this.signTransaction(transactionMeta);
+                    ? Object.assign(Object.assign({}, baseTxParams), { estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee, type: types_1.TransactionEnvelopeType.feeMarket }) : baseTxParams;
+                const rawTx = yield this.signTransaction(transactionMeta, txParams);
                 if (!this.beforePublish(transactionMeta)) {
                     (0, logger_1.projectLogger)('Skipping publishing transaction based on hook');
+                    this.hub.emit(`${transactionMeta.id}:publish-skip`, transactionMeta);
                     return;
                 }
                 if (!rawTx) {
@@ -1070,11 +1170,12 @@ class TransactionController extends base_controller_1.BaseController {
                 transactionMeta.hash = hash;
                 transactionMeta.status = types_1.TransactionStatus.submitted;
                 transactionMeta.submittedTime = new Date().getTime();
+                this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction submitted');
                 this.hub.emit('transaction-submitted', {
                     transactionMeta,
                 });
-                this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction submitted');
                 this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
+                this.onTransactionStatusChange(transactionMeta);
             }
             catch (error) {
                 this.failTransaction(transactionMeta, error);
@@ -1107,13 +1208,14 @@ class TransactionController extends base_controller_1.BaseController {
             return;
         }
         transactionMeta.status = types_1.TransactionStatus.rejected;
+        const transactions = this.state.transactions.filter(({ id }) => id !== transactionId);
+        this.update({ transactions: this.trimTransactionsForState(transactions) });
         this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
         this.hub.emit('transaction-rejected', {
             transactionMeta,
             actionId,
         });
-        const transactions = this.state.transactions.filter(({ id }) => id !== transactionId);
-        this.update({ transactions: this.trimTransactionsForState(transactions) });
+        this.onTransactionStatusChange(transactionMeta);
     }
     /**
      * Trim the amount of transactions that are set on the state. Checks
@@ -1288,25 +1390,23 @@ class TransactionController extends base_controller_1.BaseController {
      */
     addExternalTransaction(transactionMeta) {
         var _a, _b;
-        return __awaiter(this, void 0, void 0, function* () {
-            const chainId = this.getChainId();
-            const { transactions } = this.state;
-            const fromAddress = (_a = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.txParams) === null || _a === void 0 ? void 0 : _a.from;
-            const sameFromAndNetworkTransactions = transactions.filter((transaction) => transaction.txParams.from === fromAddress &&
-                transaction.chainId === chainId);
-            const confirmedTxs = sameFromAndNetworkTransactions.filter((transaction) => transaction.status === types_1.TransactionStatus.confirmed);
-            const pendingTxs = sameFromAndNetworkTransactions.filter((transaction) => transaction.status === types_1.TransactionStatus.submitted);
-            (0, external_transactions_1.validateConfirmedExternalTransaction)(transactionMeta, confirmedTxs, pendingTxs);
-            // Make sure provided external transaction has non empty history array
-            if (!((_b = transactionMeta.history) !== null && _b !== void 0 ? _b : []).length) {
-                if (!this.isHistoryDisabled) {
-                    (0, history_1.addInitialHistorySnapshot)(transactionMeta);
-                }
+        const chainId = this.getChainId();
+        const { transactions } = this.state;
+        const fromAddress = (_a = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.txParams) === null || _a === void 0 ? void 0 : _a.from;
+        const sameFromAndNetworkTransactions = transactions.filter((transaction) => transaction.txParams.from === fromAddress &&
+            transaction.chainId === chainId);
+        const confirmedTxs = sameFromAndNetworkTransactions.filter((transaction) => transaction.status === types_1.TransactionStatus.confirmed);
+        const pendingTxs = sameFromAndNetworkTransactions.filter((transaction) => transaction.status === types_1.TransactionStatus.submitted);
+        (0, external_transactions_1.validateConfirmedExternalTransaction)(transactionMeta, confirmedTxs, pendingTxs);
+        // Make sure provided external transaction has non empty history array
+        if (!((_b = transactionMeta.history) !== null && _b !== void 0 ? _b : []).length) {
+            if (!this.isHistoryDisabled) {
+                (0, history_1.addInitialHistorySnapshot)(transactionMeta);
             }
-            const updatedTransactions = [...transactions, transactionMeta];
-            this.update({
-                transactions: this.trimTransactionsForState(updatedTransactions),
-            });
+        }
+        const updatedTransactions = [...transactions, transactionMeta];
+        this.update({
+            transactions: this.trimTransactionsForState(updatedTransactions),
         });
     }
     /**
@@ -1351,6 +1451,7 @@ class TransactionController extends base_controller_1.BaseController {
             transactionMeta,
         });
         this.updateTransaction(transactionMeta, 'TransactionController#setTransactionStatusDropped - Transaction dropped');
+        this.onTransactionStatusChange(transactionMeta);
     }
     /**
      * Get transaction with provided actionId.
@@ -1391,26 +1492,22 @@ class TransactionController extends base_controller_1.BaseController {
         });
     }
     getEIP1559Compatibility() {
-        var _a, _b;
         return __awaiter(this, void 0, void 0, function* () {
             const currentNetworkIsEIP1559Compatible = yield this.getCurrentNetworkEIP1559Compatibility();
-            const currentAccountIsEIP1559Compatible = (_b = (_a = this.getCurrentAccountEIP1559Compatibility) === null || _a === void 0 ? void 0 : _a.call(this)) !== null && _b !== void 0 ? _b : true;
+            const currentAccountIsEIP1559Compatible = yield this.getCurrentAccountEIP1559Compatibility();
             return (currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible);
         });
     }
     addPendingTransactionTrackerListeners() {
-        this.pendingTransactionTracker.hub.on('transaction-confirmed', (transactionMeta) => {
-            this.hub.emit('transaction-confirmed', { transactionMeta });
-            this.hub.emit(`${transactionMeta.id}:confirmed`, transactionMeta);
-        });
+        this.pendingTransactionTracker.hub.on('transaction-confirmed', this.onConfirmedTransaction.bind(this));
         this.pendingTransactionTracker.hub.on('transaction-dropped', this.setTransactionStatusDropped.bind(this));
         this.pendingTransactionTracker.hub.on('transaction-failed', this.failTransaction.bind(this));
         this.pendingTransactionTracker.hub.on('transaction-updated', this.updateTransaction.bind(this));
     }
-    signTransaction(transactionMeta) {
+    signTransaction(transactionMeta, txParams) {
         var _a;
         return __awaiter(this, void 0, void 0, function* () {
-            const { txParams } = transactionMeta;
+            (0, logger_1.projectLogger)('Signing transaction', txParams);
             const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
             this.inProcessOfSigning.add(transactionMeta.id);
             const signedTx = yield ((_a = this.sign) === null || _a === void 0 ? void 0 : _a.call(this, unsignedEthTx, txParams.from, ...this.getAdditionalSignArguments(transactionMeta)));
@@ -1419,19 +1516,58 @@ class TransactionController extends base_controller_1.BaseController {
                 return undefined;
             }
             if (!this.afterSign(transactionMeta, signedTx)) {
+                this.updateTransaction(transactionMeta, 'TransactionController#signTransaction - Update after sign');
                 (0, logger_1.projectLogger)('Skipping signed status based on hook');
                 return undefined;
             }
             yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
             transactionMeta.status = types_1.TransactionStatus.signed;
             this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction signed');
+            this.onTransactionStatusChange(transactionMeta);
             const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
             transactionMeta.rawTx = rawTx;
             this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - RawTransaction added');
             return rawTx;
         });
     }
+    onTransactionStatusChange(transactionMeta) {
+        this.hub.emit('transaction-status-update', { transactionMeta });
+    }
+    getNonceTrackerTransactions(status, address) {
+        const currentChainId = this.getChainId();
+        return (0, utils_1.getAndFormatTransactionsForNonceTracker)(currentChainId, address, status, this.state.transactions);
+    }
+    onConfirmedTransaction(transactionMeta) {
+        (0, logger_1.projectLogger)('Processing confirmed transaction', transactionMeta.id);
+        this.hub.emit('transaction-confirmed', { transactionMeta });
+        this.hub.emit(`${transactionMeta.id}:confirmed`, transactionMeta);
+        this.onTransactionStatusChange(transactionMeta);
+        // Intentional given potential duration of process.
+        // eslint-disable-next-line @typescript-eslint/no-floating-promises
+        this.updatePostBalance(transactionMeta);
+    }
+    updatePostBalance(transactionMeta) {
+        return __awaiter(this, void 0, void 0, function* () {
+            try {
+                if (transactionMeta.type !== types_1.TransactionType.swap) {
+                    return;
+                }
+                const { updatedTransactionMeta, approvalTransactionMeta } = yield (0, swaps_1.updatePostTransactionBalance)(transactionMeta, {
+                    ethQuery: this.ethQuery,
+                    getTransaction: this.getTransaction.bind(this),
+                    updateTransaction: this.updateTransaction.bind(this),
+                });
+                this.hub.emit('post-transaction-balance-updated', {
+                    transactionMeta: updatedTransactionMeta,
+                    approvalTransactionMeta,
+                });
+            }
+            catch (error) {
+                /* istanbul ignore next */
+                (0, logger_1.projectLogger)('Error while updating post transaction balance', error);
+            }
+        });
+    }
 }
 exports.TransactionController = TransactionController;
-exports.default = TransactionController;
 //# sourceMappingURL=TransactionController.js.map
\ No newline at end of file
diff --git a/dist/TransactionController.js.map b/dist/TransactionController.js.map
deleted file mode 100644
index 6c5c46b0e9e601fdeab72fa31dca882b8692c393..0000000000000000000000000000000000000000
--- a/dist/TransactionController.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hardfork, Common, type ChainConfig } from '@ethereumjs/common';\nimport type { TypedTransaction } from '@ethereumjs/tx';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  query,\n  NetworkType,\n  RPC,\n  ApprovalType,\n  ORIGIN_METAMASK,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  BlockTracker,\n  NetworkState,\n  Provider,\n} from '@metamask/network-controller';\nimport { errorCodes, rpcErrors, providerErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport MethodRegistry from 'eth-method-registry';\nimport { addHexPrefix, bufferToHex } from 'ethereumjs-util';\nimport { EventEmitter } from 'events';\nimport { merge, pickBy } from 'lodash';\nimport NonceTracker from 'nonce-tracker';\nimport type { NonceLock } from 'nonce-tracker/dist/NonceTracker';\nimport { v1 as random } from 'uuid';\n\nimport { EtherscanRemoteTransactionSource } from './helpers/EtherscanRemoteTransactionSource';\nimport { IncomingTransactionHelper } from './helpers/IncomingTransactionHelper';\nimport { PendingTransactionTracker } from './helpers/PendingTransactionTracker';\nimport { projectLogger as log } from './logger';\nimport type {\n  Events,\n  DappSuggestedGasFees,\n  SavedGasFees,\n  SecurityProviderRequest,\n  SendFlowHistoryEntry,\n  TransactionParams,\n  TransactionMeta,\n  TransactionReceipt,\n  WalletDevice,\n  SecurityAlertResponse,\n} from './types';\nimport {\n  TransactionEnvelopeType,\n  TransactionType,\n  TransactionStatus,\n} from './types';\nimport { validateConfirmedExternalTransaction } from './utils/external-transactions';\nimport { addGasBuffer, estimateGas, updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport {\n  addInitialHistorySnapshot,\n  updateTransactionHistory,\n} from './utils/history';\nimport {\n  updatePostTransactionBalance,\n  updateSwapsTransaction,\n} from './utils/swaps';\nimport { determineTransactionType } from './utils/transaction-type';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  getIncreasedPriceFromExisting,\n  normalizeTxParams,\n  isEIP1559Transaction,\n  isFeeMarketEIP1559Values,\n  isGasPriceValue,\n  validateGasValues,\n  validateIfTransactionUnapproved,\n  validateMinimumIncrease,\n  normalizeTxError,\n} from './utils/utils';\nimport {\n  validateTransactionOrigin,\n  validateTxParams,\n} from './utils/validation';\n\nexport const HARDFORK = Hardfork.London;\n\n/**\n * @type Result\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface GasPriceValue {\n  gasPrice: string;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface FeeMarketEIP1559Values {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TransactionConfig extends BaseConfig {\n  sign?: (txParams: TransactionParams, from: string) => Promise<any>;\n  txHistoryLimit: number;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface MethodData {\n  registryMethod: string;\n  parsedRegistryMethod: Record<string, unknown>;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TransactionState extends BaseState {\n  transactions: TransactionMeta[];\n  methodData: { [key: string]: MethodData };\n  lastFetchedBlockNumbers: { [key: string]: number };\n}\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\ntype AllowedActions = AddApprovalRequest;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TransactionControllerEventEmitter extends EventEmitter {\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): this;\n\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n}\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  TransactionConfig,\n  TransactionState\n> {\n  private ethQuery: EthQuery;\n\n  private readonly isHistoryDisabled: boolean;\n\n  private readonly isSwapsDisabled: boolean;\n\n  private readonly isSendFlowHistoryDisabled: boolean;\n\n  private readonly inProcessOfSigning: Set<string> = new Set();\n\n  private readonly nonceTracker: NonceTracker;\n\n  private registry: any;\n\n  private readonly provider: Provider;\n\n  private readonly mutex = new Mutex();\n\n  private readonly getSavedGasFees: (chainId: Hex) => SavedGasFees | undefined;\n\n  private readonly getNetworkState: () => NetworkState;\n\n  private readonly getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getGasFeeEstimates: () => Promise<GasFeeState>;\n\n  private readonly getPermittedAccounts: (origin?: string) => Promise<string[]>;\n\n  private readonly getSelectedAddress: () => string;\n\n  private readonly messagingSystem: TransactionControllerMessenger;\n\n  private readonly incomingTransactionHelper: IncomingTransactionHelper;\n\n  private readonly securityProviderRequest?: SecurityProviderRequest;\n\n  private readonly pendingTransactionTracker: PendingTransactionTracker;\n\n  private readonly afterSign: (\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ) => boolean;\n\n  private readonly beforeApproveOnInit: (\n    transactionMeta: TransactionMeta,\n  ) => boolean;\n\n  private readonly beforeCheckPendingTransaction: (\n    transactionMeta: TransactionMeta,\n  ) => boolean;\n\n  private readonly beforePublish: (transactionMeta: TransactionMeta) => boolean;\n\n  private readonly getAdditionalSignArguments: (\n    transactionMeta: TransactionMeta,\n  ) => (TransactionMeta | undefined)[];\n\n  private failTransaction(\n    transactionMeta: TransactionMeta,\n    error: Error,\n    actionId?: string,\n  ) {\n    const newTransactionMeta = {\n      ...transactionMeta,\n      error: normalizeTxError(error),\n      status: TransactionStatus.failed,\n    };\n    this.hub.emit('transaction-failed', {\n      actionId,\n      error: error.message,\n      transactionMeta: newTransactionMeta,\n    });\n    this.updateTransaction(\n      newTransactionMeta,\n      'TransactionController#failTransaction - Add error message and set status to failed',\n    );\n    this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);\n  }\n\n  private async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter() as TransactionControllerEventEmitter;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TransactionController';\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Creates a TransactionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.blockTracker - The block tracker used to poll for new blocks data.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.\n   * @param options.getSavedGasFees - Gets the saved gas fee config.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.\n   * @param options.getSelectedAddress - Gets the address of the currently selected account.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.\n   * @param options.incomingTransactions.isEnabled - Whether or not incoming transaction retrieval is enabled.\n   * @param options.incomingTransactions.queryEntireHistory - Whether to initially query the entire transaction history or only recent blocks.\n   * @param options.incomingTransactions.updateTransactions - Whether to update local transactions using remote transaction data.\n   * @param options.messenger - The controller messenger.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.pendingTransactions - Configuration options for pending transaction support.\n   * @param options.pendingTransactions.isResubmitEnabled - Whether transaction publishing is automatically retried.\n   * @param options.provider - The provider used to create the underlying EthQuery instance.\n   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n   * @param options.hooks - The controller hooks.\n   * @param options.hooks.afterSign - Additional logic to execute after signing a transaction. Return false to not change the status to signed.\n   * @param options.hooks.beforeApproveOnInit - Additional logic to execute before starting an approval flow for a transaction during initialization. Return false to skip the transaction.\n   * @param options.hooks.beforeCheckPendingTransaction - Additional logic to execute before checking pending transactions. Return false to prevent the broadcast of the transaction.\n   * @param options.hooks.beforePublish - Additional logic to execute before publishing a transaction. Return false to prevent the broadcast of the transaction.\n   * @param options.hooks.getAdditionalSignArguments - Returns additional arguments required to sign a transaction.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      blockTracker,\n      disableHistory,\n      disableSendFlowHistory,\n      disableSwaps,\n      getSavedGasFees,\n      getCurrentAccountEIP1559Compatibility,\n      getCurrentNetworkEIP1559Compatibility,\n      getGasFeeEstimates,\n      getNetworkState,\n      getPermittedAccounts,\n      getSelectedAddress,\n      incomingTransactions = {},\n      messenger,\n      onNetworkStateChange,\n      pendingTransactions = {},\n      provider,\n      securityProviderRequest,\n      hooks = {},\n    }: {\n      blockTracker: BlockTracker;\n      disableHistory: boolean;\n      disableSendFlowHistory: boolean;\n      disableSwaps: boolean;\n      getSavedGasFees?: (chainId: Hex) => SavedGasFees | undefined;\n      getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n      getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n      getGasFeeEstimates?: () => Promise<GasFeeState>;\n      getNetworkState: () => NetworkState;\n      getPermittedAccounts: (origin?: string) => Promise<string[]>;\n      getSelectedAddress: () => string;\n      incomingTransactions?: {\n        includeTokenTransfers?: boolean;\n        isEnabled?: () => boolean;\n        queryEntireHistory?: boolean;\n        updateTransactions?: boolean;\n      };\n      messenger: TransactionControllerMessenger;\n      onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n      pendingTransactions?: {\n        isResubmitEnabled?: boolean;\n      };\n      provider: Provider;\n      securityProviderRequest?: SecurityProviderRequest;\n      hooks: {\n        afterSign?: (\n          transactionMeta: TransactionMeta,\n          signedTx: TypedTransaction,\n        ) => boolean;\n        beforeApproveOnInit?: (transactionMeta: TransactionMeta) => boolean;\n        beforeCheckPendingTransaction?: (\n          transactionMeta: TransactionMeta,\n        ) => boolean;\n        beforePublish?: (transactionMeta: TransactionMeta) => boolean;\n        getAdditionalSignArguments?: (\n          transactionMeta: TransactionMeta,\n        ) => (TransactionMeta | undefined)[];\n      };\n    },\n    config?: Partial<TransactionConfig>,\n    state?: Partial<TransactionState>,\n  ) {\n    super(config, state);\n\n    this.defaultConfig = {\n      txHistoryLimit: 40,\n    };\n\n    this.defaultState = {\n      methodData: {},\n      transactions: [],\n      lastFetchedBlockNumbers: {},\n    };\n\n    this.initialize();\n\n    this.provider = provider;\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    this.ethQuery = new EthQuery(provider);\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.isSwapsDisabled = disableSwaps ?? false;\n    this.registry = new MethodRegistry({ provider });\n    this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => undefined);\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility;\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getGasFeeEstimates =\n      getGasFeeEstimates || (() => Promise.resolve({} as GasFeeState));\n    this.getPermittedAccounts = getPermittedAccounts;\n    this.getSelectedAddress = getSelectedAddress;\n    this.securityProviderRequest = securityProviderRequest;\n\n    this.afterSign = hooks?.afterSign ?? (() => true);\n    this.beforeApproveOnInit = hooks?.beforeApproveOnInit ?? (() => true);\n    this.beforeCheckPendingTransaction =\n      hooks?.beforeCheckPendingTransaction ??\n      /* istanbul ignore next */\n      (() => true);\n    this.beforePublish = hooks?.beforePublish ?? (() => true);\n    this.getAdditionalSignArguments =\n      hooks?.getAdditionalSignArguments ?? (() => []);\n\n    this.nonceTracker = new NonceTracker({\n      provider,\n      blockTracker,\n      getPendingTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.submitted,\n          this.state.transactions,\n        ),\n      getConfirmedTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.confirmed,\n          this.state.transactions,\n        ),\n    });\n\n    this.incomingTransactionHelper = new IncomingTransactionHelper({\n      blockTracker,\n      getCurrentAccount: getSelectedAddress,\n      getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,\n      getNetworkState,\n      isEnabled: incomingTransactions.isEnabled,\n      queryEntireHistory: incomingTransactions.queryEntireHistory,\n      remoteTransactionSource: new EtherscanRemoteTransactionSource({\n        includeTokenTransfers: incomingTransactions.includeTokenTransfers,\n      }),\n      transactionLimit: this.config.txHistoryLimit,\n      updateTransactions: incomingTransactions.updateTransactions,\n    });\n\n    this.incomingTransactionHelper.hub.on(\n      'transactions',\n      this.onIncomingTransactions.bind(this),\n    );\n\n    this.incomingTransactionHelper.hub.on(\n      'updatedLastFetchedBlockNumbers',\n      this.onUpdatedLastFetchedBlockNumbers.bind(this),\n    );\n\n    this.pendingTransactionTracker = new PendingTransactionTracker({\n      approveTransaction: this.approveTransaction.bind(this),\n      blockTracker,\n      getChainId: this.getChainId.bind(this),\n      getEthQuery: () => this.ethQuery,\n      getTransactions: () => this.state.transactions,\n      isResubmitEnabled: pendingTransactions.isResubmitEnabled,\n      nonceTracker: this.nonceTracker,\n      onStateChange: this.subscribe.bind(this),\n      publishTransaction: this.publishTransaction.bind(this),\n      hooks: {\n        beforeCheckPendingTransaction:\n          this.beforeCheckPendingTransaction.bind(this),\n        beforePublish: this.beforePublish.bind(this),\n      },\n    });\n\n    this.addPendingTransactionTrackerListeners();\n\n    onNetworkStateChange(() => {\n      this.ethQuery = new EthQuery(this.provider);\n      this.registry = new MethodRegistry({ provider: this.provider });\n      this.onBootCleanup();\n    });\n\n    this.onBootCleanup();\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find(\n        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix,\n      );\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update({\n        methodData: { ...methodData, ...{ [fourBytePrefix]: registry } },\n      });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param opts - Additional options to control how the transaction is added.\n   * @param opts.actionId - Unique ID to prevent duplicate requests.\n   * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param opts.method - RPC method that requested the transaction.\n   * @param opts.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param opts.securityAlertResponse - Response from security validator.\n   * @param opts.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @param opts.swaps - Options for swaps transactions.\n   * @param opts.swaps.hasApproveTx - Whether the transaction has an approval transaction.\n   * @param opts.swaps.meta - Metadata for swap transaction.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    txParams: TransactionParams,\n    {\n      actionId,\n      deviceConfirmedOn,\n      method,\n      origin,\n      requireApproval,\n      securityAlertResponse,\n      sendFlowHistory,\n      swaps = {},\n      type,\n    }: {\n      actionId?: string;\n      deviceConfirmedOn?: WalletDevice;\n      method?: string;\n      origin?: string;\n      requireApproval?: boolean | undefined;\n      securityAlertResponse?: SecurityAlertResponse;\n      sendFlowHistory?: SendFlowHistoryEntry[];\n      swaps?: {\n        hasApproveTx?: boolean;\n        meta?: Partial<TransactionMeta>;\n      };\n      type?: TransactionType;\n    } = {},\n  ): Promise<Result> {\n    const chainId = this.getChainId();\n    txParams = normalizeTxParams(txParams);\n    const isEIP1559Compatible = await this.getEIP1559Compatibility();\n    validateTxParams(txParams, isEIP1559Compatible);\n    if (origin) {\n      await validateTransactionOrigin(\n        await this.getPermittedAccounts(origin),\n        this.getSelectedAddress(),\n        txParams.from,\n        origin,\n      );\n    }\n\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin,\n    );\n\n    const transactionType =\n      type ?? (await determineTransactionType(txParams, this.ethQuery)).type;\n\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n    // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.\n    const transactionMeta: TransactionMeta = existingTransactionMeta || {\n      // Add actionId to txMeta to check if same actionId is seen again\n      actionId,\n      chainId,\n      dappSuggestedGasFees,\n      deviceConfirmedOn,\n      id: random(),\n      origin,\n      securityAlertResponse,\n      status: TransactionStatus.unapproved as TransactionStatus.unapproved,\n      time: Date.now(),\n      txParams,\n      userEditedGasLimit: false,\n      verifiedOnBlockchain: false,\n      type: transactionType,\n    };\n\n    await this.updateGasProperties(transactionMeta);\n\n    // Checks if a transaction already exists with a given actionId\n    if (!existingTransactionMeta) {\n      // Set security provider response\n      if (method && this.securityProviderRequest) {\n        const securityProviderResponse = await this.securityProviderRequest(\n          transactionMeta,\n          method,\n        );\n        transactionMeta.securityProviderResponse = securityProviderResponse;\n      }\n\n      if (!this.isSendFlowHistoryDisabled) {\n        transactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      // Initial history push\n      if (!this.isHistoryDisabled) {\n        addInitialHistorySnapshot(transactionMeta);\n      }\n\n      await updateSwapsTransaction(transactionMeta, transactionType, swaps, {\n        isSwapsDisabled: this.isSwapsDisabled,\n        cancelTransaction: this.cancelTransaction.bind(this),\n        controllerHubEmitter: this.hub.emit.bind(this.hub) as any,\n      });\n\n      this.addMetadata(transactionMeta);\n      this.hub.emit(`unapprovedTransaction`, transactionMeta);\n    }\n\n    return {\n      result: this.processApproval(transactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n        actionId,\n      }),\n      transactionMeta,\n    };\n  }\n\n  startIncomingTransactionPolling() {\n    this.incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionPolling() {\n    this.incomingTransactionHelper.stop();\n  }\n\n  async updateIncomingTransactions() {\n    await this.incomingTransactionHelper.update();\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      estimatedBaseFee,\n      actionId,\n    }: { estimatedBaseFee?: string; actionId?: string } = {},\n  ) {\n    // If transaction is found for same action id, do not create a cancel transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.txParams.gasPrice,\n      CANCEL_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const newTxParams: TransactionParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            from: transactionMeta.txParams.from,\n            gasLimit: transactionMeta.txParams.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: '2',\n            nonce: transactionMeta.txParams.nonce,\n            to: transactionMeta.txParams.from,\n            value: '0x0',\n          }\n        : {\n            from: transactionMeta.txParams.from,\n            gasLimit: transactionMeta.txParams.gas,\n            gasPrice: newGasPrice,\n            nonce: transactionMeta.txParams.nonce,\n            to: transactionMeta.txParams.from,\n            value: '0x0',\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(newTxParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n    const rawTx = bufferToHex(signedTx.serialize());\n    const hash = await this.publishTransaction(rawTx);\n    const cancelTransactionMeta: TransactionMeta = {\n      actionId,\n      chainId: transactionMeta.chainId,\n      estimatedBaseFee,\n      hash,\n      id: random(),\n      originalGasEstimate: transactionMeta.txParams.gas,\n      status: TransactionStatus.submitted,\n      time: Date.now(),\n      type: TransactionType.cancel,\n      txParams: newTxParams,\n    };\n\n    this.addMetadata(cancelTransactionMeta);\n\n    // stopTransaction has no approval request, so we assume the user has already approved the transaction\n    this.hub.emit('transaction-approved', {\n      transactionMeta: cancelTransactionMeta,\n      actionId,\n    });\n    this.hub.emit('transaction-submitted', {\n      transactionMeta: cancelTransactionMeta,\n      actionId,\n    });\n\n    this.hub.emit(\n      `${cancelTransactionMeta.id}:finished`,\n      cancelTransactionMeta,\n    );\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      actionId,\n      estimatedBaseFee,\n    }: { actionId?: string; estimatedBaseFee?: string } = {},\n  ) {\n    // If transaction is found for same action id, do not create a new speed up transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.txParams.gasPrice,\n      SPEED_UP_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams: TransactionParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...transactionMeta.txParams,\n            gasLimit: transactionMeta.txParams.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: '2',\n          }\n        : {\n            ...transactionMeta.txParams,\n            gasLimit: transactionMeta.txParams.gas,\n            gasPrice: newGasPrice,\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n    await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n    const rawTx = bufferToHex(signedTx.serialize());\n    const hash = await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n    const baseTransactionMeta: TransactionMeta = {\n      ...transactionMeta,\n      estimatedBaseFee,\n      id: random(),\n      time: Date.now(),\n      hash,\n      actionId,\n      originalGasEstimate: transactionMeta.txParams.gas,\n      type: TransactionType.retry,\n      originalType: transactionMeta.type,\n    };\n    const newTransactionMeta =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...baseTransactionMeta,\n            txParams: {\n              ...transactionMeta.txParams,\n              maxFeePerGas: newMaxFeePerGas,\n              maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            },\n          }\n        : {\n            ...baseTransactionMeta,\n            txParams: {\n              ...transactionMeta.txParams,\n              gasPrice: newGasPrice,\n            },\n          };\n    this.addMetadata(newTransactionMeta);\n\n    // speedUpTransaction has no approval request, so we assume the user has already approved the transaction\n    this.hub.emit('transaction-approved', {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n    this.hub.emit('transaction-submitted', {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(transaction: TransactionParams) {\n    const { estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      this.ethQuery,\n    );\n\n    return { gas: estimatedGas, simulationFails };\n  }\n\n  /**\n   * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.\n   *\n   * @param transaction - The transaction params to estimate gas for.\n   * @param multiplier - The multiplier to use for the gas buffer.\n   */\n  async estimateGasBuffered(\n    transaction: TransactionParams,\n    multiplier: number,\n  ) {\n    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      this.ethQuery,\n    );\n\n    const gas = addGasBuffer(estimatedGas, blockGasLimit, multiplier);\n\n    return {\n      gas,\n      simulationFails,\n    };\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta: TransactionMeta, note: string) {\n    const { transactions } = this.state;\n    transactionMeta.txParams = normalizeTxParams(transactionMeta.txParams);\n    validateTxParams(transactionMeta.txParams);\n    if (!this.isHistoryDisabled) {\n      updateTransactionHistory(transactionMeta, note);\n    }\n    const index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n    transactions[index] = transactionMeta;\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Update the security alert response for a transaction.\n   *\n   * @param transactionId - ID of the transaction.\n   * @param securityAlertResponse - The new security alert response for the transaction.\n   */\n  updateSecurityAlertResponse(\n    transactionId: string,\n    securityAlertResponse: SecurityAlertResponse,\n  ) {\n    if (!securityAlertResponse) {\n      throw new Error(\n        'updateSecurityAlertResponse: securityAlertResponse should not be null',\n      );\n    }\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update security alert response as no transaction metadata found`,\n      );\n    }\n    const updatedMeta = merge(transactionMeta, { securityAlertResponse });\n    this.updateTransaction(\n      updatedMeta,\n      'TransactionController:updatesecurityAlertResponse - securityAlertResponse updated',\n    );\n  }\n\n  /**\n   * Removes all transactions from state, optionally based on the current network.\n   *\n   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the\n   * current network. If `true`, all transactions are wiped.\n   * @param address - If specified, only transactions originating from this address will be\n   * wiped on current network.\n   */\n  wipeTransactions(ignoreNetwork?: boolean, address?: string) {\n    /* istanbul ignore next */\n    if (ignoreNetwork && !address) {\n      this.update({ transactions: [] });\n      return;\n    }\n    const currentChainId = this.getChainId();\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId, txParams }) => {\n        const isMatchingNetwork = ignoreNetwork || chainId === currentChainId;\n\n        if (!isMatchingNetwork) {\n          return true;\n        }\n\n        const isMatchingAddress =\n          !address || txParams.from?.toLowerCase() === address.toLowerCase();\n\n        return !isMatchingAddress;\n      },\n    );\n\n    this.update({\n      transactions: this.trimTransactionsForState(newTransactions),\n    });\n  }\n\n  startIncomingTransactionProcessing() {\n    this.incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionProcessing() {\n    this.incomingTransactionHelper.stop();\n  }\n\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(\n    transactionMeta: TransactionMeta,\n    transactionReceipt: TransactionReceipt,\n    baseFeePerGas: Hex,\n  ) {\n    // Run validation and add external transaction to state.\n    this.addExternalTransaction(transactionMeta);\n\n    try {\n      const transactionId = transactionMeta.id;\n\n      // Make sure status is confirmed and define gasUsed as in receipt.\n      transactionMeta.status = TransactionStatus.confirmed;\n      transactionMeta.txReceipt = transactionReceipt;\n      if (baseFeePerGas) {\n        transactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      // Update same nonce local transactions as dropped and define replacedBy properties.\n      this.markNonceDuplicatesDropped(transactionId);\n\n      // Update external provided transaction with updated gas values and confirmed status.\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController:confirmExternalTransaction - Add external transaction',\n      );\n\n      if (transactionMeta.type === TransactionType.swap) {\n        updatePostTransactionBalance(transactionMeta, {\n          ethQuery: this.ethQuery,\n          getTransaction: this.getTransaction.bind(this),\n          updateTransaction: this.updateTransaction.bind(this),\n        })\n          .then(({ updatedTransactionMeta, approvalTransactionMeta }) => {\n            this.hub.emit('post-transaction-balance-updated', {\n              transactionMeta: updatedTransactionMeta,\n              approvalTransactionMeta,\n            });\n          })\n          .catch((error) => {\n            /* istanbul ignore next */\n            log('Error while updating post transaction balance', error);\n          });\n      }\n      this.hub.emit('transaction-confirmed', {\n        transactionMeta,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(\n    transactionID: string,\n    currentSendFlowHistoryLength: number,\n    sendFlowHistoryToAdd: SendFlowHistoryEntry[],\n  ): TransactionMeta {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        'Send flow history is disabled for the current transaction controller',\n      );\n    }\n\n    const transactionMeta = this.getTransaction(transactionID);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionSendFlowHistory',\n    );\n\n    if (\n      currentSendFlowHistoryLength ===\n      (transactionMeta?.sendFlowHistory?.length || 0)\n    ) {\n      transactionMeta.sendFlowHistory = [\n        ...(transactionMeta?.sendFlowHistory ?? []),\n        ...sendFlowHistoryToAdd,\n      ];\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController:updateTransactionSendFlowHistory - sendFlowHistory updated',\n      );\n    }\n\n    return this.getTransaction(transactionID) as TransactionMeta;\n  }\n\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(\n    transactionId: string,\n    {\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      gas,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    }: {\n      defaultGasEstimates?: string;\n      estimateUsed?: string;\n      estimateSuggested?: string;\n      gas?: string;\n      gasLimit?: string;\n      gasPrice?: string;\n      maxPriorityFeePerGas?: string;\n      maxFeePerGas?: string;\n      originalGasEstimate?: string;\n      userEditedGasLimit?: boolean;\n      userFeeLevel?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionGasFees',\n    );\n\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    } as any;\n\n    // only update what is defined\n    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);\n    transactionGasFees = pickBy(transactionGasFees);\n\n    // merge updated gas values with existing transaction meta\n    const updatedMeta = merge(transactionMeta, transactionGasFees);\n\n    this.updateTransaction(\n      updatedMeta,\n      'TransactionController:updateTransactionGasFees - gas values updated',\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  /**\n   * Update the previous gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param previousGas - Previous gas values to update.\n   * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @returns The updated transactionMeta.\n   */\n  updatePreviousGasParams(\n    transactionId: string,\n    {\n      gasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }: {\n      gasLimit?: string;\n      maxFeePerGas?: string;\n      maxPriorityFeePerGas?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updatePreviousGasParams');\n\n    const transactionPreviousGas = {\n      previousGas: {\n        gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      },\n    } as any;\n\n    // only update what is defined\n    transactionPreviousGas.previousGas = pickBy(\n      transactionPreviousGas.previousGas,\n    );\n\n    // merge updated previous gas values with existing transaction meta\n    const updatedMeta = merge(transactionMeta, transactionPreviousGas);\n\n    this.updateTransaction(\n      updatedMeta,\n      'TransactionController:updatePreviousGasParams - Previous gas values updated',\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  /**\n   * Gets the next nonce according to the nonce-tracker.\n   * Ensure `releaseLock` is called once processing of the `nonce` value is complete.\n   *\n   * @param address - The hex string address for the transaction.\n   * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.\n   */\n  async getNonceLock(address: string): Promise<NonceLock> {\n    return this.nonceTracker.getNonceLock(address);\n  }\n\n  /**\n   * Signs and returns the raw transaction data for provided transaction params list.\n   *\n   * @param listOfTxParams - The list of transaction params to approve.\n   * @returns The raw transactions.\n   */\n  async approveTransactionsWithSameNonce(\n    listOfTxParams: TransactionParams[] = [],\n  ): Promise<string | string[]> {\n    if (listOfTxParams.length === 0) {\n      return '';\n    }\n\n    const initialTx = listOfTxParams[0];\n    const common = this.getCommonConfiguration();\n\n    const initialTxAsEthTx = TransactionFactory.fromTxData(initialTx, {\n      common,\n    });\n\n    const initialTxAsSerializedHex = bufferToHex(initialTxAsEthTx.serialize());\n\n    if (this.inProcessOfSigning.has(initialTxAsSerializedHex)) {\n      return '';\n    }\n\n    this.inProcessOfSigning.add(initialTxAsSerializedHex);\n\n    let rawTransactions, nonceLock;\n    try {\n      // TODO: we should add a check to verify that all transactions have the same from address\n      const fromAddress = initialTx.from;\n      nonceLock = await this.nonceTracker.getNonceLock(fromAddress);\n      const nonce = nonceLock.nextNonce;\n\n      rawTransactions = await Promise.all(\n        listOfTxParams.map((txParams) => {\n          txParams.nonce = addHexPrefix(nonce.toString(16));\n          return this.signExternalTransaction(txParams);\n        }),\n      );\n    } catch (err) {\n      log('Error while signing transactions with same nonce', err);\n      // Must set transaction to submitted/failed before releasing lock\n      // continue with error chain\n      throw err;\n    } finally {\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      this.inProcessOfSigning.delete(initialTxAsSerializedHex);\n    }\n    return rawTransactions;\n  }\n\n  /**\n   * Update a custodial transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param options - The custodial transaction options to update.\n   * @param options.custodyStatus - The new custody status value to be assigned.\n   * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.\n   * @param options.hash - The new hash value to be assigned.\n   * @param options.status - The new status value to be assigned.\n   */\n  updateCustodialTransaction(\n    transactionId: string,\n    {\n      custodyStatus,\n      errorMessage,\n      hash,\n      status,\n    }: {\n      custodyStatus?: string;\n      errorMessage?: string;\n      hash?: string;\n      status?: TransactionStatus;\n    },\n  ) {\n    let transactionMeta;\n    transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update custodial transaction as no transaction metadata found`,\n      );\n    }\n\n    if (!transactionMeta.custodyId) {\n      throw new Error('Transaction must be a custodian transaction');\n    }\n\n    if (\n      status &&\n      ![\n        TransactionStatus.submitted,\n        TransactionStatus.signed,\n        TransactionStatus.failed,\n      ].includes(status)\n    ) {\n      throw new Error(\n        `Cannot update custodial transaction with status: ${status}`,\n      );\n    }\n    if (status === TransactionStatus.signed) {\n      transactionMeta.status = status;\n    }\n\n    if (status === TransactionStatus.submitted) {\n      transactionMeta.submittedTime = new Date().getTime();\n      transactionMeta.status = status;\n    }\n\n    if (status === TransactionStatus.failed) {\n      transactionMeta = {\n        ...transactionMeta,\n        error: normalizeTxError(new Error(errorMessage)),\n        status: TransactionStatus.failed,\n      };\n    }\n\n    if (custodyStatus) {\n      transactionMeta.custodyStatus = custodyStatus;\n    }\n\n    if (hash) {\n      transactionMeta.hash = hash;\n    }\n\n    this.updateTransaction(\n      transactionMeta,\n      `TransactionController:updateCustodialTransaction - Custodial transaction updated`,\n    );\n  }\n\n  private async signExternalTransaction(\n    transactionParams: TransactionParams,\n  ): Promise<string> {\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const normalizedTransactionParams = normalizeTxParams(transactionParams);\n    const chainId = this.getChainId();\n    const type = isEIP1559Transaction(normalizedTransactionParams)\n      ? TransactionEnvelopeType.feeMarket\n      : TransactionEnvelopeType.legacy;\n    const updatedTransactionParams = {\n      ...normalizedTransactionParams,\n      type,\n      gasLimit: normalizedTransactionParams.gas,\n      chainId,\n    };\n\n    const { from } = updatedTransactionParams;\n    const common = this.getCommonConfiguration();\n    const unsignedTransaction = TransactionFactory.fromTxData(\n      updatedTransactionParams,\n      { common },\n    );\n    const signedTransaction = await this.sign(unsignedTransaction, from);\n\n    const rawTransaction = bufferToHex(signedTransaction.serialize());\n    return rawTransaction;\n  }\n\n  /**\n   * Removes unapproved transactions from state.\n   */\n  clearUnapprovedTransactions() {\n    const transactions = this.state.transactions.filter(\n      ({ status }) => status !== TransactionStatus.unapproved,\n    );\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  private addMetadata(transactionMeta: TransactionMeta) {\n    const { transactions } = this.state;\n    transactions.push(transactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  private async updateGasProperties(transactionMeta: TransactionMeta) {\n    const isEIP1559Compatible = await this.getEIP1559Compatibility();\n    const chainId = this.getChainId();\n\n    await updateGas({\n      ethQuery: this.ethQuery,\n      providerConfig: this.getNetworkState().providerConfig,\n      txMeta: transactionMeta,\n    });\n\n    await updateGasFees({\n      eip1559: isEIP1559Compatible,\n      ethQuery: this.ethQuery,\n      getSavedGasFees: this.getSavedGasFees.bind(this, chainId),\n      getGasFeeEstimates: this.getGasFeeEstimates.bind(this),\n      txMeta: transactionMeta,\n    });\n  }\n\n  private getCurrentChainTransactionsByStatus(status: TransactionStatus) {\n    const chainId = this.getChainId();\n    return this.state.transactions.filter(\n      (transaction) =>\n        transaction.status === status && transaction.chainId === chainId,\n    );\n  }\n\n  private onBootCleanup() {\n    this.createApprovalsForUnapprovedTransactions();\n    this.loadGasValuesForUnapprovedTransactions();\n    this.submitApprovedTransactions();\n  }\n\n  /**\n   * Create approvals for all unapproved transactions on current chain.\n   */\n  private createApprovalsForUnapprovedTransactions() {\n    const unapprovedTransactions = this.getCurrentChainTransactionsByStatus(\n      TransactionStatus.unapproved,\n    );\n\n    for (const transactionMeta of unapprovedTransactions) {\n      this.processApproval(transactionMeta, {\n        shouldShowRequest: false,\n      }).catch((error) => {\n        if (error?.code === errorCodes.provider.userRejectedRequest) {\n          return;\n        }\n        /* istanbul ignore next */\n        console.error('Error during persisted transaction approval', error);\n      });\n    }\n  }\n\n  /**\n   * Update the gas values of all unapproved transactions on current chain.\n   */\n  private async loadGasValuesForUnapprovedTransactions() {\n    const unapprovedTransactions = this.getCurrentChainTransactionsByStatus(\n      TransactionStatus.unapproved,\n    );\n\n    const results = await Promise.allSettled(\n      unapprovedTransactions.map(async (transactionMeta) => {\n        await this.updateGasProperties(transactionMeta);\n        this.updateTransaction(\n          transactionMeta,\n          'TransactionController:loadGasValuesForUnapprovedTransactions - Gas values updated',\n        );\n      }),\n    );\n\n    for (const [index, result] of results.entries()) {\n      if (result.status === 'rejected') {\n        const transactionMeta = unapprovedTransactions[index];\n        this.failTransaction(transactionMeta, result.reason);\n        /* istanbul ignore next */\n        console.error(\n          'Error while loading gas values for persisted transaction id: ',\n          transactionMeta.id,\n          result.reason,\n        );\n      }\n    }\n  }\n\n  /**\n   * Force to submit approved transactions on current chain.\n   */\n  private submitApprovedTransactions() {\n    const approvedTransactions = this.getCurrentChainTransactionsByStatus(\n      TransactionStatus.approved,\n    );\n    for (const transactionMeta of approvedTransactions) {\n      if (this.beforeApproveOnInit(transactionMeta)) {\n        this.approveTransaction(transactionMeta.id).catch((error) => {\n          /* istanbul ignore next */\n          console.error('Error while submitting persisted transaction', error);\n        });\n      }\n    }\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n    {\n      isExisting = false,\n      requireApproval,\n      shouldShowRequest = true,\n      actionId,\n    }: {\n      isExisting?: boolean;\n      requireApproval?: boolean | undefined;\n      shouldShowRequest?: boolean;\n      actionId?: string;\n    },\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted\n      ? Promise.resolve(meta)\n      : this.waitForTransactionFinished(transactionId);\n\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.requestApproval(transactionMeta, {\n            shouldShowRequest,\n          });\n          resultCallbacks = acceptResult.resultCallbacks;\n        }\n\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n\n        if (!isTxCompleted) {\n          await this.approveTransaction(transactionId);\n          const updatedTransactionMeta = this.getTransaction(\n            transactionId,\n          ) as TransactionMeta;\n          this.hub.emit('transaction-approved', {\n            transactionMeta: updatedTransactionMeta,\n            actionId,\n          });\n        }\n      } catch (error: any) {\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error?.code === errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId, actionId);\n\n            throw providerErrors.userRejectedRequest(\n              'MetaMask Tx Signature: User denied transaction signature.',\n            );\n          } else {\n            this.failTransaction(meta, error, actionId);\n          }\n        }\n      }\n    }\n\n    const finalMeta = await finishedPromise;\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw rpcErrors.internal(finalMeta.error.message);\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.hash as string;\n\n      default:\n        const internalError = rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   */\n  private async approveTransaction(transactionId: string) {\n    const { transactions } = this.state;\n    const releaseLock = await this.mutex.acquire();\n    const chainId = this.getChainId();\n    const index = transactions.findIndex(({ id }) => transactionId === id);\n    const transactionMeta = transactions[index];\n    const {\n      txParams: { nonce, from },\n    } = transactionMeta;\n    let nonceLock;\n    try {\n      if (!this.sign) {\n        releaseLock();\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return;\n      } else if (!chainId) {\n        releaseLock();\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return;\n      }\n\n      if (this.inProcessOfSigning.has(transactionId)) {\n        log('Skipping approval as signing in progress', transactionId);\n        return;\n      }\n\n      const { approved: status } = TransactionStatus;\n      let nonceToUse = nonce;\n      // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction\n      // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce\n      if (!nonceToUse) {\n        nonceLock = await this.nonceTracker.getNonceLock(from);\n        nonceToUse = addHexPrefix(nonceLock.nextNonce.toString(16));\n      }\n\n      transactionMeta.status = status;\n      transactionMeta.txParams.nonce = nonceToUse;\n      transactionMeta.txParams.chainId = chainId;\n\n      const baseTxParams = {\n        ...transactionMeta.txParams,\n        gasLimit: transactionMeta.txParams.gas,\n      };\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - Transaction approved',\n      );\n\n      const isEIP1559 = isEIP1559Transaction(transactionMeta.txParams);\n\n      const txParams: TransactionParams = isEIP1559\n        ? {\n            ...baseTxParams,\n            maxFeePerGas: transactionMeta.txParams.maxFeePerGas,\n            maxPriorityFeePerGas: transactionMeta.txParams.maxPriorityFeePerGas,\n            estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee,\n            // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set\n            type: '2',\n          }\n        : baseTxParams;\n\n      // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set\n      if (isEIP1559) {\n        delete txParams.gasPrice;\n      }\n\n      const rawTx = await this.signTransaction(transactionMeta);\n\n      if (!this.beforePublish(transactionMeta)) {\n        log('Skipping publishing transaction based on hook');\n        return;\n      }\n\n      if (!rawTx) {\n        return;\n      }\n\n      const hash = await this.publishTransaction(rawTx);\n      transactionMeta.hash = hash;\n      transactionMeta.status = TransactionStatus.submitted;\n      transactionMeta.submittedTime = new Date().getTime();\n      this.hub.emit('transaction-submitted', {\n        transactionMeta,\n      });\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - Transaction submitted',\n      );\n      this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n    } finally {\n      this.inProcessOfSigning.delete(transactionId);\n      // must set transaction to submitted/failed before releasing lock\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      releaseLock();\n    }\n  }\n\n  private async publishTransaction(rawTransaction: string): Promise<string> {\n    return await query(this.ethQuery, 'sendRawTransaction', [rawTransaction]);\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param actionId - The actionId passed from UI\n   */\n  private cancelTransaction(transactionId: string, actionId?: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    transactionMeta.status = TransactionStatus.rejected;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    this.hub.emit('transaction-rejected', {\n      transactionMeta,\n      actionId,\n    });\n    const transactions = this.state.transactions.filter(\n      ({ id }) => id !== transactionId,\n    );\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for transactions of the same\n   * nonce, same day and network combo can result in confusing or broken experiences\n   * in the UI. The transactions are then updated using the BaseController update.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n\n    const txsToKeep = transactions\n      .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order\n      .filter((tx) => {\n        const { chainId, status, txParams, time } = tx;\n\n        if (txParams) {\n          const key = `${txParams.nonce}-${convertHexToDecimal(\n            chainId,\n          )}-${new Date(time).toDateString()}`;\n\n          if (nonceNetworkSet.has(key)) {\n            return true;\n          } else if (\n            nonceNetworkSet.size < this.config.txHistoryLimit ||\n            !this.isFinalState(status)\n          ) {\n            nonceNetworkSet.add(key);\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n    txsToKeep.reverse(); // Ascending time order\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed\n    );\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  private async requestApproval(\n    txMeta: TransactionMeta,\n    { shouldShowRequest }: { shouldShowRequest: boolean },\n  ): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      shouldShowRequest,\n    )) as Promise<AddResult>;\n  }\n\n  private getTransaction(transactionId: string): TransactionMeta | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  private isTransactionCompleted(transactionId: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionId);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n\n  private getChainId(): Hex {\n    const { providerConfig } = this.getNetworkState();\n    return providerConfig.chainId;\n  }\n\n  private prepareUnsignedEthTx(txParams: TransactionParams): TypedTransaction {\n    return TransactionFactory.fromTxData(txParams, {\n      common: this.getCommonConfiguration(),\n      freeze: false,\n    });\n  }\n\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @returns common configuration object\n   */\n  private getCommonConfiguration(): Common {\n    const {\n      providerConfig: { type: chain, chainId, nickname: name },\n    } = this.getNetworkState();\n\n    if (\n      chain !== RPC &&\n      chain !== NetworkType['linea-goerli'] &&\n      chain !== NetworkType['linea-mainnet']\n    ) {\n      return new Common({ chain, hardfork: HARDFORK });\n    }\n\n    const customChainParams: Partial<ChainConfig> = {\n      name,\n      chainId: parseInt(chainId, 16),\n      defaultHardfork: HARDFORK,\n    };\n\n    return Common.custom(customChainParams);\n  }\n\n  private onIncomingTransactions({\n    added,\n    updated,\n  }: {\n    added: TransactionMeta[];\n    updated: TransactionMeta[];\n  }) {\n    const { transactions: currentTransactions } = this.state;\n\n    const updatedTransactions = [\n      ...added,\n      ...currentTransactions.map((originalTransaction) => {\n        const updatedTransaction = updated.find(\n          ({ hash }) => hash === originalTransaction.hash,\n        );\n\n        return updatedTransaction ?? originalTransaction;\n      }),\n    ];\n\n    this.update({\n      transactions: this.trimTransactionsForState(updatedTransactions),\n    });\n  }\n\n  private onUpdatedLastFetchedBlockNumbers({\n    lastFetchedBlockNumbers,\n    blockNumber,\n  }: {\n    lastFetchedBlockNumbers: {\n      [key: string]: number;\n    };\n    blockNumber: number;\n  }) {\n    this.update({ lastFetchedBlockNumbers });\n    this.hub.emit('incomingTransactionBlock', blockNumber);\n  }\n\n  private generateDappSuggestedGasFees(\n    txParams: TransactionParams,\n    origin?: string,\n  ): DappSuggestedGasFees | undefined {\n    if (!origin || origin === ORIGIN_METAMASK) {\n      return undefined;\n    }\n\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n\n    if (\n      gasPrice === undefined &&\n      maxFeePerGas === undefined &&\n      maxPriorityFeePerGas === undefined &&\n      gas === undefined\n    ) {\n      return undefined;\n    }\n\n    const dappSuggestedGasFees: DappSuggestedGasFees = {};\n\n    if (gasPrice !== undefined) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (\n      maxFeePerGas !== undefined ||\n      maxPriorityFeePerGas !== undefined\n    ) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    if (gas !== undefined) {\n      dappSuggestedGasFees.gas = gas;\n    }\n\n    return dappSuggestedGasFees;\n  }\n\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   */\n  private async addExternalTransaction(transactionMeta: TransactionMeta) {\n    const chainId = this.getChainId();\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === fromAddress &&\n        transaction.chainId === chainId,\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.confirmed,\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    );\n\n    validateConfirmedExternalTransaction(\n      transactionMeta,\n      confirmedTxs,\n      pendingTxs,\n    );\n\n    // Make sure provided external transaction has non empty history array\n    if (!(transactionMeta.history ?? []).length) {\n      if (!this.isHistoryDisabled) {\n        addInitialHistorySnapshot(transactionMeta);\n      }\n    }\n\n    const updatedTransactions = [...transactions, transactionMeta];\n    this.update({\n      transactions: this.trimTransactionsForState(updatedTransactions),\n    });\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  private markNonceDuplicatesDropped(transactionId: string) {\n    const chainId = this.getChainId();\n    const transactionMeta = this.getTransaction(transactionId);\n    const nonce = transactionMeta?.txParams?.nonce;\n    const from = transactionMeta?.txParams?.from;\n    const sameNonceTxs = this.state.transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === from &&\n        transaction.txParams.nonce === nonce &&\n        transaction.chainId === chainId,\n    );\n\n    if (!sameNonceTxs.length) {\n      return;\n    }\n\n    // Mark all same nonce transactions as dropped and give it a replacedBy hash\n    for (const transaction of sameNonceTxs) {\n      if (transaction.id === transactionId) {\n        continue;\n      }\n      transaction.replacedBy = transactionMeta?.hash;\n      transaction.replacedById = transactionMeta?.id;\n      // Drop any transaction that wasn't previously failed (off chain failure)\n      if (transaction.status !== TransactionStatus.failed) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  private setTransactionStatusDropped(transactionMeta: TransactionMeta) {\n    transactionMeta.status = TransactionStatus.dropped;\n    this.hub.emit('transaction-dropped', {\n      transactionMeta,\n    });\n    this.updateTransaction(\n      transactionMeta,\n      'TransactionController#setTransactionStatusDropped - Transaction dropped',\n    );\n  }\n\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  private getTransactionWithActionId(actionId?: string) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId,\n    );\n  }\n\n  private async waitForTransactionFinished(\n    transactionId: string,\n  ): Promise<TransactionMeta> {\n    return new Promise((resolve) => {\n      this.hub.once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   */\n  private async updateTransactionMetaRSV(\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ): Promise<void> {\n    if (signedTx.r) {\n      transactionMeta.r = addHexPrefix(signedTx.r.toString(16));\n    }\n\n    if (signedTx.s) {\n      transactionMeta.s = addHexPrefix(signedTx.s.toString(16));\n    }\n\n    if (signedTx.v) {\n      transactionMeta.v = addHexPrefix(signedTx.v.toString(16));\n    }\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  private addPendingTransactionTrackerListeners() {\n    this.pendingTransactionTracker.hub.on(\n      'transaction-confirmed',\n      (transactionMeta: TransactionMeta) => {\n        this.hub.emit('transaction-confirmed', { transactionMeta });\n        this.hub.emit(`${transactionMeta.id}:confirmed`, transactionMeta);\n      },\n    );\n\n    this.pendingTransactionTracker.hub.on(\n      'transaction-dropped',\n      this.setTransactionStatusDropped.bind(this),\n    );\n\n    this.pendingTransactionTracker.hub.on(\n      'transaction-failed',\n      this.failTransaction.bind(this),\n    );\n\n    this.pendingTransactionTracker.hub.on(\n      'transaction-updated',\n      this.updateTransaction.bind(this),\n    );\n  }\n\n  private async signTransaction(\n    transactionMeta: TransactionMeta,\n  ): Promise<string | undefined> {\n    const { txParams } = transactionMeta;\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n    this.inProcessOfSigning.add(transactionMeta.id);\n    const signedTx = await this.sign?.(\n      unsignedEthTx,\n      txParams.from,\n      ...this.getAdditionalSignArguments(transactionMeta),\n    );\n\n    if (!signedTx) {\n      log('Skipping signed status as no signed transaction');\n      return undefined;\n    }\n\n    if (!this.afterSign(transactionMeta, signedTx)) {\n      log('Skipping signed status based on hook');\n      return undefined;\n    }\n\n    await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n    transactionMeta.status = TransactionStatus.signed;\n    this.updateTransaction(\n      transactionMeta,\n      'TransactionController#approveTransaction - Transaction signed',\n    );\n\n    const rawTx = bufferToHex(signedTx.serialize());\n    transactionMeta.rawTx = rawTx;\n    this.updateTransaction(\n      transactionMeta,\n      'TransactionController#approveTransaction - RawTransaction added',\n    );\n    return rawTx;\n  }\n}\n\nexport default TransactionController;\n"]}
\ No newline at end of file
diff --git a/dist/constants.d.ts.map b/dist/constants.d.ts.map
deleted file mode 100644
index 67fe4fc6aad09a5bffb7a3eb6a7b40cf3bdbb02f..0000000000000000000000000000000000000000
--- a/dist/constants.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"constants.d.ts","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"AAAA,eAAO,MAAM,SAAS;;;;;;;;;;;;;;;;;;;;;;CAsBZ,CAAC;AAEX,eAAO,MAAM,wBAAwB,iBAAiB,CAAC;AACvD,eAAO,MAAM,kCAAkC,QAAQ,CAAC;AAExD,eAAO,MAAM,4BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6ExC,CAAC"}
\ No newline at end of file
diff --git a/dist/constants.js.map b/dist/constants.js.map
deleted file mode 100644
index ee3151e0148c8764778a13bd783f4d5018a332f6..0000000000000000000000000000000000000000
--- a/dist/constants.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"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","sourcesContent":["export const CHAIN_IDS = {\n  MAINNET: '0x1',\n  GOERLI: '0x5',\n  BSC: '0x38',\n  BSC_TESTNET: '0x61',\n  OPTIMISM: '0xa',\n  OPTIMISM_TESTNET: '0x1a4',\n  POLYGON: '0x89',\n  POLYGON_TESTNET: '0x13881',\n  AVALANCHE: '0xa86a',\n  AVALANCHE_TESTNET: '0xa869',\n  FANTOM: '0xfa',\n  FANTOM_TESTNET: '0xfa2',\n  SEPOLIA: '0xaa36a7',\n  LINEA_GOERLI: '0xe704',\n  LINEA_MAINNET: '0xe708',\n  MOONBEAM: '0x504',\n  MOONBEAM_TESTNET: '0x507',\n  MOONRIVER: '0x505',\n  GNOSIS: '0x64',\n  ARBITRUM: '0xa4b1',\n  ZKSYNC_ERA: '0x144',\n} as const;\n\nexport const DEFAULT_ETHERSCAN_DOMAIN = 'etherscan.io';\nexport const DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = 'api';\n\nexport const ETHERSCAN_SUPPORTED_NETWORKS = {\n  [CHAIN_IDS.GOERLI]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`,\n  },\n  [CHAIN_IDS.MAINNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.SEPOLIA]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`,\n  },\n  [CHAIN_IDS.LINEA_GOERLI]: {\n    domain: 'lineascan.build',\n    subdomain: 'goerli',\n  },\n  [CHAIN_IDS.LINEA_MAINNET]: {\n    domain: 'lineascan.build',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.BSC]: {\n    domain: 'bscscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.BSC_TESTNET]: {\n    domain: 'bscscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.OPTIMISM]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`,\n  },\n  [CHAIN_IDS.OPTIMISM_TESTNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli-optimistic`,\n  },\n  [CHAIN_IDS.POLYGON]: {\n    domain: 'polygonscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.POLYGON_TESTNET]: {\n    domain: 'polygonscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`,\n  },\n  [CHAIN_IDS.AVALANCHE]: {\n    domain: 'snowtrace.io',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.AVALANCHE_TESTNET]: {\n    domain: 'snowtrace.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.FANTOM]: {\n    domain: 'ftmscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.FANTOM_TESTNET]: {\n    domain: 'ftmscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.MOONBEAM]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`,\n  },\n  [CHAIN_IDS.MOONBEAM_TESTNET]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`,\n  },\n  [CHAIN_IDS.MOONRIVER]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`,\n  },\n  [CHAIN_IDS.GNOSIS]: {\n    domain: 'gnosisscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`,\n  },\n};\n"]}
\ No newline at end of file
diff --git a/dist/helpers/PendingTransactionTracker.d.ts b/dist/helpers/PendingTransactionTracker.d.ts
index d5b6d381163e5f205f9af4c3ea8bbc49efa071e5..ea1db880046af44cbf01b651ed9f32a97aab1361 100644
--- a/dist/helpers/PendingTransactionTracker.d.ts
+++ b/dist/helpers/PendingTransactionTracker.d.ts
@@ -2,7 +2,7 @@
 import type EthQuery from '@metamask/eth-query';
 import type { BlockTracker } from '@metamask/network-controller';
 import EventEmitter from 'events';
-import type NonceTracker from 'nonce-tracker';
+import type { NonceTracker } from 'nonce-tracker';
 import type { TransactionState } from '../TransactionController';
 import type { TransactionMeta } from '../types';
 declare type Events = {
diff --git a/dist/helpers/PendingTransactionTracker.d.ts.map b/dist/helpers/PendingTransactionTracker.d.ts.map
index 836a2b0b6639dc840f0236d0731edb060a5e9ab7..cc29eb150b08b688240d5a9f9b7b31f6ee4d0261 100644
--- a/dist/helpers/PendingTransactionTracker.d.ts.map
+++ b/dist/helpers/PendingTransactionTracker.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"PendingTransactionTracker.d.ts","sourceRoot":"","sources":["../../src/helpers/PendingTransactionTracker.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAEjE,OAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,OAAO,KAAK,YAAY,MAAM,eAAe,CAAC;AAG9C,OAAO,KAAK,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AACjE,OAAO,KAAK,EAAE,eAAe,EAAsB,MAAM,UAAU,CAAC;AA2BpE,aAAK,MAAM,GAAG;IACZ,uBAAuB,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IACnD,qBAAqB,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IACjD,oBAAoB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,qBAAqB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;CAChE,CAAC;AAKF,MAAM,WAAW,qCAAsC,SAAQ,YAAY;IACzE,EAAE,CAAC,CAAC,SAAS,MAAM,MAAM,EACvB,SAAS,EAAE,CAAC,EACZ,QAAQ,EAAE,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,GACrC,IAAI,CAAC;IAER,IAAI,CAAC,CAAC,SAAS,MAAM,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;CACzE;AAED,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,qCAAqC,CAAC;gBA8B/B,EACV,kBAAkB,EAClB,YAAY,EACZ,UAAU,EACV,WAAW,EACX,eAAe,EACf,iBAAiB,EACjB,YAAY,EACZ,aAAa,EACb,kBAAkB,EAClB,KAAK,GACN,EAAE;QACD,kBAAkB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7D,YAAY,EAAE,YAAY,CAAC;QAC3B,UAAU,EAAE,MAAM,MAAM,CAAC;QACzB,WAAW,EAAE,MAAM,QAAQ,CAAC;QAC5B,eAAe,EAAE,MAAM,eAAe,EAAE,CAAC;QACzC,iBAAiB,CAAC,EAAE,OAAO,CAAC;QAC5B,YAAY,EAAE,YAAY,CAAC;QAC3B,aAAa,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,KAAK,IAAI,CAAC;QACrE,kBAAkB,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QACvD,KAAK,CAAC,EAAE;YACN,6BAA6B,CAAC,EAAE,CAC9B,eAAe,EAAE,eAAe,KAC7B,OAAO,CAAC;YACb,aAAa,CAAC,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,OAAO,CAAC;SAC/D,CAAC;KACH;CAgZF"}
\ No newline at end of file
+{"version":3,"file":"PendingTransactionTracker.d.ts","sourceRoot":"","sources":["../../src/helpers/PendingTransactionTracker.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAChD,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAEjE,OAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAGlD,OAAO,KAAK,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AACjE,OAAO,KAAK,EAAE,eAAe,EAAsB,MAAM,UAAU,CAAC;AA2BpE,aAAK,MAAM,GAAG;IACZ,uBAAuB,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IACnD,qBAAqB,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IACjD,oBAAoB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,qBAAqB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;CAChE,CAAC;AAKF,MAAM,WAAW,qCAAsC,SAAQ,YAAY;IACzE,EAAE,CAAC,CAAC,SAAS,MAAM,MAAM,EACvB,SAAS,EAAE,CAAC,EACZ,QAAQ,EAAE,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,GACrC,IAAI,CAAC;IAER,IAAI,CAAC,CAAC,SAAS,MAAM,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;CACzE;AAED,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,qCAAqC,CAAC;gBA8B/B,EACV,kBAAkB,EAClB,YAAY,EACZ,UAAU,EACV,WAAW,EACX,eAAe,EACf,iBAAiB,EACjB,YAAY,EACZ,aAAa,EACb,kBAAkB,EAClB,KAAK,GACN,EAAE;QACD,kBAAkB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7D,YAAY,EAAE,YAAY,CAAC;QAC3B,UAAU,EAAE,MAAM,MAAM,CAAC;QACzB,WAAW,EAAE,MAAM,QAAQ,CAAC;QAC5B,eAAe,EAAE,MAAM,eAAe,EAAE,CAAC;QACzC,iBAAiB,CAAC,EAAE,OAAO,CAAC;QAC5B,YAAY,EAAE,YAAY,CAAC;QAC3B,aAAa,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,gBAAgB,KAAK,IAAI,KAAK,IAAI,CAAC;QACrE,kBAAkB,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QACvD,KAAK,CAAC,EAAE;YACN,6BAA6B,CAAC,EAAE,CAC9B,eAAe,EAAE,eAAe,KAC7B,OAAO,CAAC;YACb,aAAa,CAAC,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,OAAO,CAAC;SAC/D,CAAC;KACH;CAgZF"}
\ No newline at end of file
diff --git a/dist/helpers/PendingTransactionTracker.js.map b/dist/helpers/PendingTransactionTracker.js.map
index 74054b18a640049fd46eef81e8599cf127a9a6d6..73484333adb4eb5895349ea41b0256ae3e401e2b 100644
--- a/dist/helpers/PendingTransactionTracker.js.map
+++ b/dist/helpers/PendingTransactionTracker.js.map
@@ -1 +1 @@
-{"version":3,"file":"PendingTransactionTracker.js","sourceRoot":"","sources":["../../src/helpers/PendingTransactionTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type { BlockTracker } from '@metamask/network-controller';\nimport { createModuleLogger } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport type NonceTracker from 'nonce-tracker';\n\nimport { projectLogger } from '../logger';\nimport type { TransactionState } from '../TransactionController';\nimport type { TransactionMeta, TransactionReceipt } from '../types';\nimport { TransactionStatus } from '../types';\n\n/**\n * We wait this many blocks before emitting a 'transaction-dropped' event\n * This is because we could be talking to a node that is out of sync\n */\nconst DROPPED_BLOCK_COUNT = 3;\n\nconst MAX_RETRY_BLOCK_DISTANCE = 50;\n\nconst KNOWN_TRANSACTION_ERRORS = [\n  'replacement transaction underpriced',\n  'known transaction',\n  'gas price too low to replace',\n  'transaction with the same hash was already imported',\n  'gateway timeout',\n  'nonce too low',\n];\n\nconst log = createModuleLogger(projectLogger, 'pending-transactions');\n\ntype SuccessfulTransactionReceipt = TransactionReceipt & {\n  blockNumber: string;\n  blockHash: string;\n};\n\ntype Events = {\n  'transaction-confirmed': [txMeta: TransactionMeta];\n  'transaction-dropped': [txMeta: TransactionMeta];\n  'transaction-failed': [txMeta: TransactionMeta, error: Error];\n  'transaction-updated': [txMeta: TransactionMeta, note: string];\n};\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface PendingTransactionTrackerEventEmitter extends EventEmitter {\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): this;\n\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n}\n\nexport class PendingTransactionTracker {\n  hub: PendingTransactionTrackerEventEmitter;\n\n  #approveTransaction: (transactionId: string) => Promise<void>;\n\n  #blockTracker: BlockTracker;\n\n  #droppedBlockCountByHash: Map<string, number>;\n\n  #getChainId: () => string;\n\n  #getEthQuery: () => EthQuery;\n\n  #getTransactions: () => TransactionMeta[];\n\n  #isResubmitEnabled: boolean;\n\n  #listener: any;\n\n  #nonceTracker: NonceTracker;\n\n  #onStateChange: (listener: (state: TransactionState) => void) => void;\n\n  #publishTransaction: (rawTx: string) => Promise<string>;\n\n  #running: boolean;\n\n  #beforeCheckPendingTransaction: (transactionMeta: TransactionMeta) => boolean;\n\n  #beforePublish: (transactionMeta: TransactionMeta) => boolean;\n\n  constructor({\n    approveTransaction,\n    blockTracker,\n    getChainId,\n    getEthQuery,\n    getTransactions,\n    isResubmitEnabled,\n    nonceTracker,\n    onStateChange,\n    publishTransaction,\n    hooks,\n  }: {\n    approveTransaction: (transactionId: string) => Promise<void>;\n    blockTracker: BlockTracker;\n    getChainId: () => string;\n    getEthQuery: () => EthQuery;\n    getTransactions: () => TransactionMeta[];\n    isResubmitEnabled?: boolean;\n    nonceTracker: NonceTracker;\n    onStateChange: (listener: (state: TransactionState) => void) => void;\n    publishTransaction: (rawTx: string) => Promise<string>;\n    hooks?: {\n      beforeCheckPendingTransaction?: (\n        transactionMeta: TransactionMeta,\n      ) => boolean;\n      beforePublish?: (transactionMeta: TransactionMeta) => boolean;\n    };\n  }) {\n    this.hub = new EventEmitter() as PendingTransactionTrackerEventEmitter;\n\n    this.#approveTransaction = approveTransaction;\n    this.#blockTracker = blockTracker;\n    this.#droppedBlockCountByHash = new Map();\n    this.#getChainId = getChainId;\n    this.#getEthQuery = getEthQuery;\n    this.#getTransactions = getTransactions;\n    this.#isResubmitEnabled = isResubmitEnabled ?? true;\n    this.#listener = this.#onLatestBlock.bind(this);\n    this.#nonceTracker = nonceTracker;\n    this.#onStateChange = onStateChange;\n    this.#publishTransaction = publishTransaction;\n    this.#running = false;\n    this.#beforePublish = hooks?.beforePublish ?? (() => true);\n    this.#beforeCheckPendingTransaction =\n      hooks?.beforeCheckPendingTransaction ?? (() => true);\n\n    this.#onStateChange((state) => {\n      const pendingTransactions = this.#getPendingTransactions(\n        state.transactions,\n      );\n\n      if (pendingTransactions.length) {\n        this.#start();\n      } else {\n        this.#stop();\n      }\n    });\n  }\n\n  #start() {\n    if (this.#running) {\n      return;\n    }\n\n    this.#blockTracker.on('latest', this.#listener);\n    this.#running = true;\n\n    log('Started polling');\n  }\n\n  #stop() {\n    if (!this.#running) {\n      return;\n    }\n\n    this.#blockTracker.removeListener('latest', this.#listener);\n    this.#running = false;\n\n    log('Stopped polling');\n  }\n\n  async #onLatestBlock(latestBlockNumber: string) {\n    const nonceGlobalLock = await this.#nonceTracker.getGlobalLock();\n\n    try {\n      await this.#checkTransactions();\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check transactions', error);\n    } finally {\n      nonceGlobalLock.releaseLock();\n    }\n\n    try {\n      await this.#resubmitTransactions(latestBlockNumber);\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to resubmit transactions', error);\n    }\n  }\n\n  async #checkTransactions() {\n    log('Checking transactions');\n\n    const pendingTransactions = this.#getPendingTransactions();\n\n    if (!pendingTransactions.length) {\n      log('No pending transactions to check');\n      return;\n    }\n\n    log('Found pending transactions to check', {\n      count: pendingTransactions.length,\n      ids: pendingTransactions.map((tx) => tx.id),\n    });\n\n    await Promise.all(\n      pendingTransactions.map((tx) => this.#checkTransaction(tx)),\n    );\n  }\n\n  async #resubmitTransactions(latestBlockNumber: string) {\n    if (!this.#isResubmitEnabled || !this.#running) {\n      return;\n    }\n\n    log('Resubmitting transactions');\n\n    const pendingTransactions = this.#getPendingTransactions();\n\n    if (!pendingTransactions.length) {\n      log('No pending transactions to resubmit');\n      return;\n    }\n\n    log('Found pending transactions to resubmit', {\n      count: pendingTransactions.length,\n      ids: pendingTransactions.map((tx) => tx.id),\n    });\n\n    for (const txMeta of pendingTransactions) {\n      try {\n        await this.#resubmitTransaction(txMeta, latestBlockNumber);\n      } catch (error: any) {\n        /* istanbul ignore next */\n        const errorMessage =\n          error.value?.message?.toLowerCase() || error.message.toLowerCase();\n\n        if (this.#isKnownTransactionError(errorMessage)) {\n          log('Ignoring known transaction error', errorMessage);\n          return;\n        }\n\n        this.#warnTransaction(\n          txMeta,\n          error.message,\n          'There was an error when resubmitting this transaction.',\n        );\n      }\n    }\n  }\n\n  #isKnownTransactionError(errorMessage: string) {\n    return KNOWN_TRANSACTION_ERRORS.some((knownError) =>\n      errorMessage.includes(knownError),\n    );\n  }\n\n  async #resubmitTransaction(\n    txMeta: TransactionMeta,\n    latestBlockNumber: string,\n  ) {\n    if (!this.#isResubmitDue(txMeta, latestBlockNumber)) {\n      return;\n    }\n\n    log('Resubmitting transaction', txMeta.id);\n\n    const { rawTx } = txMeta;\n\n    if (!this.#beforePublish(txMeta)) {\n      return;\n    }\n\n    if (!rawTx?.length) {\n      log('Approving transaction as no raw value');\n      await this.#approveTransaction(txMeta.id);\n      return;\n    }\n\n    await this.#publishTransaction(rawTx);\n\n    txMeta.retryCount = (txMeta.retryCount ?? 0) + 1;\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:transaction-retry - Retry count increased',\n    );\n  }\n\n  #isResubmitDue(txMeta: TransactionMeta, latestBlockNumber: string): boolean {\n    if (!txMeta.firstRetryBlockNumber) {\n      txMeta.firstRetryBlockNumber = latestBlockNumber;\n\n      this.#updateTransaction(\n        txMeta,\n        'PendingTransactionTracker:#isResubmitDue - First retry block number set',\n      );\n    }\n\n    const firstRetryBlockNumber =\n      txMeta.firstRetryBlockNumber || latestBlockNumber;\n\n    const blocksSinceFirstRetry =\n      Number.parseInt(latestBlockNumber, 16) -\n      Number.parseInt(firstRetryBlockNumber, 16);\n\n    const retryCount = txMeta.retryCount || 0;\n\n    // Exponential backoff to limit retries at publishing\n    // Capped at ~15 minutes between retries\n    const requiredBlocksSinceFirstRetry = Math.min(\n      MAX_RETRY_BLOCK_DISTANCE,\n      Math.pow(2, retryCount),\n    );\n\n    return blocksSinceFirstRetry >= requiredBlocksSinceFirstRetry;\n  }\n\n  async #checkTransaction(txMeta: TransactionMeta) {\n    const { hash, id } = txMeta;\n\n    if (!hash && this.#beforeCheckPendingTransaction(txMeta)) {\n      const error = new Error(\n        'We had an error while submitting this transaction, please try again.',\n      );\n\n      error.name = 'NoTxHashError';\n\n      this.#failTransaction(txMeta, error);\n\n      return;\n    }\n\n    if (this.#isNonceTaken(txMeta)) {\n      log('Nonce already taken', id);\n      this.#dropTransaction(txMeta);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getTransactionReceipt(hash);\n      const isSuccess = receipt?.status === '0x1';\n\n      if (receipt && !isSuccess) {\n        log('Transaction receipt has failed status');\n\n        this.#failTransaction(\n          txMeta,\n          new Error('Transaction dropped or replaced'),\n        );\n\n        return;\n      }\n\n      const { blockNumber, blockHash } = receipt || {};\n\n      if (isSuccess && blockNumber && blockHash) {\n        await this.#onTransactionConfirmed(txMeta, {\n          ...receipt,\n          blockNumber,\n          blockHash,\n        });\n\n        return;\n      }\n    } catch (error: any) {\n      log('Failed to check transaction', id, error);\n\n      this.#warnTransaction(\n        txMeta,\n        error.message,\n        'There was a problem loading this transaction.',\n      );\n\n      return;\n    }\n\n    if (await this.#isTransactionDropped(txMeta)) {\n      this.#dropTransaction(txMeta);\n    }\n  }\n\n  async #onTransactionConfirmed(\n    txMeta: TransactionMeta,\n    receipt: SuccessfulTransactionReceipt,\n  ) {\n    const { id } = txMeta;\n    const { blockHash } = receipt;\n\n    log('Transaction confirmed', id);\n\n    const { baseFeePerGas, timestamp: blockTimestamp } =\n      await this.#getBlockByHash(blockHash, false);\n\n    txMeta.baseFeePerGas = baseFeePerGas;\n    txMeta.blockTimestamp = blockTimestamp;\n    txMeta.status = TransactionStatus.confirmed;\n    txMeta.txParams.gasUsed = receipt.gasUsed;\n    txMeta.txReceipt = receipt;\n    txMeta.verifiedOnBlockchain = true;\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:#onTransactionConfirmed - Transaction confirmed',\n    );\n\n    this.hub.emit('transaction-confirmed', txMeta);\n  }\n\n  async #isTransactionDropped(txMeta: TransactionMeta) {\n    const {\n      hash,\n      id,\n      txParams: { nonce, from },\n    } = txMeta;\n\n    /* istanbul ignore next */\n    if (!nonce || !hash) {\n      return false;\n    }\n\n    const networkNextNonceHex = await this.#getNetworkTransactionCount(from);\n    const networkNextNonceNumber = parseInt(networkNextNonceHex, 16);\n    const nonceNumber = parseInt(nonce, 16);\n\n    if (nonceNumber >= networkNextNonceNumber) {\n      return false;\n    }\n\n    let droppedBlockCount = this.#droppedBlockCountByHash.get(hash);\n\n    if (droppedBlockCount === undefined) {\n      droppedBlockCount = 0;\n      this.#droppedBlockCountByHash.set(hash, droppedBlockCount);\n    }\n\n    if (droppedBlockCount < DROPPED_BLOCK_COUNT) {\n      log('Incrementing dropped block count', { id, droppedBlockCount });\n      this.#droppedBlockCountByHash.set(hash, droppedBlockCount + 1);\n      return false;\n    }\n\n    log('Hit dropped block count', id);\n\n    this.#droppedBlockCountByHash.delete(hash);\n    return true;\n  }\n\n  #isNonceTaken(txMeta: TransactionMeta): boolean {\n    const { id, txParams } = txMeta;\n\n    return this.#getTransactions().some(\n      (tx) =>\n        tx.id !== id &&\n        tx.txParams.from === txParams.from &&\n        tx.status === TransactionStatus.confirmed &&\n        tx.txParams.nonce === txParams.nonce,\n    );\n  }\n\n  #getPendingTransactions(transactions?: TransactionMeta[]): TransactionMeta[] {\n    const currentChainId = this.#getChainId();\n\n    return (transactions ?? this.#getTransactions()).filter(\n      (tx) =>\n        tx.status === TransactionStatus.submitted &&\n        tx.chainId === currentChainId &&\n        !tx.verifiedOnBlockchain,\n    );\n  }\n\n  #warnTransaction(txMeta: TransactionMeta, error: string, message: string) {\n    txMeta.warning = {\n      error,\n      message,\n    };\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:#warnTransaction - Warning added',\n    );\n  }\n\n  #failTransaction(txMeta: TransactionMeta, error: Error) {\n    log('Transaction failed', txMeta.id, error);\n    this.hub.emit('transaction-failed', txMeta, error);\n  }\n\n  #dropTransaction(txMeta: TransactionMeta) {\n    log('Transaction dropped', txMeta.id);\n    this.hub.emit('transaction-dropped', txMeta);\n  }\n\n  #updateTransaction(txMeta: TransactionMeta, note: string) {\n    this.hub.emit('transaction-updated', txMeta, note);\n  }\n\n  async #getTransactionReceipt(\n    txHash?: string,\n  ): Promise<TransactionReceipt | undefined> {\n    return await query(this.#getEthQuery(), 'getTransactionReceipt', [txHash]);\n  }\n\n  async #getBlockByHash(\n    blockHash: string,\n    includeTransactionDetails: boolean,\n  ): Promise<any> {\n    return await query(this.#getEthQuery(), 'getBlockByHash', [\n      blockHash,\n      includeTransactionDetails,\n    ]);\n  }\n\n  async #getNetworkTransactionCount(address: string): Promise<string> {\n    return await query(this.#getEthQuery(), 'getTransactionCount', [address]);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"PendingTransactionTracker.js","sourceRoot":"","sources":["../../src/helpers/PendingTransactionTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type { BlockTracker } from '@metamask/network-controller';\nimport { createModuleLogger } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport type { NonceTracker } from 'nonce-tracker';\n\nimport { projectLogger } from '../logger';\nimport type { TransactionState } from '../TransactionController';\nimport type { TransactionMeta, TransactionReceipt } from '../types';\nimport { TransactionStatus } from '../types';\n\n/**\n * We wait this many blocks before emitting a 'transaction-dropped' event\n * This is because we could be talking to a node that is out of sync\n */\nconst DROPPED_BLOCK_COUNT = 3;\n\nconst MAX_RETRY_BLOCK_DISTANCE = 50;\n\nconst KNOWN_TRANSACTION_ERRORS = [\n  'replacement transaction underpriced',\n  'known transaction',\n  'gas price too low to replace',\n  'transaction with the same hash was already imported',\n  'gateway timeout',\n  'nonce too low',\n];\n\nconst log = createModuleLogger(projectLogger, 'pending-transactions');\n\ntype SuccessfulTransactionReceipt = TransactionReceipt & {\n  blockNumber: string;\n  blockHash: string;\n};\n\ntype Events = {\n  'transaction-confirmed': [txMeta: TransactionMeta];\n  'transaction-dropped': [txMeta: TransactionMeta];\n  'transaction-failed': [txMeta: TransactionMeta, error: Error];\n  'transaction-updated': [txMeta: TransactionMeta, note: string];\n};\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface PendingTransactionTrackerEventEmitter extends EventEmitter {\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): this;\n\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n}\n\nexport class PendingTransactionTracker {\n  hub: PendingTransactionTrackerEventEmitter;\n\n  #approveTransaction: (transactionId: string) => Promise<void>;\n\n  #blockTracker: BlockTracker;\n\n  #droppedBlockCountByHash: Map<string, number>;\n\n  #getChainId: () => string;\n\n  #getEthQuery: () => EthQuery;\n\n  #getTransactions: () => TransactionMeta[];\n\n  #isResubmitEnabled: boolean;\n\n  #listener: any;\n\n  #nonceTracker: NonceTracker;\n\n  #onStateChange: (listener: (state: TransactionState) => void) => void;\n\n  #publishTransaction: (rawTx: string) => Promise<string>;\n\n  #running: boolean;\n\n  #beforeCheckPendingTransaction: (transactionMeta: TransactionMeta) => boolean;\n\n  #beforePublish: (transactionMeta: TransactionMeta) => boolean;\n\n  constructor({\n    approveTransaction,\n    blockTracker,\n    getChainId,\n    getEthQuery,\n    getTransactions,\n    isResubmitEnabled,\n    nonceTracker,\n    onStateChange,\n    publishTransaction,\n    hooks,\n  }: {\n    approveTransaction: (transactionId: string) => Promise<void>;\n    blockTracker: BlockTracker;\n    getChainId: () => string;\n    getEthQuery: () => EthQuery;\n    getTransactions: () => TransactionMeta[];\n    isResubmitEnabled?: boolean;\n    nonceTracker: NonceTracker;\n    onStateChange: (listener: (state: TransactionState) => void) => void;\n    publishTransaction: (rawTx: string) => Promise<string>;\n    hooks?: {\n      beforeCheckPendingTransaction?: (\n        transactionMeta: TransactionMeta,\n      ) => boolean;\n      beforePublish?: (transactionMeta: TransactionMeta) => boolean;\n    };\n  }) {\n    this.hub = new EventEmitter() as PendingTransactionTrackerEventEmitter;\n\n    this.#approveTransaction = approveTransaction;\n    this.#blockTracker = blockTracker;\n    this.#droppedBlockCountByHash = new Map();\n    this.#getChainId = getChainId;\n    this.#getEthQuery = getEthQuery;\n    this.#getTransactions = getTransactions;\n    this.#isResubmitEnabled = isResubmitEnabled ?? true;\n    this.#listener = this.#onLatestBlock.bind(this);\n    this.#nonceTracker = nonceTracker;\n    this.#onStateChange = onStateChange;\n    this.#publishTransaction = publishTransaction;\n    this.#running = false;\n    this.#beforePublish = hooks?.beforePublish ?? (() => true);\n    this.#beforeCheckPendingTransaction =\n      hooks?.beforeCheckPendingTransaction ?? (() => true);\n\n    this.#onStateChange((state) => {\n      const pendingTransactions = this.#getPendingTransactions(\n        state.transactions,\n      );\n\n      if (pendingTransactions.length) {\n        this.#start();\n      } else {\n        this.#stop();\n      }\n    });\n  }\n\n  #start() {\n    if (this.#running) {\n      return;\n    }\n\n    this.#blockTracker.on('latest', this.#listener);\n    this.#running = true;\n\n    log('Started polling');\n  }\n\n  #stop() {\n    if (!this.#running) {\n      return;\n    }\n\n    this.#blockTracker.removeListener('latest', this.#listener);\n    this.#running = false;\n\n    log('Stopped polling');\n  }\n\n  async #onLatestBlock(latestBlockNumber: string) {\n    const nonceGlobalLock = await this.#nonceTracker.getGlobalLock();\n\n    try {\n      await this.#checkTransactions();\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check transactions', error);\n    } finally {\n      nonceGlobalLock.releaseLock();\n    }\n\n    try {\n      await this.#resubmitTransactions(latestBlockNumber);\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to resubmit transactions', error);\n    }\n  }\n\n  async #checkTransactions() {\n    log('Checking transactions');\n\n    const pendingTransactions = this.#getPendingTransactions();\n\n    if (!pendingTransactions.length) {\n      log('No pending transactions to check');\n      return;\n    }\n\n    log('Found pending transactions to check', {\n      count: pendingTransactions.length,\n      ids: pendingTransactions.map((tx) => tx.id),\n    });\n\n    await Promise.all(\n      pendingTransactions.map((tx) => this.#checkTransaction(tx)),\n    );\n  }\n\n  async #resubmitTransactions(latestBlockNumber: string) {\n    if (!this.#isResubmitEnabled || !this.#running) {\n      return;\n    }\n\n    log('Resubmitting transactions');\n\n    const pendingTransactions = this.#getPendingTransactions();\n\n    if (!pendingTransactions.length) {\n      log('No pending transactions to resubmit');\n      return;\n    }\n\n    log('Found pending transactions to resubmit', {\n      count: pendingTransactions.length,\n      ids: pendingTransactions.map((tx) => tx.id),\n    });\n\n    for (const txMeta of pendingTransactions) {\n      try {\n        await this.#resubmitTransaction(txMeta, latestBlockNumber);\n      } catch (error: any) {\n        /* istanbul ignore next */\n        const errorMessage =\n          error.value?.message?.toLowerCase() || error.message.toLowerCase();\n\n        if (this.#isKnownTransactionError(errorMessage)) {\n          log('Ignoring known transaction error', errorMessage);\n          return;\n        }\n\n        this.#warnTransaction(\n          txMeta,\n          error.message,\n          'There was an error when resubmitting this transaction.',\n        );\n      }\n    }\n  }\n\n  #isKnownTransactionError(errorMessage: string) {\n    return KNOWN_TRANSACTION_ERRORS.some((knownError) =>\n      errorMessage.includes(knownError),\n    );\n  }\n\n  async #resubmitTransaction(\n    txMeta: TransactionMeta,\n    latestBlockNumber: string,\n  ) {\n    if (!this.#isResubmitDue(txMeta, latestBlockNumber)) {\n      return;\n    }\n\n    log('Resubmitting transaction', txMeta.id);\n\n    const { rawTx } = txMeta;\n\n    if (!this.#beforePublish(txMeta)) {\n      return;\n    }\n\n    if (!rawTx?.length) {\n      log('Approving transaction as no raw value');\n      await this.#approveTransaction(txMeta.id);\n      return;\n    }\n\n    await this.#publishTransaction(rawTx);\n\n    txMeta.retryCount = (txMeta.retryCount ?? 0) + 1;\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:transaction-retry - Retry count increased',\n    );\n  }\n\n  #isResubmitDue(txMeta: TransactionMeta, latestBlockNumber: string): boolean {\n    if (!txMeta.firstRetryBlockNumber) {\n      txMeta.firstRetryBlockNumber = latestBlockNumber;\n\n      this.#updateTransaction(\n        txMeta,\n        'PendingTransactionTracker:#isResubmitDue - First retry block number set',\n      );\n    }\n\n    const firstRetryBlockNumber =\n      txMeta.firstRetryBlockNumber || latestBlockNumber;\n\n    const blocksSinceFirstRetry =\n      Number.parseInt(latestBlockNumber, 16) -\n      Number.parseInt(firstRetryBlockNumber, 16);\n\n    const retryCount = txMeta.retryCount || 0;\n\n    // Exponential backoff to limit retries at publishing\n    // Capped at ~15 minutes between retries\n    const requiredBlocksSinceFirstRetry = Math.min(\n      MAX_RETRY_BLOCK_DISTANCE,\n      Math.pow(2, retryCount),\n    );\n\n    return blocksSinceFirstRetry >= requiredBlocksSinceFirstRetry;\n  }\n\n  async #checkTransaction(txMeta: TransactionMeta) {\n    const { hash, id } = txMeta;\n\n    if (!hash && this.#beforeCheckPendingTransaction(txMeta)) {\n      const error = new Error(\n        'We had an error while submitting this transaction, please try again.',\n      );\n\n      error.name = 'NoTxHashError';\n\n      this.#failTransaction(txMeta, error);\n\n      return;\n    }\n\n    if (this.#isNonceTaken(txMeta)) {\n      log('Nonce already taken', id);\n      this.#dropTransaction(txMeta);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getTransactionReceipt(hash);\n      const isSuccess = receipt?.status === '0x1';\n\n      if (receipt && !isSuccess) {\n        log('Transaction receipt has failed status');\n\n        this.#failTransaction(\n          txMeta,\n          new Error('Transaction dropped or replaced'),\n        );\n\n        return;\n      }\n\n      const { blockNumber, blockHash } = receipt || {};\n\n      if (isSuccess && blockNumber && blockHash) {\n        await this.#onTransactionConfirmed(txMeta, {\n          ...receipt,\n          blockNumber,\n          blockHash,\n        });\n\n        return;\n      }\n    } catch (error: any) {\n      log('Failed to check transaction', id, error);\n\n      this.#warnTransaction(\n        txMeta,\n        error.message,\n        'There was a problem loading this transaction.',\n      );\n\n      return;\n    }\n\n    if (await this.#isTransactionDropped(txMeta)) {\n      this.#dropTransaction(txMeta);\n    }\n  }\n\n  async #onTransactionConfirmed(\n    txMeta: TransactionMeta,\n    receipt: SuccessfulTransactionReceipt,\n  ) {\n    const { id } = txMeta;\n    const { blockHash } = receipt;\n\n    log('Transaction confirmed', id);\n\n    const { baseFeePerGas, timestamp: blockTimestamp } =\n      await this.#getBlockByHash(blockHash, false);\n\n    txMeta.baseFeePerGas = baseFeePerGas;\n    txMeta.blockTimestamp = blockTimestamp;\n    txMeta.status = TransactionStatus.confirmed;\n    txMeta.txParams.gasUsed = receipt.gasUsed;\n    txMeta.txReceipt = receipt;\n    txMeta.verifiedOnBlockchain = true;\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:#onTransactionConfirmed - Transaction confirmed',\n    );\n\n    this.hub.emit('transaction-confirmed', txMeta);\n  }\n\n  async #isTransactionDropped(txMeta: TransactionMeta) {\n    const {\n      hash,\n      id,\n      txParams: { nonce, from },\n    } = txMeta;\n\n    /* istanbul ignore next */\n    if (!nonce || !hash) {\n      return false;\n    }\n\n    const networkNextNonceHex = await this.#getNetworkTransactionCount(from);\n    const networkNextNonceNumber = parseInt(networkNextNonceHex, 16);\n    const nonceNumber = parseInt(nonce, 16);\n\n    if (nonceNumber >= networkNextNonceNumber) {\n      return false;\n    }\n\n    let droppedBlockCount = this.#droppedBlockCountByHash.get(hash);\n\n    if (droppedBlockCount === undefined) {\n      droppedBlockCount = 0;\n      this.#droppedBlockCountByHash.set(hash, droppedBlockCount);\n    }\n\n    if (droppedBlockCount < DROPPED_BLOCK_COUNT) {\n      log('Incrementing dropped block count', { id, droppedBlockCount });\n      this.#droppedBlockCountByHash.set(hash, droppedBlockCount + 1);\n      return false;\n    }\n\n    log('Hit dropped block count', id);\n\n    this.#droppedBlockCountByHash.delete(hash);\n    return true;\n  }\n\n  #isNonceTaken(txMeta: TransactionMeta): boolean {\n    const { id, txParams } = txMeta;\n\n    return this.#getTransactions().some(\n      (tx) =>\n        tx.id !== id &&\n        tx.txParams.from === txParams.from &&\n        tx.status === TransactionStatus.confirmed &&\n        tx.txParams.nonce === txParams.nonce,\n    );\n  }\n\n  #getPendingTransactions(transactions?: TransactionMeta[]): TransactionMeta[] {\n    const currentChainId = this.#getChainId();\n\n    return (transactions ?? this.#getTransactions()).filter(\n      (tx) =>\n        tx.status === TransactionStatus.submitted &&\n        tx.chainId === currentChainId &&\n        !tx.verifiedOnBlockchain,\n    );\n  }\n\n  #warnTransaction(txMeta: TransactionMeta, error: string, message: string) {\n    txMeta.warning = {\n      error,\n      message,\n    };\n\n    this.#updateTransaction(\n      txMeta,\n      'PendingTransactionTracker:#warnTransaction - Warning added',\n    );\n  }\n\n  #failTransaction(txMeta: TransactionMeta, error: Error) {\n    log('Transaction failed', txMeta.id, error);\n    this.hub.emit('transaction-failed', txMeta, error);\n  }\n\n  #dropTransaction(txMeta: TransactionMeta) {\n    log('Transaction dropped', txMeta.id);\n    this.hub.emit('transaction-dropped', txMeta);\n  }\n\n  #updateTransaction(txMeta: TransactionMeta, note: string) {\n    this.hub.emit('transaction-updated', txMeta, note);\n  }\n\n  async #getTransactionReceipt(\n    txHash?: string,\n  ): Promise<TransactionReceipt | undefined> {\n    return await query(this.#getEthQuery(), 'getTransactionReceipt', [txHash]);\n  }\n\n  async #getBlockByHash(\n    blockHash: string,\n    includeTransactionDetails: boolean,\n  ): Promise<any> {\n    return await query(this.#getEthQuery(), 'getBlockByHash', [\n      blockHash,\n      includeTransactionDetails,\n    ]);\n  }\n\n  async #getNetworkTransactionCount(address: string): Promise<string> {\n    return await query(this.#getEthQuery(), 'getTransactionCount', [address]);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/index.d.ts.map b/dist/index.d.ts.map
deleted file mode 100644
index 74d0a452f606e9ec2a0544c7c9a7040dc995a73f..0000000000000000000000000000000000000000
--- a/dist/index.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,yBAAyB,CAAC;AACxC,YAAY,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAClE,OAAO,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AACrD,cAAc,SAAS,CAAC"}
\ No newline at end of file
diff --git a/dist/index.js.map b/dist/index.js.map
deleted file mode 100644
index 4149475a7ed296d3f75f6f075a5c07b0213351bd..0000000000000000000000000000000000000000
--- a/dist/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0DAAwC;AAExC,uCAAqD;AAA5C,6GAAA,oBAAoB,OAAA;AAC7B,0CAAwB","sourcesContent":["export * from './TransactionController';\nexport type { EtherscanTransactionMeta } from './utils/etherscan';\nexport { isEIP1559Transaction } from './utils/utils';\nexport * from './types';\n"]}
\ No newline at end of file
diff --git a/dist/logger.d.ts.map b/dist/logger.d.ts.map
deleted file mode 100644
index d370271000fb0626c06e97504e6140d9dc99b67e..0000000000000000000000000000000000000000
--- a/dist/logger.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"logger.d.ts","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";AAEA,OAAO,EAAuB,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAE1E,eAAO,MAAM,aAAa,0BAAgD,CAAC;AAE3E,eAAO,MAAM,0BAA0B,0BAGtC,CAAC;AAEF,OAAO,EAAE,kBAAkB,EAAE,CAAC"}
\ No newline at end of file
diff --git a/dist/logger.js.map b/dist/logger.js.map
deleted file mode 100644
index 544f60a4e5bc79187383203f7a2ca8b36e4708d9..0000000000000000000000000000000000000000
--- a/dist/logger.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";AAAA,0BAA0B;;;AAE1B,2CAA0E;AASjE,mGATqB,0BAAkB,OASrB;AAPd,QAAA,aAAa,GAAG,IAAA,2BAAmB,EAAC,wBAAwB,CAAC,CAAC;AAE9D,QAAA,0BAA0B,GAAG,IAAA,0BAAkB,EAC1D,qBAAa,EACb,uBAAuB,CACxB,CAAC","sourcesContent":["/* istanbul ignore file */\n\nimport { createProjectLogger, createModuleLogger } from '@metamask/utils';\n\nexport const projectLogger = createProjectLogger('transaction-controller');\n\nexport const incomingTransactionsLogger = createModuleLogger(\n  projectLogger,\n  'incoming-transactions',\n);\n\nexport { createModuleLogger };\n"]}
\ No newline at end of file
diff --git a/dist/types.d.ts b/dist/types.d.ts
index 17c9fb78aed2b00afb16c4db15b3a975b9c9b6e8..ff1ef7e71c533072ca8ee29a6ab25ab507c71cd4 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -40,6 +40,9 @@ export declare type Events = {
             actionId?: string;
         }
     ];
+    ['transaction-status-update']: [{
+        transactionMeta: TransactionMeta;
+    }];
     ['transaction-submitted']: [
         {
             transactionMeta: TransactionMeta;
@@ -47,8 +50,9 @@ export declare type Events = {
         }
     ];
     ['unapprovedTransaction']: [transactionMeta: TransactionMeta];
-    [key: `${string}:finished`]: [transactionMeta: TransactionMeta];
     [key: `${string}:confirmed`]: [transactionMeta: TransactionMeta];
+    [key: `${string}:finished`]: [transactionMeta: TransactionMeta];
+    [key: `${string}:publish-skip`]: [tansactionMeta: TransactionMeta];
     [key: `${string}:speedup`]: [transactionMeta: TransactionMeta];
 };
 /**
@@ -282,7 +286,7 @@ declare type TransactionMetaBase = {
     /**
      * The metadata of the swap transaction.
      */
-    swapMetaData?: Record<string, unknown>;
+    swapMetaData?: Record<string, any>;
     /**
      * The value of the token being swapped.
      */
@@ -583,9 +587,9 @@ export interface TransactionReceipt {
      */
     status?: string;
     /**
-     * The index of this transaction in the list of transactions included in the block this transaction was mined in.
+     * The hexadecimal index of this transaction in the list of transactions included in the block this transaction was mined in.
      */
-    transactionIndex?: number;
+    transactionIndex?: string;
 }
 /**
  * Represents an event that has been included in a transaction using the EVM `LOG` opcode.
diff --git a/dist/types.d.ts.map b/dist/types.d.ts.map
deleted file mode 100644
index b83dee5b03d42643450145985e2ff9e6fc428b05..0000000000000000000000000000000000000000
--- a/dist/types.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.js.map b/dist/types.js.map
deleted file mode 100644
index 52b4c168eab84761247b24f225ac85f193590558..0000000000000000000000000000000000000000
--- a/dist/types.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAoZA;;;;GAIG;AACH,IAAY,iBAWX;AAXD,WAAY,iBAAiB;IAC3B,0CAAqB,CAAA;IACrB,wFAAwF;IACxF,4CAAuB,CAAA;IACvB,4CAAuB,CAAA;IACvB,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;IACjB,0CAAqB,CAAA;IACrB,sCAAiB,CAAA;IACjB,4CAAuB,CAAA;IACvB,8CAAyB,CAAA;AAC3B,CAAC,EAXW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAW5B;AAED;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,6CAA6B,CAAA;IAC7B,mDAAmC,CAAA;IACnC,sCAAsB,CAAA;AACxB,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB;AAED;;GAEG;AACH,IAAY,eA+GX;AA/GD,WAAY,eAAe;IACzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;;;OAIG;IACH,8DAA2C,CAAA;IAE3C;;OAEG;IACH,wDAAqC,CAAA;IAErC;;OAEG;IACH,6CAA0B,CAAA;IAE1B;;OAEG;IACH,2EAAwD,CAAA;IAExD;;OAEG;IACH,wCAAqB,CAAA;IAErB;;OAEG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,4CAAyB,CAAA;IAEzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;OAEG;IACH,sDAAmC,CAAA;IAEnC;;OAEG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,gCAAa,CAAA;IAEb;;;;;OAKG;IACH,gDAA6B,CAAA;IAE7B;;;OAGG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,mEAAgD,CAAA;IAEhD;;;OAGG;IACH,mDAAgC,CAAA;IAEhC;;;;OAIG;IACH,2DAAwC,CAAA;IAExC;;;OAGG;IACH,qEAAkD,CAAA;AACpD,CAAC,EA/GW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QA+G1B;AAuSD;;;GAGG;AACH,IAAY,uBAsBX;AAtBD,WAAY,uBAAuB;IACjC;;OAEG;IACH,yCAAc,CAAA;IAEd;;;;OAIG;IACH,6CAAkB,CAAA;IAElB;;;;;;;OAOG;IACH,4CAAiB,CAAA;AACnB,CAAC,EAtBW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAsBlC;AAED;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,iCAAiB,CAAA;IACjB,gDAAgC,CAAA;IAChC,iCAAiB,CAAA;AACnB,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB","sourcesContent":["import type { AccessList } from '@ethereumjs/tx';\nimport type { Hex } from '@metamask/utils';\nimport type { Operation } from 'fast-json-patch';\n\nexport type Events = {\n  ['incomingTransactionBlock']: [blockNumber: number];\n  ['post-transaction-balance-updated']: [\n    {\n      transactionMeta: TransactionMeta;\n      approvalTransactionMeta?: TransactionMeta;\n    },\n  ];\n  ['transaction-approved']: [\n    { transactionMeta: TransactionMeta; actionId?: string },\n  ];\n  ['transaction-confirmed']: [{ transactionMeta: TransactionMeta }];\n\n  ['transaction-dropped']: [{ transactionMeta: TransactionMeta }];\n  ['transaction-failed']: [\n    {\n      actionId?: string;\n      error: string;\n      transactionMeta: TransactionMeta;\n    },\n  ];\n  ['transaction-new-swap']: [{ transactionMeta: TransactionMeta }];\n  ['transaction-new-swap-approval']: [{ transactionMeta: TransactionMeta }];\n  ['transaction-rejected']: [\n    { transactionMeta: TransactionMeta; actionId?: string },\n  ];\n  ['transaction-submitted']: [\n    { transactionMeta: TransactionMeta; actionId?: string },\n  ];\n  ['unapprovedTransaction']: [transactionMeta: TransactionMeta];\n  [key: `${string}:finished`]: [transactionMeta: TransactionMeta];\n  [key: `${string}:confirmed`]: [transactionMeta: TransactionMeta];\n  [key: `${string}:speedup`]: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Representation of transaction metadata.\n */\nexport type TransactionMeta = TransactionMetaBase &\n  (\n    | { status: Exclude<TransactionStatus, TransactionStatus.failed> }\n    | {\n        status: TransactionStatus.failed;\n        error: TransactionError;\n      }\n  );\n\n/**\n * Information about a single transaction such as status and block number.\n */\ntype TransactionMetaBase = {\n  /**\n   * ID of the transaction that approved the swap token transfer.\n   */\n  approvalTxId?: string;\n\n  /**\n   * Unique ID to prevent duplicate requests.\n   */\n  actionId?: string;\n\n  /**\n   * Base fee of the block as a hex value, introduced in EIP-1559.\n   */\n  baseFeePerGas?: Hex;\n\n  /**\n   * Number of the block where the transaction has been included.\n   */\n  blockNumber?: string;\n\n  /**\n   * The timestamp for when the block was collated.\n   */\n  blockTimestamp?: string;\n\n  /**\n   * Network code as per EIP-155 for this transaction.\n   */\n  chainId: Hex;\n\n  /**\n   * A string representing a name of transaction contract method.\n   */\n  contractMethodName?: string;\n\n  /**\n   * The balance of the token that is being sent.\n   */\n  currentTokenBalance?: string;\n\n  /**\n   * Unique ID for custodian transaction.\n   */\n  custodyId?: string;\n\n  /**\n   * Custodian transaction status.\n   */\n  custodyStatus?: string;\n\n  /**\n   * The custom token amount is the amount set by the user.\n   */\n  customTokenAmount?: string;\n\n  /**\n   * The dapp proposed token amount.\n   */\n  dappProposedTokenAmount?: string;\n\n  /**\n   * Gas values provided by the dApp.\n   */\n  dappSuggestedGasFees?: DappSuggestedGasFees;\n\n  /**\n   * The initial gas values set when the transaction was first created.\n   */\n  defaultGasEstimates?: DefaultGasEstimates;\n\n  /**\n   * String to indicate what device the transaction was confirmed on.\n   */\n  deviceConfirmedOn?: WalletDevice;\n\n  /**\n   * The address of the token being received of swap transaction.\n   */\n  destinationTokenAddress?: string;\n\n  /**\n   * The decimals of the token being received of swap transaction.\n   */\n  destinationTokenDecimals?: string;\n\n  /**\n   * The symbol of the token being received with swap.\n   */\n  destinationTokenSymbol?: string;\n\n  /**\n   * The estimated base fee of the transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * The chosen amount which will be the same as the originally proposed token\n   * amount if the user does not edit the  amount or will be a custom token\n   * amount set by the user.\n   */\n  finalApprovalAmount?: string;\n\n  /**\n   * The number of the latest block when the transaction submit was first retried.\n   */\n  firstRetryBlockNumber?: string;\n\n  /**\n   * A hex string of the transaction hash, used to identify the transaction on the network.\n   */\n  hash?: string;\n\n  /**\n   * A history of mutations to TransactionMeta.\n   */\n  history?: TransactionHistory;\n\n  /**\n   * Generated UUID associated with this transaction.\n   */\n  id: string;\n\n  /**\n   * Whether the transaction is a transfer.\n   */\n  isTransfer?: boolean;\n\n  /**\n   * Network code as per EIP-155 for this transaction\n   *\n   * @deprecated Use `chainId` instead.\n   */\n  readonly networkID?: string;\n\n  /**\n   * Origin this transaction was sent from.\n   */\n  origin?: string;\n\n  /**\n   * The original dapp proposed token approval amount before edit by user.\n   */\n  originalApprovalAmount?: string;\n\n  /**\n   * The original gas estimation of the transaction.\n   */\n  originalGasEstimate?: string;\n\n  /**\n   * When we speed up a transaction, we set the type as Retry and we lose\n   * information about type of transaction that is being set up, so we use\n   * original type to track that information.\n   */\n  originalType?: TransactionType;\n\n  /**\n   * Account transaction balance after swap.\n   */\n  postTxBalance?: string;\n\n  /**\n   * Account transaction balance before swap.\n   */\n  preTxBalance?: string;\n\n  /**\n   * The previous gas properties before they were updated.\n   */\n  previousGas?: {\n    /**\n     * Maxmimum number of units of gas to use for this transaction.\n     */\n    gasLimit?: string;\n\n    /**\n     * Maximum amount per gas to pay for the transaction, including the priority fee.\n     */\n    maxFeePerGas?: string;\n\n    /**\n     * Maximum amount per gas to give to validator as incentive.\n     */\n    maxPriorityFeePerGas?: string;\n  };\n\n  /**\n   * The transaction's 'r' value as a hex string.\n   */\n  r?: string;\n\n  /**\n   * Hex representation of the underlying transaction.\n   */\n  rawTx?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction hash.\n   */\n  replacedBy?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction ID.\n   */\n  replacedById?: string;\n\n  /**\n   * The number of times that the transaction submit has been retried.\n   */\n  retryCount?: number;\n\n  /**\n   * The transaction's 's' value as a hex string.\n   */\n  s?: string;\n\n  /**\n   * Response from security validator.\n   */\n  securityAlertResponse?: SecurityAlertResponse;\n\n  /**\n   * Response from security provider.\n   */\n  securityProviderResponse?: Record<string, any>;\n\n  /**\n   * An array of entries that describe the user's journey through the send flow.\n   * This is purely attached to state logs for troubleshooting and support.\n   */\n  sendFlowHistory?: SendFlowHistoryEntry[];\n\n  /**\n   * If the gas estimation fails, an object containing error and block information.\n   */\n  simulationFails?: {\n    reason?: string;\n    errorKey?: string;\n    debug: {\n      blockNumber?: string;\n      blockGasLimit?: string;\n    };\n  };\n\n  /**\n   * The time the transaction was submitted to the network, in Unix epoch time (ms).\n   */\n  submittedTime?: number;\n\n  /**\n   * The symbol of the token being swapped.\n   */\n  sourceTokenSymbol?: string;\n\n  /**\n   * The metadata of the swap transaction.\n   */\n  swapMetaData?: Record<string, unknown>;\n\n  /**\n   * The value of the token being swapped.\n   */\n  swapTokenValue?: string;\n\n  /**\n   * Timestamp associated with this transaction.\n   */\n  time: number;\n\n  /**\n   * Whether transaction recipient is a smart contract.\n   */\n  toSmartContract?: boolean;\n\n  /**\n   * Additional transfer information.\n   */\n  transferInformation?: {\n    contractAddress: string;\n    decimals: number;\n    symbol: string;\n  };\n\n  /**\n   * Underlying Transaction object.\n   */\n  txParams: TransactionParams;\n\n  /**\n   * Transaction receipt.\n   */\n  txReceipt?: TransactionReceipt;\n\n  /**\n   * The type of transaction such as `cancel` or `swap`.\n   */\n  type?: TransactionType;\n\n  /**\n   * The gas limit supplied by user.\n   */\n  userEditedGasLimit?: boolean;\n\n  /**\n   * Estimate level user selected.\n   */\n  userFeeLevel?: string;\n\n  /**\n   * The transaction's 'v' value as a hex string.\n   */\n  v?: string;\n\n  /**\n   * Whether the transaction is verified on the blockchain.\n   */\n  verifiedOnBlockchain?: boolean;\n\n  /**\n   * Warning information for the transaction.\n   */\n  warning?: {\n    error: string;\n    message: string;\n  };\n};\n\nexport type SendFlowHistoryEntry = {\n  /**\n   * String to indicate user interaction information.\n   */\n  entry: string;\n\n  /**\n   * Timestamp associated with this entry.\n   */\n  timestamp: number;\n};\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nexport enum TransactionStatus {\n  approved = 'approved',\n  /** @deprecated Determined by the clients using the transaction type. No longer used. */\n  cancelled = 'cancelled',\n  confirmed = 'confirmed',\n  dropped = 'dropped',\n  failed = 'failed',\n  rejected = 'rejected',\n  signed = 'signed',\n  submitted = 'submitted',\n  unapproved = 'unapproved',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * The type of the transaction.\n */\nexport enum TransactionType {\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  cancel = 'cancel',\n\n  /**\n   * A transaction that is interacting with a smart contract's methods that we\n   * have not treated as a special case, such as approve, transfer, and\n   * transferfrom.\n   */\n  contractInteraction = 'contractInteraction',\n\n  /**\n   * A transaction that deployed a smart contract.\n   */\n  deployContract = 'contractDeployment',\n\n  /**\n   * A transaction for Ethereum decryption.\n   */\n  ethDecrypt = 'eth_decrypt',\n\n  /**\n   * A transaction for getting an encryption public key.\n   */\n  ethGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n\n  /**\n   * An incoming (deposit) transaction.\n   */\n  incoming = 'incoming',\n\n  /**\n   * A transaction for personal sign.\n   */\n  personalSign = 'personal_sign',\n\n  /**\n   * When a transaction is failed it can be retried by\n   * resubmitting the same transaction with a higher gas fee. This type is also used\n   * to speed up pending transactions. This is accomplished by creating a new tx with\n   * the same nonce and higher gas fees.\n   */\n  retry = 'retry',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  simpleSend = 'simpleSend',\n\n  /**\n   * A transaction that is signing a message.\n   */\n  sign = 'eth_sign',\n\n  /**\n   * A transaction that is signing typed data.\n   */\n  signTypedData = 'eth_signTypedData',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  smart = 'smart',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps.\n   */\n  swap = 'swap',\n\n  /**\n   * Similar to the approve type, a swap approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Swaps contract. The first swap for any token\n   * will have an accompanying swapApproval transaction.\n   */\n  swapApproval = 'swapApproval',\n\n  /**\n   * A token transaction requesting an allowance of the token to spend on\n   * behalf of the user.\n   */\n  tokenMethodApprove = 'approve',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. The method is prefixed with safe because when calling\n   * this method the contract checks to ensure that the receiver is an address\n   * capable of handling the token being sent.\n   */\n  tokenMethodSafeTransferFrom = 'safetransferfrom',\n\n  /**\n   * A token transaction where the user is sending tokens that they own to\n   * another address.\n   */\n  tokenMethodTransfer = 'transfer',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. For more information on allowances, see the approve\n   * type.\n   */\n  tokenMethodTransferFrom = 'transferfrom',\n\n  /**\n   * A token transaction requesting an allowance of all of a user's tokens to\n   * spend on behalf of the user.\n   */\n  tokenMethodSetApprovalForAll = 'setapprovalforall',\n}\n\n/**\n * Standard data concerning a transaction to be processed by the blockchain.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TransactionParams {\n  /**\n   * A list of addresses and storage keys that the transaction plans to access.\n   */\n  accessList?: AccessList;\n\n  /**\n   * Network ID as per EIP-155.\n   */\n  chainId?: Hex;\n\n  /**\n   * Data to pass with this transaction.\n   */\n  data?: string;\n\n  /**\n   * Error message for gas estimation failure.\n   */\n  estimateGasError?: string;\n\n  /**\n   * Estimated base fee for this transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * Address to send this transaction from.\n   */\n  from: string;\n\n  /**\n   * same as gasLimit?\n   */\n  gas?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gasLimit?: string;\n\n  /**\n   * Price per gas for legacy txs\n   */\n  gasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority\n   * fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n\n  /**\n   * Unique number to prevent replay attacks.\n   */\n  nonce?: string;\n\n  /**\n   * Address to send this transaction to.\n   */\n  to?: string;\n\n  /**\n   * Value associated with this transaction.\n   */\n  value?: string;\n\n  /**\n   * Type of transaction.\n   * 0x0 indicates a legacy transaction.\n   */\n  type?: string;\n}\n\n/**\n * Standard data concerning a transaction processed by the blockchain.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TransactionReceipt {\n  /**\n   * The block hash of the block that this transaction was included in.\n   */\n  blockHash?: string;\n\n  /**\n   * The block number of the block that this transaction was included in.\n   */\n  blockNumber?: string;\n\n  /**\n   * Effective gas price the transaction was charged at.\n   */\n  effectiveGasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Total used gas in hex.\n   */\n  l1Fee?: string;\n\n  /**\n   * All the logs emitted by this transaction.\n   */\n  logs?: Log[];\n\n  /**\n   * The status of the transaction.\n   */\n  status?: string;\n\n  /**\n   * The index of this transaction in the list of transactions included in the block this transaction was mined in.\n   */\n  transactionIndex?: number;\n}\n\n/**\n * Represents an event that has been included in a transaction using the EVM `LOG` opcode.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Log {\n  /**\n   * Address of the contract that generated log.\n   */\n  address?: string;\n  /**\n   * List of topics for log.\n   */\n  topics?: string;\n}\n\n/**\n * The configuration required to fetch transaction data from a RemoteTransactionSource.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSourceRequest {\n  /**\n   * The address of the account to fetch transactions for.\n   */\n  address: string;\n\n  /**\n   * The chainId of the current network.\n   */\n  currentChainId: Hex;\n\n  /**\n   * Block number to start fetching transactions from.\n   */\n  fromBlock?: number;\n\n  /**\n   * Maximum number of transactions to retrieve.\n   */\n  limit?: number;\n}\n\n/**\n * An object capable of fetching transaction data from a remote source.\n * Used by the IncomingTransactionHelper to retrieve remote transaction data.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSource {\n  /**\n   * @param chainId - The chainId of the current network.\n   * @returns Whether the remote transaction source supports the specified network.\n   */\n  isSupportedNetwork: (chainId: Hex) => boolean;\n\n  /**\n   * @returns An array of additional keys to use when caching the last fetched block number.\n   */\n  getLastBlockVariations?: () => string[];\n\n  /**\n   * @param request - A request object containing data such as the address and chain ID.\n   * @returns An array of transaction metadata for the retrieved transactions.\n   */\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n\n/**\n * Gas values initially suggested by the dApp.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface DappSuggestedGasFees {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n}\n\n/**\n * Gas values saved by the user for a specific chain.\n */\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface SavedGasFees {\n  maxBaseFee: string;\n  priorityFee: string;\n}\n\n/**\n * A transaction history operation that includes a note and timestamp.\n */\ntype ExtendedHistoryOperation = Operation & {\n  note?: string;\n  timestamp?: number;\n};\n\n/**\n * A transaction history entry that includes the ExtendedHistoryOperation as the first element.\n */\nexport type TransactionHistoryEntry = [\n  ExtendedHistoryOperation,\n  ...Operation[],\n];\n\n/**\n * A transaction history that includes the transaction meta as the first element.\n * And the rest of the elements are the operation arrays that were applied to the transaction meta.\n */\nexport type TransactionHistory = [\n  TransactionMeta,\n  ...TransactionHistoryEntry[],\n];\n\n/**\n * Result of inferring the transaction type.\n */\nexport type InferTransactionTypeResult = {\n  /**\n   * The contract code, in hex format if it exists. '0x0' or\n   * '0x' are also indicators of non-existent contract code.\n   */\n  getCodeResponse?: string | null;\n\n  /**\n   * The type of transaction\n   */\n  type: TransactionType;\n};\n\n/**\n * A function for verifying a transaction, whether it is malicious or not.\n */\nexport type SecurityProviderRequest = (\n  requestData: TransactionMeta,\n  messageType: string,\n) => Promise<any>;\n\n/**\n * Specifies the shape of the base transaction parameters.\n * Added in EIP-2718.\n */\nexport enum TransactionEnvelopeType {\n  /**\n   * A legacy transaction, the very first type.\n   */\n  legacy = '0x0',\n\n  /**\n   * EIP-2930 defined the access list transaction type that allowed for\n   * specifying the state that a transaction would act upon in advance and\n   * theoretically save on gas fees.\n   */\n  accessList = '0x1',\n\n  /**\n   * The type introduced comes from EIP-1559, Fee Market describes the addition\n   * of a baseFee to blocks that will be burned instead of distributed to\n   * miners. Transactions of this type have both a maxFeePerGas (maximum total\n   * amount in gwei per gas to spend on the transaction) which is inclusive of\n   * the maxPriorityFeePerGas (maximum amount of gwei per gas from the\n   * transaction fee to distribute to miner).\n   */\n  feeMarket = '0x2',\n}\n\n/**\n * The source of the gas fee parameters on a transaction.\n */\nexport enum UserFeeLevel {\n  CUSTOM = 'custom',\n  DAPP_SUGGESTED = 'dappSuggested',\n  MEDIUM = 'medium',\n}\n\n/**\n * Initial gas values set when the transaction was first created.\n */\nexport type DefaultGasEstimates = {\n  /**\n   * Source of the gas fee values, such as `dappSuggested` or `medium`.\n   */\n  estimateType?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gas?: string;\n\n  /**\n   * Price per gas for legacy transactions.\n   */\n  gasPrice?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Data concerning an error while processing a transaction.\n */\nexport type TransactionError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack?: string;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code?: string;\n\n  /**\n   * The rpc property holds additional information related to the error.\n   */\n  rpc?: unknown;\n};\n\n/**\n * Type for security alert response from transaction validator.\n */\nexport type SecurityAlertResponse = {\n  reason: string;\n  features?: string[];\n  result_type: string;\n  providerRequestsCount?: Record<string, number>;\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils/swaps.d.ts.map b/dist/utils/swaps.d.ts.map
index 5de86188b36efebe43c8c84d5ac8a31505d8913e..a1312b76f0c62105c51c3a52686c67a9db38dec0 100644
--- a/dist/utils/swaps.d.ts.map
+++ b/dist/utils/swaps.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"swaps.d.ts","sourceRoot":"","sources":["../../src/utils/swaps.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAIhD,OAAO,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAG3C;;GAEG;AACH,eAAO,MAAM,8BAA8B,OAAO,CAAC;AAEnD;;GAEG;AACH,eAAO,MAAM,+BAA+B,IAAI,CAAC;AAIjD;;GAEG;AACH,eAAO,MAAM,qBAAqB,+CACY,CAAC;AAI/C,UAAU,gBAAgB;IACxB;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IACb;;OAEG;IACH,OAAO,EAAE,MAAM,CAAC;IAChB;;OAEG;IACH,QAAQ,EAAE,MAAM,CAAC;CAClB;AAkDD,eAAO,MAAM,+BAA+B;;;;;;;;;;CAUlC,CAAC;AAEX,eAAO,MAAM,sBAAsB,mBAGlC,CAAC;AAEF;;;;;;;;;;;;GAYG;AACH,wBAAsB,sBAAsB,CAC1C,eAAe,EAAE,eAAe,EAChC,eAAe,EAAE,eAAe,EAChC,KAAK,EAAE;IACL,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB,IAAI,CAAC,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;CACjC,EACD,EACE,eAAe,EACf,iBAAiB,EACjB,oBAAoB,GACrB,EAAE;IACD,eAAe,EAAE,OAAO,CAAC;IACzB,iBAAiB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,IAAI,CAAC;IACnD,oBAAoB,EAAE,CAAC,CAAC,SAAS,MAAM,MAAM,EAC3C,SAAS,EAAE,CAAC,EACZ,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,KACf,OAAO,CAAC;CACd,iBAyCF;AAED;;;;;;;;GAQG;AACH,wBAAsB,4BAA4B,CAChD,eAAe,EAAE,eAAe,EAChC,EACE,QAAQ,EACR,cAAc,EACd,iBAAiB,GAClB,EAAE;IACD,QAAQ,EAAE,QAAQ,CAAC;IACnB,cAAc,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,eAAe,GAAG,SAAS,CAAC;IACvE,iBAAiB,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;CAC7E,GACA,OAAO,CAAC;IACT,sBAAsB,EAAE,eAAe,CAAC;IACxC,uBAAuB,CAAC,EAAE,eAAe,CAAC;CAC3C,CAAC,CAqCD"}
\ No newline at end of file
+{"version":3,"file":"swaps.d.ts","sourceRoot":"","sources":["../../src/utils/swaps.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAKhD,OAAO,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAK3C;;GAEG;AACH,eAAO,MAAM,8BAA8B,OAAO,CAAC;AAEnD;;GAEG;AACH,eAAO,MAAM,+BAA+B,IAAI,CAAC;AAIjD;;GAEG;AACH,eAAO,MAAM,qBAAqB,+CACY,CAAC;AAI/C,UAAU,gBAAgB;IACxB;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IACb;;OAEG;IACH,OAAO,EAAE,MAAM,CAAC;IAChB;;OAEG;IACH,QAAQ,EAAE,MAAM,CAAC;CAClB;AAkDD,eAAO,MAAM,+BAA+B;;;;;;;;;;CAUlC,CAAC;AAEX,eAAO,MAAM,sBAAsB,mBAGlC,CAAC;AAEF;;;;;;;;;;;;GAYG;AACH,wBAAsB,sBAAsB,CAC1C,eAAe,EAAE,eAAe,EAChC,eAAe,EAAE,eAAe,EAChC,KAAK,EAAE;IACL,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB,IAAI,CAAC,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;CACjC,EACD,EACE,eAAe,EACf,iBAAiB,EACjB,oBAAoB,GACrB,EAAE;IACD,eAAe,EAAE,OAAO,CAAC;IACzB,iBAAiB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,IAAI,CAAC;IACnD,oBAAoB,EAAE,CAAC,CAAC,SAAS,MAAM,MAAM,EAC3C,SAAS,EAAE,CAAC,EACZ,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,KACf,OAAO,CAAC;CACd,iBAyCF;AAED;;;;;;;;GAQG;AACH,wBAAsB,4BAA4B,CAChD,eAAe,EAAE,eAAe,EAChC,EACE,QAAQ,EACR,cAAc,EACd,iBAAiB,GAClB,EAAE;IACD,QAAQ,EAAE,QAAQ,CAAC;IACnB,cAAc,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,eAAe,GAAG,SAAS,CAAC;IACvE,iBAAiB,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;CAC7E,GACA,OAAO,CAAC;IACT,sBAAsB,EAAE,eAAe,CAAC;IACxC,uBAAuB,CAAC,EAAE,eAAe,CAAC;CAC3C,CAAC,CAyDD"}
\ No newline at end of file
diff --git a/dist/utils/swaps.js b/dist/utils/swaps.js
index 444b783c2edee0f2dd67eba6f4033a9b5a992ae7..aad250ddff7b10f7994f05d79fb872ca41261f43 100644
--- a/dist/utils/swaps.js
+++ b/dist/utils/swaps.js
@@ -13,8 +13,10 @@ exports.updatePostTransactionBalance = exports.updateSwapsTransaction = exports.
 const controller_utils_1 = require("@metamask/controller-utils");
 const lodash_1 = require("lodash");
 const constants_1 = require("../constants");
+const logger_1 = require("../logger");
 const types_1 = require("../types");
 const utils_1 = require("./utils");
+const log = (0, logger_1.createModuleLogger)(logger_1.projectLogger, 'swaps');
 /**
  * Interval in milliseconds between checks of post transaction balance
  */
@@ -138,9 +140,11 @@ exports.updateSwapsTransaction = updateSwapsTransaction;
  */
 function updatePostTransactionBalance(transactionMeta, { ethQuery, getTransaction, updateTransaction, }) {
     return __awaiter(this, void 0, void 0, function* () {
+        log('Updating post transaction balance', transactionMeta.id);
         const transactionId = transactionMeta.id;
         let latestTransactionMeta, approvalTransactionMeta;
         for (let i = 0; i < exports.UPDATE_POST_TX_BALANCE_ATTEMPTS; i++) {
+            log('Querying balance', { attempt: i });
             const postTransactionBalance = yield (0, controller_utils_1.query)(ethQuery, 'getBalance', [
                 transactionMeta.txParams.from,
             ]);
@@ -152,11 +156,20 @@ function updatePostTransactionBalance(transactionMeta, { ethQuery, getTransactio
             const isDefaultTokenAddress = isSwapsDefaultTokenAddress(transactionMeta.destinationTokenAddress, transactionMeta.chainId);
             if (!isDefaultTokenAddress ||
                 transactionMeta.preTxBalance !== latestTransactionMeta.postTxBalance) {
+                log('Finishing post balance update', {
+                    isDefaultTokenAddress,
+                    preTxBalance: transactionMeta.preTxBalance,
+                    postTxBalance: latestTransactionMeta.postTxBalance,
+                });
                 break;
             }
+            log('Waiting for balance to update', {
+                delay: exports.UPDATE_POST_TX_BALANCE_TIMEOUT,
+            });
             yield sleep(exports.UPDATE_POST_TX_BALANCE_TIMEOUT);
         }
         updateTransaction(latestTransactionMeta, 'TransactionController#updatePostTransactionBalance - Add post transaction balance');
+        log('Completed post balance update', latestTransactionMeta === null || latestTransactionMeta === void 0 ? void 0 : latestTransactionMeta.postTxBalance);
         return {
             updatedTransactionMeta: latestTransactionMeta,
             approvalTransactionMeta,
diff --git a/dist/utils/swaps.js.map b/dist/utils/swaps.js.map
index 797123b2a773c846b2d9c8a5191f09968d9e7ba8..1c8144c6df367b7e7e70b626713bca41605f9606 100644
--- a/dist/utils/swaps.js.map
+++ b/dist/utils/swaps.js.map
@@ -1 +1 @@
-{"version":3,"file":"swaps.js","sourceRoot":"","sources":["../../src/utils/swaps.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport { merge, pickBy } from 'lodash';\n\nimport { CHAIN_IDS } from '../constants';\nimport type { Events, TransactionMeta } from '../types';\nimport { TransactionType } from '../types';\nimport { validateIfTransactionUnapproved } from './utils';\n\n/**\n * Interval in milliseconds between checks of post transaction balance\n */\nexport const UPDATE_POST_TX_BALANCE_TIMEOUT = 5000;\n\n/**\n * Retry attempts for checking post transaction balance\n */\nexport const UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;\n\nconst SWAPS_TESTNET_CHAIN_ID = '0x539';\n\n/**\n * An address that the metaswap-api recognizes as the default token for the current network, in place of the token address that ERC-20 tokens have\n */\nexport const DEFAULT_TOKEN_ADDRESS =\n  '0x0000000000000000000000000000000000000000';\n\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface SwapsTokenObject {\n  /**\n   * The name for the network\n   */\n  name: string;\n  /**\n   * An address that the metaswap-api recognizes as the default token\n   */\n  address: string;\n  /**\n   * Number of digits after decimal point\n   */\n  decimals: number;\n}\n\nconst ETH_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n};\n\nconst BNB_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Binance Coin',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst MATIC_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Matic',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst AVAX_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Avalanche',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst TEST_ETH_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Test Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst GOERLI_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst ARBITRUM_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nconst OPTIMISM_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nconst ZKSYNC_ERA_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nexport const SWAPS_CHAINID_DEFAULT_TOKEN_MAP = {\n  [CHAIN_IDS.MAINNET]: ETH_SWAPS_TOKEN_OBJECT,\n  [SWAPS_TESTNET_CHAIN_ID]: TEST_ETH_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.BSC]: BNB_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.POLYGON]: MATIC_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.GOERLI]: GOERLI_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.AVALANCHE]: AVAX_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.OPTIMISM]: OPTIMISM_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.ARBITRUM]: ARBITRUM_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.ZKSYNC_ERA]: ZKSYNC_ERA_SWAPS_TOKEN_OBJECT,\n} as const;\n\nexport const SWAP_TRANSACTION_TYPES = [\n  TransactionType.swap,\n  TransactionType.swapApproval,\n];\n\n/**\n * Updates the transaction meta object with the swap information\n *\n * @param transactionMeta - The transaction meta object to update\n * @param transactionType - The type of the transaction\n * @param swaps - The swaps object\n * @param swaps.hasApproveTx - Whether the swap has an approval transaction\n * @param swaps.meta - The swap meta object\n * @param updateSwapsTransactionRequest - Dependency bag\n * @param updateSwapsTransactionRequest.isSwapsDisabled - Whether swaps are disabled\n * @param updateSwapsTransactionRequest.cancelTransaction - Function to cancel a transaction\n * @param updateSwapsTransactionRequest.controllerHubEmitter - Function to emit an event to the controller hub\n */\nexport async function updateSwapsTransaction(\n  transactionMeta: TransactionMeta,\n  transactionType: TransactionType,\n  swaps: {\n    hasApproveTx?: boolean;\n    meta?: Partial<TransactionMeta>;\n  },\n  {\n    isSwapsDisabled,\n    cancelTransaction,\n    controllerHubEmitter,\n  }: {\n    isSwapsDisabled: boolean;\n    cancelTransaction: (transactionId: string) => void;\n    controllerHubEmitter: <T extends keyof Events>(\n      eventName: T,\n      ...args: Events[T]\n    ) => boolean;\n  },\n) {\n  if (isSwapsDisabled || !SWAP_TRANSACTION_TYPES.includes(transactionType)) {\n    return;\n  }\n  // The simulationFails property is added if the estimateGas call fails. In cases\n  // when no swaps approval tx is required, this indicates that the swap will likely\n  // fail. There was an earlier estimateGas call made by the swaps controller,\n  // but it is possible that external conditions have change since then, and\n  // a previously succeeding estimate gas call could now fail. By checking for\n  // the `simulationFails` property here, we can reduce the number of swap\n  // transactions that get published to the blockchain only to fail and thereby\n  // waste the user's funds on gas.\n  if (\n    transactionType === TransactionType.swap &&\n    swaps?.hasApproveTx === false &&\n    transactionMeta.simulationFails\n  ) {\n    await cancelTransaction(transactionMeta.id);\n    throw new Error('Simulation failed');\n  }\n\n  const swapsMeta = swaps?.meta as Partial<TransactionMeta>;\n\n  if (!swapsMeta) {\n    return;\n  }\n\n  if (transactionType === TransactionType.swapApproval) {\n    updateSwapApprovalTransaction(transactionMeta, swapsMeta);\n    controllerHubEmitter('transaction-new-swap-approval', {\n      transactionMeta,\n    });\n  }\n\n  if (transactionType === TransactionType.swap) {\n    updateSwapTransaction(transactionMeta, swapsMeta);\n    controllerHubEmitter('transaction-new-swap', {\n      transactionMeta,\n    });\n  }\n}\n\n/**\n * Attempts to update the post transaction balance of the provided transaction\n *\n * @param transactionMeta - Transaction meta object to update\n * @param updatePostTransactionBalanceRequest - Dependency bag\n * @param updatePostTransactionBalanceRequest.ethQuery - EthQuery object\n * @param updatePostTransactionBalanceRequest.getTransaction - Reading function for the latest transaction state\n * @param updatePostTransactionBalanceRequest.updateTransaction - Updating transaction function\n */\nexport async function updatePostTransactionBalance(\n  transactionMeta: TransactionMeta,\n  {\n    ethQuery,\n    getTransaction,\n    updateTransaction,\n  }: {\n    ethQuery: EthQuery;\n    getTransaction: (transactionId: string) => TransactionMeta | undefined;\n    updateTransaction: (transactionMeta: TransactionMeta, note: string) => void;\n  },\n): Promise<{\n  updatedTransactionMeta: TransactionMeta;\n  approvalTransactionMeta?: TransactionMeta;\n}> {\n  const transactionId = transactionMeta.id;\n\n  let latestTransactionMeta, approvalTransactionMeta;\n  for (let i = 0; i < UPDATE_POST_TX_BALANCE_ATTEMPTS; i++) {\n    const postTransactionBalance = await query(ethQuery, 'getBalance', [\n      transactionMeta.txParams.from,\n    ]);\n    latestTransactionMeta = getTransaction(transactionId) as TransactionMeta;\n    approvalTransactionMeta = latestTransactionMeta.approvalTxId\n      ? getTransaction(latestTransactionMeta.approvalTxId)\n      : undefined;\n\n    latestTransactionMeta.postTxBalance = postTransactionBalance.toString(16);\n    const isDefaultTokenAddress = isSwapsDefaultTokenAddress(\n      transactionMeta.destinationTokenAddress as string,\n      transactionMeta.chainId,\n    );\n\n    if (\n      !isDefaultTokenAddress ||\n      transactionMeta.preTxBalance !== latestTransactionMeta.postTxBalance\n    ) {\n      break;\n    }\n\n    await sleep(UPDATE_POST_TX_BALANCE_TIMEOUT);\n  }\n\n  updateTransaction(\n    latestTransactionMeta as TransactionMeta,\n    'TransactionController#updatePostTransactionBalance - Add post transaction balance',\n  );\n  return {\n    updatedTransactionMeta: latestTransactionMeta as TransactionMeta,\n    approvalTransactionMeta,\n  };\n}\n\n/**\n * Updates the transaction meta object with the swap information\n *\n * @param transactionMeta - Transaction meta object to update\n * @param propsToUpdate - Properties to update\n * @param propsToUpdate.sourceTokenSymbol - Symbol of the token to be swapped\n * @param propsToUpdate.destinationTokenSymbol - Symbol of the token to be received\n * @param propsToUpdate.type - Type of the transaction\n * @param propsToUpdate.destinationTokenDecimals - Decimals of the token to be received\n * @param propsToUpdate.destinationTokenAddress - Address of the token to be received\n * @param propsToUpdate.swapMetaData - Metadata of the swap\n * @param propsToUpdate.swapTokenValue - Value of the token to be swapped\n * @param propsToUpdate.estimatedBaseFee - Estimated base fee of the transaction\n * @param propsToUpdate.approvalTxId - Transaction id of the approval transaction\n */\nfunction updateSwapTransaction(\n  transactionMeta: TransactionMeta,\n  {\n    sourceTokenSymbol,\n    destinationTokenSymbol,\n    type,\n    destinationTokenDecimals,\n    destinationTokenAddress,\n    swapMetaData,\n    swapTokenValue,\n    estimatedBaseFee,\n    approvalTxId,\n  }: Partial<TransactionMeta>,\n) {\n  validateIfTransactionUnapproved(transactionMeta, 'updateSwapTransaction');\n\n  let swapTransaction = {\n    sourceTokenSymbol,\n    destinationTokenSymbol,\n    type,\n    destinationTokenDecimals,\n    destinationTokenAddress,\n    swapMetaData,\n    swapTokenValue,\n    estimatedBaseFee,\n    approvalTxId,\n  };\n  swapTransaction = pickBy(swapTransaction) as any;\n  merge(transactionMeta, swapTransaction);\n}\n\n/**\n * Updates the transaction meta object with the swap approval information\n *\n * @param transactionMeta - Transaction meta object to update\n * @param propsToUpdate - Properties to update\n * @param propsToUpdate.type - Type of the transaction\n * @param propsToUpdate.sourceTokenSymbol - Symbol of the token to be swapped\n */\nfunction updateSwapApprovalTransaction(\n  transactionMeta: TransactionMeta,\n  { type, sourceTokenSymbol }: Partial<TransactionMeta>,\n) {\n  validateIfTransactionUnapproved(\n    transactionMeta,\n    'updateSwapApprovalTransaction',\n  );\n\n  let swapApprovalTransaction = { type, sourceTokenSymbol } as any;\n  swapApprovalTransaction = pickBy({\n    type,\n    sourceTokenSymbol,\n  }) as Partial<TransactionMeta>;\n  merge(transactionMeta, swapApprovalTransaction);\n}\n\n/**\n * Checks whether the provided address is strictly equal to the address for\n * the default swaps token of the provided chain.\n *\n * @param address - The string to compare to the default token address\n * @param chainId - The hex encoded chain ID of the default swaps token to check\n * @returns Whether the address is the provided chain's default token address\n */\nfunction isSwapsDefaultTokenAddress(address: string, chainId: string) {\n  if (!address || !chainId) {\n    return false;\n  }\n\n  return (\n    address ===\n    SWAPS_CHAINID_DEFAULT_TOKEN_MAP[\n      chainId as keyof typeof SWAPS_CHAINID_DEFAULT_TOKEN_MAP\n    ]?.address\n  );\n}\n\n/**\n * Sleeps for the provided number of milliseconds\n *\n * @param ms - Number of milliseconds to sleep\n * @returns Promise that resolves after the provided number of milliseconds\n */\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"swaps.js","sourceRoot":"","sources":["../../src/utils/swaps.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport { merge, pickBy } from 'lodash';\n\nimport { CHAIN_IDS } from '../constants';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type { Events, TransactionMeta } from '../types';\nimport { TransactionType } from '../types';\nimport { validateIfTransactionUnapproved } from './utils';\n\nconst log = createModuleLogger(projectLogger, 'swaps');\n\n/**\n * Interval in milliseconds between checks of post transaction balance\n */\nexport const UPDATE_POST_TX_BALANCE_TIMEOUT = 5000;\n\n/**\n * Retry attempts for checking post transaction balance\n */\nexport const UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;\n\nconst SWAPS_TESTNET_CHAIN_ID = '0x539';\n\n/**\n * An address that the metaswap-api recognizes as the default token for the current network, in place of the token address that ERC-20 tokens have\n */\nexport const DEFAULT_TOKEN_ADDRESS =\n  '0x0000000000000000000000000000000000000000';\n\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface SwapsTokenObject {\n  /**\n   * The name for the network\n   */\n  name: string;\n  /**\n   * An address that the metaswap-api recognizes as the default token\n   */\n  address: string;\n  /**\n   * Number of digits after decimal point\n   */\n  decimals: number;\n}\n\nconst ETH_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n};\n\nconst BNB_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Binance Coin',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst MATIC_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Matic',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst AVAX_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Avalanche',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst TEST_ETH_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Test Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst GOERLI_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  name: 'Ether',\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18,\n} as const;\n\nconst ARBITRUM_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nconst OPTIMISM_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nconst ZKSYNC_ERA_SWAPS_TOKEN_OBJECT: SwapsTokenObject = {\n  ...ETH_SWAPS_TOKEN_OBJECT,\n} as const;\n\nexport const SWAPS_CHAINID_DEFAULT_TOKEN_MAP = {\n  [CHAIN_IDS.MAINNET]: ETH_SWAPS_TOKEN_OBJECT,\n  [SWAPS_TESTNET_CHAIN_ID]: TEST_ETH_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.BSC]: BNB_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.POLYGON]: MATIC_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.GOERLI]: GOERLI_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.AVALANCHE]: AVAX_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.OPTIMISM]: OPTIMISM_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.ARBITRUM]: ARBITRUM_SWAPS_TOKEN_OBJECT,\n  [CHAIN_IDS.ZKSYNC_ERA]: ZKSYNC_ERA_SWAPS_TOKEN_OBJECT,\n} as const;\n\nexport const SWAP_TRANSACTION_TYPES = [\n  TransactionType.swap,\n  TransactionType.swapApproval,\n];\n\n/**\n * Updates the transaction meta object with the swap information\n *\n * @param transactionMeta - The transaction meta object to update\n * @param transactionType - The type of the transaction\n * @param swaps - The swaps object\n * @param swaps.hasApproveTx - Whether the swap has an approval transaction\n * @param swaps.meta - The swap meta object\n * @param updateSwapsTransactionRequest - Dependency bag\n * @param updateSwapsTransactionRequest.isSwapsDisabled - Whether swaps are disabled\n * @param updateSwapsTransactionRequest.cancelTransaction - Function to cancel a transaction\n * @param updateSwapsTransactionRequest.controllerHubEmitter - Function to emit an event to the controller hub\n */\nexport async function updateSwapsTransaction(\n  transactionMeta: TransactionMeta,\n  transactionType: TransactionType,\n  swaps: {\n    hasApproveTx?: boolean;\n    meta?: Partial<TransactionMeta>;\n  },\n  {\n    isSwapsDisabled,\n    cancelTransaction,\n    controllerHubEmitter,\n  }: {\n    isSwapsDisabled: boolean;\n    cancelTransaction: (transactionId: string) => void;\n    controllerHubEmitter: <T extends keyof Events>(\n      eventName: T,\n      ...args: Events[T]\n    ) => boolean;\n  },\n) {\n  if (isSwapsDisabled || !SWAP_TRANSACTION_TYPES.includes(transactionType)) {\n    return;\n  }\n  // The simulationFails property is added if the estimateGas call fails. In cases\n  // when no swaps approval tx is required, this indicates that the swap will likely\n  // fail. There was an earlier estimateGas call made by the swaps controller,\n  // but it is possible that external conditions have change since then, and\n  // a previously succeeding estimate gas call could now fail. By checking for\n  // the `simulationFails` property here, we can reduce the number of swap\n  // transactions that get published to the blockchain only to fail and thereby\n  // waste the user's funds on gas.\n  if (\n    transactionType === TransactionType.swap &&\n    swaps?.hasApproveTx === false &&\n    transactionMeta.simulationFails\n  ) {\n    await cancelTransaction(transactionMeta.id);\n    throw new Error('Simulation failed');\n  }\n\n  const swapsMeta = swaps?.meta as Partial<TransactionMeta>;\n\n  if (!swapsMeta) {\n    return;\n  }\n\n  if (transactionType === TransactionType.swapApproval) {\n    updateSwapApprovalTransaction(transactionMeta, swapsMeta);\n    controllerHubEmitter('transaction-new-swap-approval', {\n      transactionMeta,\n    });\n  }\n\n  if (transactionType === TransactionType.swap) {\n    updateSwapTransaction(transactionMeta, swapsMeta);\n    controllerHubEmitter('transaction-new-swap', {\n      transactionMeta,\n    });\n  }\n}\n\n/**\n * Attempts to update the post transaction balance of the provided transaction\n *\n * @param transactionMeta - Transaction meta object to update\n * @param updatePostTransactionBalanceRequest - Dependency bag\n * @param updatePostTransactionBalanceRequest.ethQuery - EthQuery object\n * @param updatePostTransactionBalanceRequest.getTransaction - Reading function for the latest transaction state\n * @param updatePostTransactionBalanceRequest.updateTransaction - Updating transaction function\n */\nexport async function updatePostTransactionBalance(\n  transactionMeta: TransactionMeta,\n  {\n    ethQuery,\n    getTransaction,\n    updateTransaction,\n  }: {\n    ethQuery: EthQuery;\n    getTransaction: (transactionId: string) => TransactionMeta | undefined;\n    updateTransaction: (transactionMeta: TransactionMeta, note: string) => void;\n  },\n): Promise<{\n  updatedTransactionMeta: TransactionMeta;\n  approvalTransactionMeta?: TransactionMeta;\n}> {\n  log('Updating post transaction balance', transactionMeta.id);\n\n  const transactionId = transactionMeta.id;\n  let latestTransactionMeta, approvalTransactionMeta;\n\n  for (let i = 0; i < UPDATE_POST_TX_BALANCE_ATTEMPTS; i++) {\n    log('Querying balance', { attempt: i });\n\n    const postTransactionBalance = await query(ethQuery, 'getBalance', [\n      transactionMeta.txParams.from,\n    ]);\n\n    latestTransactionMeta = getTransaction(transactionId) as TransactionMeta;\n\n    approvalTransactionMeta = latestTransactionMeta.approvalTxId\n      ? getTransaction(latestTransactionMeta.approvalTxId)\n      : undefined;\n\n    latestTransactionMeta.postTxBalance = postTransactionBalance.toString(16);\n\n    const isDefaultTokenAddress = isSwapsDefaultTokenAddress(\n      transactionMeta.destinationTokenAddress as string,\n      transactionMeta.chainId,\n    );\n\n    if (\n      !isDefaultTokenAddress ||\n      transactionMeta.preTxBalance !== latestTransactionMeta.postTxBalance\n    ) {\n      log('Finishing post balance update', {\n        isDefaultTokenAddress,\n        preTxBalance: transactionMeta.preTxBalance,\n        postTxBalance: latestTransactionMeta.postTxBalance,\n      });\n\n      break;\n    }\n\n    log('Waiting for balance to update', {\n      delay: UPDATE_POST_TX_BALANCE_TIMEOUT,\n    });\n\n    await sleep(UPDATE_POST_TX_BALANCE_TIMEOUT);\n  }\n\n  updateTransaction(\n    latestTransactionMeta as TransactionMeta,\n    'TransactionController#updatePostTransactionBalance - Add post transaction balance',\n  );\n\n  log('Completed post balance update', latestTransactionMeta?.postTxBalance);\n\n  return {\n    updatedTransactionMeta: latestTransactionMeta as TransactionMeta,\n    approvalTransactionMeta,\n  };\n}\n\n/**\n * Updates the transaction meta object with the swap information\n *\n * @param transactionMeta - Transaction meta object to update\n * @param propsToUpdate - Properties to update\n * @param propsToUpdate.sourceTokenSymbol - Symbol of the token to be swapped\n * @param propsToUpdate.destinationTokenSymbol - Symbol of the token to be received\n * @param propsToUpdate.type - Type of the transaction\n * @param propsToUpdate.destinationTokenDecimals - Decimals of the token to be received\n * @param propsToUpdate.destinationTokenAddress - Address of the token to be received\n * @param propsToUpdate.swapMetaData - Metadata of the swap\n * @param propsToUpdate.swapTokenValue - Value of the token to be swapped\n * @param propsToUpdate.estimatedBaseFee - Estimated base fee of the transaction\n * @param propsToUpdate.approvalTxId - Transaction id of the approval transaction\n */\nfunction updateSwapTransaction(\n  transactionMeta: TransactionMeta,\n  {\n    sourceTokenSymbol,\n    destinationTokenSymbol,\n    type,\n    destinationTokenDecimals,\n    destinationTokenAddress,\n    swapMetaData,\n    swapTokenValue,\n    estimatedBaseFee,\n    approvalTxId,\n  }: Partial<TransactionMeta>,\n) {\n  validateIfTransactionUnapproved(transactionMeta, 'updateSwapTransaction');\n\n  let swapTransaction = {\n    sourceTokenSymbol,\n    destinationTokenSymbol,\n    type,\n    destinationTokenDecimals,\n    destinationTokenAddress,\n    swapMetaData,\n    swapTokenValue,\n    estimatedBaseFee,\n    approvalTxId,\n  };\n  swapTransaction = pickBy(swapTransaction) as any;\n  merge(transactionMeta, swapTransaction);\n}\n\n/**\n * Updates the transaction meta object with the swap approval information\n *\n * @param transactionMeta - Transaction meta object to update\n * @param propsToUpdate - Properties to update\n * @param propsToUpdate.type - Type of the transaction\n * @param propsToUpdate.sourceTokenSymbol - Symbol of the token to be swapped\n */\nfunction updateSwapApprovalTransaction(\n  transactionMeta: TransactionMeta,\n  { type, sourceTokenSymbol }: Partial<TransactionMeta>,\n) {\n  validateIfTransactionUnapproved(\n    transactionMeta,\n    'updateSwapApprovalTransaction',\n  );\n\n  let swapApprovalTransaction = { type, sourceTokenSymbol } as any;\n  swapApprovalTransaction = pickBy({\n    type,\n    sourceTokenSymbol,\n  }) as Partial<TransactionMeta>;\n  merge(transactionMeta, swapApprovalTransaction);\n}\n\n/**\n * Checks whether the provided address is strictly equal to the address for\n * the default swaps token of the provided chain.\n *\n * @param address - The string to compare to the default token address\n * @param chainId - The hex encoded chain ID of the default swaps token to check\n * @returns Whether the address is the provided chain's default token address\n */\nfunction isSwapsDefaultTokenAddress(address: string, chainId: string) {\n  if (!address || !chainId) {\n    return false;\n  }\n\n  return (\n    address ===\n    SWAPS_CHAINID_DEFAULT_TOKEN_MAP[\n      chainId as keyof typeof SWAPS_CHAINID_DEFAULT_TOKEN_MAP\n    ]?.address\n  );\n}\n\n/**\n * Sleeps for the provided number of milliseconds\n *\n * @param ms - Number of milliseconds to sleep\n * @returns Promise that resolves after the provided number of milliseconds\n */\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/utils.d.ts b/dist/utils/utils.d.ts
index af0b5a7a648c416a1a7db67635aa34b187705d2a..714ede48bc071c13155a03764d94dd96a864b1b9 100644
--- a/dist/utils/utils.d.ts
+++ b/dist/utils/utils.d.ts
@@ -1,4 +1,4 @@
-import type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';
+import type { Transaction as NonceTrackerTransaction } from 'nonce-tracker';
 import type { GasPriceValue, FeeMarketEIP1559Values } from '../TransactionController';
 import { TransactionStatus } from '../types';
 import type { TransactionParams, TransactionMeta, TransactionError } from '../types';
@@ -35,12 +35,13 @@ export declare function validateMinimumIncrease(proposed: string, min: string):
 /**
  * Helper function to filter and format transactions for the nonce tracker.
  *
+ * @param currentChainId - Chain ID of the current network.
  * @param fromAddress - Address of the account from which the transactions to filter from are sent.
  * @param transactionStatus - Status of the transactions for which to filter.
  * @param transactions - Array of transactionMeta objects that have been prefiltered.
  * @returns Array of transactions formatted for the nonce tracker.
  */
-export declare function getAndFormatTransactionsForNonceTracker(fromAddress: string, transactionStatus: TransactionStatus, transactions: TransactionMeta[]): NonceTrackerTransaction[];
+export declare function getAndFormatTransactionsForNonceTracker(currentChainId: string, fromAddress: string, transactionStatus: TransactionStatus, transactions: TransactionMeta[]): NonceTrackerTransaction[];
 /**
  * Validates that a transaction is unapproved.
  * Throws if the transaction is not unapproved.
@@ -59,4 +60,11 @@ export declare function normalizeTxError(error: Error & {
     code?: string;
     value?: unknown;
 }): TransactionError;
+/**
+ * Normalize an object containing gas fee values.
+ *
+ * @param gasFeeValues - An object containing gas fee values.
+ * @returns An object containing normalized gas fee values.
+ */
+export declare function normalizeGasFeeValues(gasFeeValues: GasPriceValue | FeeMarketEIP1559Values): GasPriceValue | FeeMarketEIP1559Values;
 //# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/utils.d.ts.map b/dist/utils/utils.d.ts.map
index 864a8cc381e50119c10eff84282dc64349319351..1979c2579929c38ec5564fa51398b3ce1fccfdaa 100644
--- a/dist/utils/utils.d.ts.map
+++ b/dist/utils/utils.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,WAAW,IAAI,uBAAuB,EAAE,MAAM,iCAAiC,CAAC;AAE9F,OAAO,KAAK,EACV,aAAa,EACb,sBAAsB,EACvB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAC7C,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EACjB,MAAM,UAAU,CAAC;AAElB,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAmBrE;;;;;GAKG;AACH,wBAAgB,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,qBAQ5D;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAUlD,CAAC;AAEF,eAAO,MAAM,wBAAwB,eACvB,aAAa,GAAG,sBAAsB,wCAGuB,CAAC;AAE5E,eAAO,MAAM,eAAe,eACd,aAAa,GAAG,sBAAsB,+BAEE,CAAC;AAEvD,eAAO,MAAM,oBAAoB,UAAW,MAAM,QAAQ,MAAM,KAAG,MACF,CAAC;AAElE,eAAO,MAAM,6BAA6B,UACjC,MAAM,GAAG,SAAS,QACnB,MAAM,KACX,MAEF,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,UAQpE;AAED;;;;;;;GAOG;AACH,wBAAgB,uCAAuC,CACrD,WAAW,EAAE,MAAM,EACnB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,EAAE,eAAe,EAAE,GAC9B,uBAAuB,EAAE,CAsB3B;AAED;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAQf;AAED;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,KAAK,EAAE,KAAK,GAAG;IAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAAC,KAAK,CAAC,EAAE,OAAO,CAAA;CAAE,GAChD,gBAAgB,CAQlB"}
\ No newline at end of file
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,WAAW,IAAI,uBAAuB,EAAE,MAAM,eAAe,CAAC;AAE5E,OAAO,KAAK,EACV,aAAa,EACb,sBAAsB,EACvB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAC7C,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EACjB,MAAM,UAAU,CAAC;AAElB,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAmBrE;;;;;GAKG;AACH,wBAAgB,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,qBAc5D;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAUlD,CAAC;AAEF,eAAO,MAAM,wBAAwB,eACvB,aAAa,GAAG,sBAAsB,wCAGuB,CAAC;AAE5E,eAAO,MAAM,eAAe,eACd,aAAa,GAAG,sBAAsB,+BAEE,CAAC;AAEvD,eAAO,MAAM,oBAAoB,UAAW,MAAM,QAAQ,MAAM,KAAG,MACF,CAAC;AAElE,eAAO,MAAM,6BAA6B,UACjC,MAAM,GAAG,SAAS,QACnB,MAAM,KACX,MAEF,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,UAQpE;AAED;;;;;;;;GAQG;AACH,wBAAgB,uCAAuC,CACrD,cAAc,EAAE,MAAM,EACtB,WAAW,EAAE,MAAM,EACnB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,EAAE,eAAe,EAAE,GAC9B,uBAAuB,EAAE,CAwB3B;AAED;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAQf;AAED;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,KAAK,EAAE,KAAK,GAAG;IAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAAC,KAAK,CAAC,EAAE,OAAO,CAAA;CAAE,GAChD,gBAAgB,CAQlB;AAED;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,YAAY,EAAE,aAAa,GAAG,sBAAsB,GACnD,aAAa,GAAG,sBAAsB,CAcxC"}
\ No newline at end of file
diff --git a/dist/utils/utils.js b/dist/utils/utils.js
index 1d44e53909a113fe0f715d6f3738597f50a653d6..bcaefec449f6f912c59eec294f44bbfc4051f09a 100644
--- a/dist/utils/utils.js
+++ b/dist/utils/utils.js
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.normalizeTxError = exports.validateIfTransactionUnapproved = exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
+exports.normalizeGasFeeValues = exports.normalizeTxError = exports.validateIfTransactionUnapproved = exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
 const utils_1 = require("@metamask/utils");
 const ethereumjs_util_1 = require("ethereumjs-util");
@@ -33,6 +33,9 @@ function normalizeTxParams(txParams) {
             normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);
         }
     }
+    if (!normalizedTxParams.value) {
+        normalizedTxParams.value = '0x0';
+    }
     return normalizedTxParams;
 }
 exports.normalizeTxParams = normalizeTxParams;
@@ -90,14 +93,17 @@ exports.validateMinimumIncrease = validateMinimumIncrease;
 /**
  * Helper function to filter and format transactions for the nonce tracker.
  *
+ * @param currentChainId - Chain ID of the current network.
  * @param fromAddress - Address of the account from which the transactions to filter from are sent.
  * @param transactionStatus - Status of the transactions for which to filter.
  * @param transactions - Array of transactionMeta objects that have been prefiltered.
  * @returns Array of transactions formatted for the nonce tracker.
  */
-function getAndFormatTransactionsForNonceTracker(fromAddress, transactionStatus, transactions) {
+function getAndFormatTransactionsForNonceTracker(currentChainId, fromAddress, transactionStatus, transactions) {
     return transactions
-        .filter(({ status, txParams: { from } }) => status === transactionStatus &&
+        .filter(({ chainId, isTransfer, status, txParams: { from } }) => !isTransfer &&
+        chainId === currentChainId &&
+        status === transactionStatus &&
         from.toLowerCase() === fromAddress.toLowerCase())
         .map(({ status, txParams: { from, gas, value, nonce } }) => {
         // the only value we care about is the nonce
@@ -146,4 +152,23 @@ function normalizeTxError(error) {
     };
 }
 exports.normalizeTxError = normalizeTxError;
+/**
+ * Normalize an object containing gas fee values.
+ *
+ * @param gasFeeValues - An object containing gas fee values.
+ * @returns An object containing normalized gas fee values.
+ */
+function normalizeGasFeeValues(gasFeeValues) {
+    const normalize = (value) => typeof value === 'string' ? (0, ethereumjs_util_1.addHexPrefix)(value) : value;
+    if ('gasPrice' in gasFeeValues) {
+        return {
+            gasPrice: normalize(gasFeeValues.gasPrice),
+        };
+    }
+    return {
+        maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),
+        maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas),
+    };
+}
+exports.normalizeGasFeeValues = normalizeGasFeeValues;
 //# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/dist/utils/utils.js.map b/dist/utils/utils.js.map
index 8d440818dd0b5b37a031229620424797deddf101..b7bde30862ffd7ebed224d0a2f16c8923dc8bf8a 100644
--- a/dist/utils/utils.js.map
+++ b/dist/utils/utils.js.map
@@ -1 +1 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { getKnownPropertyNames } from '@metamask/utils';\nimport { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';\n\nimport type {\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from '../TransactionController';\nimport { TransactionStatus } from '../types';\nimport type {\n  TransactionParams,\n  TransactionMeta,\n  TransactionError,\n} from '../types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasLimit: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  type: (type: string) => (type === '0x0' ? '0x0' : undefined),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTxParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n  for (const key of getKnownPropertyNames(NORMALIZERS)) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);\n    }\n  }\n  return normalizedTxParams;\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n\n/**\n * Helper function to filter and format transactions for the nonce tracker.\n *\n * @param fromAddress - Address of the account from which the transactions to filter from are sent.\n * @param transactionStatus - Status of the transactions for which to filter.\n * @param transactions - Array of transactionMeta objects that have been prefiltered.\n * @returns Array of transactions formatted for the nonce tracker.\n */\nexport function getAndFormatTransactionsForNonceTracker(\n  fromAddress: string,\n  transactionStatus: TransactionStatus,\n  transactions: TransactionMeta[],\n): NonceTrackerTransaction[] {\n  return transactions\n    .filter(\n      ({ status, txParams: { from } }) =>\n        status === transactionStatus &&\n        from.toLowerCase() === fromAddress.toLowerCase(),\n    )\n    .map(({ status, txParams: { from, gas, value, nonce } }) => {\n      // the only value we care about is the nonce\n      // but we need to return the other values to satisfy the type\n      // TODO: refactor nonceTracker to not require this\n      return {\n        status,\n        history: [{}],\n        txParams: {\n          from: from ?? '',\n          gas: gas ?? '',\n          value: value ?? '',\n          nonce: nonce ?? '',\n        },\n      };\n    });\n}\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `TransactionsController: Can only call ${fnName} on an unapproved transaction.\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param error - The error to be normalize.\n * @returns Normalized transaction error.\n */\nexport function normalizeTxError(\n  error: Error & { code?: string; value?: unknown },\n): TransactionError {\n  return {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    code: error?.code,\n    rpc: error?.value,\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { getKnownPropertyNames } from '@metamask/utils';\nimport { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport type { Transaction as NonceTrackerTransaction } from 'nonce-tracker';\n\nimport type {\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from '../TransactionController';\nimport { TransactionStatus } from '../types';\nimport type {\n  TransactionParams,\n  TransactionMeta,\n  TransactionError,\n} from '../types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasLimit: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  type: (type: string) => (type === '0x0' ? '0x0' : undefined),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTxParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n\n  for (const key of getKnownPropertyNames(NORMALIZERS)) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);\n    }\n  }\n\n  if (!normalizedTxParams.value) {\n    normalizedTxParams.value = '0x0';\n  }\n\n  return normalizedTxParams;\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n\n/**\n * Helper function to filter and format transactions for the nonce tracker.\n *\n * @param currentChainId - Chain ID of the current network.\n * @param fromAddress - Address of the account from which the transactions to filter from are sent.\n * @param transactionStatus - Status of the transactions for which to filter.\n * @param transactions - Array of transactionMeta objects that have been prefiltered.\n * @returns Array of transactions formatted for the nonce tracker.\n */\nexport function getAndFormatTransactionsForNonceTracker(\n  currentChainId: string,\n  fromAddress: string,\n  transactionStatus: TransactionStatus,\n  transactions: TransactionMeta[],\n): NonceTrackerTransaction[] {\n  return transactions\n    .filter(\n      ({ chainId, isTransfer, status, txParams: { from } }) =>\n        !isTransfer &&\n        chainId === currentChainId &&\n        status === transactionStatus &&\n        from.toLowerCase() === fromAddress.toLowerCase(),\n    )\n    .map(({ status, txParams: { from, gas, value, nonce } }) => {\n      // the only value we care about is the nonce\n      // but we need to return the other values to satisfy the type\n      // TODO: refactor nonceTracker to not require this\n      return {\n        status,\n        history: [{}],\n        txParams: {\n          from: from ?? '',\n          gas: gas ?? '',\n          value: value ?? '',\n          nonce: nonce ?? '',\n        },\n      };\n    });\n}\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `TransactionsController: Can only call ${fnName} on an unapproved transaction.\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param error - The error to be normalize.\n * @returns Normalized transaction error.\n */\nexport function normalizeTxError(\n  error: Error & { code?: string; value?: unknown },\n): TransactionError {\n  return {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    code: error?.code,\n    rpc: error?.value,\n  };\n}\n\n/**\n * Normalize an object containing gas fee values.\n *\n * @param gasFeeValues - An object containing gas fee values.\n * @returns An object containing normalized gas fee values.\n */\nexport function normalizeGasFeeValues(\n  gasFeeValues: GasPriceValue | FeeMarketEIP1559Values,\n): GasPriceValue | FeeMarketEIP1559Values {\n  const normalize = (value: any) =>\n    typeof value === 'string' ? addHexPrefix(value) : value;\n\n  if ('gasPrice' in gasFeeValues) {\n    return {\n      gasPrice: normalize(gasFeeValues.gasPrice),\n    };\n  }\n\n  return {\n    maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),\n    maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas),\n  };\n}\n"]}
\ No newline at end of file
