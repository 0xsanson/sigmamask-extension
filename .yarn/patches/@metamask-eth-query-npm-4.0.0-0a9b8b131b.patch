diff --git a/index.js b/index.js
index cf8ec930431ff59ac30d4699737dee9c8b750b19..59aae6951b57b8dcea66ba7102d5299a744b28f9 100644
--- a/index.js
+++ b/index.js
@@ -105,6 +105,7 @@ EthQuery.prototype.getLogs = generateFnFor('eth_getLogs');
 EthQuery.prototype.getWork = generateFnFor('eth_getWork');
 EthQuery.prototype.submitWork = generateFnFor('eth_submitWork');
 EthQuery.prototype.submitHashrate = generateFnFor('eth_submitHashrate');
+EthQuery.prototype.linea_estimateGas = lineaEstimateGas();
 
 // network level
 
@@ -197,3 +198,62 @@ function createPayload(data) {
     data,
   );
 }
+
+/**
+ * Generates an instance method designed to call an RPC methods that takes one
+ * or more parameters. This instance method uses `sendAsync` internally to make
+ * the request to the network.
+ *
+ * @param {any} argCount - The number of parameters that the RPC method is
+ * expected to take.
+ * @param {any} methodName - The RPC method.
+ * @returns {any} The method.
+ */
+function lineaEstimateGas() {
+  return function (...args) {
+    const self = this;
+    const callback = args.pop();
+
+    if (args.length < 1) {
+      callback(new Error('Expected 1 parameter. Missing transaction parameters.'));
+      return;
+    }
+
+    const transaction = args[0];
+
+    generateLineaResponse(self, transaction).then(result => {
+      callback(null, result);
+    }, error => {
+      callback(error);
+    });
+  };
+}
+
+async function generateLineaResponse(self, transaction) {
+  const latestBlock = await promiseMethod(self, 'getBlockByNumber', ['latest', false]);
+  const baseFeePerGas = latestBlock.baseFeePerGas;
+  const baseFeePerGasDecimal = parseInt(baseFeePerGas, 16);
+  const gasPrice = await promiseMethod(self, 'gasPrice', []);
+  const gasPriceDecimal = parseInt(gasPrice, 16);
+  const priorityFeePerGasDecimal = gasPriceDecimal - baseFeePerGasDecimal;
+  const priorityFeePerGas = `0x${priorityFeePerGasDecimal.toString(16)}`;
+  const gasLimit = await promiseMethod(self, 'estimateGas', [transaction]);
+
+  return {
+    gasLimit,
+    baseFeePerGas,
+    priorityFeePerGas,
+  };
+}
+
+function promiseMethod(self, method, args) {
+  return new Promise((resolve, reject) => {
+    self[method](...args, (err, res) => {
+      if (err) {
+        reject(err);
+      } else {
+        resolve(res);
+      }
+    }
+  )});
+}
