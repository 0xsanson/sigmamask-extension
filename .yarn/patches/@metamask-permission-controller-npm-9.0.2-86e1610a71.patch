diff --git a/dist/Caveat.js b/dist/Caveat.js
index ca421627427642870db30f11676a140d3c7a6634..5963df7f8615db1cc4afdc9d3db824f24e146ddd 100644
--- a/dist/Caveat.js
+++ b/dist/Caveat.js
@@ -1,12 +1,14 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
 
-var _chunkEGNDXGRGjs = require('./chunk-EGNDXGRG.js');
-require('./chunk-6CID6TBW.js');
-require('./chunk-U5LTEXSU.js');
-require('./chunk-CSAU5B4Q.js');
 
+var _chunkL5ZQETZ4js = require('./chunk-L5ZQETZ4.js');
+require('./chunk-ZH4MLSXX.js');
+require('./chunk-SEPTGKNB.js');
+require('./chunk-Z2XKIXLS.js');
 
 
-exports.decorateWithCaveats = _chunkEGNDXGRGjs.decorateWithCaveats; exports.isRestrictedMethodCaveatSpecification = _chunkEGNDXGRGjs.isRestrictedMethodCaveatSpecification;
+
+
+exports.decorateWithCaveats = _chunkL5ZQETZ4js.decorateWithCaveats; exports.isRestrictedMethodCaveatSpecification = _chunkL5ZQETZ4js.isRestrictedMethodCaveatSpecification; exports.makeCaveatMerger = _chunkL5ZQETZ4js.makeCaveatMerger;
 //# sourceMappingURL=Caveat.js.map
\ No newline at end of file
diff --git a/dist/Caveat.mjs b/dist/Caveat.mjs
index e7e6a407dbd7deaa68051c2825667b3eb73c02c1..269e7421d2a8cc9d3306a6d045799872f360d03d 100644
--- a/dist/Caveat.mjs
+++ b/dist/Caveat.mjs
@@ -1,12 +1,14 @@
 import {
   decorateWithCaveats,
-  isRestrictedMethodCaveatSpecification
-} from "./chunk-XBFHEZRU.mjs";
-import "./chunk-ODCVB4BB.mjs";
-import "./chunk-FEXS6SJF.mjs";
-import "./chunk-ZSTKOCBT.mjs";
+  isRestrictedMethodCaveatSpecification,
+  makeCaveatMerger
+} from "./chunk-HPECMGYB.mjs";
+import "./chunk-HYMS7IGB.mjs";
+import "./chunk-I4OI6AQF.mjs";
+import "./chunk-2L4QPE5A.mjs";
 export {
   decorateWithCaveats,
-  isRestrictedMethodCaveatSpecification
+  isRestrictedMethodCaveatSpecification,
+  makeCaveatMerger
 };
 //# sourceMappingURL=Caveat.mjs.map
\ No newline at end of file
diff --git a/dist/Permission.js b/dist/Permission.js
index a65d35c23a88715fcfaace2e4fb4f0184e4d72c3..ad77e21fde6ffe264bdced49bbcb28883ae14dc2 100644
--- a/dist/Permission.js
+++ b/dist/Permission.js
@@ -3,12 +3,12 @@
 
 
 
-var _chunk6CID6TBWjs = require('./chunk-6CID6TBW.js');
-require('./chunk-CSAU5B4Q.js');
+var _chunkZH4MLSXXjs = require('./chunk-ZH4MLSXX.js');
+require('./chunk-Z2XKIXLS.js');
 
 
 
 
 
-exports.PermissionType = _chunk6CID6TBWjs.PermissionType; exports.constructPermission = _chunk6CID6TBWjs.constructPermission; exports.findCaveat = _chunk6CID6TBWjs.findCaveat; exports.hasSpecificationType = _chunk6CID6TBWjs.hasSpecificationType;
+exports.PermissionType = _chunkZH4MLSXXjs.PermissionType; exports.constructPermission = _chunkZH4MLSXXjs.constructPermission; exports.findCaveat = _chunkZH4MLSXXjs.findCaveat; exports.hasSpecificationType = _chunkZH4MLSXXjs.hasSpecificationType;
 //# sourceMappingURL=Permission.js.map
\ No newline at end of file
diff --git a/dist/Permission.mjs b/dist/Permission.mjs
index f87873fe50ecbdb993f5495175f81ac93f042f77..ffe10581b00dceebbb6e9eb50f90ba79fefabd1d 100644
--- a/dist/Permission.mjs
+++ b/dist/Permission.mjs
@@ -3,8 +3,8 @@ import {
   constructPermission,
   findCaveat,
   hasSpecificationType
-} from "./chunk-ODCVB4BB.mjs";
-import "./chunk-ZSTKOCBT.mjs";
+} from "./chunk-HYMS7IGB.mjs";
+import "./chunk-2L4QPE5A.mjs";
 export {
   PermissionType,
   constructPermission,
diff --git a/dist/PermissionController.js b/dist/PermissionController.js
index 57194d10628b8880c044ea99dba70b8e58622b04..f79315177f484e958906a6f2962579e0bcc2b4b9 100644
--- a/dist/PermissionController.js
+++ b/dist/PermissionController.js
@@ -1,15 +1,15 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
 
-var _chunkQ4TESWPEjs = require('./chunk-Q4TESWPE.js');
-require('./chunk-EGNDXGRG.js');
-require('./chunk-6CID6TBW.js');
-require('./chunk-AQ35E2HU.js');
-require('./chunk-U5LTEXSU.js');
+var _chunkLSJJ7IYCjs = require('./chunk-LSJJ7IYC.js');
+require('./chunk-L5ZQETZ4.js');
+require('./chunk-ZH4MLSXX.js');
+require('./chunk-2S4DNIEN.js');
+require('./chunk-SEPTGKNB.js');
 require('./chunk-K5R57Y57.js');
-require('./chunk-CSAU5B4Q.js');
+require('./chunk-Z2XKIXLS.js');
 
 
 
-exports.CaveatMutatorOperation = _chunkQ4TESWPEjs.CaveatMutatorOperation; exports.PermissionController = _chunkQ4TESWPEjs.PermissionController;
+exports.CaveatMutatorOperation = _chunkLSJJ7IYCjs.CaveatMutatorOperation; exports.PermissionController = _chunkLSJJ7IYCjs.PermissionController;
 //# sourceMappingURL=PermissionController.js.map
\ No newline at end of file
diff --git a/dist/PermissionController.mjs b/dist/PermissionController.mjs
index 19cec0693c59680a56e5857c54a0f1e53e9a9a6e..f4f469810063086660d83f5381033b1ecc6974ff 100644
--- a/dist/PermissionController.mjs
+++ b/dist/PermissionController.mjs
@@ -1,13 +1,13 @@
 import {
   CaveatMutatorOperation,
   PermissionController
-} from "./chunk-VFQJB7BG.mjs";
-import "./chunk-XBFHEZRU.mjs";
-import "./chunk-ODCVB4BB.mjs";
-import "./chunk-N4KQ2BHF.mjs";
-import "./chunk-FEXS6SJF.mjs";
+} from "./chunk-MSZMGMUN.mjs";
+import "./chunk-HPECMGYB.mjs";
+import "./chunk-HYMS7IGB.mjs";
+import "./chunk-BIWDJTRD.mjs";
+import "./chunk-I4OI6AQF.mjs";
 import "./chunk-KVKKNDYV.mjs";
-import "./chunk-ZSTKOCBT.mjs";
+import "./chunk-2L4QPE5A.mjs";
 export {
   CaveatMutatorOperation,
   PermissionController
diff --git a/dist/SubjectMetadataController.js b/dist/SubjectMetadataController.js
index 3dec0e5438e25c68c476fcb4cb81f2a2bc4847f1..f7eb57aa1ac13626ae92a192fe18f1f2b3f78cc7 100644
--- a/dist/SubjectMetadataController.js
+++ b/dist/SubjectMetadataController.js
@@ -1,10 +1,10 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
 
-var _chunkSFKE5HHKjs = require('./chunk-SFKE5HHK.js');
-require('./chunk-CSAU5B4Q.js');
+var _chunkC73QV75Djs = require('./chunk-C73QV75D.js');
+require('./chunk-Z2XKIXLS.js');
 
 
 
-exports.SubjectMetadataController = _chunkSFKE5HHKjs.SubjectMetadataController; exports.SubjectType = _chunkSFKE5HHKjs.SubjectType;
+exports.SubjectMetadataController = _chunkC73QV75Djs.SubjectMetadataController; exports.SubjectType = _chunkC73QV75Djs.SubjectType;
 //# sourceMappingURL=SubjectMetadataController.js.map
\ No newline at end of file
diff --git a/dist/SubjectMetadataController.mjs b/dist/SubjectMetadataController.mjs
index e74d0417e3cb74caa64512505c90d51647bdc5a1..403a930b6c07991f18cfaeecadb559c98bdde055 100644
--- a/dist/SubjectMetadataController.mjs
+++ b/dist/SubjectMetadataController.mjs
@@ -1,8 +1,8 @@
 import {
   SubjectMetadataController,
   SubjectType
-} from "./chunk-4D2RVWNF.mjs";
-import "./chunk-ZSTKOCBT.mjs";
+} from "./chunk-W4CPVA4J.mjs";
+import "./chunk-2L4QPE5A.mjs";
 export {
   SubjectMetadataController,
   SubjectType
diff --git a/dist/chunk-2L4QPE5A.mjs b/dist/chunk-2L4QPE5A.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..ecc3209175edb01bf92f86b9ca37650fb91a90fe
--- /dev/null
+++ b/dist/chunk-2L4QPE5A.mjs
@@ -0,0 +1,25 @@
+var __defProp = Object.defineProperty;
+var __export = (target, all) => {
+  for (var name in all)
+    __defProp(target, name, { get: all[name], enumerable: true });
+};
+var __accessCheck = (obj, member, msg) => {
+  if (!member.has(obj))
+    throw TypeError("Cannot " + msg);
+};
+var __privateAdd = (obj, member, value) => {
+  if (member.has(obj))
+    throw TypeError("Cannot add the same private member more than once");
+  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
+};
+var __privateMethod = (obj, member, method) => {
+  __accessCheck(obj, member, "access private method");
+  return method;
+};
+
+export {
+  __export,
+  __privateAdd,
+  __privateMethod
+};
+//# sourceMappingURL=chunk-2L4QPE5A.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-2L4QPE5A.mjs.map b/dist/chunk-2L4QPE5A.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..84c51b288c478ac0d18748007ccfb8cddc797f3a
--- /dev/null
+++ b/dist/chunk-2L4QPE5A.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-2S4DNIEN.js b/dist/chunk-2S4DNIEN.js
new file mode 100644
index 0000000000000000000000000000000000000000..757815a80fd379bc9c754828cced190fbda380c6
--- /dev/null
+++ b/dist/chunk-2S4DNIEN.js
@@ -0,0 +1,46 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkSEPTGKNBjs = require('./chunk-SEPTGKNB.js');
+
+// src/permission-middleware.ts
+var _jsonrpcengine = require('@metamask/json-rpc-engine');
+function getPermissionMiddlewareFactory({
+  executeRestrictedMethod,
+  getRestrictedMethod,
+  isUnrestrictedMethod
+}) {
+  return function createPermissionMiddleware(subject) {
+    const { origin } = subject;
+    if (typeof origin !== "string" || !origin) {
+      throw new Error('The subject "origin" must be a non-empty string.');
+    }
+    const permissionsMiddleware = async (req, res, next) => {
+      const { method, params } = req;
+      if (isUnrestrictedMethod(method)) {
+        return next();
+      }
+      const methodImplementation = getRestrictedMethod(method, origin);
+      const result = await executeRestrictedMethod(
+        methodImplementation,
+        subject,
+        method,
+        params
+      );
+      if (result === void 0) {
+        res.error = _chunkSEPTGKNBjs.internalError.call(void 0, 
+          `Request for method "${req.method}" returned undefined result.`,
+          { request: req }
+        );
+        return void 0;
+      }
+      res.result = result;
+      return void 0;
+    };
+    return _jsonrpcengine.createAsyncMiddleware.call(void 0, permissionsMiddleware);
+  };
+}
+
+
+
+exports.getPermissionMiddlewareFactory = getPermissionMiddlewareFactory;
+//# sourceMappingURL=chunk-2S4DNIEN.js.map
\ No newline at end of file
diff --git a/dist/chunk-2S4DNIEN.js.map b/dist/chunk-2S4DNIEN.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..cb42cd02a0d0a8d7cf3d1861a768374277c30e96
--- /dev/null
+++ b/dist/chunk-2S4DNIEN.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/permission-middleware.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,6BAA6B;AAkD/B,SAAS,+BAA+B;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AACF,GAAuC;AACrC,SAAO,SAAS,2BACd,SACqD;AACrD,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,OAAO,WAAW,YAAY,CAAC,QAAQ;AACzC,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,UAAM,wBAAwB,OAC5B,KACA,KACA,SACkB;AAClB,YAAM,EAAE,QAAQ,OAAO,IAAI;AAG3B,UAAI,qBAAqB,MAAM,GAAG;AAChC,eAAO,KAAK;AAAA,MACd;AAGA,YAAM,uBAAuB,oBAAoB,QAAQ,MAAM;AAG/D,YAAM,SAAS,MAAM;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,UAAI,WAAW,QAAW;AACxB,YAAI,QAAQ;AAAA,UACV,uBAAuB,IAAI,MAAM;AAAA,UACjC,EAAE,SAAS,IAAI;AAAA,QACjB;AACA,eAAO;AAAA,MACT;AAEA,UAAI,SAAS;AACb,aAAO;AAAA,IACT;AAEA,WAAO,sBAAsB,qBAAqB;AAAA,EACpD;AACF","sourcesContent":["import { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport type {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  JsonRpcEngine,\n  JsonRpcMiddleware,\n  AsyncJsonRpcEngineNextCallback,\n} from '@metamask/json-rpc-engine';\nimport type {\n  Json,\n  PendingJsonRpcResponse,\n  JsonRpcRequest,\n} from '@metamask/utils';\n\nimport type {\n  GenericPermissionController,\n  PermissionSubjectMetadata,\n  RestrictedMethodParameters,\n} from '.';\nimport { internalError } from './errors';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { PermissionController } from './PermissionController';\n\ntype PermissionMiddlewareFactoryOptions = {\n  executeRestrictedMethod: GenericPermissionController['_executeRestrictedMethod'];\n  getRestrictedMethod: GenericPermissionController['getRestrictedMethod'];\n  isUnrestrictedMethod: (method: string) => boolean;\n};\n\n/**\n * Creates a permission middleware function factory. Intended for internal use\n * in the {@link PermissionController}. Like any {@link JsonRpcEngine}\n * middleware, each middleware will only receive requests from a particular\n * subject / origin. However, each middleware also requires access to some\n * `PermissionController` internals, which is why this \"factory factory\" exists.\n *\n * The middlewares returned by the factory will pass through requests for\n * unrestricted methods, and attempt to execute restricted methods. If a method\n * is neither restricted nor unrestricted, a \"method not found\" error will be\n * returned.\n * If a method is restricted, the middleware will first attempt to retrieve the\n * subject's permission for that method. If the permission is found, the method\n * will be executed. Otherwise, an \"unauthorized\" error will be returned.\n *\n * @param options - Options bag.\n * @param options.executeRestrictedMethod - {@link PermissionController._executeRestrictedMethod}.\n * @param options.getRestrictedMethod - {@link PermissionController.getRestrictedMethod}.\n * @param options.isUnrestrictedMethod - A function that checks whether a\n * particular method is unrestricted.\n * @returns A permission middleware factory function.\n */\nexport function getPermissionMiddlewareFactory({\n  executeRestrictedMethod,\n  getRestrictedMethod,\n  isUnrestrictedMethod,\n}: PermissionMiddlewareFactoryOptions) {\n  return function createPermissionMiddleware(\n    subject: PermissionSubjectMetadata,\n  ): JsonRpcMiddleware<RestrictedMethodParameters, Json> {\n    const { origin } = subject;\n    if (typeof origin !== 'string' || !origin) {\n      throw new Error('The subject \"origin\" must be a non-empty string.');\n    }\n\n    const permissionsMiddleware = async (\n      req: JsonRpcRequest<RestrictedMethodParameters>,\n      res: PendingJsonRpcResponse<Json>,\n      next: AsyncJsonRpcEngineNextCallback,\n    ): Promise<void> => {\n      const { method, params } = req;\n\n      // Skip registered unrestricted methods.\n      if (isUnrestrictedMethod(method)) {\n        return next();\n      }\n\n      // This will throw if no restricted method implementation is found.\n      const methodImplementation = getRestrictedMethod(method, origin);\n\n      // This will throw if the permission does not exist.\n      const result = await executeRestrictedMethod(\n        methodImplementation,\n        subject,\n        method,\n        params,\n      );\n\n      if (result === undefined) {\n        res.error = internalError(\n          `Request for method \"${req.method}\" returned undefined result.`,\n          { request: req },\n        );\n        return undefined;\n      }\n\n      res.result = result;\n      return undefined;\n    };\n\n    return createAsyncMiddleware(permissionsMiddleware);\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-BIWDJTRD.mjs b/dist/chunk-BIWDJTRD.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..00bdc01d53efb5831e7d2dd62768aa72fe79bde7
--- /dev/null
+++ b/dist/chunk-BIWDJTRD.mjs
@@ -0,0 +1,46 @@
+import {
+  internalError
+} from "./chunk-I4OI6AQF.mjs";
+
+// src/permission-middleware.ts
+import { createAsyncMiddleware } from "@metamask/json-rpc-engine";
+function getPermissionMiddlewareFactory({
+  executeRestrictedMethod,
+  getRestrictedMethod,
+  isUnrestrictedMethod
+}) {
+  return function createPermissionMiddleware(subject) {
+    const { origin } = subject;
+    if (typeof origin !== "string" || !origin) {
+      throw new Error('The subject "origin" must be a non-empty string.');
+    }
+    const permissionsMiddleware = async (req, res, next) => {
+      const { method, params } = req;
+      if (isUnrestrictedMethod(method)) {
+        return next();
+      }
+      const methodImplementation = getRestrictedMethod(method, origin);
+      const result = await executeRestrictedMethod(
+        methodImplementation,
+        subject,
+        method,
+        params
+      );
+      if (result === void 0) {
+        res.error = internalError(
+          `Request for method "${req.method}" returned undefined result.`,
+          { request: req }
+        );
+        return void 0;
+      }
+      res.result = result;
+      return void 0;
+    };
+    return createAsyncMiddleware(permissionsMiddleware);
+  };
+}
+
+export {
+  getPermissionMiddlewareFactory
+};
+//# sourceMappingURL=chunk-BIWDJTRD.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-BIWDJTRD.mjs.map b/dist/chunk-BIWDJTRD.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..eb6cdac53b3643f96f8d5f8d24ab4bc226162e97
--- /dev/null
+++ b/dist/chunk-BIWDJTRD.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/permission-middleware.ts"],"sourcesContent":["import { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport type {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  JsonRpcEngine,\n  JsonRpcMiddleware,\n  AsyncJsonRpcEngineNextCallback,\n} from '@metamask/json-rpc-engine';\nimport type {\n  Json,\n  PendingJsonRpcResponse,\n  JsonRpcRequest,\n} from '@metamask/utils';\n\nimport type {\n  GenericPermissionController,\n  PermissionSubjectMetadata,\n  RestrictedMethodParameters,\n} from '.';\nimport { internalError } from './errors';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { PermissionController } from './PermissionController';\n\ntype PermissionMiddlewareFactoryOptions = {\n  executeRestrictedMethod: GenericPermissionController['_executeRestrictedMethod'];\n  getRestrictedMethod: GenericPermissionController['getRestrictedMethod'];\n  isUnrestrictedMethod: (method: string) => boolean;\n};\n\n/**\n * Creates a permission middleware function factory. Intended for internal use\n * in the {@link PermissionController}. Like any {@link JsonRpcEngine}\n * middleware, each middleware will only receive requests from a particular\n * subject / origin. However, each middleware also requires access to some\n * `PermissionController` internals, which is why this \"factory factory\" exists.\n *\n * The middlewares returned by the factory will pass through requests for\n * unrestricted methods, and attempt to execute restricted methods. If a method\n * is neither restricted nor unrestricted, a \"method not found\" error will be\n * returned.\n * If a method is restricted, the middleware will first attempt to retrieve the\n * subject's permission for that method. If the permission is found, the method\n * will be executed. Otherwise, an \"unauthorized\" error will be returned.\n *\n * @param options - Options bag.\n * @param options.executeRestrictedMethod - {@link PermissionController._executeRestrictedMethod}.\n * @param options.getRestrictedMethod - {@link PermissionController.getRestrictedMethod}.\n * @param options.isUnrestrictedMethod - A function that checks whether a\n * particular method is unrestricted.\n * @returns A permission middleware factory function.\n */\nexport function getPermissionMiddlewareFactory({\n  executeRestrictedMethod,\n  getRestrictedMethod,\n  isUnrestrictedMethod,\n}: PermissionMiddlewareFactoryOptions) {\n  return function createPermissionMiddleware(\n    subject: PermissionSubjectMetadata,\n  ): JsonRpcMiddleware<RestrictedMethodParameters, Json> {\n    const { origin } = subject;\n    if (typeof origin !== 'string' || !origin) {\n      throw new Error('The subject \"origin\" must be a non-empty string.');\n    }\n\n    const permissionsMiddleware = async (\n      req: JsonRpcRequest<RestrictedMethodParameters>,\n      res: PendingJsonRpcResponse<Json>,\n      next: AsyncJsonRpcEngineNextCallback,\n    ): Promise<void> => {\n      const { method, params } = req;\n\n      // Skip registered unrestricted methods.\n      if (isUnrestrictedMethod(method)) {\n        return next();\n      }\n\n      // This will throw if no restricted method implementation is found.\n      const methodImplementation = getRestrictedMethod(method, origin);\n\n      // This will throw if the permission does not exist.\n      const result = await executeRestrictedMethod(\n        methodImplementation,\n        subject,\n        method,\n        params,\n      );\n\n      if (result === undefined) {\n        res.error = internalError(\n          `Request for method \"${req.method}\" returned undefined result.`,\n          { request: req },\n        );\n        return undefined;\n      }\n\n      res.result = result;\n      return undefined;\n    };\n\n    return createAsyncMiddleware(permissionsMiddleware);\n  };\n}\n"],"mappings":";;;;;AAAA,SAAS,6BAA6B;AAkD/B,SAAS,+BAA+B;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AACF,GAAuC;AACrC,SAAO,SAAS,2BACd,SACqD;AACrD,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,OAAO,WAAW,YAAY,CAAC,QAAQ;AACzC,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,UAAM,wBAAwB,OAC5B,KACA,KACA,SACkB;AAClB,YAAM,EAAE,QAAQ,OAAO,IAAI;AAG3B,UAAI,qBAAqB,MAAM,GAAG;AAChC,eAAO,KAAK;AAAA,MACd;AAGA,YAAM,uBAAuB,oBAAoB,QAAQ,MAAM;AAG/D,YAAM,SAAS,MAAM;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,UAAI,WAAW,QAAW;AACxB,YAAI,QAAQ;AAAA,UACV,uBAAuB,IAAI,MAAM;AAAA,UACjC,EAAE,SAAS,IAAI;AAAA,QACjB;AACA,eAAO;AAAA,MACT;AAEA,UAAI,SAAS;AACb,aAAO;AAAA,IACT;AAEA,WAAO,sBAAsB,qBAAqB;AAAA,EACpD;AACF;","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-C73QV75D.js b/dist/chunk-C73QV75D.js
new file mode 100644
index 0000000000000000000000000000000000000000..0e9dbdd56ecbeb7ec34799fa8110d2362e50c220
--- /dev/null
+++ b/dist/chunk-C73QV75D.js
@@ -0,0 +1,151 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/SubjectMetadataController.ts
+var _basecontroller = require('@metamask/base-controller');
+var controllerName = "SubjectMetadataController";
+var SubjectType = /* @__PURE__ */ ((SubjectType2) => {
+  SubjectType2["Extension"] = "extension";
+  SubjectType2["Internal"] = "internal";
+  SubjectType2["Unknown"] = "unknown";
+  SubjectType2["Website"] = "website";
+  SubjectType2["Snap"] = "snap";
+  return SubjectType2;
+})(SubjectType || {});
+var stateMetadata = {
+  subjectMetadata: { persist: true, anonymous: false }
+};
+var defaultState = {
+  subjectMetadata: {}
+};
+var SubjectMetadataController = class _SubjectMetadataController extends _basecontroller.BaseController {
+  constructor({
+    messenger,
+    subjectCacheLimit,
+    state = {}
+  }) {
+    if (!Number.isInteger(subjectCacheLimit) || subjectCacheLimit < 1) {
+      throw new Error(
+        `subjectCacheLimit must be a positive integer. Received: "${subjectCacheLimit}"`
+      );
+    }
+    const hasPermissions = (origin) => {
+      return messenger.call("PermissionController:hasPermissions", origin);
+    };
+    super({
+      name: controllerName,
+      metadata: stateMetadata,
+      messenger,
+      state: {
+        ..._SubjectMetadataController.getTrimmedState(state, hasPermissions)
+      }
+    });
+    this.subjectHasPermissions = hasPermissions;
+    this.subjectCacheLimit = subjectCacheLimit;
+    this.subjectsWithoutPermissionsEncounteredSinceStartup = /* @__PURE__ */ new Set();
+    this.messagingSystem.registerActionHandler(
+      `${this.name}:getSubjectMetadata`,
+      this.getSubjectMetadata.bind(this)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${this.name}:addSubjectMetadata`,
+      this.addSubjectMetadata.bind(this)
+    );
+  }
+  /**
+   * Clears the state of this controller. Also resets the cache of subjects
+   * encountered since startup, so as to not prematurely reach the cache limit.
+   */
+  clearState() {
+    this.subjectsWithoutPermissionsEncounteredSinceStartup.clear();
+    this.update((_draftState) => {
+      return { ...defaultState };
+    });
+  }
+  /**
+   * Stores domain metadata for the given origin (subject). Deletes metadata for
+   * subjects without permissions in a FIFO manner once more than
+   * {@link SubjectMetadataController.subjectCacheLimit} distinct origins have
+   * been added since boot.
+   *
+   * In order to prevent a degraded user experience,
+   * metadata is never deleted for subjects with permissions, since metadata
+   * cannot yet be requested on demand.
+   *
+   * @param metadata - The subject metadata to store.
+   */
+  addSubjectMetadata(metadata) {
+    const { origin } = metadata;
+    const newMetadata = {
+      ...metadata,
+      extensionId: metadata.extensionId || null,
+      iconUrl: metadata.iconUrl || null,
+      name: metadata.name || null,
+      subjectType: metadata.subjectType || null
+    };
+    let originToForget = null;
+    if (this.subjectsWithoutPermissionsEncounteredSinceStartup.size >= this.subjectCacheLimit) {
+      const cachedOrigin = this.subjectsWithoutPermissionsEncounteredSinceStartup.values().next().value;
+      this.subjectsWithoutPermissionsEncounteredSinceStartup.delete(
+        cachedOrigin
+      );
+      if (!this.subjectHasPermissions(cachedOrigin)) {
+        originToForget = cachedOrigin;
+      }
+    }
+    this.subjectsWithoutPermissionsEncounteredSinceStartup.add(origin);
+    this.update((draftState) => {
+      draftState.subjectMetadata[origin] = newMetadata;
+      if (typeof originToForget === "string") {
+        delete draftState.subjectMetadata[originToForget];
+      }
+    });
+  }
+  /**
+   * Gets the subject metadata for the given origin, if any.
+   *
+   * @param origin - The origin for which to get the subject metadata.
+   * @returns The subject metadata, if any, or `undefined` otherwise.
+   */
+  getSubjectMetadata(origin) {
+    return this.state.subjectMetadata[origin];
+  }
+  /**
+   * Deletes all subjects without permissions from the controller's state.
+   */
+  trimMetadataState() {
+    this.update((draftState) => {
+      return _SubjectMetadataController.getTrimmedState(
+        draftState,
+        this.subjectHasPermissions
+      );
+    });
+  }
+  /**
+   * Returns a new state object that only includes subjects with permissions.
+   * This method is static because we want to call it in the constructor, before
+   * the controller's state is initialized.
+   *
+   * @param state - The state object to trim.
+   * @param hasPermissions - A function that returns a boolean indicating
+   * whether a particular subject (identified by its origin) has any
+   * permissions.
+   * @returns The new state object. If the specified `state` object has no
+   * subject metadata, the returned object will be equivalent to the default
+   * state of this controller.
+   */
+  static getTrimmedState(state, hasPermissions) {
+    const { subjectMetadata = {} } = state;
+    return {
+      subjectMetadata: Object.keys(subjectMetadata).reduce((newSubjectMetadata, origin) => {
+        if (hasPermissions(origin)) {
+          newSubjectMetadata[origin] = subjectMetadata[origin];
+        }
+        return newSubjectMetadata;
+      }, {})
+    };
+  }
+};
+
+
+
+
+exports.SubjectType = SubjectType; exports.SubjectMetadataController = SubjectMetadataController;
+//# sourceMappingURL=chunk-C73QV75D.js.map
\ No newline at end of file
diff --git a/dist/chunk-C73QV75D.js.map b/dist/chunk-C73QV75D.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..ae1bfde6b5c18c74d4649eb19034720993c260cc
--- /dev/null
+++ b/dist/chunk-C73QV75D.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/SubjectMetadataController.ts"],"names":["SubjectType"],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type { Json } from '@metamask/utils';\n\nimport type {\n  GenericPermissionController,\n  HasPermissions,\n  PermissionSubjectMetadata,\n} from './PermissionController';\n\nconst controllerName = 'SubjectMetadataController';\n\ntype SubjectOrigin = string;\n\n/**\n * The different kinds of subjects that MetaMask may interact with, including\n * third parties and itself (e.g., when the background communicated with the UI).\n */\nexport enum SubjectType {\n  Extension = 'extension',\n  Internal = 'internal',\n  Unknown = 'unknown',\n  Website = 'website',\n  Snap = 'snap',\n}\n\nexport type SubjectMetadata = PermissionSubjectMetadata & {\n  [key: string]: Json;\n  name: string | null;\n  subjectType: SubjectType | null;\n  extensionId: string | null;\n  iconUrl: string | null;\n};\n\ntype SubjectMetadataToAdd = PermissionSubjectMetadata & {\n  name?: string | null;\n  subjectType?: SubjectType | null;\n  extensionId?: string | null;\n  iconUrl?: string | null;\n} & Record<string, Json>;\n\nexport type SubjectMetadataControllerState = {\n  subjectMetadata: Record<SubjectOrigin, SubjectMetadata>;\n};\n\nconst stateMetadata = {\n  subjectMetadata: { persist: true, anonymous: false },\n};\n\nconst defaultState: SubjectMetadataControllerState = {\n  subjectMetadata: {},\n};\n\nexport type GetSubjectMetadataState = ControllerGetStateAction<\n  typeof controllerName,\n  SubjectMetadataControllerState\n>;\n\nexport type GetSubjectMetadata = {\n  type: `${typeof controllerName}:getSubjectMetadata`;\n  handler: (origin: SubjectOrigin) => SubjectMetadata | undefined;\n};\n\nexport type AddSubjectMetadata = {\n  type: `${typeof controllerName}:addSubjectMetadata`;\n  handler: (metadata: SubjectMetadataToAdd) => void;\n};\n\nexport type SubjectMetadataControllerActions =\n  | GetSubjectMetadataState\n  | GetSubjectMetadata\n  | AddSubjectMetadata;\n\nexport type SubjectMetadataStateChange = ControllerStateChangeEvent<\n  typeof controllerName,\n  SubjectMetadataControllerState\n>;\n\nexport type SubjectMetadataControllerEvents = SubjectMetadataStateChange;\n\ntype AllowedActions = HasPermissions;\n\nexport type SubjectMetadataControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SubjectMetadataControllerActions | AllowedActions,\n  SubjectMetadataControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\ntype SubjectMetadataControllerOptions = {\n  messenger: SubjectMetadataControllerMessenger;\n  subjectCacheLimit: number;\n  state?: Partial<SubjectMetadataControllerState>;\n};\n\n/**\n * A controller for storing metadata associated with permission subjects. More\n * or less, a cache.\n */\nexport class SubjectMetadataController extends BaseController<\n  typeof controllerName,\n  SubjectMetadataControllerState,\n  SubjectMetadataControllerMessenger\n> {\n  private readonly subjectCacheLimit: number;\n\n  private readonly subjectsWithoutPermissionsEncounteredSinceStartup: Set<string>;\n\n  private readonly subjectHasPermissions: GenericPermissionController['hasPermissions'];\n\n  constructor({\n    messenger,\n    subjectCacheLimit,\n    state = {},\n  }: SubjectMetadataControllerOptions) {\n    if (!Number.isInteger(subjectCacheLimit) || subjectCacheLimit < 1) {\n      throw new Error(\n        `subjectCacheLimit must be a positive integer. Received: \"${subjectCacheLimit}\"`,\n      );\n    }\n\n    const hasPermissions = (origin: string) => {\n      return messenger.call('PermissionController:hasPermissions', origin);\n    };\n\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: {\n        ...SubjectMetadataController.getTrimmedState(state, hasPermissions),\n      },\n    });\n\n    this.subjectHasPermissions = hasPermissions;\n    this.subjectCacheLimit = subjectCacheLimit;\n    this.subjectsWithoutPermissionsEncounteredSinceStartup = new Set();\n\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:getSubjectMetadata`,\n      this.getSubjectMetadata.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:addSubjectMetadata`,\n      this.addSubjectMetadata.bind(this),\n    );\n  }\n\n  /**\n   * Clears the state of this controller. Also resets the cache of subjects\n   * encountered since startup, so as to not prematurely reach the cache limit.\n   */\n  clearState(): void {\n    this.subjectsWithoutPermissionsEncounteredSinceStartup.clear();\n    this.update((_draftState) => {\n      return { ...defaultState };\n    });\n  }\n\n  /**\n   * Stores domain metadata for the given origin (subject). Deletes metadata for\n   * subjects without permissions in a FIFO manner once more than\n   * {@link SubjectMetadataController.subjectCacheLimit} distinct origins have\n   * been added since boot.\n   *\n   * In order to prevent a degraded user experience,\n   * metadata is never deleted for subjects with permissions, since metadata\n   * cannot yet be requested on demand.\n   *\n   * @param metadata - The subject metadata to store.\n   */\n  addSubjectMetadata(metadata: SubjectMetadataToAdd): void {\n    const { origin } = metadata;\n    const newMetadata: SubjectMetadata = {\n      ...metadata,\n      extensionId: metadata.extensionId || null,\n      iconUrl: metadata.iconUrl || null,\n      name: metadata.name || null,\n      subjectType: metadata.subjectType || null,\n    };\n\n    let originToForget: string | null = null;\n    // We only delete the oldest encountered subject from the cache, again to\n    // ensure that the user's experience isn't degraded by missing icons etc.\n    if (\n      this.subjectsWithoutPermissionsEncounteredSinceStartup.size >=\n      this.subjectCacheLimit\n    ) {\n      const cachedOrigin =\n        this.subjectsWithoutPermissionsEncounteredSinceStartup\n          .values()\n          .next().value;\n\n      this.subjectsWithoutPermissionsEncounteredSinceStartup.delete(\n        cachedOrigin,\n      );\n\n      if (!this.subjectHasPermissions(cachedOrigin)) {\n        originToForget = cachedOrigin;\n      }\n    }\n\n    this.subjectsWithoutPermissionsEncounteredSinceStartup.add(origin);\n\n    this.update((draftState) => {\n      draftState.subjectMetadata[origin] = newMetadata;\n      if (typeof originToForget === 'string') {\n        delete draftState.subjectMetadata[originToForget];\n      }\n    });\n  }\n\n  /**\n   * Gets the subject metadata for the given origin, if any.\n   *\n   * @param origin - The origin for which to get the subject metadata.\n   * @returns The subject metadata, if any, or `undefined` otherwise.\n   */\n  getSubjectMetadata(origin: SubjectOrigin): SubjectMetadata | undefined {\n    return this.state.subjectMetadata[origin];\n  }\n\n  /**\n   * Deletes all subjects without permissions from the controller's state.\n   */\n  trimMetadataState(): void {\n    this.update((draftState) => {\n      // @ts-expect-error ts(2589)\n      return SubjectMetadataController.getTrimmedState(\n        draftState,\n        this.subjectHasPermissions,\n      );\n    });\n  }\n\n  /**\n   * Returns a new state object that only includes subjects with permissions.\n   * This method is static because we want to call it in the constructor, before\n   * the controller's state is initialized.\n   *\n   * @param state - The state object to trim.\n   * @param hasPermissions - A function that returns a boolean indicating\n   * whether a particular subject (identified by its origin) has any\n   * permissions.\n   * @returns The new state object. If the specified `state` object has no\n   * subject metadata, the returned object will be equivalent to the default\n   * state of this controller.\n   */\n  private static getTrimmedState(\n    state: Partial<SubjectMetadataControllerState>,\n    hasPermissions: SubjectMetadataController['subjectHasPermissions'],\n  ): SubjectMetadataControllerState {\n    const { subjectMetadata = {} } = state;\n\n    return {\n      subjectMetadata: Object.keys(subjectMetadata).reduce<\n        Record<SubjectOrigin, SubjectMetadata>\n      >((newSubjectMetadata, origin) => {\n        if (hasPermissions(origin)) {\n          newSubjectMetadata[origin] = subjectMetadata[origin];\n        }\n        return newSubjectMetadata;\n      }, {}),\n    };\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-H3MUXLE4.js b/dist/chunk-H3MUXLE4.js
new file mode 100644
index 0000000000000000000000000000000000000000..fb2801d85fd9abceb679c072403c70cbd287c9e4
--- /dev/null
+++ b/dist/chunk-H3MUXLE4.js
@@ -0,0 +1,34 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkSEPTGKNBjs = require('./chunk-SEPTGKNB.js');
+
+// src/rpc-methods/revokePermissions.ts
+
+
+var _utils = require('@metamask/utils');
+var revokePermissionsHandler = {
+  methodNames: ["wallet_revokePermissions" /* revokePermissions */],
+  implementation: revokePermissionsImplementation,
+  hookNames: {
+    revokePermissionsForOrigin: true
+  }
+};
+async function revokePermissionsImplementation(req, res, _next, end, { revokePermissionsForOrigin }) {
+  const { params } = req;
+  const param = params?.[0];
+  if (!param) {
+    return end(_chunkSEPTGKNBjs.invalidParams.call(void 0, { data: { request: req } }));
+  }
+  const permissionKeys = Object.keys(param);
+  if (!_utils.isNonEmptyArray.call(void 0, permissionKeys)) {
+    return end(_chunkSEPTGKNBjs.invalidParams.call(void 0, { data: { request: req } }));
+  }
+  revokePermissionsForOrigin(permissionKeys);
+  res.result = null;
+  return end();
+}
+
+
+
+exports.revokePermissionsHandler = revokePermissionsHandler;
+//# sourceMappingURL=chunk-H3MUXLE4.js.map
\ No newline at end of file
diff --git a/dist/chunk-H3MUXLE4.js.map b/dist/chunk-H3MUXLE4.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..6ce254c842a7816db4ec8d075d1302e38567132e
--- /dev/null
+++ b/dist/chunk-H3MUXLE4.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/rpc-methods/revokePermissions.ts"],"names":[],"mappings":";;;;;AACA;AAAA,EACE;AAAA,OAKK;AAOA,IAAM,2BAIT;AAAA,EACF,aAAa,mDAA8B;AAAA,EAC3C,gBAAgB;AAAA,EAChB,WAAW;AAAA,IACT,4BAA4B;AAAA,EAC9B;AACF;AA0BA,eAAe,gCACb,KACA,KACA,OACA,KACA,EAAE,2BAA2B,GACd;AACf,QAAM,EAAE,OAAO,IAAI;AAEnB,QAAM,QAAQ,SAAS,CAAC;AAExB,MAAI,CAAC,OAAO;AACV,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAIA,QAAM,iBAAiB,OAAO,KAAK,KAAK;AAExC,MAAI,CAAC,gBAAgB,cAAc,GAAG;AACpC,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAEA,6BAA2B,cAAc;AAEzC,MAAI,SAAS;AAEb,SAAO,IAAI;AACb","sourcesContent":["import type { JsonRpcEngineEndCallback } from '@metamask/json-rpc-engine';\nimport {\n  isNonEmptyArray,\n  type Json,\n  type JsonRpcRequest,\n  type NonEmptyArray,\n  type PendingJsonRpcResponse,\n} from '@metamask/utils';\n\nimport { invalidParams } from '../errors';\nimport type { PermissionConstraint } from '../Permission';\nimport type { PermittedHandlerExport } from '../utils';\nimport { MethodNames } from '../utils';\n\nexport const revokePermissionsHandler: PermittedHandlerExport<\n  RevokePermissionsHooks,\n  RevokePermissionArgs,\n  null\n> = {\n  methodNames: [MethodNames.revokePermissions],\n  implementation: revokePermissionsImplementation,\n  hookNames: {\n    revokePermissionsForOrigin: true,\n  },\n};\n\nexport type RevokePermissionArgs = Record<\n  PermissionConstraint['parentCapability'],\n  Json\n>;\n\ntype RevokePermissions = (\n  permissions: NonEmptyArray<PermissionConstraint['parentCapability']>,\n) => void;\n\nexport type RevokePermissionsHooks = {\n  revokePermissionsForOrigin: RevokePermissions;\n};\n\n/**\n * Revoke Permissions implementation to be used in JsonRpcEngine middleware.\n *\n * @param req - The JsonRpcEngine request\n * @param res - The JsonRpcEngine result object\n * @param _next - JsonRpcEngine next() callback - unused\n * @param end - JsonRpcEngine end() callback\n * @param options - Method hooks passed to the method implementation\n * @param options.revokePermissionsForOrigin - A hook that revokes given permission keys for an origin\n * @returns A promise that resolves to nothing\n */\nasync function revokePermissionsImplementation(\n  req: JsonRpcRequest<RevokePermissionArgs>,\n  res: PendingJsonRpcResponse<null>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  { revokePermissionsForOrigin }: RevokePermissionsHooks,\n): Promise<void> {\n  const { params } = req;\n\n  const param = params?.[0];\n\n  if (!param) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  // For now, this API revokes the entire permission key\n  // even if caveats are specified.\n  const permissionKeys = Object.keys(param);\n\n  if (!isNonEmptyArray(permissionKeys)) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  revokePermissionsForOrigin(permissionKeys);\n\n  res.result = null;\n\n  return end();\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-HPECMGYB.mjs b/dist/chunk-HPECMGYB.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..02846902813939cd0a17d0ea146ed1b04cac61df
--- /dev/null
+++ b/dist/chunk-HPECMGYB.mjs
@@ -0,0 +1,51 @@
+import {
+  CaveatSpecificationMismatchError,
+  UnrecognizedCaveatTypeError
+} from "./chunk-I4OI6AQF.mjs";
+
+// src/Caveat.ts
+import { hasProperty } from "@metamask/utils";
+function makeCaveatMerger(mergeValues) {
+  return (leftCaveat, rightCaveat) => {
+    if (leftCaveat.type !== rightCaveat.type) {
+      throw new Error(
+        `Cannot merge caveats of different types: "${leftCaveat.type}" and "${rightCaveat.type}".`
+      );
+    }
+    return {
+      type: leftCaveat.type,
+      value: mergeValues(leftCaveat.value, rightCaveat.value)
+    };
+  };
+}
+function isRestrictedMethodCaveatSpecification(specification) {
+  return hasProperty(specification, "decorator");
+}
+function decorateWithCaveats(methodImplementation, permission, caveatSpecifications) {
+  const { caveats } = permission;
+  if (!caveats) {
+    return methodImplementation;
+  }
+  let decorated = async (args) => methodImplementation(args);
+  for (const caveat of caveats) {
+    const specification = caveatSpecifications[caveat.type];
+    if (!specification) {
+      throw new UnrecognizedCaveatTypeError(caveat.type);
+    }
+    if (!isRestrictedMethodCaveatSpecification(specification)) {
+      throw new CaveatSpecificationMismatchError(
+        specification,
+        "RestrictedMethod" /* RestrictedMethod */
+      );
+    }
+    decorated = specification.decorator(decorated, caveat);
+  }
+  return decorated;
+}
+
+export {
+  makeCaveatMerger,
+  isRestrictedMethodCaveatSpecification,
+  decorateWithCaveats
+};
+//# sourceMappingURL=chunk-HPECMGYB.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-HPECMGYB.mjs.map b/dist/chunk-HPECMGYB.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..6e3789bf8e5baffd00495ca5790e77376444c278
--- /dev/null
+++ b/dist/chunk-HPECMGYB.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/Caveat.ts"],"sourcesContent":["import type { Json } from '@metamask/utils';\nimport { hasProperty } from '@metamask/utils';\n\nimport {\n  CaveatSpecificationMismatchError,\n  UnrecognizedCaveatTypeError,\n} from './errors';\nimport type {\n  AsyncRestrictedMethod,\n  RestrictedMethod,\n  PermissionConstraint,\n  RestrictedMethodParameters,\n} from './Permission';\nimport { PermissionType } from './Permission';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { PermissionController } from './PermissionController';\n\nexport type CaveatConstraint = {\n  /**\n   * The type of the caveat. The type is presumed to be meaningful in the\n   * context of the capability it is associated with.\n   *\n   * In MetaMask, every permission can only have one caveat of each type.\n   */\n  readonly type: string;\n\n  /**\n   * Any additional data necessary to enforce the caveat.\n   */\n  readonly value: Json;\n};\n\n/**\n * A `ZCAP-LD`-like caveat object. A caveat is associated with a particular\n * permission, and stored in its `caveats` array. Conceptually, a caveat is\n * an arbitrary attenuation of the authority granted by its associated\n * permission. It is the responsibility of the host to interpret and apply\n * the restriction represented by a caveat.\n *\n * @template Type - The type of the caveat.\n * @template Value - The value associated with the caveat.\n */\nexport type Caveat<Type extends string, Value extends Json> = {\n  /**\n   * The type of the caveat. The type is presumed to be meaningful in the\n   * context of the capability it is associated with.\n   *\n   * In MetaMask, every permission can only have one caveat of each type.\n   */\n  readonly type: Type;\n\n  /**\n   * Any additional data necessary to enforce the caveat.\n   */\n  readonly value: Value;\n};\n\n// Next, we define types used for specifying caveats at the consumer layer,\n// and a function for applying caveats to a restricted method request. This is\n// Accomplished by decorating the restricted method implementation with the\n// the corresponding caveat functions.\n\n/**\n * A function for applying caveats to a restricted method request.\n *\n * @template ParentCaveat - The caveat type associated with this decorator.\n * @param decorated - The restricted method implementation to be decorated.\n * The method may have already been decorated with other caveats.\n * @param caveat - The caveat object.\n * @returns The decorated restricted method implementation.\n */\nexport type CaveatDecorator<ParentCaveat extends CaveatConstraint> = (\n  decorated: AsyncRestrictedMethod<RestrictedMethodParameters, Json>,\n  caveat: ParentCaveat,\n) => AsyncRestrictedMethod<RestrictedMethodParameters, Json>;\n\n/**\n * Extracts a caveat value type from a caveat decorator.\n *\n * @template Decorator - The {@link CaveatDecorator} to extract a caveat value\n * type from.\n */\ntype ExtractCaveatValueFromDecorator<\n  Decorator extends CaveatDecorator<CaveatConstraint>,\n> = Decorator extends (\n  decorated: AsyncRestrictedMethod<RestrictedMethodParameters, Json>,\n  caveat: infer ParentCaveat,\n) => AsyncRestrictedMethod<RestrictedMethodParameters, Json>\n  ? ParentCaveat extends CaveatConstraint\n    ? ParentCaveat['value']\n    : never\n  : never;\n\n/**\n * A function for validating caveats of a particular type.\n *\n * @see `validator` in {@link CaveatSpecificationBase} for more details.\n * @template ParentCaveat - The caveat type associated with this validator.\n * @param caveat - The caveat object to validate.\n * @param origin - The origin associated with the parent permission.\n * @param target - The target of the parent permission.\n */\nexport type CaveatValidator<ParentCaveat extends CaveatConstraint> = (\n  caveat: { type: ParentCaveat['type']; value: unknown },\n  origin?: string,\n  target?: string,\n) => void;\n\n/**\n * A function that merges two caveats of the same type. The values\n * must be merged in the fashion of a right-biased union.\n *\n * @see `ARCHITECTURE.md` for more details.\n * @template ParentCaveat - The caveat type associated with this merger.\n * @param leftCaveat - The left-hand caveat.\n * @param rightCaveat - The right-hand caveat.\n * @returns The merged caveat.\n */\nexport type CaveatMerger<ParentCaveat extends CaveatConstraint> = (\n  leftCaveat: ParentCaveat,\n  rightCaveat: ParentCaveat,\n) => ParentCaveat;\n\n/**\n * A function that merges two caveat values of the same type. The values\n * must be merged in the fashion of a right-biased union.\n *\n * @see `ARCHITECTURE.md` for more details.\n * @template Value - The type of the values to merge.\n * @param leftValue - The left-hand value.\n * @param rightValue - The right-hand value.\n * @returns The merged value.\n */\nexport type CaveatValueMerger<Value extends Json> = (\n  leftValue: Value,\n  rightValue: Value,\n) => Value;\n\n/**\n * Makes a {@link CaveatMerger} function for a specific caveat type.\n *\n * @see `ARCHITECTURE.md` for more details.\n * @param mergeValues - The function to merge the values of two caveats.\n * @returns The {@link CaveatMerger} function.\n */\nexport function makeCaveatMerger<ParentCaveat extends CaveatConstraint>(\n  mergeValues: CaveatValueMerger<ParentCaveat['value']>,\n): CaveatMerger<ParentCaveat> {\n  return (leftCaveat: ParentCaveat, rightCaveat: ParentCaveat) => {\n    // It should be impossible for this to happen via the permission controller's\n    // API, but it's a small price to pay for sound sleep.\n    if (leftCaveat.type !== rightCaveat.type) {\n      throw new Error(\n        `Cannot merge caveats of different types: \"${leftCaveat.type}\" and \"${rightCaveat.type}\".`,\n      );\n    }\n\n    return {\n      type: leftCaveat.type,\n      value: mergeValues(leftCaveat.value, rightCaveat.value),\n    } as ParentCaveat;\n  };\n}\n\nexport type CaveatSpecificationBase = {\n  /**\n   * The string type of the caveat.\n   */\n  type: string;\n\n  /**\n   * The validator function used to validate caveats of the associated type\n   * whenever they are instantiated. Caveat are instantiated whenever they are\n   * created or mutated.\n   *\n   * The validator should throw an appropriate JSON-RPC error if validation fails.\n   *\n   * If no validator is specified, no validation of caveat values will be\n   * performed. Although caveats can also be validated by permission validators,\n   * validating caveat values separately is strongly recommended.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validator?: CaveatValidator<any>;\n\n  /**\n   * The merger function used to merge caveats of the associated type during\n   * incremental permission requests. The values must be merged in the fashion\n   * of a right-biased union.\n   *\n   * @see `ARCHITECTURE.md` for more details.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  merger?: CaveatMerger<any>;\n};\n\nexport type RestrictedMethodCaveatSpecificationConstraint =\n  CaveatSpecificationBase & {\n    /**\n     * The decorator function used to apply the caveat to restricted method\n     * requests.\n     */\n    decorator: CaveatDecorator<CaveatConstraint>;\n  };\n\nexport type EndowmentCaveatSpecificationConstraint = CaveatSpecificationBase;\n\n/**\n * The constraint for caveat specification objects. Every {@link Caveat}\n * supported by a {@link PermissionController} must have an associated\n * specification, which is the source of truth for all caveat-related types.\n * In addition, a caveat specification may include a decorator function used\n * to apply the caveat's attenuation to a restricted method. It may also include\n * a validator function specified by the consumer.\n *\n * See the README for more details.\n */\nexport type CaveatSpecificationConstraint =\n  | RestrictedMethodCaveatSpecificationConstraint\n  | EndowmentCaveatSpecificationConstraint;\n\n/**\n * Options for {@link CaveatSpecificationBuilder} functions.\n */\ntype CaveatSpecificationBuilderOptions<\n  DecoratorHooks extends Record<string, unknown>,\n  ValidatorHooks extends Record<string, unknown>,\n> = {\n  type?: string;\n  decoratorHooks?: DecoratorHooks;\n  validatorHooks?: ValidatorHooks;\n};\n\n/**\n * A function that builds caveat specifications. Modules that specify caveats\n * for external consumption should make this their primary / default export so\n * that host applications can use them to generate concrete specifications\n * tailored to their requirements.\n */\nexport type CaveatSpecificationBuilder<\n  Options extends CaveatSpecificationBuilderOptions<\n    Record<string, unknown>,\n    Record<string, unknown>\n  >,\n  Specification extends CaveatSpecificationConstraint,\n> = (options: Options) => Specification;\n\n/**\n * A caveat specification export object, containing the\n * {@link CaveatSpecificationBuilder} function and \"hook name\" objects.\n */\nexport type CaveatSpecificationBuilderExportConstraint = {\n  specificationBuilder: CaveatSpecificationBuilder<\n    CaveatSpecificationBuilderOptions<\n      Record<string, unknown>,\n      Record<string, unknown>\n    >,\n    CaveatSpecificationConstraint\n  >;\n  decoratorHookNames?: Record<string, true>;\n  validatorHookNames?: Record<string, true>;\n};\n\n/**\n * The specifications for all caveats supported by a particular\n * {@link PermissionController}.\n *\n * @template Specifications - The union of all {@link CaveatSpecificationConstraint} types.\n */\nexport type CaveatSpecificationMap<\n  CaveatSpecification extends CaveatSpecificationConstraint,\n> = Record<CaveatSpecification['type'], CaveatSpecification>;\n\n/**\n * Extracts the union of all caveat types specified by the given\n * {@link CaveatSpecificationConstraint} type.\n *\n * @template CaveatSpecification - The {@link CaveatSpecificationConstraint} to extract a\n * caveat type union from.\n */\nexport type ExtractCaveats<\n  CaveatSpecification extends CaveatSpecificationConstraint,\n> = CaveatSpecification extends RestrictedMethodCaveatSpecificationConstraint\n  ? Caveat<\n      CaveatSpecification['type'],\n      ExtractCaveatValueFromDecorator<\n        RestrictedMethodCaveatSpecificationConstraint['decorator']\n      >\n    >\n  : Caveat<CaveatSpecification['type'], Json>;\n\n/**\n * Extracts the type of a specific {@link Caveat} from a union of caveat\n * specifications.\n *\n * @template CaveatSpecifications - The union of all caveat specifications.\n * @template CaveatType - The type of the caveat to extract.\n */\nexport type ExtractCaveat<\n  CaveatSpecifications extends CaveatSpecificationConstraint,\n  CaveatType extends string,\n> = Extract<ExtractCaveats<CaveatSpecifications>, { type: CaveatType }>;\n\n/**\n * Extracts the value type of a specific {@link Caveat} from a union of caveat\n * specifications.\n *\n * @template CaveatSpecifications - The union of all caveat specifications.\n * @template CaveatType - The type of the caveat whose value to extract.\n */\nexport type ExtractCaveatValue<\n  CaveatSpecifications extends CaveatSpecificationConstraint,\n  CaveatType extends string,\n> = ExtractCaveat<CaveatSpecifications, CaveatType>['value'];\n\n/**\n * Determines whether a caveat specification is a restricted method caveat specification.\n *\n * @param specification - The caveat specification.\n * @returns True if the caveat specification is a restricted method caveat specification, otherwise false.\n */\nexport function isRestrictedMethodCaveatSpecification(\n  specification: CaveatSpecificationConstraint,\n): specification is RestrictedMethodCaveatSpecificationConstraint {\n  return hasProperty(specification, 'decorator');\n}\n\n/**\n * Decorate a restricted method implementation with its caveats.\n *\n * Note that all caveat functions (i.e. the argument and return value of the\n * decorator) must be awaited.\n *\n * @param methodImplementation - The restricted method implementation\n * @param permission - The origin's potential permission\n * @param caveatSpecifications - All caveat implementations\n * @returns The decorated method implementation\n */\nexport function decorateWithCaveats<\n  CaveatSpecifications extends CaveatSpecificationConstraint,\n>(\n  methodImplementation: RestrictedMethod<RestrictedMethodParameters, Json>,\n  permission: Readonly<PermissionConstraint>, // bound to the requesting origin\n  caveatSpecifications: CaveatSpecificationMap<CaveatSpecifications>, // all caveat implementations\n): RestrictedMethod<RestrictedMethodParameters, Json> {\n  const { caveats } = permission;\n  if (!caveats) {\n    return methodImplementation;\n  }\n\n  let decorated = async (\n    args: Parameters<RestrictedMethod<RestrictedMethodParameters, Json>>[0],\n  ) => methodImplementation(args);\n\n  for (const caveat of caveats) {\n    const specification =\n      caveatSpecifications[caveat.type as CaveatSpecifications['type']];\n    if (!specification) {\n      throw new UnrecognizedCaveatTypeError(caveat.type);\n    }\n\n    if (!isRestrictedMethodCaveatSpecification(specification)) {\n      throw new CaveatSpecificationMismatchError(\n        specification,\n        PermissionType.RestrictedMethod,\n      );\n    }\n    decorated = specification.decorator(decorated, caveat);\n  }\n\n  return decorated;\n}\n"],"mappings":";;;;;;AACA,SAAS,mBAAmB;AAgJrB,SAAS,iBACd,aAC4B;AAC5B,SAAO,CAAC,YAA0B,gBAA8B;AAG9D,QAAI,WAAW,SAAS,YAAY,MAAM;AACxC,YAAM,IAAI;AAAA,QACR,6CAA6C,WAAW,IAAI,UAAU,YAAY,IAAI;AAAA,MACxF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,MAAM,WAAW;AAAA,MACjB,OAAO,YAAY,WAAW,OAAO,YAAY,KAAK;AAAA,IACxD;AAAA,EACF;AACF;AAgKO,SAAS,sCACd,eACgE;AAChE,SAAO,YAAY,eAAe,WAAW;AAC/C;AAaO,SAAS,oBAGd,sBACA,YACA,sBACoD;AACpD,QAAM,EAAE,QAAQ,IAAI;AACpB,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACT;AAEA,MAAI,YAAY,OACd,SACG,qBAAqB,IAAI;AAE9B,aAAW,UAAU,SAAS;AAC5B,UAAM,gBACJ,qBAAqB,OAAO,IAAoC;AAClE,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,4BAA4B,OAAO,IAAI;AAAA,IACnD;AAEA,QAAI,CAAC,sCAAsC,aAAa,GAAG;AACzD,YAAM,IAAI;AAAA,QACR;AAAA;AAAA,MAEF;AAAA,IACF;AACA,gBAAY,cAAc,UAAU,WAAW,MAAM;AAAA,EACvD;AAEA,SAAO;AACT;","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-HYMS7IGB.mjs b/dist/chunk-HYMS7IGB.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..db6993cfe8ce6fd795a4f917ad30bb771da1e62a
--- /dev/null
+++ b/dist/chunk-HYMS7IGB.mjs
@@ -0,0 +1,31 @@
+// src/Permission.ts
+import { nanoid } from "nanoid";
+function constructPermission(options) {
+  const { caveats = null, invoker, target } = options;
+  return {
+    id: nanoid(),
+    parentCapability: target,
+    invoker,
+    caveats,
+    date: (/* @__PURE__ */ new Date()).getTime()
+  };
+}
+function findCaveat(permission, caveatType) {
+  return permission.caveats?.find((caveat) => caveat.type === caveatType);
+}
+var PermissionType = /* @__PURE__ */ ((PermissionType2) => {
+  PermissionType2["RestrictedMethod"] = "RestrictedMethod";
+  PermissionType2["Endowment"] = "Endowment";
+  return PermissionType2;
+})(PermissionType || {});
+function hasSpecificationType(specification, expectedType) {
+  return specification.permissionType === expectedType;
+}
+
+export {
+  constructPermission,
+  findCaveat,
+  PermissionType,
+  hasSpecificationType
+};
+//# sourceMappingURL=chunk-HYMS7IGB.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-HYMS7IGB.mjs.map b/dist/chunk-HYMS7IGB.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..279ee28eeb50b142b85f94b36cb891a27b417371
--- /dev/null
+++ b/dist/chunk-HYMS7IGB.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/Permission.ts"],"sourcesContent":["import type {\n  ActionConstraint,\n  EventConstraint,\n} from '@metamask/base-controller';\nimport type { NonEmptyArray } from '@metamask/controller-utils';\nimport type { Json } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { CaveatConstraint, Caveat } from './Caveat';\nimport type {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  PermissionController,\n  PermissionsRequest,\n  SideEffectMessenger,\n} from './PermissionController';\nimport type { SubjectType } from './SubjectMetadataController';\n\n/**\n * The origin of a subject.\n * Effectively the GUID of an entity that can have permissions.\n */\nexport type OriginString = string;\n\n/**\n * The name of a permission target.\n */\ntype TargetName = string;\n\n/**\n * A `ZCAP-LD`-like permission object. A permission is associated with a\n * particular `invoker`, which is the holder of the permission. Possessing the\n * permission grants access to a particular restricted resource, identified by\n * the `parentCapability`. The use of the restricted resource may be further\n * restricted by any `caveats` associated with the permission.\n *\n * See the README for details.\n */\nexport type PermissionConstraint = {\n  /**\n   * The context(s) in which this capability is meaningful.\n   *\n   * It is required by the standard, but we make it optional since there is only\n   * one context in our usage (i.e. the user's MetaMask instance).\n   */\n  readonly '@context'?: NonEmptyArray<string>;\n\n  /**\n   * The caveats of the permission.\n   *\n   * @see {@link Caveat} For more information.\n   */\n  readonly caveats: null | NonEmptyArray<CaveatConstraint>;\n\n  /**\n   * The creation date of the permission, in UNIX epoch time.\n   */\n  readonly date: number;\n\n  /**\n   * The GUID of the permission object.\n   */\n  readonly id: string;\n\n  /**\n   * The origin string of the subject that has the permission.\n   */\n  readonly invoker: OriginString;\n\n  /**\n   * A pointer to the resource that possession of the capability grants\n   * access to, for example a JSON-RPC method or endowment.\n   */\n  readonly parentCapability: string;\n};\n\n/**\n * A `ZCAP-LD`-like permission object. A permission is associated with a\n * particular `invoker`, which is the holder of the permission. Possessing the\n * permission grants access to a particular restricted resource, identified by\n * the `parentCapability`. The use of the restricted resource may be further\n * restricted by any `caveats` associated with the permission.\n *\n * See the README for details.\n *\n * @template Name - The name of the permission that the target corresponds to.\n * @template AllowedCaveat - A union of the allowed {@link Caveat} types\n * for the permission.\n */\nexport type ValidPermission<\n  Name extends TargetName,\n  AllowedCaveat extends CaveatConstraint,\n> = PermissionConstraint & {\n  /**\n   * The caveats of the permission.\n   *\n   * @see {@link Caveat} For more information.\n   */\n  readonly caveats: AllowedCaveat extends never\n    ? null\n    : NonEmptyArray<AllowedCaveat> | null;\n\n  /**\n   * A pointer to the resource that possession of the capability grants\n   * access to, for example a JSON-RPC method or endowment.\n   */\n  readonly parentCapability: Name;\n};\n\n/**\n * Internal utility for extracting the members types of an array. The type\n * evalutes to `never` if the specified type is the empty tuple or neither\n * an array nor a tuple.\n *\n * @template ArrayType - The array type whose members to extract.\n */\ntype ExtractArrayMembers<ArrayType> = ArrayType extends []\n  ? never\n  : ArrayType extends unknown[] | readonly unknown[]\n  ? ArrayType[number]\n  : never;\n\n/**\n * A utility type for extracting the allowed caveat types for a particular\n * permission from a permission specification type.\n *\n * @template PermissionSpecification - The permission specification type to\n * extract valid caveat types from.\n */\nexport type ExtractAllowedCaveatTypes<\n  PermissionSpecification extends PermissionSpecificationConstraint,\n> = ExtractArrayMembers<PermissionSpecification['allowedCaveats']>;\n\n/**\n * The options object of {@link constructPermission}.\n *\n * @template TargetPermission - The {@link Permission} that will be constructed.\n */\nexport type PermissionOptions<TargetPermission extends PermissionConstraint> = {\n  target: TargetPermission['parentCapability'];\n  /**\n   * The origin string of the subject that has the permission.\n   */\n  invoker: OriginString;\n\n  /**\n   * The caveats of the permission.\n   * See {@link Caveat}.\n   */\n  caveats?: NonEmptyArray<CaveatConstraint>;\n};\n\n/**\n * The default permission factory function. Naively constructs a permission from\n * the inputs. Sets a default, random `id` if none is provided.\n *\n * @see {@link Permission} For more details.\n * @template TargetPermission- - The {@link Permission} that will be constructed.\n * @param options - The options for the permission.\n * @returns The new permission object.\n */\nexport function constructPermission<\n  TargetPermission extends PermissionConstraint,\n>(options: PermissionOptions<TargetPermission>): TargetPermission {\n  const { caveats = null, invoker, target } = options;\n\n  return {\n    id: nanoid(),\n    parentCapability: target,\n    invoker,\n    caveats,\n    date: new Date().getTime(),\n  } as TargetPermission;\n}\n\n/**\n * Gets the caveat of the specified type belonging to the specified permission.\n *\n * @param permission - The permission whose caveat to retrieve.\n * @param caveatType - The type of the caveat to retrieve.\n * @returns The caveat, or undefined if no such caveat exists.\n */\nexport function findCaveat(\n  permission: PermissionConstraint,\n  caveatType: string,\n): CaveatConstraint | undefined {\n  return permission.caveats?.find((caveat) => caveat.type === caveatType);\n}\n\n/**\n * A requested permission object. Just an object with any of the properties\n * of a {@link PermissionConstraint} object.\n */\ntype RequestedPermission = Partial<PermissionConstraint>;\n\n/**\n * A record of target names and their {@link RequestedPermission} objects.\n */\nexport type RequestedPermissions = Record<TargetName, RequestedPermission>;\n\n/**\n * The restricted method context object. Essentially a way to pass internal\n * arguments to restricted methods and caveat functions, most importantly the\n * requesting origin.\n */\ntype RestrictedMethodContext = Readonly<{\n  origin: OriginString;\n  [key: string]: unknown;\n}>;\n\nexport type RestrictedMethodParameters = Json[] | Record<string, Json>;\n\n/**\n * The arguments passed to a restricted method implementation.\n *\n * @template Params - The JSON-RPC parameters of the restricted method.\n */\nexport type RestrictedMethodOptions<\n  Params extends RestrictedMethodParameters | null,\n> = {\n  method: TargetName;\n  params?: Params;\n  context: RestrictedMethodContext;\n};\n\n/**\n * A synchronous restricted method implementation.\n *\n * @template Params - The JSON-RPC parameters of the restricted method.\n * @template Result - The JSON-RPC result of the restricted method.\n */\nexport type SyncRestrictedMethod<\n  Params extends RestrictedMethodParameters,\n  Result extends Json,\n> = (args: RestrictedMethodOptions<Params>) => Result;\n\n/**\n * An asynchronous restricted method implementation.\n *\n * @template Params - The JSON-RPC parameters of the restricted method.\n * @template Result - The JSON-RPC result of the restricted method.\n */\nexport type AsyncRestrictedMethod<\n  Params extends RestrictedMethodParameters,\n  Result extends Json,\n> = (args: RestrictedMethodOptions<Params>) => Promise<Result>;\n\n/**\n * A synchronous or asynchronous restricted method implementation.\n *\n * @template Params - The JSON-RPC parameters of the restricted method.\n * @template Result - The JSON-RPC result of the restricted method.\n */\nexport type RestrictedMethod<\n  Params extends RestrictedMethodParameters,\n  Result extends Json,\n> =\n  | SyncRestrictedMethod<Params, Result>\n  | AsyncRestrictedMethod<Params, Result>;\n\nexport type ValidRestrictedMethod<\n  MethodImplementation extends RestrictedMethod<\n    RestrictedMethodParameters,\n    Json\n  >,\n> = MethodImplementation extends (args: infer Options) => Json | Promise<Json>\n  ? Options extends RestrictedMethodOptions<RestrictedMethodParameters>\n    ? MethodImplementation\n    : never\n  : never;\n\n/**\n * {@link EndowmentGetter} parameter object.\n */\nexport type EndowmentGetterParams = {\n  /**\n   * The origin of the requesting subject.\n   */\n  origin: string;\n\n  /**\n   * Any additional data associated with the request.\n   */\n  requestData?: unknown;\n\n  [key: string]: unknown;\n};\n\n/**\n * A synchronous or asynchronous function that gets the endowments for a\n * particular endowment permission. The getter receives the origin of the\n * requesting subject and, optionally, additional request metadata.\n */\nexport type EndowmentGetter<Endowments extends Json> = (\n  options: EndowmentGetterParams,\n) => Endowments | Promise<Endowments>;\n\nexport type PermissionFactory<\n  TargetPermission extends PermissionConstraint,\n  RequestData extends Record<string, unknown>,\n> = (\n  options: PermissionOptions<TargetPermission>,\n  requestData?: RequestData,\n) => TargetPermission;\n\nexport type PermissionValidatorConstraint = (\n  permission: PermissionConstraint,\n  origin?: OriginString,\n  target?: string,\n) => void;\n\n/**\n * The parameters passed to the side-effect function.\n */\nexport type SideEffectParams<\n  Actions extends ActionConstraint,\n  Events extends EventConstraint,\n> = {\n  requestData: PermissionsRequest;\n  messagingSystem: SideEffectMessenger<Actions, Events>;\n};\n\n/**\n * A function that will execute actions as a permission side-effect.\n */\nexport type SideEffectHandler<\n  Actions extends ActionConstraint,\n  Events extends EventConstraint,\n> = (params: SideEffectParams<Actions, Events>) => Promise<unknown>;\n\n/**\n * The permissions side effects.\n */\nexport type PermissionSideEffect<\n  Actions extends ActionConstraint,\n  Events extends EventConstraint,\n> = {\n  /**\n   * A method triggered when the permission is accepted by the user\n   */\n  onPermitted: SideEffectHandler<Actions, Events>;\n  /**\n   * A method triggered if a `onPermitted` method rejected.\n   */\n  onFailure?: SideEffectHandler<Actions, Events>;\n};\n\n/**\n * The different possible types of permissions.\n */\nexport enum PermissionType {\n  /**\n   * A restricted JSON-RPC method. A subject must have the requisite permission\n   * to call a restricted JSON-RPC method.\n   */\n  RestrictedMethod = 'RestrictedMethod',\n\n  /**\n   * An \"endowment\" granted to subjects that possess the requisite permission,\n   * such as a global environment variable exposing a restricted API, etc.\n   */\n  Endowment = 'Endowment',\n}\n\n/**\n * The base constraint for permission specification objects. Every\n * {@link Permission} supported by a {@link PermissionController} must have an\n * associated specification, which is the source of truth for all permission-\n * related types. A permission specification includes the list of permitted\n * caveats, and any factory and validation functions specified by the consumer.\n * A concrete permission specification may specify further fields as necessary.\n *\n * See the README for more details.\n */\ntype PermissionSpecificationBase<Type extends PermissionType> = {\n  /**\n   * The type of the specified permission.\n   */\n  permissionType: Type;\n\n  /**\n   * The name of the target resource of the permission.\n   */\n  targetName: string;\n\n  /**\n   * An array of the caveat types that may be added to instances of this\n   * permission.\n   */\n  allowedCaveats: Readonly<NonEmptyArray<string>> | null;\n\n  /**\n   * The factory function used to get permission objects. Permissions returned\n   * by this function are presumed to valid, and they will not be passed to the\n   * validator function associated with this specification (if any). In other\n   * words, the factory function should validate the permissions it creates.\n   *\n   * If no factory is specified, the {@link Permission} constructor will be\n   * used, and the validator function (if specified) will be called on newly\n   * constructed permissions.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  factory?: PermissionFactory<any, Record<string, unknown>>;\n\n  /**\n   * The validator function used to validate permissions of the associated type\n   * whenever they are mutated. The only way a permission can be legally mutated\n   * is when its caveats are modified by the permission controller.\n   *\n   * The validator should throw an appropriate JSON-RPC error if validation fails.\n   */\n  validator?: PermissionValidatorConstraint;\n\n  /**\n   * The side-effect triggered by the {@link PermissionController} once the user approved it.\n   * The side-effect can only be an action allowed to be called inside the {@link PermissionController}.\n   *\n   * If the side-effect action fails, the permission that triggered it is revoked.\n   */\n  sideEffect?: PermissionSideEffect<ActionConstraint, EventConstraint>;\n\n  /**\n   * The Permission may be available to only a subset of the subject types. If so, specify the subject types as an array.\n   * If a subject with a type not in this array tries to request the permission, the call will fail.\n   *\n   * Leaving this as undefined uses default behaviour where the permission is available to request for all subject types.\n   */\n  subjectTypes?: readonly SubjectType[];\n};\n\n/**\n * The constraint for restricted method permission specification objects.\n * Permissions that correspond to JSON-RPC methods are specified using objects\n * that conform to this type.\n *\n * See the README for more details.\n */\nexport type RestrictedMethodSpecificationConstraint =\n  PermissionSpecificationBase<PermissionType.RestrictedMethod> & {\n    /**\n     * The implementation of the restricted method that the permission\n     * corresponds to.\n     */\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodImplementation: RestrictedMethod<any, Json>;\n  };\n\n/**\n * The constraint for endowment permission specification objects. Permissions\n * that endow callers with some restricted resource are specified using objects\n * that conform to this type.\n *\n * See the README for more details.\n */\nexport type EndowmentSpecificationConstraint =\n  PermissionSpecificationBase<PermissionType.Endowment> & {\n    /**\n     * The {@link EndowmentGetter} function for the permission. This function\n     * will be called by the {@link PermissionController} whenever the\n     * permission is invoked, after which the host can apply the endowments to\n     * the requesting subject in the intended manner.\n     */\n    endowmentGetter: EndowmentGetter<Json>;\n  };\n\n/**\n * The constraint for permission specification objects. Every {@link Permission}\n * supported by a {@link PermissionController} must have an associated\n * specification, which is the source of truth for all permission-related types.\n * All specifications must adhere to the {@link PermissionSpecificationBase}\n * interface, but specifications may have different fields depending on the\n * {@link PermissionType}.\n *\n * See the README for more details.\n */\nexport type PermissionSpecificationConstraint =\n  | EndowmentSpecificationConstraint\n  | RestrictedMethodSpecificationConstraint;\n\n/**\n * Options for {@link PermissionSpecificationBuilder} functions.\n */\ntype PermissionSpecificationBuilderOptions<\n  FactoryHooks extends Record<string, unknown>,\n  MethodHooks extends Record<string, unknown>,\n  ValidatorHooks extends Record<string, unknown>,\n> = {\n  targetName?: string;\n  allowedCaveats?: Readonly<NonEmptyArray<string>> | null;\n  factoryHooks?: FactoryHooks;\n  methodHooks?: MethodHooks;\n  validatorHooks?: ValidatorHooks;\n};\n\n/**\n * A function that builds a permission specification. Modules that specify\n * permissions for external consumption should make this their primary /\n * default export so that host applications can use them to generate concrete\n * specifications tailored to their requirements.\n */\nexport type PermissionSpecificationBuilder<\n  Type extends PermissionType,\n  Options extends PermissionSpecificationBuilderOptions<\n    Record<string, unknown>,\n    Record<string, unknown>,\n    Record<string, unknown>\n  >,\n  Specification extends PermissionSpecificationConstraint & {\n    permissionType: Type;\n  },\n> = (options: Options) => Specification;\n\n/**\n * A restricted method permission export object, containing the\n * {@link PermissionSpecificationBuilder} function and \"hook name\" objects.\n */\nexport type PermissionSpecificationBuilderExportConstraint = {\n  targetName: string;\n  specificationBuilder: PermissionSpecificationBuilder<\n    PermissionType,\n    PermissionSpecificationBuilderOptions<\n      Record<string, unknown>,\n      Record<string, unknown>,\n      Record<string, unknown>\n    >,\n    PermissionSpecificationConstraint\n  >;\n  factoryHookNames?: Record<string, true>;\n  methodHookNames?: Record<string, true>;\n  validatorHookNames?: Record<string, true>;\n};\n\ntype ValidRestrictedMethodSpecification<\n  Specification extends RestrictedMethodSpecificationConstraint,\n> = Specification['methodImplementation'] extends ValidRestrictedMethod<\n  Specification['methodImplementation']\n>\n  ? Specification\n  : never;\n\n/**\n * Constraint for {@link PermissionSpecificationConstraint} objects that\n * evaluates to `never` if the specification contains any invalid fields.\n *\n * @template Specification - The permission specification to validate.\n */\nexport type ValidPermissionSpecification<\n  Specification extends PermissionSpecificationConstraint,\n> = Specification['targetName'] extends TargetName\n  ? Specification['permissionType'] extends PermissionType.Endowment\n    ? Specification\n    : Specification['permissionType'] extends PermissionType.RestrictedMethod\n    ? ValidRestrictedMethodSpecification<\n        Extract<Specification, RestrictedMethodSpecificationConstraint>\n      >\n    : never\n  : never;\n\n/**\n * Checks that the specification has the expected permission type.\n *\n * @param specification - The specification to check.\n * @param expectedType - The expected permission type.\n * @template Specification - The specification to check.\n * @template Type - The expected permission type.\n * @returns Whether or not the specification is of the expected type.\n */\nexport function hasSpecificationType<\n  Specification extends PermissionSpecificationConstraint,\n  Type extends PermissionType,\n>(\n  specification: Specification,\n  expectedType: Type,\n): specification is Specification & {\n  permissionType: Type;\n} {\n  return specification.permissionType === expectedType;\n}\n\n/**\n * The specifications for all permissions supported by a particular\n * {@link PermissionController}.\n *\n * @template Specifications - The union of all {@link PermissionSpecificationConstraint} types.\n */\nexport type PermissionSpecificationMap<\n  Specification extends PermissionSpecificationConstraint,\n> = {\n  [Name in Specification['targetName']]: Specification extends {\n    targetName: Name;\n  }\n    ? Specification\n    : never;\n};\n\n/**\n * Extracts a specific {@link PermissionSpecificationConstraint} from a union of\n * permission specifications.\n *\n * @template Specification - The specification union type to extract from.\n * @template Name - The `targetName` of the specification to extract.\n */\nexport type ExtractPermissionSpecification<\n  Specification extends PermissionSpecificationConstraint,\n  Name extends Specification['targetName'],\n> = Specification extends {\n  targetName: Name;\n}\n  ? Specification\n  : never;\n"],"mappings":";AAMA,SAAS,cAAc;AA2JhB,SAAS,oBAEd,SAAgE;AAChE,QAAM,EAAE,UAAU,MAAM,SAAS,OAAO,IAAI;AAE5C,SAAO;AAAA,IACL,IAAI,OAAO;AAAA,IACX,kBAAkB;AAAA,IAClB;AAAA,IACA;AAAA,IACA,OAAM,oBAAI,KAAK,GAAE,QAAQ;AAAA,EAC3B;AACF;AASO,SAAS,WACd,YACA,YAC8B;AAC9B,SAAO,WAAW,SAAS,KAAK,CAAC,WAAW,OAAO,SAAS,UAAU;AACxE;AAmKO,IAAK,iBAAL,kBAAKA,oBAAL;AAKL,EAAAA,gBAAA,sBAAmB;AAMnB,EAAAA,gBAAA,eAAY;AAXF,SAAAA;AAAA,GAAA;AA2NL,SAAS,qBAId,eACA,cAGA;AACA,SAAO,cAAc,mBAAmB;AAC1C;","names":["PermissionType"]}
\ No newline at end of file
diff --git a/dist/chunk-I4OI6AQF.mjs b/dist/chunk-I4OI6AQF.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..63d8cd12b7ab5d920ae4dbb7cd8bc3dd29506575
--- /dev/null
+++ b/dist/chunk-I4OI6AQF.mjs
@@ -0,0 +1,218 @@
+// src/errors.ts
+import {
+  errorCodes,
+  providerErrors,
+  rpcErrors,
+  JsonRpcError
+} from "@metamask/rpc-errors";
+function unauthorized(opts) {
+  return providerErrors.unauthorized({
+    message: "Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions",
+    data: opts.data
+  });
+}
+function methodNotFound(method, data) {
+  const message = `The method "${method}" does not exist / is not available.`;
+  const opts = { message };
+  if (data !== void 0) {
+    opts.data = data;
+  }
+  return rpcErrors.methodNotFound(opts);
+}
+function invalidParams(opts) {
+  return rpcErrors.invalidParams({
+    data: opts.data,
+    message: opts.message
+  });
+}
+function userRejectedRequest(data) {
+  return providerErrors.userRejectedRequest({ data });
+}
+function internalError(message, data) {
+  return rpcErrors.internal({ message, data });
+}
+var InvalidSubjectIdentifierError = class extends Error {
+  constructor(origin) {
+    super(
+      `Invalid subject identifier: "${typeof origin === "string" ? origin : typeof origin}"`
+    );
+  }
+};
+var UnrecognizedSubjectError = class extends Error {
+  constructor(origin) {
+    super(`Unrecognized subject: "${origin}" has no permissions.`);
+  }
+};
+var CaveatMergerDoesNotExistError = class extends Error {
+  constructor(caveatType) {
+    super(`Caveat merger does not exist for type: "${caveatType}"`);
+  }
+};
+var InvalidMergedPermissionsError = class extends Error {
+  constructor(origin, cause, diff) {
+    super(
+      `Invalid merged permissions for subject "${origin}":
+${cause.message}`
+    );
+    this.cause = cause;
+    this.data = { diff };
+  }
+};
+var InvalidApprovedPermissionError = class extends Error {
+  constructor(origin, target, approvedPermission) {
+    super(
+      `Invalid approved permission for origin "${origin}" and target "${target}".`
+    );
+    this.data = { origin, target, approvedPermission };
+  }
+};
+var PermissionDoesNotExistError = class extends Error {
+  constructor(origin, target) {
+    super(`Subject "${origin}" has no permission for "${target}".`);
+  }
+};
+var EndowmentPermissionDoesNotExistError = class extends Error {
+  constructor(target, origin) {
+    super(`Subject "${origin}" has no permission for "${target}".`);
+    if (origin) {
+      this.data = { origin };
+    }
+  }
+};
+var UnrecognizedCaveatTypeError = class extends Error {
+  constructor(caveatType, origin, target) {
+    super(`Unrecognized caveat type: "${caveatType}"`);
+    this.data = { caveatType };
+    if (origin !== void 0) {
+      this.data.origin = origin;
+    }
+    if (target !== void 0) {
+      this.data.target = target;
+    }
+  }
+};
+var InvalidCaveatsPropertyError = class extends Error {
+  constructor(origin, target, caveatsProperty) {
+    super(
+      `The "caveats" property of permission for "${target}" of subject "${origin}" is invalid. It must be a non-empty array if specified.`
+    );
+    this.data = { origin, target, caveatsProperty };
+  }
+};
+var CaveatDoesNotExistError = class extends Error {
+  constructor(origin, target, caveatType) {
+    super(
+      `Permission for "${target}" of subject "${origin}" has no caveat of type "${caveatType}".`
+    );
+  }
+};
+var CaveatAlreadyExistsError = class extends Error {
+  constructor(origin, target, caveatType) {
+    super(
+      `Permission for "${target}" of subject "${origin}" already has a caveat of type "${caveatType}".`
+    );
+  }
+};
+var InvalidCaveatError = class extends JsonRpcError {
+  constructor(receivedCaveat, origin, target) {
+    super(
+      errorCodes.rpc.invalidParams,
+      `Invalid caveat. Caveats must be plain objects.`,
+      { receivedCaveat }
+    );
+    this.data = { origin, target };
+  }
+};
+var InvalidCaveatTypeError = class extends Error {
+  constructor(caveat, origin, target) {
+    super(`Caveat types must be strings. Received: "${typeof caveat.type}"`);
+    this.data = { caveat, origin, target };
+  }
+};
+var CaveatMissingValueError = class extends Error {
+  constructor(caveat, origin, target) {
+    super(`Caveat is missing "value" field.`);
+    this.data = { caveat, origin, target };
+  }
+};
+var CaveatInvalidJsonError = class extends Error {
+  constructor(caveat, origin, target) {
+    super(`Caveat "value" is invalid JSON.`);
+    this.data = { caveat, origin, target };
+  }
+};
+var InvalidCaveatFieldsError = class extends Error {
+  constructor(caveat, origin, target) {
+    super(
+      `Caveat has unexpected number of fields: "${Object.keys(caveat).length}"`
+    );
+    this.data = { caveat, origin, target };
+  }
+};
+var ForbiddenCaveatError = class extends Error {
+  constructor(caveatType, origin, targetName) {
+    super(
+      `Permissions for target "${targetName}" may not have caveats of type "${caveatType}".`
+    );
+    this.data = { caveatType, origin, target: targetName };
+  }
+};
+var DuplicateCaveatError = class extends Error {
+  constructor(caveatType, origin, targetName) {
+    super(
+      `Permissions for target "${targetName}" contains multiple caveats of type "${caveatType}".`
+    );
+    this.data = { caveatType, origin, target: targetName };
+  }
+};
+var CaveatMergeTypeMismatchError = class extends Error {
+  constructor(leftCaveatType, rightCaveatType) {
+    super(
+      `Cannot merge caveats of different types: "${leftCaveatType}" and "${rightCaveatType}".`
+    );
+    this.data = { leftCaveatType, rightCaveatType };
+  }
+};
+var CaveatSpecificationMismatchError = class extends Error {
+  constructor(caveatSpec, permissionType) {
+    super(
+      `Caveat specification uses a mismatched type. Expected caveats for ${permissionType}`
+    );
+    this.data = { caveatSpec, permissionType };
+  }
+};
+var PermissionsRequestNotFoundError = class extends Error {
+  constructor(id) {
+    super(`Permissions request with id "${id}" not found.`);
+  }
+};
+
+export {
+  unauthorized,
+  methodNotFound,
+  invalidParams,
+  userRejectedRequest,
+  internalError,
+  InvalidSubjectIdentifierError,
+  UnrecognizedSubjectError,
+  CaveatMergerDoesNotExistError,
+  InvalidMergedPermissionsError,
+  InvalidApprovedPermissionError,
+  PermissionDoesNotExistError,
+  EndowmentPermissionDoesNotExistError,
+  UnrecognizedCaveatTypeError,
+  InvalidCaveatsPropertyError,
+  CaveatDoesNotExistError,
+  CaveatAlreadyExistsError,
+  InvalidCaveatError,
+  InvalidCaveatTypeError,
+  CaveatMissingValueError,
+  CaveatInvalidJsonError,
+  InvalidCaveatFieldsError,
+  ForbiddenCaveatError,
+  DuplicateCaveatError,
+  CaveatMergeTypeMismatchError,
+  CaveatSpecificationMismatchError,
+  PermissionsRequestNotFoundError
+};
+//# sourceMappingURL=chunk-I4OI6AQF.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-I4OI6AQF.mjs.map b/dist/chunk-I4OI6AQF.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..d3f318e5305eae74f8e16ee3c592e33bd365cf5e
--- /dev/null
+++ b/dist/chunk-I4OI6AQF.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/errors.ts"],"sourcesContent":["import type { DataWithOptionalCause } from '@metamask/rpc-errors';\nimport {\n  errorCodes,\n  providerErrors,\n  rpcErrors,\n  JsonRpcError,\n} from '@metamask/rpc-errors';\n\nimport type { PermissionType } from './Permission';\nimport type { PermissionsDiff } from './PermissionController';\n\ntype UnauthorizedArg = {\n  data?: Record<string, unknown>;\n  message?: string;\n};\n\n/**\n * Utility function for building an \"unauthorized\" error.\n *\n * @param opts - Optional arguments that add extra context\n * @returns The built error\n */\nexport function unauthorized(opts: UnauthorizedArg) {\n  return providerErrors.unauthorized({\n    message:\n      'Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions',\n    data: opts.data,\n  });\n}\n\n/**\n * Utility function for building a \"method not found\" error.\n *\n * @param method - The method in question.\n * @param data - Optional data for context.\n * @returns The built error\n */\nexport function methodNotFound(method: string, data?: DataWithOptionalCause) {\n  const message = `The method \"${method}\" does not exist / is not available.`;\n\n  const opts: Parameters<typeof rpcErrors.methodNotFound>[0] = { message };\n  if (data !== undefined) {\n    opts.data = data;\n  }\n  return rpcErrors.methodNotFound(opts);\n}\n\ntype InvalidParamsArg = {\n  message?: string;\n  data?: DataWithOptionalCause;\n};\n\n/**\n * Utility function for building an \"invalid params\" error.\n *\n * @param opts - Optional arguments that add extra context\n * @returns The built error\n */\nexport function invalidParams(opts: InvalidParamsArg) {\n  return rpcErrors.invalidParams({\n    data: opts.data,\n    message: opts.message,\n  });\n}\n\n/**\n * Utility function for building an \"user rejected request\" error.\n *\n * @param data - Optional data to add extra context\n * @returns The built error\n */\nexport function userRejectedRequest<Data extends Record<string, unknown>>(\n  data?: Data,\n): JsonRpcError<Data> {\n  return providerErrors.userRejectedRequest({ data });\n}\n\n/**\n * Utility function for building an internal error.\n *\n * @param message - The error message\n * @param data - Optional data to add extra context\n * @returns The built error\n */\nexport function internalError<Data extends Record<string, unknown>>(\n  message: string,\n  data?: Data,\n): JsonRpcError<Data> {\n  return rpcErrors.internal({ message, data });\n}\n\nexport class InvalidSubjectIdentifierError extends Error {\n  constructor(origin: unknown) {\n    super(\n      `Invalid subject identifier: \"${\n        typeof origin === 'string' ? origin : typeof origin\n      }\"`,\n    );\n  }\n}\n\nexport class UnrecognizedSubjectError extends Error {\n  constructor(origin: string) {\n    super(`Unrecognized subject: \"${origin}\" has no permissions.`);\n  }\n}\n\nexport class CaveatMergerDoesNotExistError extends Error {\n  constructor(caveatType: string) {\n    super(`Caveat merger does not exist for type: \"${caveatType}\"`);\n  }\n}\n\nexport class InvalidMergedPermissionsError extends Error {\n  public cause: Error;\n\n  public data: {\n    diff: PermissionsDiff;\n  };\n\n  constructor(origin: string, cause: Error, diff: PermissionsDiff) {\n    super(\n      `Invalid merged permissions for subject \"${origin}\":\\n${cause.message}`,\n    );\n    this.cause = cause;\n    this.data = { diff };\n  }\n}\n\nexport class InvalidApprovedPermissionError extends Error {\n  public data: {\n    origin: string;\n    target: string;\n    approvedPermission: Record<string, unknown>;\n  };\n\n  constructor(\n    origin: string,\n    target: string,\n    approvedPermission: Record<string, unknown>,\n  ) {\n    super(\n      `Invalid approved permission for origin \"${origin}\" and target \"${target}\".`,\n    );\n    this.data = { origin, target, approvedPermission };\n  }\n}\nexport class PermissionDoesNotExistError extends Error {\n  constructor(origin: string, target: string) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n  }\n}\n\nexport class EndowmentPermissionDoesNotExistError extends Error {\n  public data?: { origin: string };\n\n  constructor(target: string, origin?: string) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n    if (origin) {\n      this.data = { origin };\n    }\n  }\n}\n\nexport class UnrecognizedCaveatTypeError extends Error {\n  public data: {\n    caveatType: string;\n    origin?: string;\n    target?: string;\n  };\n\n  constructor(caveatType: string);\n\n  constructor(caveatType: string, origin: string, target: string);\n\n  constructor(caveatType: string, origin?: string, target?: string) {\n    super(`Unrecognized caveat type: \"${caveatType}\"`);\n    this.data = { caveatType };\n    if (origin !== undefined) {\n      this.data.origin = origin;\n    }\n\n    if (target !== undefined) {\n      this.data.target = target;\n    }\n  }\n}\n\nexport class InvalidCaveatsPropertyError extends Error {\n  public data: { origin: string; target: string; caveatsProperty: unknown };\n\n  constructor(origin: string, target: string, caveatsProperty: unknown) {\n    super(\n      `The \"caveats\" property of permission for \"${target}\" of subject \"${origin}\" is invalid. It must be a non-empty array if specified.`,\n    );\n    this.data = { origin, target, caveatsProperty };\n  }\n}\n\nexport class CaveatDoesNotExistError extends Error {\n  constructor(origin: string, target: string, caveatType: string) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" has no caveat of type \"${caveatType}\".`,\n    );\n  }\n}\n\nexport class CaveatAlreadyExistsError extends Error {\n  constructor(origin: string, target: string, caveatType: string) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" already has a caveat of type \"${caveatType}\".`,\n    );\n  }\n}\n\nexport class InvalidCaveatError extends JsonRpcError<\n  DataWithOptionalCause | undefined\n> {\n  public override data: { origin: string; target: string };\n\n  constructor(receivedCaveat: unknown, origin: string, target: string) {\n    super(\n      errorCodes.rpc.invalidParams,\n      `Invalid caveat. Caveats must be plain objects.`,\n      { receivedCaveat },\n    );\n    this.data = { origin, target };\n  }\n}\n\nexport class InvalidCaveatTypeError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat types must be strings. Received: \"${typeof caveat.type}\"`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class CaveatMissingValueError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat is missing \"value\" field.`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class CaveatInvalidJsonError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat \"value\" is invalid JSON.`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class InvalidCaveatFieldsError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(\n      `Caveat has unexpected number of fields: \"${Object.keys(caveat).length}\"`,\n    );\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class ForbiddenCaveatError extends Error {\n  public data: {\n    caveatType: string;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveatType: string, origin: string, targetName: string) {\n    super(\n      `Permissions for target \"${targetName}\" may not have caveats of type \"${caveatType}\".`,\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n}\n\nexport class DuplicateCaveatError extends Error {\n  public data: {\n    caveatType: string;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveatType: string, origin: string, targetName: string) {\n    super(\n      `Permissions for target \"${targetName}\" contains multiple caveats of type \"${caveatType}\".`,\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n}\n\nexport class CaveatMergeTypeMismatchError extends Error {\n  public data: {\n    leftCaveatType: string;\n    rightCaveatType: string;\n  };\n\n  constructor(leftCaveatType: string, rightCaveatType: string) {\n    super(\n      `Cannot merge caveats of different types: \"${leftCaveatType}\" and \"${rightCaveatType}\".`,\n    );\n    this.data = { leftCaveatType, rightCaveatType };\n  }\n}\n\nexport class CaveatSpecificationMismatchError extends Error {\n  public data: {\n    caveatSpec: Record<string, unknown>;\n    permissionType: PermissionType;\n  };\n\n  constructor(\n    caveatSpec: Record<string, unknown>,\n    permissionType: PermissionType,\n  ) {\n    super(\n      `Caveat specification uses a mismatched type. Expected caveats for ${permissionType}`,\n    );\n    this.data = { caveatSpec, permissionType };\n  }\n}\n\nexport class PermissionsRequestNotFoundError extends Error {\n  constructor(id: string) {\n    super(`Permissions request with id \"${id}\" not found.`);\n  }\n}\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-L5ZQETZ4.js b/dist/chunk-L5ZQETZ4.js
new file mode 100644
index 0000000000000000000000000000000000000000..dbc4633e2e84ea576f26884c0869a235becb873e
--- /dev/null
+++ b/dist/chunk-L5ZQETZ4.js
@@ -0,0 +1,51 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+var _chunkSEPTGKNBjs = require('./chunk-SEPTGKNB.js');
+
+// src/Caveat.ts
+var _utils = require('@metamask/utils');
+function makeCaveatMerger(mergeValues) {
+  return (leftCaveat, rightCaveat) => {
+    if (leftCaveat.type !== rightCaveat.type) {
+      throw new Error(
+        `Cannot merge caveats of different types: "${leftCaveat.type}" and "${rightCaveat.type}".`
+      );
+    }
+    return {
+      type: leftCaveat.type,
+      value: mergeValues(leftCaveat.value, rightCaveat.value)
+    };
+  };
+}
+function isRestrictedMethodCaveatSpecification(specification) {
+  return _utils.hasProperty.call(void 0, specification, "decorator");
+}
+function decorateWithCaveats(methodImplementation, permission, caveatSpecifications) {
+  const { caveats } = permission;
+  if (!caveats) {
+    return methodImplementation;
+  }
+  let decorated = async (args) => methodImplementation(args);
+  for (const caveat of caveats) {
+    const specification = caveatSpecifications[caveat.type];
+    if (!specification) {
+      throw new (0, _chunkSEPTGKNBjs.UnrecognizedCaveatTypeError)(caveat.type);
+    }
+    if (!isRestrictedMethodCaveatSpecification(specification)) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatSpecificationMismatchError)(
+        specification,
+        "RestrictedMethod" /* RestrictedMethod */
+      );
+    }
+    decorated = specification.decorator(decorated, caveat);
+  }
+  return decorated;
+}
+
+
+
+
+
+exports.makeCaveatMerger = makeCaveatMerger; exports.isRestrictedMethodCaveatSpecification = isRestrictedMethodCaveatSpecification; exports.decorateWithCaveats = decorateWithCaveats;
+//# sourceMappingURL=chunk-L5ZQETZ4.js.map
\ No newline at end of file
diff --git a/dist/chunk-L5ZQETZ4.js.map b/dist/chunk-L5ZQETZ4.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..89b1fc9925236b80e1b406a8ad7caccda00923b1
--- /dev/null
+++ b/dist/chunk-L5ZQETZ4.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/Caveat.ts"],"names":[],"mappings":";;;;;;AACA,SAAS,mBAAmB;AAgJrB,SAAS,iBACd,aAC4B;AAC5B,SAAO,CAAC,YAA0B,gBAA8B;AAG9D,QAAI,WAAW,SAAS,YAAY,MAAM;AACxC,YAAM,IAAI;AAAA,QACR,6CAA6C,WAAW,IAAI,UAAU,YAAY,IAAI;AAAA,MACxF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,MAAM,WAAW;AAAA,MACjB,OAAO,YAAY,WAAW,OAAO,YAAY,KAAK;AAAA,IACxD;AAAA,EACF;AACF;AAgKO,SAAS,sCACd,eACgE;AAChE,SAAO,YAAY,eAAe,WAAW;AAC/C;AAaO,SAAS,oBAGd,sBACA,YACA,sBACoD;AACpD,QAAM,EAAE,QAAQ,IAAI;AACpB,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACT;AAEA,MAAI,YAAY,OACd,SACG,qBAAqB,IAAI;AAE9B,aAAW,UAAU,SAAS;AAC5B,UAAM,gBACJ,qBAAqB,OAAO,IAAoC;AAClE,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,4BAA4B,OAAO,IAAI;AAAA,IACnD;AAEA,QAAI,CAAC,sCAAsC,aAAa,GAAG;AACzD,YAAM,IAAI;AAAA,QACR;AAAA;AAAA,MAEF;AAAA,IACF;AACA,gBAAY,cAAc,UAAU,WAAW,MAAM;AAAA,EACvD;AAEA,SAAO;AACT","sourcesContent":["import type { Json } from '@metamask/utils';\nimport { hasProperty } from '@metamask/utils';\n\nimport {\n  CaveatSpecificationMismatchError,\n  UnrecognizedCaveatTypeError,\n} from './errors';\nimport type {\n  AsyncRestrictedMethod,\n  RestrictedMethod,\n  PermissionConstraint,\n  RestrictedMethodParameters,\n} from './Permission';\nimport { PermissionType } from './Permission';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { PermissionController } from './PermissionController';\n\nexport type CaveatConstraint = {\n  /**\n   * The type of the caveat. The type is presumed to be meaningful in the\n   * context of the capability it is associated with.\n   *\n   * In MetaMask, every permission can only have one caveat of each type.\n   */\n  readonly type: string;\n\n  /**\n   * Any additional data necessary to enforce the caveat.\n   */\n  readonly value: Json;\n};\n\n/**\n * A `ZCAP-LD`-like caveat object. A caveat is associated with a particular\n * permission, and stored in its `caveats` array. Conceptually, a caveat is\n * an arbitrary attenuation of the authority granted by its associated\n * permission. It is the responsibility of the host to interpret and apply\n * the restriction represented by a caveat.\n *\n * @template Type - The type of the caveat.\n * @template Value - The value associated with the caveat.\n */\nexport type Caveat<Type extends string, Value extends Json> = {\n  /**\n   * The type of the caveat. The type is presumed to be meaningful in the\n   * context of the capability it is associated with.\n   *\n   * In MetaMask, every permission can only have one caveat of each type.\n   */\n  readonly type: Type;\n\n  /**\n   * Any additional data necessary to enforce the caveat.\n   */\n  readonly value: Value;\n};\n\n// Next, we define types used for specifying caveats at the consumer layer,\n// and a function for applying caveats to a restricted method request. This is\n// Accomplished by decorating the restricted method implementation with the\n// the corresponding caveat functions.\n\n/**\n * A function for applying caveats to a restricted method request.\n *\n * @template ParentCaveat - The caveat type associated with this decorator.\n * @param decorated - The restricted method implementation to be decorated.\n * The method may have already been decorated with other caveats.\n * @param caveat - The caveat object.\n * @returns The decorated restricted method implementation.\n */\nexport type CaveatDecorator<ParentCaveat extends CaveatConstraint> = (\n  decorated: AsyncRestrictedMethod<RestrictedMethodParameters, Json>,\n  caveat: ParentCaveat,\n) => AsyncRestrictedMethod<RestrictedMethodParameters, Json>;\n\n/**\n * Extracts a caveat value type from a caveat decorator.\n *\n * @template Decorator - The {@link CaveatDecorator} to extract a caveat value\n * type from.\n */\ntype ExtractCaveatValueFromDecorator<\n  Decorator extends CaveatDecorator<CaveatConstraint>,\n> = Decorator extends (\n  decorated: AsyncRestrictedMethod<RestrictedMethodParameters, Json>,\n  caveat: infer ParentCaveat,\n) => AsyncRestrictedMethod<RestrictedMethodParameters, Json>\n  ? ParentCaveat extends CaveatConstraint\n    ? ParentCaveat['value']\n    : never\n  : never;\n\n/**\n * A function for validating caveats of a particular type.\n *\n * @see `validator` in {@link CaveatSpecificationBase} for more details.\n * @template ParentCaveat - The caveat type associated with this validator.\n * @param caveat - The caveat object to validate.\n * @param origin - The origin associated with the parent permission.\n * @param target - The target of the parent permission.\n */\nexport type CaveatValidator<ParentCaveat extends CaveatConstraint> = (\n  caveat: { type: ParentCaveat['type']; value: unknown },\n  origin?: string,\n  target?: string,\n) => void;\n\n/**\n * A function that merges two caveats of the same type. The values\n * must be merged in the fashion of a right-biased union.\n *\n * @see `ARCHITECTURE.md` for more details.\n * @template ParentCaveat - The caveat type associated with this merger.\n * @param leftCaveat - The left-hand caveat.\n * @param rightCaveat - The right-hand caveat.\n * @returns The merged caveat.\n */\nexport type CaveatMerger<ParentCaveat extends CaveatConstraint> = (\n  leftCaveat: ParentCaveat,\n  rightCaveat: ParentCaveat,\n) => ParentCaveat;\n\n/**\n * A function that merges two caveat values of the same type. The values\n * must be merged in the fashion of a right-biased union.\n *\n * @see `ARCHITECTURE.md` for more details.\n * @template Value - The type of the values to merge.\n * @param leftValue - The left-hand value.\n * @param rightValue - The right-hand value.\n * @returns The merged value.\n */\nexport type CaveatValueMerger<Value extends Json> = (\n  leftValue: Value,\n  rightValue: Value,\n) => Value;\n\n/**\n * Makes a {@link CaveatMerger} function for a specific caveat type.\n *\n * @see `ARCHITECTURE.md` for more details.\n * @param mergeValues - The function to merge the values of two caveats.\n * @returns The {@link CaveatMerger} function.\n */\nexport function makeCaveatMerger<ParentCaveat extends CaveatConstraint>(\n  mergeValues: CaveatValueMerger<ParentCaveat['value']>,\n): CaveatMerger<ParentCaveat> {\n  return (leftCaveat: ParentCaveat, rightCaveat: ParentCaveat) => {\n    // It should be impossible for this to happen via the permission controller's\n    // API, but it's a small price to pay for sound sleep.\n    if (leftCaveat.type !== rightCaveat.type) {\n      throw new Error(\n        `Cannot merge caveats of different types: \"${leftCaveat.type}\" and \"${rightCaveat.type}\".`,\n      );\n    }\n\n    return {\n      type: leftCaveat.type,\n      value: mergeValues(leftCaveat.value, rightCaveat.value),\n    } as ParentCaveat;\n  };\n}\n\nexport type CaveatSpecificationBase = {\n  /**\n   * The string type of the caveat.\n   */\n  type: string;\n\n  /**\n   * The validator function used to validate caveats of the associated type\n   * whenever they are instantiated. Caveat are instantiated whenever they are\n   * created or mutated.\n   *\n   * The validator should throw an appropriate JSON-RPC error if validation fails.\n   *\n   * If no validator is specified, no validation of caveat values will be\n   * performed. Although caveats can also be validated by permission validators,\n   * validating caveat values separately is strongly recommended.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validator?: CaveatValidator<any>;\n\n  /**\n   * The merger function used to merge caveats of the associated type during\n   * incremental permission requests. The values must be merged in the fashion\n   * of a right-biased union.\n   *\n   * @see `ARCHITECTURE.md` for more details.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  merger?: CaveatMerger<any>;\n};\n\nexport type RestrictedMethodCaveatSpecificationConstraint =\n  CaveatSpecificationBase & {\n    /**\n     * The decorator function used to apply the caveat to restricted method\n     * requests.\n     */\n    decorator: CaveatDecorator<CaveatConstraint>;\n  };\n\nexport type EndowmentCaveatSpecificationConstraint = CaveatSpecificationBase;\n\n/**\n * The constraint for caveat specification objects. Every {@link Caveat}\n * supported by a {@link PermissionController} must have an associated\n * specification, which is the source of truth for all caveat-related types.\n * In addition, a caveat specification may include a decorator function used\n * to apply the caveat's attenuation to a restricted method. It may also include\n * a validator function specified by the consumer.\n *\n * See the README for more details.\n */\nexport type CaveatSpecificationConstraint =\n  | RestrictedMethodCaveatSpecificationConstraint\n  | EndowmentCaveatSpecificationConstraint;\n\n/**\n * Options for {@link CaveatSpecificationBuilder} functions.\n */\ntype CaveatSpecificationBuilderOptions<\n  DecoratorHooks extends Record<string, unknown>,\n  ValidatorHooks extends Record<string, unknown>,\n> = {\n  type?: string;\n  decoratorHooks?: DecoratorHooks;\n  validatorHooks?: ValidatorHooks;\n};\n\n/**\n * A function that builds caveat specifications. Modules that specify caveats\n * for external consumption should make this their primary / default export so\n * that host applications can use them to generate concrete specifications\n * tailored to their requirements.\n */\nexport type CaveatSpecificationBuilder<\n  Options extends CaveatSpecificationBuilderOptions<\n    Record<string, unknown>,\n    Record<string, unknown>\n  >,\n  Specification extends CaveatSpecificationConstraint,\n> = (options: Options) => Specification;\n\n/**\n * A caveat specification export object, containing the\n * {@link CaveatSpecificationBuilder} function and \"hook name\" objects.\n */\nexport type CaveatSpecificationBuilderExportConstraint = {\n  specificationBuilder: CaveatSpecificationBuilder<\n    CaveatSpecificationBuilderOptions<\n      Record<string, unknown>,\n      Record<string, unknown>\n    >,\n    CaveatSpecificationConstraint\n  >;\n  decoratorHookNames?: Record<string, true>;\n  validatorHookNames?: Record<string, true>;\n};\n\n/**\n * The specifications for all caveats supported by a particular\n * {@link PermissionController}.\n *\n * @template Specifications - The union of all {@link CaveatSpecificationConstraint} types.\n */\nexport type CaveatSpecificationMap<\n  CaveatSpecification extends CaveatSpecificationConstraint,\n> = Record<CaveatSpecification['type'], CaveatSpecification>;\n\n/**\n * Extracts the union of all caveat types specified by the given\n * {@link CaveatSpecificationConstraint} type.\n *\n * @template CaveatSpecification - The {@link CaveatSpecificationConstraint} to extract a\n * caveat type union from.\n */\nexport type ExtractCaveats<\n  CaveatSpecification extends CaveatSpecificationConstraint,\n> = CaveatSpecification extends RestrictedMethodCaveatSpecificationConstraint\n  ? Caveat<\n      CaveatSpecification['type'],\n      ExtractCaveatValueFromDecorator<\n        RestrictedMethodCaveatSpecificationConstraint['decorator']\n      >\n    >\n  : Caveat<CaveatSpecification['type'], Json>;\n\n/**\n * Extracts the type of a specific {@link Caveat} from a union of caveat\n * specifications.\n *\n * @template CaveatSpecifications - The union of all caveat specifications.\n * @template CaveatType - The type of the caveat to extract.\n */\nexport type ExtractCaveat<\n  CaveatSpecifications extends CaveatSpecificationConstraint,\n  CaveatType extends string,\n> = Extract<ExtractCaveats<CaveatSpecifications>, { type: CaveatType }>;\n\n/**\n * Extracts the value type of a specific {@link Caveat} from a union of caveat\n * specifications.\n *\n * @template CaveatSpecifications - The union of all caveat specifications.\n * @template CaveatType - The type of the caveat whose value to extract.\n */\nexport type ExtractCaveatValue<\n  CaveatSpecifications extends CaveatSpecificationConstraint,\n  CaveatType extends string,\n> = ExtractCaveat<CaveatSpecifications, CaveatType>['value'];\n\n/**\n * Determines whether a caveat specification is a restricted method caveat specification.\n *\n * @param specification - The caveat specification.\n * @returns True if the caveat specification is a restricted method caveat specification, otherwise false.\n */\nexport function isRestrictedMethodCaveatSpecification(\n  specification: CaveatSpecificationConstraint,\n): specification is RestrictedMethodCaveatSpecificationConstraint {\n  return hasProperty(specification, 'decorator');\n}\n\n/**\n * Decorate a restricted method implementation with its caveats.\n *\n * Note that all caveat functions (i.e. the argument and return value of the\n * decorator) must be awaited.\n *\n * @param methodImplementation - The restricted method implementation\n * @param permission - The origin's potential permission\n * @param caveatSpecifications - All caveat implementations\n * @returns The decorated method implementation\n */\nexport function decorateWithCaveats<\n  CaveatSpecifications extends CaveatSpecificationConstraint,\n>(\n  methodImplementation: RestrictedMethod<RestrictedMethodParameters, Json>,\n  permission: Readonly<PermissionConstraint>, // bound to the requesting origin\n  caveatSpecifications: CaveatSpecificationMap<CaveatSpecifications>, // all caveat implementations\n): RestrictedMethod<RestrictedMethodParameters, Json> {\n  const { caveats } = permission;\n  if (!caveats) {\n    return methodImplementation;\n  }\n\n  let decorated = async (\n    args: Parameters<RestrictedMethod<RestrictedMethodParameters, Json>>[0],\n  ) => methodImplementation(args);\n\n  for (const caveat of caveats) {\n    const specification =\n      caveatSpecifications[caveat.type as CaveatSpecifications['type']];\n    if (!specification) {\n      throw new UnrecognizedCaveatTypeError(caveat.type);\n    }\n\n    if (!isRestrictedMethodCaveatSpecification(specification)) {\n      throw new CaveatSpecificationMismatchError(\n        specification,\n        PermissionType.RestrictedMethod,\n      );\n    }\n    decorated = specification.decorator(decorated, caveat);\n  }\n\n  return decorated;\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-LSJJ7IYC.js b/dist/chunk-LSJJ7IYC.js
new file mode 100644
index 0000000000000000000000000000000000000000..b9938133b15d86a51c76936b727a01fcaaa6b191
--- /dev/null
+++ b/dist/chunk-LSJJ7IYC.js
@@ -0,0 +1,1619 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+
+var _chunkL5ZQETZ4js = require('./chunk-L5ZQETZ4.js');
+
+
+
+
+
+var _chunkZH4MLSXXjs = require('./chunk-ZH4MLSXX.js');
+
+
+var _chunk2S4DNIENjs = require('./chunk-2S4DNIEN.js');
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+var _chunkSEPTGKNBjs = require('./chunk-SEPTGKNB.js');
+
+
+
+var _chunkZ2XKIXLSjs = require('./chunk-Z2XKIXLS.js');
+
+// src/PermissionController.ts
+var _basecontroller = require('@metamask/base-controller');
+
+
+
+
+var _controllerutils = require('@metamask/controller-utils');
+var _rpcerrors = require('@metamask/rpc-errors');
+var _utils = require('@metamask/utils');
+var _deepfreezestrict = require('deep-freeze-strict'); var _deepfreezestrict2 = _interopRequireDefault(_deepfreezestrict);
+var _immer = require('immer');
+var _nanoid = require('nanoid');
+var controllerName = "PermissionController";
+function getStateMetadata() {
+  return { subjects: { anonymous: true, persist: true } };
+}
+function getDefaultState() {
+  return { subjects: {} };
+}
+var CaveatMutatorOperation = /* @__PURE__ */ ((CaveatMutatorOperation2) => {
+  CaveatMutatorOperation2[CaveatMutatorOperation2["noop"] = 0] = "noop";
+  CaveatMutatorOperation2[CaveatMutatorOperation2["updateValue"] = 1] = "updateValue";
+  CaveatMutatorOperation2[CaveatMutatorOperation2["deleteCaveat"] = 2] = "deleteCaveat";
+  CaveatMutatorOperation2[CaveatMutatorOperation2["revokePermission"] = 3] = "revokePermission";
+  return CaveatMutatorOperation2;
+})(CaveatMutatorOperation || {});
+var _mergeIncrementalPermissions, mergeIncrementalPermissions_fn, _mergePermission, mergePermission_fn, _collectUniqueAndPairedCaveats, collectUniqueAndPairedCaveats_fn, _handleApprovedPermissions, handleApprovedPermissions_fn;
+var PermissionController = class extends _basecontroller.BaseController {
+  /**
+   * Constructs the PermissionController.
+   *
+   * @param options - Permission controller options.
+   * @param options.caveatSpecifications - The specifications of all caveats
+   * available to the controller. See {@link CaveatSpecificationMap} and the
+   * documentation for more details.
+   * @param options.permissionSpecifications - The specifications of all
+   * permissions available to the controller. See
+   * {@link PermissionSpecificationMap} and the README for more details.
+   * @param options.unrestrictedMethods - The callable names of all JSON-RPC
+   * methods ignored by the new controller.
+   * @param options.messenger - The controller messenger. See
+   * {@link BaseController} for more information.
+   * @param options.state - Existing state to hydrate the controller with at
+   * initialization.
+   */
+  constructor(options) {
+    const {
+      caveatSpecifications,
+      permissionSpecifications,
+      unrestrictedMethods,
+      messenger,
+      state = {}
+    } = options;
+    super({
+      name: controllerName,
+      metadata: getStateMetadata(),
+      messenger,
+      state: {
+        ...getDefaultState(),
+        ...state
+      }
+    });
+    /**
+     * Merges a set of incrementally requested permissions into the existing permissions of
+     * the requesting subject. The merge is a right-biased union, where the existing
+     * permissions are the left-hand side, and the incrementally requested permissions are
+     * the right-hand side.
+     *
+     * @param origin - The origin of the subject.
+     * @param incrementalRequestedPermissions - The requested permissions to merge.
+     * @returns The merged permissions and the resulting diff.
+     */
+    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _mergeIncrementalPermissions);
+    /**
+     * Performs a right-biased union between two permissions. The task of merging caveats
+     * with the same type between the two permissions is delegated to the corresponding
+     * caveat's merger implementation.
+     *
+     * Throws if the left-hand and right-hand permissions both have a caveat whose
+     * specification does not provide a caveat merger function.
+     *
+     * @param leftPermission - The left-hand permission to merge.
+     * @param rightPermission - The right-hand permission to merge.
+     * @returns The merged permission.
+     */
+    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _mergePermission);
+    /**
+     * Given two permission objects, computes two sets:
+     * - The set of caveats that are unique to either permission.
+     * - The set of caveat pairs that are common to both permissions.
+     *
+     * Assumes that the caveat arrays of both permissions do not contain duplicate
+     * caveats.
+     *
+     * @param leftPermission - The left-hand permission.
+     * @param rightPermission - The right-hand permission.
+     * @returns The sets of caveat pairs and unique caveats.
+     */
+    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _collectUniqueAndPairedCaveats);
+    /**
+     * Accepts a permissions request that has been approved by the user. This
+     * method should be called after the user has approved the request and the
+     * {@link ApprovalController} has resolved the user approval promise.
+     *
+     * @param options - Options bag.
+     * @param options.subject - The subject to grant permissions to.
+     * @param options.metadata - The metadata of the approved permissions request.
+     * @param options.preserveExistingPermissions - Whether to preserve the
+     * subject's existing permissions.
+     * @param options.approvedRequest - The approved permissions request to handle.
+     * @returns The granted permissions and request metadata.
+     */
+    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _handleApprovedPermissions);
+    this._unrestrictedMethods = new Set(unrestrictedMethods);
+    this._caveatSpecifications = _deepfreezestrict2.default.call(void 0, { ...caveatSpecifications });
+    this.validatePermissionSpecifications(
+      permissionSpecifications,
+      this._caveatSpecifications
+    );
+    this._permissionSpecifications = _deepfreezestrict2.default.call(void 0, {
+      ...permissionSpecifications
+    });
+    this.registerMessageHandlers();
+    this.createPermissionMiddleware = _chunk2S4DNIENjs.getPermissionMiddlewareFactory.call(void 0, {
+      executeRestrictedMethod: this._executeRestrictedMethod.bind(this),
+      getRestrictedMethod: this.getRestrictedMethod.bind(this),
+      isUnrestrictedMethod: this.unrestrictedMethods.has.bind(
+        this.unrestrictedMethods
+      )
+    });
+  }
+  /**
+   * The names of all JSON-RPC methods that will be ignored by the controller.
+   *
+   * @returns The names of all unrestricted JSON-RPC methods
+   */
+  get unrestrictedMethods() {
+    return this._unrestrictedMethods;
+  }
+  /**
+   * Gets a permission specification.
+   *
+   * @param targetName - The name of the permission specification to get.
+   * @returns The permission specification with the specified target name.
+   */
+  getPermissionSpecification(targetName) {
+    return this._permissionSpecifications[targetName];
+  }
+  /**
+   * Gets a caveat specification.
+   *
+   * @param caveatType - The type of the caveat specification to get.
+   * @returns The caveat specification with the specified type.
+   */
+  getCaveatSpecification(caveatType) {
+    return this._caveatSpecifications[caveatType];
+  }
+  /**
+   * Constructor helper for validating permission specifications.
+   *
+   * Throws an error if validation fails.
+   *
+   * @param permissionSpecifications - The permission specifications passed to
+   * this controller's constructor.
+   * @param caveatSpecifications - The caveat specifications passed to this
+   * controller.
+   */
+  validatePermissionSpecifications(permissionSpecifications, caveatSpecifications) {
+    Object.entries(
+      permissionSpecifications
+    ).forEach(
+      ([
+        targetName,
+        { permissionType, targetName: innerTargetName, allowedCaveats }
+      ]) => {
+        if (!permissionType || !_utils.hasProperty.call(void 0, _chunkZH4MLSXXjs.PermissionType, permissionType)) {
+          throw new Error(`Invalid permission type: "${permissionType}"`);
+        }
+        if (!targetName) {
+          throw new Error(`Invalid permission target name: "${targetName}"`);
+        }
+        if (targetName !== innerTargetName) {
+          throw new Error(
+            `Invalid permission specification: target name "${targetName}" must match specification.targetName value "${innerTargetName}".`
+          );
+        }
+        if (allowedCaveats) {
+          allowedCaveats.forEach((caveatType) => {
+            if (!_utils.hasProperty.call(void 0, caveatSpecifications, caveatType)) {
+              throw new (0, _chunkSEPTGKNBjs.UnrecognizedCaveatTypeError)(caveatType);
+            }
+            const specification = caveatSpecifications[caveatType];
+            const isRestrictedMethodCaveat = _chunkL5ZQETZ4js.isRestrictedMethodCaveatSpecification.call(void 0, specification);
+            if (permissionType === "RestrictedMethod" /* RestrictedMethod */ && !isRestrictedMethodCaveat || permissionType === "Endowment" /* Endowment */ && isRestrictedMethodCaveat) {
+              throw new (0, _chunkSEPTGKNBjs.CaveatSpecificationMismatchError)(
+                specification,
+                permissionType
+              );
+            }
+          });
+        }
+      }
+    );
+  }
+  /**
+   * Constructor helper for registering the controller's messaging system
+   * actions.
+   */
+  registerMessageHandlers() {
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:clearPermissions`,
+      () => this.clearState()
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:getEndowments`,
+      (origin, targetName, requestData) => this.getEndowments(origin, targetName, requestData)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:getSubjectNames`,
+      () => this.getSubjectNames()
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:getPermissions`,
+      (origin) => this.getPermissions(origin)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:hasPermission`,
+      (origin, targetName) => this.hasPermission(origin, targetName)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:hasPermissions`,
+      (origin) => this.hasPermissions(origin)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:grantPermissions`,
+      this.grantPermissions.bind(this)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:requestPermissions`,
+      (subject, permissions) => this.requestPermissions(subject, permissions)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:revokeAllPermissions`,
+      (origin) => this.revokeAllPermissions(origin)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:revokePermissionForAllSubjects`,
+      (target) => this.revokePermissionForAllSubjects(target)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:revokePermissions`,
+      this.revokePermissions.bind(this)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:updateCaveat`,
+      (origin, target, caveatType, caveatValue) => {
+        this.updateCaveat(
+          origin,
+          target,
+          caveatType,
+          caveatValue
+        );
+      }
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:updateCaveatIncremental`,
+      (origin, target, caveatType, addedCaveatValue) => {
+        this.updateCaveatIncremental(
+          origin,
+          target,
+          caveatType,
+          addedCaveatValue
+        );
+      }
+    );
+  }
+  /**
+   * Clears the state of the controller.
+   */
+  clearState() {
+    this.update((_draftState) => {
+      return {
+        ...getDefaultState()
+      };
+    });
+  }
+  /**
+   * Gets the permission specification corresponding to the given permission
+   * type and target name. Throws an error if the target name does not
+   * correspond to a permission, or if the specification is not of the
+   * given permission type.
+   *
+   * @template Type - The type of the permission specification to get.
+   * @param permissionType - The type of the permission specification to get.
+   * @param targetName - The name of the permission whose specification to get.
+   * @param requestingOrigin - The origin of the requesting subject, if any.
+   * Will be added to any thrown errors.
+   * @returns The specification object corresponding to the given type and
+   * target name.
+   */
+  getTypedPermissionSpecification(permissionType, targetName, requestingOrigin) {
+    const failureError = permissionType === "RestrictedMethod" /* RestrictedMethod */ ? _chunkSEPTGKNBjs.methodNotFound.call(void 0, 
+      targetName,
+      requestingOrigin ? { origin: requestingOrigin } : void 0
+    ) : new (0, _chunkSEPTGKNBjs.EndowmentPermissionDoesNotExistError)(
+      targetName,
+      requestingOrigin
+    );
+    if (!this.targetExists(targetName)) {
+      throw failureError;
+    }
+    const specification = this.getPermissionSpecification(targetName);
+    if (!_chunkZH4MLSXXjs.hasSpecificationType.call(void 0, specification, permissionType)) {
+      throw failureError;
+    }
+    return specification;
+  }
+  /**
+   * Gets the implementation of the specified restricted method.
+   *
+   * A JSON-RPC error is thrown if the method does not exist.
+   *
+   * @see {@link PermissionController.executeRestrictedMethod} and
+   * {@link PermissionController.createPermissionMiddleware} for internal usage.
+   * @param method - The name of the restricted method.
+   * @param origin - The origin associated with the request for the restricted
+   * method, if any.
+   * @returns The restricted method implementation.
+   */
+  getRestrictedMethod(method, origin) {
+    return this.getTypedPermissionSpecification(
+      "RestrictedMethod" /* RestrictedMethod */,
+      method,
+      origin
+    ).methodImplementation;
+  }
+  /**
+   * Gets a list of all origins of subjects.
+   *
+   * @returns The origins (i.e. IDs) of all subjects.
+   */
+  getSubjectNames() {
+    return Object.keys(this.state.subjects);
+  }
+  /**
+   * Gets the permission for the specified target of the subject corresponding
+   * to the specified origin.
+   *
+   * @param origin - The origin of the subject.
+   * @param targetName - The method name as invoked by a third party (i.e., not
+   * a method key).
+   * @returns The permission if it exists, or undefined otherwise.
+   */
+  getPermission(origin, targetName) {
+    return this.state.subjects[origin]?.permissions[targetName];
+  }
+  /**
+   * Gets all permissions for the specified subject, if any.
+   *
+   * @param origin - The origin of the subject.
+   * @returns The permissions of the subject, if any.
+   */
+  getPermissions(origin) {
+    return this.state.subjects[origin]?.permissions;
+  }
+  /**
+   * Checks whether the subject with the specified origin has the specified
+   * permission.
+   *
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @returns Whether the subject has the permission.
+   */
+  hasPermission(origin, target) {
+    return Boolean(this.getPermission(origin, target));
+  }
+  /**
+   * Checks whether the subject with the specified origin has any permissions.
+   * Use this if you want to know if a subject "exists".
+   *
+   * @param origin - The origin of the subject to check.
+   * @returns Whether the subject has any permissions.
+   */
+  hasPermissions(origin) {
+    return Boolean(this.state.subjects[origin]);
+  }
+  /**
+   * Revokes all permissions from the specified origin.
+   *
+   * Throws an error of the origin has no permissions.
+   *
+   * @param origin - The origin whose permissions to revoke.
+   */
+  revokeAllPermissions(origin) {
+    this.update((draftState) => {
+      if (!draftState.subjects[origin]) {
+        throw new (0, _chunkSEPTGKNBjs.UnrecognizedSubjectError)(origin);
+      }
+      delete draftState.subjects[origin];
+    });
+  }
+  /**
+   * Revokes the specified permission from the subject with the specified
+   * origin.
+   *
+   * Throws an error if the subject or the permission does not exist.
+   *
+   * @param origin - The origin of the subject whose permission to revoke.
+   * @param target - The target name of the permission to revoke.
+   */
+  revokePermission(origin, target) {
+    this.revokePermissions({ [origin]: [target] });
+  }
+  /**
+   * Revokes the specified permissions from the specified subjects.
+   *
+   * Throws an error if any of the subjects or permissions do not exist.
+   *
+   * @param subjectsAndPermissions - An object mapping subject origins
+   * to arrays of permission target names to revoke.
+   */
+  revokePermissions(subjectsAndPermissions) {
+    this.update((draftState) => {
+      Object.keys(subjectsAndPermissions).forEach((origin) => {
+        if (!_utils.hasProperty.call(void 0, draftState.subjects, origin)) {
+          throw new (0, _chunkSEPTGKNBjs.UnrecognizedSubjectError)(origin);
+        }
+        subjectsAndPermissions[origin].forEach((target) => {
+          const { permissions } = draftState.subjects[origin];
+          if (!_utils.hasProperty.call(void 0, permissions, target)) {
+            throw new (0, _chunkSEPTGKNBjs.PermissionDoesNotExistError)(origin, target);
+          }
+          this.deletePermission(draftState.subjects, origin, target);
+        });
+      });
+    });
+  }
+  /**
+   * Revokes all permissions corresponding to the specified target for all subjects.
+   * Does nothing if no subjects or no such permission exists.
+   *
+   * @param target - The name of the target to revoke all permissions for.
+   */
+  revokePermissionForAllSubjects(target) {
+    if (this.getSubjectNames().length === 0) {
+      return;
+    }
+    this.update((draftState) => {
+      Object.entries(draftState.subjects).forEach(([origin, subject]) => {
+        const { permissions } = subject;
+        if (_utils.hasProperty.call(void 0, permissions, target)) {
+          this.deletePermission(draftState.subjects, origin, target);
+        }
+      });
+    });
+  }
+  /**
+   * Deletes the permission identified by the given origin and target. If the
+   * permission is the single remaining permission of its subject, the subject
+   * is also deleted.
+   *
+   * @param subjects - The draft permission controller subjects.
+   * @param origin - The origin of the subject associated with the permission
+   * to delete.
+   * @param target - The target name of the permission to delete.
+   */
+  deletePermission(subjects, origin, target) {
+    const { permissions } = subjects[origin];
+    if (Object.keys(permissions).length > 1) {
+      delete permissions[target];
+    } else {
+      delete subjects[origin];
+    }
+  }
+  /**
+   * Checks whether the permission of the subject corresponding to the given
+   * origin has a caveat of the specified type.
+   *
+   * Throws an error if the subject does not have a permission with the
+   * specified target name.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to check for.
+   * @returns Whether the permission has the specified caveat.
+   */
+  hasCaveat(origin, target, caveatType) {
+    return Boolean(this.getCaveat(origin, target, caveatType));
+  }
+  /**
+   * Gets the caveat of the specified type, if any, for the permission of
+   * the subject corresponding to the given origin.
+   *
+   * Throws an error if the subject does not have a permission with the
+   * specified target name.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to get.
+   * @returns The caveat, or `undefined` if no such caveat exists.
+   */
+  getCaveat(origin, target, caveatType) {
+    const permission = this.getPermission(origin, target);
+    if (!permission) {
+      throw new (0, _chunkSEPTGKNBjs.PermissionDoesNotExistError)(origin, target);
+    }
+    return _chunkZH4MLSXXjs.findCaveat.call(void 0, permission, caveatType);
+  }
+  /**
+   * Adds a caveat of the specified type, with the specified caveat value, to
+   * the permission corresponding to the given subject origin and permission
+   * target.
+   *
+   * For modifying existing caveats, use
+   * {@link PermissionController.updateCaveat}.
+   *
+   * Throws an error if no such permission exists, or if the caveat already
+   * exists.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to add.
+   * @param caveatValue - The value of the caveat to add.
+   */
+  addCaveat(origin, target, caveatType, caveatValue) {
+    if (this.hasCaveat(origin, target, caveatType)) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatAlreadyExistsError)(origin, target, caveatType);
+    }
+    this.setCaveat(origin, target, caveatType, caveatValue);
+  }
+  /**
+   * Updates the value of the caveat of the specified type belonging to the
+   * permission corresponding to the given subject origin and permission
+   * target.
+   *
+   * For adding new caveats, use
+   * {@link PermissionController.addCaveat}.
+   *
+   * Throws an error if no such permission or caveat exists.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to update.
+   * @param caveatValue - The new value of the caveat.
+   */
+  updateCaveat(origin, target, caveatType, caveatValue) {
+    if (!this.hasCaveat(origin, target, caveatType)) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatDoesNotExistError)(origin, target, caveatType);
+    }
+    this.setCaveat(origin, target, caveatType, caveatValue);
+  }
+  /**
+   * TODO:cm
+   * Updates the value of the caveat of the specified type belonging to the
+   * permission corresponding to the given subject origin and permission
+   * target.
+   *
+   * For adding new caveats, use
+   * {@link PermissionController.addCaveat}.
+   *
+   * Throws an error if no such permission or caveat exists.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to update.
+   * @param addedCaveatValue - The value to merge with the existing caveat's value.
+   */
+  updateCaveatIncremental(origin, target, caveatType, addedCaveatValue) {
+    const existingCaveat = this.getCaveat(origin, target, caveatType);
+    if (!existingCaveat) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatDoesNotExistError)(origin, target, caveatType);
+    }
+    const { merger } = this.getCaveatSpecification(caveatType);
+    if (!merger) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatMergerDoesNotExistError)(caveatType);
+    }
+    this.setCaveat(
+      origin,
+      target,
+      caveatType,
+      merger(existingCaveat.value, addedCaveatValue)
+    );
+  }
+  /**
+   * Sets the specified caveat on the specified permission. Overwrites existing
+   * caveats of the same type in-place (preserving array order), and adds the
+   * caveat to the end of the array otherwise.
+   *
+   * Throws an error if the permission does not exist or fails to validate after
+   * its caveats have been modified.
+   *
+   * @see {@link PermissionController.addCaveat}
+   * @see {@link PermissionController.updateCaveat}
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to set.
+   * @param caveatValue - The value of the caveat to set.
+   */
+  setCaveat(origin, target, caveatType, caveatValue) {
+    this.update((draftState) => {
+      const subject = draftState.subjects[origin];
+      if (!subject) {
+        throw new (0, _chunkSEPTGKNBjs.UnrecognizedSubjectError)(origin);
+      }
+      const permission = subject.permissions[target];
+      if (!permission) {
+        throw new (0, _chunkSEPTGKNBjs.PermissionDoesNotExistError)(origin, target);
+      }
+      const caveat = {
+        type: caveatType,
+        value: caveatValue
+      };
+      this.validateCaveat(caveat, origin, target);
+      if (permission.caveats) {
+        const caveatIndex = permission.caveats.findIndex(
+          (existingCaveat) => existingCaveat.type === caveat.type
+        );
+        if (caveatIndex === -1) {
+          permission.caveats.push(caveat);
+        } else {
+          permission.caveats.splice(caveatIndex, 1, caveat);
+        }
+      } else {
+        permission.caveats = [caveat];
+      }
+      this.validateModifiedPermission(permission, origin);
+    });
+  }
+  /**
+   * Updates all caveats with the specified type for all subjects and
+   * permissions by applying the specified mutator function to them.
+   *
+   * ATTN: Permissions can be revoked entirely by the action of this method,
+   * read on for details.
+   *
+   * Caveat mutators are functions that receive a caveat value and return a
+   * tuple consisting of a {@link CaveatMutatorOperation} and, optionally, a new
+   * value to update the existing caveat with.
+   *
+   * For each caveat, depending on the mutator result, this method will:
+   * - Do nothing ({@link CaveatMutatorOperation.noop})
+   * - Update the value of the caveat ({@link CaveatMutatorOperation.updateValue}). The caveat specification validator, if any, will be called after updating the value.
+   * - Delete the caveat ({@link CaveatMutatorOperation.deleteCaveat}). The permission specification validator, if any, will be called after deleting the caveat.
+   * - Revoke the parent permission ({@link CaveatMutatorOperation.revokePermission})
+   *
+   * This method throws if the validation of any caveat or permission fails.
+   *
+   * @param targetCaveatType - The type of the caveats to update.
+   * @param mutator - The mutator function which will be applied to all caveat
+   * values.
+   */
+  updatePermissionsByCaveat(targetCaveatType, mutator) {
+    if (Object.keys(this.state.subjects).length === 0) {
+      return;
+    }
+    this.update((draftState) => {
+      Object.values(draftState.subjects).forEach((subject) => {
+        Object.values(subject.permissions).forEach((permission) => {
+          const { caveats } = permission;
+          const targetCaveat = caveats?.find(
+            ({ type }) => type === targetCaveatType
+          );
+          if (!targetCaveat) {
+            return;
+          }
+          const mutatorResult = mutator(targetCaveat.value);
+          const { operation } = mutatorResult;
+          switch (operation) {
+            case 0 /* noop */:
+              break;
+            case 1 /* updateValue */:
+              targetCaveat.value = mutatorResult.value;
+              this.validateCaveat(
+                targetCaveat,
+                subject.origin,
+                permission.parentCapability
+              );
+              break;
+            case 2 /* deleteCaveat */:
+              this.deleteCaveat(permission, targetCaveatType, subject.origin);
+              break;
+            case 3 /* revokePermission */:
+              this.deletePermission(
+                draftState.subjects,
+                subject.origin,
+                permission.parentCapability
+              );
+              break;
+            default: {
+              throw new Error(`Unrecognized mutation result: "${operation}"`);
+            }
+          }
+        });
+      });
+    });
+  }
+  /**
+   * Removes the caveat of the specified type from the permission corresponding
+   * to the given subject origin and target name.
+   *
+   * Throws an error if no such permission or caveat exists.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to remove.
+   */
+  removeCaveat(origin, target, caveatType) {
+    this.update((draftState) => {
+      const permission = draftState.subjects[origin]?.permissions[target];
+      if (!permission) {
+        throw new (0, _chunkSEPTGKNBjs.PermissionDoesNotExistError)(origin, target);
+      }
+      if (!permission.caveats) {
+        throw new (0, _chunkSEPTGKNBjs.CaveatDoesNotExistError)(origin, target, caveatType);
+      }
+      this.deleteCaveat(permission, caveatType, origin);
+    });
+  }
+  /**
+   * Deletes the specified caveat from the specified permission. If no caveats
+   * remain after deletion, the permission's caveat property is set to `null`.
+   * The permission is validated after being modified.
+   *
+   * Throws an error if the permission does not have a caveat with the specified
+   * type.
+   *
+   * @param permission - The permission whose caveat to delete.
+   * @param caveatType - The type of the caveat to delete.
+   * @param origin - The origin the permission subject.
+   */
+  deleteCaveat(permission, caveatType, origin) {
+    if (!permission.caveats) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatDoesNotExistError)(
+        origin,
+        permission.parentCapability,
+        caveatType
+      );
+    }
+    const caveatIndex = permission.caveats.findIndex(
+      (existingCaveat) => existingCaveat.type === caveatType
+    );
+    if (caveatIndex === -1) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatDoesNotExistError)(
+        origin,
+        permission.parentCapability,
+        caveatType
+      );
+    }
+    if (permission.caveats.length === 1) {
+      permission.caveats = null;
+    } else {
+      permission.caveats.splice(caveatIndex, 1);
+    }
+    this.validateModifiedPermission(permission, origin);
+  }
+  /**
+   * Validates the specified modified permission. Should **always** be invoked
+   * on a permission after its caveats have been modified.
+   *
+   * Just like {@link PermissionController.validatePermission}, except that the
+   * corresponding target name and specification are retrieved first, and an
+   * error is thrown if the target name does not exist.
+   *
+   * @param permission - The modified permission to validate.
+   * @param origin - The origin associated with the permission.
+   */
+  validateModifiedPermission(permission, origin) {
+    if (!this.targetExists(permission.parentCapability)) {
+      throw new Error(
+        `Fatal: Existing permission target "${permission.parentCapability}" has no specification.`
+      );
+    }
+    this.validatePermission(
+      this.getPermissionSpecification(permission.parentCapability),
+      permission,
+      origin
+    );
+  }
+  /**
+   * Verifies the existence the specified permission target, i.e. whether it has
+   * a specification.
+   *
+   * @param target - The requested permission target.
+   * @returns Whether the permission target exists.
+   */
+  targetExists(target) {
+    return _utils.hasProperty.call(void 0, this._permissionSpecifications, target);
+  }
+  /**
+   * Grants _approved_ permissions to the specified subject. Every permission and
+   * caveat is stringently validated – including by calling every specification
+   * validator – and an error is thrown if any validation fails.
+   *
+   * ATTN: This method does **not** prompt the user for approval. Use consent must
+   * first be obtained through some other means.
+   *
+   * @see {@link PermissionController.requestPermissions} For initiating a
+   * permissions request requiring user approval.
+   * @param options - Options bag.
+   * @param options.approvedPermissions - The requested permissions approved by
+   * the user.
+   * @param options.requestData - Permission request data. Passed to permission
+   * factory functions.
+   * @param options.preserveExistingPermissions - Whether to preserve the
+   * subject's existing permissions.
+   * @param options.subject - The subject to grant permissions to.
+   * @returns The granted permissions.
+   */
+  grantPermissions({
+    approvedPermissions,
+    requestData,
+    preserveExistingPermissions = true,
+    subject
+  }) {
+    const { origin } = subject;
+    if (!origin || typeof origin !== "string") {
+      throw new (0, _chunkSEPTGKNBjs.InvalidSubjectIdentifierError)(origin);
+    }
+    const permissions = preserveExistingPermissions ? {
+      ...this.getPermissions(origin)
+    } : {};
+    for (const [requestedTarget, approvedPermission] of Object.entries(
+      approvedPermissions
+    )) {
+      if (!this.targetExists(requestedTarget)) {
+        throw _chunkSEPTGKNBjs.methodNotFound.call(void 0, requestedTarget);
+      }
+      if (approvedPermission.parentCapability !== void 0 && requestedTarget !== approvedPermission.parentCapability) {
+        throw new (0, _chunkSEPTGKNBjs.InvalidApprovedPermissionError)(
+          origin,
+          requestedTarget,
+          approvedPermission
+        );
+      }
+      const targetName = requestedTarget;
+      const specification = this.getPermissionSpecification(targetName);
+      const caveats = this.constructCaveats(
+        origin,
+        targetName,
+        approvedPermission.caveats
+      );
+      const permissionOptions = {
+        caveats,
+        invoker: origin,
+        target: targetName
+      };
+      let permission;
+      if (specification.factory) {
+        permission = specification.factory(permissionOptions, requestData);
+        this.validatePermission(specification, permission, origin);
+      } else {
+        permission = _chunkZH4MLSXXjs.constructPermission.call(void 0, permissionOptions);
+        this.validatePermission(specification, permission, origin, {
+          invokePermissionValidator: true,
+          performCaveatValidation: false
+        });
+      }
+      permissions[targetName] = permission;
+    }
+    this.setValidatedPermissions(origin, permissions);
+    return permissions;
+  }
+  /**
+   * Validates the specified permission by:
+   * - Ensuring that if `subjectTypes` is specified, the subject requesting the permission is of a type in the list.
+   * - Ensuring that its `caveats` property is either `null` or a non-empty array.
+   * - Ensuring that it only includes caveats allowed by its specification.
+   * - Ensuring that it includes no duplicate caveats (by caveat type).
+   * - Validating each caveat object, if `performCaveatValidation` is `true`.
+   * - Calling the validator of its specification, if one exists and `invokePermissionValidator` is `true`.
+   *
+   * An error is thrown if validation fails.
+   *
+   * @param specification - The specification of the permission.
+   * @param permission - The permission to validate.
+   * @param origin - The origin associated with the permission.
+   * @param validationOptions - Validation options.
+   * @param validationOptions.invokePermissionValidator - Whether to invoke the
+   * permission's consumer-specified validator function, if any.
+   * @param validationOptions.performCaveatValidation - Whether to invoke
+   * {@link PermissionController.validateCaveat} on each of the permission's
+   * caveats.
+   */
+  validatePermission(specification, permission, origin, { invokePermissionValidator, performCaveatValidation } = {
+    invokePermissionValidator: true,
+    performCaveatValidation: true
+  }) {
+    const { allowedCaveats, validator, targetName } = specification;
+    if (specification.subjectTypes?.length && specification.subjectTypes.length > 0) {
+      const metadata = this.messagingSystem.call(
+        "SubjectMetadataController:getSubjectMetadata",
+        origin
+      );
+      if (!metadata || metadata.subjectType === null || !specification.subjectTypes.includes(metadata.subjectType)) {
+        throw specification.permissionType === "RestrictedMethod" /* RestrictedMethod */ ? _chunkSEPTGKNBjs.methodNotFound.call(void 0, targetName, { origin }) : new (0, _chunkSEPTGKNBjs.EndowmentPermissionDoesNotExistError)(targetName, origin);
+      }
+    }
+    if (_utils.hasProperty.call(void 0, permission, "caveats")) {
+      const { caveats } = permission;
+      if (caveats !== null && !(Array.isArray(caveats) && caveats.length > 0)) {
+        throw new (0, _chunkSEPTGKNBjs.InvalidCaveatsPropertyError)(origin, targetName, caveats);
+      }
+      const seenCaveatTypes = /* @__PURE__ */ new Set();
+      caveats?.forEach((caveat) => {
+        if (performCaveatValidation) {
+          this.validateCaveat(caveat, origin, targetName);
+        }
+        if (!allowedCaveats?.includes(caveat.type)) {
+          throw new (0, _chunkSEPTGKNBjs.ForbiddenCaveatError)(caveat.type, origin, targetName);
+        }
+        if (seenCaveatTypes.has(caveat.type)) {
+          throw new (0, _chunkSEPTGKNBjs.DuplicateCaveatError)(caveat.type, origin, targetName);
+        }
+        seenCaveatTypes.add(caveat.type);
+      });
+    }
+    if (invokePermissionValidator && validator) {
+      validator(permission, origin, targetName);
+    }
+  }
+  /**
+   * Assigns the specified permissions to the subject with the given origin.
+   * Overwrites all existing permissions, and creates a subject entry if it
+   * doesn't already exist.
+   *
+   * ATTN: Assumes that the new permissions have been validated.
+   *
+   * @param origin - The origin of the grantee subject.
+   * @param permissions - The new permissions for the grantee subject.
+   */
+  setValidatedPermissions(origin, permissions) {
+    this.update((draftState) => {
+      if (!draftState.subjects[origin]) {
+        draftState.subjects[origin] = { origin, permissions: {} };
+      }
+      draftState.subjects[origin].permissions = _immer.castDraft.call(void 0, permissions);
+    });
+  }
+  /**
+   * Validates the requested caveats for the permission of the specified
+   * subject origin and target name and returns the validated caveat array.
+   *
+   * Throws an error if validation fails.
+   *
+   * @param origin - The origin of the permission subject.
+   * @param target - The permission target name.
+   * @param requestedCaveats - The requested caveats to construct.
+   * @returns The constructed caveats.
+   */
+  constructCaveats(origin, target, requestedCaveats) {
+    const caveatArray = requestedCaveats?.map((requestedCaveat) => {
+      this.validateCaveat(requestedCaveat, origin, target);
+      const { type, value } = requestedCaveat;
+      return { type, value };
+    });
+    return caveatArray && _controllerutils.isNonEmptyArray.call(void 0, caveatArray) ? caveatArray : void 0;
+  }
+  /**
+   * This methods validates that the specified caveat is an object with the
+   * expected properties and types. It also ensures that a caveat specification
+   * exists for the requested caveat type, and calls the specification
+   * validator, if it exists, on the caveat object.
+   *
+   * Throws an error if validation fails.
+   *
+   * @param caveat - The caveat object to validate.
+   * @param origin - The origin associated with the subject of the parent
+   * permission.
+   * @param target - The target name associated with the parent permission.
+   */
+  validateCaveat(caveat, origin, target) {
+    if (!_controllerutils.isPlainObject.call(void 0, caveat)) {
+      throw new (0, _chunkSEPTGKNBjs.InvalidCaveatError)(caveat, origin, target);
+    }
+    if (Object.keys(caveat).length !== 2) {
+      throw new (0, _chunkSEPTGKNBjs.InvalidCaveatFieldsError)(caveat, origin, target);
+    }
+    if (typeof caveat.type !== "string") {
+      throw new (0, _chunkSEPTGKNBjs.InvalidCaveatTypeError)(caveat, origin, target);
+    }
+    const specification = this.getCaveatSpecification(caveat.type);
+    if (!specification) {
+      throw new (0, _chunkSEPTGKNBjs.UnrecognizedCaveatTypeError)(caveat.type, origin, target);
+    }
+    if (!_utils.hasProperty.call(void 0, caveat, "value") || caveat.value === void 0) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatMissingValueError)(caveat, origin, target);
+    }
+    if (!_controllerutils.isValidJson.call(void 0, caveat.value)) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatInvalidJsonError)(caveat, origin, target);
+    }
+    specification.validator?.(caveat, origin, target);
+  }
+  /**
+   * Initiates a permission request that requires user approval.
+   *
+   * Either this or {@link PermissionController.requestPermissionsIncremental}
+   * should always be used to grant additional permissions to a subject,
+   * unless user approval has been obtained through some other means.
+   *
+   * Permissions are validated at every step of the approval process, and this
+   * method will reject if validation fails.
+   *
+   * @see {@link ApprovalController} For the user approval logic.
+   * @see {@link PermissionController.acceptPermissionsRequest} For the method
+   * that _accepts_ the request and resolves the user approval promise.
+   * @see {@link PermissionController.rejectPermissionsRequest} For the method
+   * that _rejects_ the request and the user approval promise.
+   * @param subject - The grantee subject.
+   * @param requestedPermissions - The requested permissions.
+   * @param options - Additional options.
+   * @param options.id - The id of the permissions request. Defaults to a unique
+   * id.
+   * @param options.preserveExistingPermissions - Whether to preserve the
+   * subject's existing permissions. Defaults to `true`.
+   * @param options.metadata - Additional metadata about the permission request.
+   * @returns The granted permissions and request metadata.
+   */
+  async requestPermissions(subject, requestedPermissions, options = {}) {
+    const { origin } = subject;
+    const { id = _nanoid.nanoid.call(void 0, ), preserveExistingPermissions = true } = options;
+    this.validateRequestedPermissions(origin, requestedPermissions);
+    const metadata = {
+      ...options.metadata,
+      id,
+      origin
+    };
+    const permissionsRequest = {
+      metadata,
+      permissions: requestedPermissions
+    };
+    const approvedRequest = await this.requestUserApproval(permissionsRequest);
+    return await _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _handleApprovedPermissions, handleApprovedPermissions_fn).call(this, {
+      subject,
+      metadata,
+      preserveExistingPermissions,
+      approvedRequest
+    });
+  }
+  /**
+   * Initiates an incremental permission request that prompts for user approval.
+   * Incremental permission requests allow the caller to replace existing and/or
+   * add brand new permissions and caveats for the specified subject.
+   *
+   * Incremental permission request are merged with the subject's existing permissions
+   * through a right-biased union, where the incremental permission are the right-hand
+   * side of the merger. If both sides of the merger specify the same caveats for a
+   * given permission, the caveats are merged using their specification's caveat merger
+   * property.
+   *
+   * Either this or {@link PermissionController.requestPermissions} should
+   * always be used to grant additional permissions to a subject, unless user
+   * approval has been obtained through some other means.
+   *
+   * Permissions are validated at every step of the approval process, and this
+   * method will reject if validation fails.
+   *
+   * @see {@link ApprovalController} For the user approval logic.
+   * @see {@link PermissionController.acceptPermissionsRequest} For the method
+   * that _accepts_ the request and resolves the user approval promise.
+   * @see {@link PermissionController.rejectPermissionsRequest} For the method
+   * that _rejects_ the request and the user approval promise.
+   * @param subject - The grantee subject.
+   * @param requestedPermissions - The requested permissions.
+   * @param options - Additional options.
+   * @param options.id - The id of the permissions request. Defaults to a unique
+   * id.
+   * @param options.metadata - Additional metadata about the permission request.
+   * @returns The granted permissions and request metadata.
+   */
+  async requestPermissionsIncremental(subject, requestedPermissions, options = {}) {
+    const { origin } = subject;
+    const { id = _nanoid.nanoid.call(void 0, ) } = options;
+    this.validateRequestedPermissions(origin, requestedPermissions);
+    const [newPermissions, permissionsDiff] = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _mergeIncrementalPermissions, mergeIncrementalPermissions_fn).call(this, origin, requestedPermissions);
+    try {
+      this.validateRequestedPermissions(origin, newPermissions);
+    } catch (error) {
+      if (error instanceof Error) {
+        throw new (0, _chunkSEPTGKNBjs.InvalidMergedPermissionsError)(origin, error, permissionsDiff);
+      }
+      throw _chunkSEPTGKNBjs.internalError.call(void 0, "Unrecognized error type", { error });
+    }
+    const metadata = {
+      ...options.metadata,
+      id,
+      origin
+    };
+    const permissionsRequest = {
+      metadata,
+      permissions: newPermissions,
+      diff: permissionsDiff
+    };
+    const approvedRequest = await this.requestUserApproval(permissionsRequest);
+    return await _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _handleApprovedPermissions, handleApprovedPermissions_fn).call(this, {
+      subject,
+      metadata,
+      preserveExistingPermissions: false,
+      approvedRequest
+    });
+  }
+  /**
+   * Validates requested permissions. Throws if validation fails.
+   *
+   * This method ensures that the requested permissions are a properly
+   * formatted {@link RequestedPermissions} object, and performs the same
+   * validation as {@link PermissionController.grantPermissions}, except that
+   * consumer-specified permission validator functions are not called, since
+   * they are only called on fully constructed, approved permissions that are
+   * otherwise completely valid.
+   *
+   * Unrecognzied properties on requested permissions are ignored.
+   *
+   * @param origin - The origin of the grantee subject.
+   * @param requestedPermissions - The requested permissions.
+   */
+  validateRequestedPermissions(origin, requestedPermissions) {
+    if (!_controllerutils.isPlainObject.call(void 0, requestedPermissions)) {
+      throw _chunkSEPTGKNBjs.invalidParams.call(void 0, {
+        message: `Requested permissions for origin "${origin}" is not a plain object.`,
+        data: { origin, requestedPermissions }
+      });
+    }
+    if (Object.keys(requestedPermissions).length === 0) {
+      throw _chunkSEPTGKNBjs.invalidParams.call(void 0, {
+        message: `Permissions request for origin "${origin}" contains no permissions.`,
+        data: { requestedPermissions }
+      });
+    }
+    for (const targetName of Object.keys(requestedPermissions)) {
+      const permission = requestedPermissions[targetName];
+      if (!this.targetExists(targetName)) {
+        throw _chunkSEPTGKNBjs.methodNotFound.call(void 0, targetName, { origin, requestedPermissions });
+      }
+      if (!_controllerutils.isPlainObject.call(void 0, permission) || permission.parentCapability !== void 0 && targetName !== permission.parentCapability) {
+        throw _chunkSEPTGKNBjs.invalidParams.call(void 0, {
+          message: `Permissions request for origin "${origin}" contains invalid requested permission(s).`,
+          data: { origin, requestedPermissions }
+        });
+      }
+      this.validatePermission(
+        this.getPermissionSpecification(targetName),
+        // Typecast: The permission is still a "PlainObject" here.
+        permission,
+        origin,
+        { invokePermissionValidator: false, performCaveatValidation: true }
+      );
+    }
+  }
+  /**
+   * Adds a request to the {@link ApprovalController} using the
+   * {@link AddApprovalRequest} action. Also validates the resulting approved
+   * permissions request, and throws an error if validation fails.
+   *
+   * @param permissionsRequest - The permissions request object.
+   * @returns The approved permissions request object.
+   */
+  async requestUserApproval(permissionsRequest) {
+    const { origin, id } = permissionsRequest.metadata;
+    const approvedRequest = await this.messagingSystem.call(
+      "ApprovalController:addRequest",
+      {
+        id,
+        origin,
+        requestData: permissionsRequest,
+        type: "wallet_requestPermissions" /* requestPermissions */
+      },
+      true
+    );
+    this.validateApprovedPermissions(approvedRequest, { id, origin });
+    return approvedRequest;
+  }
+  /**
+   * Reunites all the side-effects (onPermitted and onFailure) of the requested permissions inside a record of arrays.
+   *
+   * @param permissions - The approved permissions.
+   * @returns The {@link SideEffects} object containing the handlers arrays.
+   */
+  getSideEffects(permissions) {
+    return Object.keys(permissions).reduce(
+      (sideEffectList, targetName) => {
+        if (this.targetExists(targetName)) {
+          const specification = this.getPermissionSpecification(targetName);
+          if (specification.sideEffect) {
+            sideEffectList.permittedHandlers[targetName] = specification.sideEffect.onPermitted;
+            if (specification.sideEffect.onFailure) {
+              sideEffectList.failureHandlers[targetName] = specification.sideEffect.onFailure;
+            }
+          }
+        }
+        return sideEffectList;
+      },
+      { permittedHandlers: {}, failureHandlers: {} }
+    );
+  }
+  /**
+   * Executes the side-effects of the approved permissions while handling the errors if any.
+   * It will pass an instance of the {@link messagingSystem} and the request data associated with the permission request to the handlers through its params.
+   *
+   * @param sideEffects - the side-effect record created by {@link getSideEffects}
+   * @param requestData - the permissions requestData.
+   * @returns the value returned by all the `onPermitted` handlers in an array.
+   */
+  async executeSideEffects(sideEffects, requestData) {
+    const { permittedHandlers, failureHandlers } = sideEffects;
+    const params = {
+      requestData,
+      messagingSystem: this.messagingSystem
+    };
+    const promiseResults = await Promise.allSettled(
+      Object.values(permittedHandlers).map(
+        (permittedHandler) => permittedHandler(params)
+      )
+    );
+    const rejectedHandlers = promiseResults.filter(
+      (promise) => promise.status === "rejected"
+    );
+    if (rejectedHandlers.length > 0) {
+      const failureHandlersList = Object.values(failureHandlers);
+      if (failureHandlersList.length > 0) {
+        try {
+          await Promise.all(
+            failureHandlersList.map((failureHandler) => failureHandler(params))
+          );
+        } catch (error) {
+          throw _chunkSEPTGKNBjs.internalError.call(void 0, "Unexpected error in side-effects", { error });
+        }
+      }
+      const reasons = rejectedHandlers.map((handler) => handler.reason);
+      reasons.forEach((reason) => {
+        console.error(reason);
+      });
+      throw reasons.length > 1 ? _chunkSEPTGKNBjs.internalError.call(void 0, 
+        "Multiple errors occurred during side-effects execution",
+        { errors: reasons }
+      ) : reasons[0];
+    }
+    return promiseResults.map(
+      ({ value }) => value
+    );
+  }
+  /**
+   * Validates an approved {@link PermissionsRequest} object. The approved
+   * request must have the required `metadata` and `permissions` properties,
+   * the `id` and `origin` of the `metadata` must match the original request
+   * metadata, and the requested permissions must be valid per
+   * {@link PermissionController.validateRequestedPermissions}. Any extra
+   * metadata properties are ignored.
+   *
+   * An error is thrown if validation fails.
+   *
+   * @param approvedRequest - The approved permissions request object.
+   * @param originalMetadata - The original request metadata.
+   */
+  validateApprovedPermissions(approvedRequest, originalMetadata) {
+    const { id, origin } = originalMetadata;
+    if (!_controllerutils.isPlainObject.call(void 0, approvedRequest) || !_controllerutils.isPlainObject.call(void 0, approvedRequest.metadata)) {
+      throw _chunkSEPTGKNBjs.internalError.call(void 0, 
+        `Approved permissions request for subject "${origin}" is invalid.`,
+        { data: { approvedRequest } }
+      );
+    }
+    const {
+      metadata: { id: newId, origin: newOrigin },
+      permissions
+    } = approvedRequest;
+    if (newId !== id) {
+      throw _chunkSEPTGKNBjs.internalError.call(void 0, 
+        `Approved permissions request for subject "${origin}" mutated its id.`,
+        { originalId: id, mutatedId: newId }
+      );
+    }
+    if (newOrigin !== origin) {
+      throw _chunkSEPTGKNBjs.internalError.call(void 0, 
+        `Approved permissions request for subject "${origin}" mutated its origin.`,
+        { originalOrigin: origin, mutatedOrigin: newOrigin }
+      );
+    }
+    try {
+      this.validateRequestedPermissions(origin, permissions);
+    } catch (error) {
+      if (error instanceof Error) {
+        throw _chunkSEPTGKNBjs.internalError.call(void 0, 
+          `Invalid approved permissions request: ${error.message}`,
+          error instanceof _rpcerrors.JsonRpcError ? error.data : void 0
+        );
+      }
+      throw _chunkSEPTGKNBjs.internalError.call(void 0, "Unrecognized error type", { error });
+    }
+  }
+  /**
+   * Accepts a permissions request created by
+   * {@link PermissionController.requestPermissions}.
+   *
+   * @param request - The permissions request.
+   */
+  async acceptPermissionsRequest(request) {
+    const { id } = request.metadata;
+    if (!this.hasApprovalRequest({ id })) {
+      throw new (0, _chunkSEPTGKNBjs.PermissionsRequestNotFoundError)(id);
+    }
+    if (Object.keys(request.permissions).length === 0) {
+      this._rejectPermissionsRequest(
+        id,
+        _chunkSEPTGKNBjs.invalidParams.call(void 0, {
+          message: "Must request at least one permission."
+        })
+      );
+      return;
+    }
+    try {
+      this.messagingSystem.call(
+        "ApprovalController:acceptRequest",
+        id,
+        request
+      );
+    } catch (error) {
+      this._rejectPermissionsRequest(id, error);
+      throw error;
+    }
+  }
+  /**
+   * Rejects a permissions request created by
+   * {@link PermissionController.requestPermissions}.
+   *
+   * @param id - The id of the request to be rejected.
+   */
+  async rejectPermissionsRequest(id) {
+    if (!this.hasApprovalRequest({ id })) {
+      throw new (0, _chunkSEPTGKNBjs.PermissionsRequestNotFoundError)(id);
+    }
+    this._rejectPermissionsRequest(id, _chunkSEPTGKNBjs.userRejectedRequest.call(void 0, ));
+  }
+  /**
+   * Checks whether the {@link ApprovalController} has a particular permissions
+   * request.
+   *
+   * @see {@link PermissionController.acceptPermissionsRequest} and
+   * {@link PermissionController.rejectPermissionsRequest} for usage.
+   * @param options - The {@link HasApprovalRequest} options.
+   * @param options.id - The id of the approval request to check for.
+   * @returns Whether the specified request exists.
+   */
+  hasApprovalRequest(options) {
+    return this.messagingSystem.call("ApprovalController:hasRequest", options);
+  }
+  /**
+   * Rejects the permissions request with the specified id, with the specified
+   * error as the reason. This method is effectively a wrapper around a
+   * messenger call for the `ApprovalController:rejectRequest` action.
+   *
+   * @see {@link PermissionController.acceptPermissionsRequest} and
+   * {@link PermissionController.rejectPermissionsRequest} for usage.
+   * @param id - The id of the request to reject.
+   * @param error - The error associated with the rejection.
+   * @returns Nothing
+   */
+  _rejectPermissionsRequest(id, error) {
+    return this.messagingSystem.call(
+      "ApprovalController:rejectRequest",
+      id,
+      error
+    );
+  }
+  /**
+   * Gets the subject's endowments per the specified endowment permission.
+   * Throws if the subject does not have the required permission or if the
+   * permission is not an endowment permission.
+   *
+   * @param origin - The origin of the subject whose endowments to retrieve.
+   * @param targetName - The name of the endowment permission. This must be a
+   * valid permission target name.
+   * @param requestData - Additional data associated with the request, if any.
+   * Forwarded to the endowment getter function for the permission.
+   * @returns The endowments, if any.
+   */
+  async getEndowments(origin, targetName, requestData) {
+    if (!this.hasPermission(origin, targetName)) {
+      throw _chunkSEPTGKNBjs.unauthorized.call(void 0, { data: { origin, targetName } });
+    }
+    return this.getTypedPermissionSpecification(
+      "Endowment" /* Endowment */,
+      targetName,
+      origin
+    ).endowmentGetter({ origin, requestData });
+  }
+  /**
+   * Executes a restricted method as the subject with the given origin.
+   * The specified params, if any, will be passed to the method implementation.
+   *
+   * ATTN: Great caution should be exercised in the use of this method.
+   * Methods that cause side effects or affect application state should
+   * be avoided.
+   *
+   * This method will first attempt to retrieve the requested restricted method
+   * implementation, throwing if it does not exist. The method will then be
+   * invoked as though the subject with the specified origin had invoked it with
+   * the specified parameters. This means that any existing caveats will be
+   * applied to the restricted method, and this method will throw if the
+   * restricted method or its caveat decorators throw.
+   *
+   * In addition, this method will throw if the subject does not have a
+   * permission for the specified restricted method.
+   *
+   * @param origin - The origin of the subject to execute the method on behalf
+   * of.
+   * @param targetName - The name of the method to execute. This must be a valid
+   * permission target name.
+   * @param params - The parameters to pass to the method implementation.
+   * @returns The result of the executed method.
+   */
+  async executeRestrictedMethod(origin, targetName, params) {
+    const methodImplementation = this.getRestrictedMethod(targetName, origin);
+    const result = await this._executeRestrictedMethod(
+      methodImplementation,
+      { origin },
+      targetName,
+      params
+    );
+    if (result === void 0) {
+      throw new Error(
+        `Internal request for method "${targetName}" as origin "${origin}" returned no result.`
+      );
+    }
+    return result;
+  }
+  /**
+   * An internal method used in the controller's `json-rpc-engine` middleware
+   * and {@link PermissionController.executeRestrictedMethod}. Calls the
+   * specified restricted method implementation after decorating it with the
+   * caveats of its permission. Throws if the subject does not have the
+   * requisite permission.
+   *
+   * ATTN: Parameter validation is the responsibility of the caller, or
+   * the restricted method implementation in the case of `params`.
+   *
+   * @see {@link PermissionController.executeRestrictedMethod} and
+   * {@link PermissionController.createPermissionMiddleware} for usage.
+   * @param methodImplementation - The implementation of the method to call.
+   * @param subject - Metadata about the subject that made the request.
+   * @param method - The method name
+   * @param params - Params needed for executing the restricted method
+   * @returns The result of the restricted method implementation
+   */
+  _executeRestrictedMethod(methodImplementation, subject, method, params = []) {
+    const { origin } = subject;
+    const permission = this.getPermission(origin, method);
+    if (!permission) {
+      throw _chunkSEPTGKNBjs.unauthorized.call(void 0, { data: { origin, method } });
+    }
+    return _chunkL5ZQETZ4js.decorateWithCaveats.call(void 0, 
+      methodImplementation,
+      permission,
+      this._caveatSpecifications
+    )({ method, params, context: { origin } });
+  }
+};
+_mergeIncrementalPermissions = new WeakSet();
+mergeIncrementalPermissions_fn = function(origin, incrementalRequestedPermissions) {
+  const [newPermissions, permissionsDiff] = _immer.produceWithPatches.call(void 0, 
+    this.getPermissions(origin) ?? {},
+    (existingPermissions) => {
+      const leftPermissions = existingPermissions;
+      Object.entries(incrementalRequestedPermissions).forEach(
+        ([targetName, rightPermission]) => {
+          if (!_utils.hasProperty.call(void 0, 
+            // We type-guard the targetName key out of existence without this cast.
+            leftPermissions,
+            targetName
+          )) {
+            leftPermissions[targetName] = rightPermission;
+          } else {
+            const leftPermission = leftPermissions[targetName];
+            leftPermissions[targetName] = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _mergePermission, mergePermission_fn).call(this, leftPermission, rightPermission);
+          }
+        }
+      );
+    }
+  );
+  return [newPermissions, permissionsDiff];
+};
+_mergePermission = new WeakSet();
+mergePermission_fn = function(leftPermission, rightPermission) {
+  const { caveatPairs, uniqueCaveats } = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _collectUniqueAndPairedCaveats, collectUniqueAndPairedCaveats_fn).call(this, leftPermission, rightPermission);
+  const mergedCaveats = caveatPairs.map(([leftCaveat, rightCaveat]) => {
+    const { merger } = this.getCaveatSpecification(leftCaveat.type);
+    if (!merger) {
+      throw new (0, _chunkSEPTGKNBjs.CaveatMergerDoesNotExistError)(leftCaveat.type);
+    }
+    return merger(leftCaveat, rightCaveat);
+  });
+  const allCaveats = [...mergedCaveats, ...uniqueCaveats];
+  return {
+    ...leftPermission,
+    ...rightPermission,
+    ...allCaveats.length > 0 ? { caveats: allCaveats } : {}
+  };
+};
+_collectUniqueAndPairedCaveats = new WeakSet();
+collectUniqueAndPairedCaveats_fn = function(leftPermission, rightPermission) {
+  const leftCaveats = leftPermission.caveats ?? [];
+  const rightCaveats = rightPermission.caveats ?? [];
+  const uniqueCaveats = [];
+  const caveatPairs = [];
+  leftCaveats.forEach((leftCaveat) => {
+    const rightCaveatIndex = rightCaveats.findIndex(
+      (rightCaveat) => rightCaveat.type === leftCaveat.type
+    );
+    if (rightCaveatIndex === -1) {
+      uniqueCaveats.push(leftCaveat);
+    } else {
+      caveatPairs.push([leftCaveat, rightCaveats[rightCaveatIndex]]);
+      rightCaveats.splice(rightCaveatIndex, 1);
+    }
+  });
+  uniqueCaveats.push(...rightCaveats);
+  return { caveatPairs, uniqueCaveats };
+};
+_handleApprovedPermissions = new WeakSet();
+handleApprovedPermissions_fn = async function({
+  subject,
+  metadata,
+  preserveExistingPermissions,
+  approvedRequest
+}) {
+  const { permissions: approvedPermissions, ...requestData } = approvedRequest;
+  const approvedMetadata = { ...metadata };
+  const sideEffects = this.getSideEffects(approvedPermissions);
+  if (Object.values(sideEffects.permittedHandlers).length > 0) {
+    const sideEffectsData = await this.executeSideEffects(
+      sideEffects,
+      approvedRequest
+    );
+    approvedMetadata.data = Object.keys(sideEffects.permittedHandlers).reduce(
+      (acc, permission, i) => ({ [permission]: sideEffectsData[i], ...acc }),
+      {}
+    );
+  }
+  return [
+    this.grantPermissions({
+      subject,
+      approvedPermissions,
+      preserveExistingPermissions,
+      requestData
+    }),
+    approvedMetadata
+  ];
+};
+
+
+
+
+exports.CaveatMutatorOperation = CaveatMutatorOperation; exports.PermissionController = PermissionController;
+//# sourceMappingURL=chunk-LSJJ7IYC.js.map
\ No newline at end of file
diff --git a/dist/chunk-LSJJ7IYC.js.map b/dist/chunk-LSJJ7IYC.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..8ed594a5c26f58a83f10a20f98b716c924ce16f1
--- /dev/null
+++ b/dist/chunk-LSJJ7IYC.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/PermissionController.ts"],"names":["CaveatMutatorOperation"],"mappings":"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","sourcesContent":["/* eslint-enable @typescript-eslint/no-unused-vars */\nimport type {\n  AcceptRequest as AcceptApprovalRequest,\n  AddApprovalRequest,\n  HasApprovalRequest,\n  RejectRequest as RejectApprovalRequest,\n} from '@metamask/approval-controller';\nimport type {\n  StateMetadata,\n  RestrictedControllerMessenger,\n  ActionConstraint,\n  EventConstraint,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type { NonEmptyArray } from '@metamask/controller-utils';\nimport {\n  isNonEmptyArray,\n  isPlainObject,\n  isValidJson,\n} from '@metamask/controller-utils';\nimport { JsonRpcError } from '@metamask/rpc-errors';\nimport { hasProperty } from '@metamask/utils';\nimport type { Json, Mutable } from '@metamask/utils';\nimport deepFreeze from 'deep-freeze-strict';\nimport type { Patch } from 'immer';\nimport { castDraft, produceWithPatches, type Draft } from 'immer';\nimport { nanoid } from 'nanoid';\n\nimport type {\n  CaveatConstraint,\n  CaveatSpecificationConstraint,\n  CaveatSpecificationMap,\n  ExtractCaveat,\n  ExtractCaveats,\n  ExtractCaveatValue,\n} from './Caveat';\nimport {\n  decorateWithCaveats,\n  isRestrictedMethodCaveatSpecification,\n} from './Caveat';\nimport {\n  CaveatAlreadyExistsError,\n  CaveatDoesNotExistError,\n  CaveatInvalidJsonError,\n  CaveatMergerDoesNotExistError,\n  CaveatMissingValueError,\n  CaveatSpecificationMismatchError,\n  DuplicateCaveatError,\n  EndowmentPermissionDoesNotExistError,\n  ForbiddenCaveatError,\n  internalError,\n  InvalidApprovedPermissionError,\n  InvalidCaveatError,\n  InvalidCaveatFieldsError,\n  InvalidCaveatsPropertyError,\n  InvalidCaveatTypeError,\n  InvalidMergedPermissionsError,\n  invalidParams,\n  InvalidSubjectIdentifierError,\n  methodNotFound,\n  PermissionDoesNotExistError,\n  PermissionsRequestNotFoundError,\n  unauthorized,\n  UnrecognizedCaveatTypeError,\n  UnrecognizedSubjectError,\n  userRejectedRequest,\n} from './errors';\nimport type {\n  EndowmentSpecificationConstraint,\n  ExtractAllowedCaveatTypes,\n  ExtractPermissionSpecification,\n  OriginString,\n  PermissionConstraint,\n  PermissionSpecificationConstraint,\n  PermissionSpecificationMap,\n  RequestedPermissions,\n  RestrictedMethod,\n  RestrictedMethodParameters,\n  RestrictedMethodSpecificationConstraint,\n  SideEffectHandler,\n  ValidPermission,\n  ValidPermissionSpecification,\n} from './Permission';\nimport {\n  constructPermission,\n  findCaveat,\n  hasSpecificationType,\n  PermissionType,\n} from './Permission';\nimport { getPermissionMiddlewareFactory } from './permission-middleware';\nimport type { GetSubjectMetadata } from './SubjectMetadataController';\nimport { MethodNames } from './utils';\n\n/**\n * Metadata associated with {@link PermissionController} subjects.\n */\nexport type PermissionSubjectMetadata = {\n  origin: OriginString;\n};\n\n/**\n * Metadata associated with permission requests.\n */\nexport type PermissionsRequestMetadata = PermissionSubjectMetadata & {\n  id: string;\n  [key: string]: Json;\n};\n\n/**\n * A diff produced by an incremental permissions request.\n */\nexport type PermissionsDiff = (Omit<Patch, 'value'> & { value: Json })[];\n\n/**\n * Used for prompting the user about a proposed new permission.\n * Includes information about the grantee subject, requested permissions, and\n * any additional information added by the consumer.\n *\n * All properties except `permissions` are passed to any factories found for\n * the requested permissions.\n */\nexport type PermissionsRequest = {\n  metadata: PermissionsRequestMetadata;\n  permissions: RequestedPermissions;\n  [key: string]: Json;\n} & { diff?: PermissionsDiff };\n\n/**\n * Metadata associated with an approved permission request.\n */\ntype ApprovedPermissionsMetadata = {\n  data?: Record<string, unknown>;\n  id: string;\n  origin: OriginString;\n};\n\nexport type SideEffects = {\n  permittedHandlers: Record<\n    string,\n    SideEffectHandler<ActionConstraint, EventConstraint>\n  >;\n  failureHandlers: Record<\n    string,\n    SideEffectHandler<ActionConstraint, EventConstraint>\n  >;\n};\n\n/**\n * The name of the {@link PermissionController}.\n */\nconst controllerName = 'PermissionController';\n\n/**\n * Permissions associated with a {@link PermissionController} subject.\n */\nexport type SubjectPermissions<Permission extends PermissionConstraint> =\n  Record<Permission['parentCapability'], Permission>;\n\n/**\n * Permissions and metadata associated with a {@link PermissionController}\n * subject.\n */\nexport type PermissionSubjectEntry<\n  SubjectPermission extends PermissionConstraint,\n> = {\n  origin: SubjectPermission['invoker'];\n  permissions: SubjectPermissions<SubjectPermission>;\n};\n\n/**\n * All subjects of a {@link PermissionController}.\n *\n * @template SubjectPermission - The permissions of the subject.\n */\nexport type PermissionControllerSubjects<\n  SubjectPermission extends PermissionConstraint,\n> = Record<\n  SubjectPermission['invoker'],\n  PermissionSubjectEntry<SubjectPermission>\n>;\n\n/**\n * The state of a {@link PermissionController}.\n *\n * @template Permission - The controller's permission type union.\n */\nexport type PermissionControllerState<Permission> =\n  Permission extends PermissionConstraint\n    ? {\n        subjects: PermissionControllerSubjects<Permission>;\n      }\n    : never;\n\n/**\n * Get the state metadata of the {@link PermissionController}.\n *\n * @template Permission - The controller's permission type union.\n * @returns The state metadata\n */\nfunction getStateMetadata<Permission extends PermissionConstraint>() {\n  return { subjects: { anonymous: true, persist: true } } as StateMetadata<\n    PermissionControllerState<Permission>\n  >;\n}\n\n/**\n * Get the default state of the {@link PermissionController}.\n *\n * @template Permission - The controller's permission type union.\n * @returns The default state of the controller\n */\nfunction getDefaultState<Permission extends PermissionConstraint>() {\n  return { subjects: {} } as PermissionControllerState<Permission>;\n}\n\n/**\n * Gets the state of the {@link PermissionController}.\n */\nexport type GetPermissionControllerState = ControllerGetStateAction<\n  typeof controllerName,\n  PermissionControllerState<PermissionConstraint>\n>;\n\n/**\n * Gets the names of all subjects from the {@link PermissionController}.\n */\nexport type GetSubjects = {\n  type: `${typeof controllerName}:getSubjectNames`;\n  handler: () => (keyof PermissionControllerSubjects<PermissionConstraint>)[];\n};\n\n/**\n * Gets the permissions for specified subject\n */\nexport type GetPermissions = {\n  type: `${typeof controllerName}:getPermissions`;\n  handler: GenericPermissionController['getPermissions'];\n};\n\n/**\n * Checks whether the specified subject has any permissions.\n */\nexport type HasPermissions = {\n  type: `${typeof controllerName}:hasPermissions`;\n  handler: GenericPermissionController['hasPermissions'];\n};\n\n/**\n * Checks whether the specified subject has a specific permission.\n */\nexport type HasPermission = {\n  type: `${typeof controllerName}:hasPermission`;\n  handler: GenericPermissionController['hasPermission'];\n};\n\n/**\n * Directly grants given permissions for a specificed origin without requesting user approval\n */\nexport type GrantPermissions = {\n  type: `${typeof controllerName}:grantPermissions`;\n  handler: GenericPermissionController['grantPermissions'];\n};\n\n/**\n * Requests given permissions for a specified origin\n */\nexport type RequestPermissions = {\n  type: `${typeof controllerName}:requestPermissions`;\n  handler: GenericPermissionController['requestPermissions'];\n};\n\n/**\n * Removes the specified permissions for each origin.\n */\nexport type RevokePermissions = {\n  type: `${typeof controllerName}:revokePermissions`;\n  handler: GenericPermissionController['revokePermissions'];\n};\n\n/**\n * Removes all permissions for a given origin\n */\nexport type RevokeAllPermissions = {\n  type: `${typeof controllerName}:revokeAllPermissions`;\n  handler: GenericPermissionController['revokeAllPermissions'];\n};\n\n/**\n * Revokes all permissions corresponding to the specified target for all subjects.\n * Does nothing if no subjects or no such permission exists.\n */\nexport type RevokePermissionForAllSubjects = {\n  type: `${typeof controllerName}:revokePermissionForAllSubjects`;\n  handler: GenericPermissionController['revokePermissionForAllSubjects'];\n};\n\n/**\n * Updates a caveat value for a specified caveat type belonging to a specific target and origin.\n */\nexport type UpdateCaveat = {\n  type: `${typeof controllerName}:updateCaveat`;\n  handler: GenericPermissionController['updateCaveat'];\n};\n\n/**\n * TODO:cm\n * Updates a caveat value for a specified caveat type belonging to a specific target and origin.\n */\nexport type UpdateCaveatIncremental = {\n  type: `${typeof controllerName}:updateCaveatIncremental`;\n  handler: GenericPermissionController['updateCaveatIncremental'];\n};\n\n/**\n * Clears all permissions from the {@link PermissionController}.\n */\nexport type ClearPermissions = {\n  type: `${typeof controllerName}:clearPermissions`;\n  handler: () => void;\n};\n\n/**\n * Gets the endowments for the given subject and permission.\n */\nexport type GetEndowments = {\n  type: `${typeof controllerName}:getEndowments`;\n  handler: GenericPermissionController['getEndowments'];\n};\n\n/**\n * The {@link ControllerMessenger} actions of the {@link PermissionController}.\n */\nexport type PermissionControllerActions =\n  | ClearPermissions\n  | GetEndowments\n  | GetPermissionControllerState\n  | GetSubjects\n  | GetPermissions\n  | HasPermission\n  | HasPermissions\n  | GrantPermissions\n  | RequestPermissions\n  | RevokeAllPermissions\n  | RevokePermissionForAllSubjects\n  | RevokePermissions\n  | UpdateCaveat\n  | UpdateCaveatIncremental;\n\n/**\n * The generic state change event of the {@link PermissionController}.\n */\nexport type PermissionControllerStateChange = ControllerStateChangeEvent<\n  typeof controllerName,\n  PermissionControllerState<PermissionConstraint>\n>;\n\n/**\n * The {@link ControllerMessenger} events of the {@link PermissionController}.\n *\n * The permission controller only emits its generic state change events.\n * Consumers should use selector subscriptions to subscribe to relevant\n * substate.\n */\nexport type PermissionControllerEvents = PermissionControllerStateChange;\n\n/**\n * The external {@link ControllerMessenger} actions available to the\n * {@link PermissionController}.\n */\ntype AllowedActions =\n  | AddApprovalRequest\n  | HasApprovalRequest\n  | AcceptApprovalRequest\n  | RejectApprovalRequest\n  | GetSubjectMetadata;\n\n/**\n * The messenger of the {@link PermissionController}.\n */\nexport type PermissionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  PermissionControllerActions | AllowedActions,\n  PermissionControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\nexport type SideEffectMessenger<\n  Actions extends ActionConstraint,\n  Events extends EventConstraint,\n> = RestrictedControllerMessenger<\n  typeof controllerName,\n  Actions | AllowedActions,\n  Events,\n  AllowedActions['type'] | Actions['type'],\n  Events['type']\n>;\n\n/**\n * A generic {@link PermissionController}.\n */\nexport type GenericPermissionController = PermissionController<\n  PermissionSpecificationConstraint,\n  CaveatSpecificationConstraint\n>;\n\n/**\n * Describes the possible results of a {@link CaveatMutator} function.\n */\nexport enum CaveatMutatorOperation {\n  noop,\n  updateValue,\n  deleteCaveat,\n  revokePermission,\n}\n\n/**\n * Given a caveat value, returns a {@link CaveatMutatorOperation} and, optionally,\n * a new caveat value.\n *\n * @see {@link PermissionController.updatePermissionsByCaveat} for more details.\n * @template Caveat - The caveat type for which this mutator is intended.\n * @param caveatValue - The existing value of the caveat being mutated.\n * @returns A tuple of the mutation result and, optionally, the new caveat\n * value.\n */\nexport type CaveatMutator<TargetCaveat extends CaveatConstraint> = (\n  caveatValue: TargetCaveat['value'],\n) => CaveatMutatorResult;\n\ntype CaveatMutatorResult =\n  | Readonly<{\n      operation: CaveatMutatorOperation.updateValue;\n      value: CaveatConstraint['value'];\n    }>\n  | Readonly<{\n      operation: Exclude<\n        CaveatMutatorOperation,\n        CaveatMutatorOperation.updateValue\n      >;\n    }>;\n\n/**\n * Extracts the permission(s) specified by the given permission and caveat\n * specifications.\n *\n * @template ControllerPermissionSpecification - The permission specification(s)\n * to extract from.\n * @template ControllerCaveatSpecification - The caveat specification(s) to\n * extract from. Necessary because {@link Permission} has a generic parameter\n * that describes the allowed caveats for the permission.\n */\nexport type ExtractPermission<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> = ControllerPermissionSpecification extends ValidPermissionSpecification<ControllerPermissionSpecification>\n  ? ValidPermission<\n      ControllerPermissionSpecification['targetName'],\n      ExtractCaveats<ControllerCaveatSpecification>\n    >\n  : never;\n\n/**\n * Extracts the restricted method permission(s) specified by the given\n * permission and caveat specifications.\n *\n * @template ControllerPermissionSpecification - The permission specification(s)\n * to extract from.\n * @template ControllerCaveatSpecification - The caveat specification(s) to\n * extract from. Necessary because {@link Permission} has a generic parameter\n * that describes the allowed caveats for the permission.\n */\nexport type ExtractRestrictedMethodPermission<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> = ExtractPermission<\n  Extract<\n    ControllerPermissionSpecification,\n    RestrictedMethodSpecificationConstraint\n  >,\n  ControllerCaveatSpecification\n>;\n\n/**\n * Extracts the endowment permission(s) specified by the given permission and\n * caveat specifications.\n *\n * @template ControllerPermissionSpecification - The permission specification(s)\n * to extract from.\n * @template ControllerCaveatSpecification - The caveat specification(s) to\n * extract from. Necessary because {@link Permission} has a generic parameter\n * that describes the allowed caveats for the permission.\n */\nexport type ExtractEndowmentPermission<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> = ExtractPermission<\n  Extract<ControllerPermissionSpecification, EndowmentSpecificationConstraint>,\n  ControllerCaveatSpecification\n>;\n\n/**\n * Options for the {@link PermissionController} constructor.\n *\n * @template ControllerPermissionSpecification - A union of the types of all\n * permission specifications available to the controller. Any referenced caveats\n * must be included in the controller's caveat specifications.\n * @template ControllerCaveatSpecification - A union of the types of all\n * caveat specifications available to the controller.\n */\nexport type PermissionControllerOptions<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> = {\n  messenger: PermissionControllerMessenger;\n  caveatSpecifications: CaveatSpecificationMap<ControllerCaveatSpecification>;\n  permissionSpecifications: PermissionSpecificationMap<ControllerPermissionSpecification>;\n  unrestrictedMethods: readonly string[];\n  state?: Partial<\n    PermissionControllerState<\n      ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >\n    >\n  >;\n};\n\n/**\n * The permission controller. See the [Architecture](../ARCHITECTURE.md)\n * document for details.\n *\n * Assumes the existence of an {@link ApprovalController} reachable via the\n * {@link ControllerMessenger}.\n *\n * @template ControllerPermissionSpecification - A union of the types of all\n * permission specifications available to the controller. Any referenced caveats\n * must be included in the controller's caveat specifications.\n * @template ControllerCaveatSpecification - A union of the types of all\n * caveat specifications available to the controller.\n */\nexport class PermissionController<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> extends BaseController<\n  typeof controllerName,\n  PermissionControllerState<\n    ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >\n  >,\n  PermissionControllerMessenger\n> {\n  private readonly _caveatSpecifications: Readonly<\n    CaveatSpecificationMap<ControllerCaveatSpecification>\n  >;\n\n  private readonly _permissionSpecifications: Readonly<\n    PermissionSpecificationMap<ControllerPermissionSpecification>\n  >;\n\n  private readonly _unrestrictedMethods: ReadonlySet<string>;\n\n  /**\n   * The names of all JSON-RPC methods that will be ignored by the controller.\n   *\n   * @returns The names of all unrestricted JSON-RPC methods\n   */\n  public get unrestrictedMethods(): ReadonlySet<string> {\n    return this._unrestrictedMethods;\n  }\n\n  /**\n   * Returns a `json-rpc-engine` middleware function factory, so that the rules\n   * described by the state of this controller can be applied to incoming\n   * JSON-RPC requests.\n   *\n   * The middleware **must** be added in the correct place in the middleware\n   * stack in order for it to work. See the README for an example.\n   */\n  public createPermissionMiddleware: ReturnType<\n    typeof getPermissionMiddlewareFactory\n  >;\n\n  /**\n   * Constructs the PermissionController.\n   *\n   * @param options - Permission controller options.\n   * @param options.caveatSpecifications - The specifications of all caveats\n   * available to the controller. See {@link CaveatSpecificationMap} and the\n   * documentation for more details.\n   * @param options.permissionSpecifications - The specifications of all\n   * permissions available to the controller. See\n   * {@link PermissionSpecificationMap} and the README for more details.\n   * @param options.unrestrictedMethods - The callable names of all JSON-RPC\n   * methods ignored by the new controller.\n   * @param options.messenger - The controller messenger. See\n   * {@link BaseController} for more information.\n   * @param options.state - Existing state to hydrate the controller with at\n   * initialization.\n   */\n  constructor(\n    options: PermissionControllerOptions<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >,\n  ) {\n    const {\n      caveatSpecifications,\n      permissionSpecifications,\n      unrestrictedMethods,\n      messenger,\n      state = {},\n    } = options;\n\n    super({\n      name: controllerName,\n      metadata:\n        getStateMetadata<\n          ExtractPermission<\n            ControllerPermissionSpecification,\n            ControllerCaveatSpecification\n          >\n        >(),\n      messenger,\n      state: {\n        ...getDefaultState<\n          ExtractPermission<\n            ControllerPermissionSpecification,\n            ControllerCaveatSpecification\n          >\n        >(),\n        ...state,\n      },\n    });\n\n    this._unrestrictedMethods = new Set(unrestrictedMethods);\n    this._caveatSpecifications = deepFreeze({ ...caveatSpecifications });\n\n    this.validatePermissionSpecifications(\n      permissionSpecifications,\n      this._caveatSpecifications,\n    );\n\n    this._permissionSpecifications = deepFreeze({\n      ...permissionSpecifications,\n    });\n\n    this.registerMessageHandlers();\n    this.createPermissionMiddleware = getPermissionMiddlewareFactory({\n      executeRestrictedMethod: this._executeRestrictedMethod.bind(this),\n      getRestrictedMethod: this.getRestrictedMethod.bind(this),\n      isUnrestrictedMethod: this.unrestrictedMethods.has.bind(\n        this.unrestrictedMethods,\n      ),\n    });\n  }\n\n  /**\n   * Gets a permission specification.\n   *\n   * @param targetName - The name of the permission specification to get.\n   * @returns The permission specification with the specified target name.\n   */\n  private getPermissionSpecification<\n    TargetName extends ControllerPermissionSpecification['targetName'],\n  >(\n    targetName: TargetName,\n  ): ExtractPermissionSpecification<\n    ControllerPermissionSpecification,\n    TargetName\n  > {\n    return this._permissionSpecifications[targetName];\n  }\n\n  /**\n   * Gets a caveat specification.\n   *\n   * @param caveatType - The type of the caveat specification to get.\n   * @returns The caveat specification with the specified type.\n   */\n  private getCaveatSpecification<\n    CaveatType extends ControllerCaveatSpecification['type'],\n  >(caveatType: CaveatType) {\n    return this._caveatSpecifications[caveatType];\n  }\n\n  /**\n   * Constructor helper for validating permission specifications.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param permissionSpecifications - The permission specifications passed to\n   * this controller's constructor.\n   * @param caveatSpecifications - The caveat specifications passed to this\n   * controller.\n   */\n  private validatePermissionSpecifications(\n    permissionSpecifications: PermissionSpecificationMap<ControllerPermissionSpecification>,\n    caveatSpecifications: CaveatSpecificationMap<ControllerCaveatSpecification>,\n  ) {\n    Object.entries<ControllerPermissionSpecification>(\n      permissionSpecifications,\n    ).forEach(\n      ([\n        targetName,\n        { permissionType, targetName: innerTargetName, allowedCaveats },\n      ]) => {\n        if (!permissionType || !hasProperty(PermissionType, permissionType)) {\n          throw new Error(`Invalid permission type: \"${permissionType}\"`);\n        }\n\n        if (!targetName) {\n          throw new Error(`Invalid permission target name: \"${targetName}\"`);\n        }\n\n        if (targetName !== innerTargetName) {\n          throw new Error(\n            `Invalid permission specification: target name \"${targetName}\" must match specification.targetName value \"${innerTargetName}\".`,\n          );\n        }\n\n        if (allowedCaveats) {\n          allowedCaveats.forEach((caveatType) => {\n            if (!hasProperty(caveatSpecifications, caveatType)) {\n              throw new UnrecognizedCaveatTypeError(caveatType);\n            }\n\n            const specification =\n              caveatSpecifications[\n                caveatType as ControllerCaveatSpecification['type']\n              ];\n            const isRestrictedMethodCaveat =\n              isRestrictedMethodCaveatSpecification(specification);\n\n            if (\n              (permissionType === PermissionType.RestrictedMethod &&\n                !isRestrictedMethodCaveat) ||\n              (permissionType === PermissionType.Endowment &&\n                isRestrictedMethodCaveat)\n            ) {\n              throw new CaveatSpecificationMismatchError(\n                specification,\n                permissionType,\n              );\n            }\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Constructor helper for registering the controller's messaging system\n   * actions.\n   */\n  private registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearPermissions` as const,\n      () => this.clearState(),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getEndowments` as const,\n      (origin: string, targetName: string, requestData?: unknown) =>\n        this.getEndowments(origin, targetName, requestData),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getSubjectNames` as const,\n      () => this.getSubjectNames(),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getPermissions` as const,\n      (origin: OriginString) => this.getPermissions(origin),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasPermission` as const,\n      (origin: OriginString, targetName: string) =>\n        this.hasPermission(origin, targetName),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasPermissions` as const,\n      (origin: OriginString) => this.hasPermissions(origin),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:grantPermissions` as const,\n      this.grantPermissions.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:requestPermissions` as const,\n      (subject: PermissionSubjectMetadata, permissions: RequestedPermissions) =>\n        this.requestPermissions(subject, permissions),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokeAllPermissions` as const,\n      (origin: OriginString) => this.revokeAllPermissions(origin),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokePermissionForAllSubjects` as const,\n      (\n        target: ExtractPermission<\n          ControllerPermissionSpecification,\n          ControllerCaveatSpecification\n        >['parentCapability'],\n      ) => this.revokePermissionForAllSubjects(target),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokePermissions` as const,\n      this.revokePermissions.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateCaveat` as const,\n      (origin, target, caveatType, caveatValue) => {\n        this.updateCaveat(\n          origin,\n          target,\n          caveatType as ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n          caveatValue,\n        );\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateCaveatIncremental` as const,\n      (origin, target, caveatType, addedCaveatValue) => {\n        this.updateCaveatIncremental(\n          origin,\n          target,\n          caveatType as ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n          addedCaveatValue,\n        );\n      },\n    );\n  }\n\n  /**\n   * Clears the state of the controller.\n   */\n  clearState(): void {\n    this.update((_draftState) => {\n      return {\n        ...getDefaultState<\n          ExtractPermission<\n            ControllerPermissionSpecification,\n            ControllerCaveatSpecification\n          >\n        >(),\n      };\n    });\n  }\n\n  /**\n   * Gets the permission specification corresponding to the given permission\n   * type and target name. Throws an error if the target name does not\n   * correspond to a permission, or if the specification is not of the\n   * given permission type.\n   *\n   * @template Type - The type of the permission specification to get.\n   * @param permissionType - The type of the permission specification to get.\n   * @param targetName - The name of the permission whose specification to get.\n   * @param requestingOrigin - The origin of the requesting subject, if any.\n   * Will be added to any thrown errors.\n   * @returns The specification object corresponding to the given type and\n   * target name.\n   */\n  private getTypedPermissionSpecification<Type extends PermissionType>(\n    permissionType: Type,\n    targetName: string,\n    requestingOrigin?: string,\n  ): ControllerPermissionSpecification & { permissionType: Type } {\n    const failureError =\n      permissionType === PermissionType.RestrictedMethod\n        ? methodNotFound(\n            targetName,\n            requestingOrigin ? { origin: requestingOrigin } : undefined,\n          )\n        : new EndowmentPermissionDoesNotExistError(\n            targetName,\n            requestingOrigin,\n          );\n\n    if (!this.targetExists(targetName)) {\n      throw failureError;\n    }\n\n    const specification = this.getPermissionSpecification(targetName);\n    if (!hasSpecificationType(specification, permissionType)) {\n      throw failureError;\n    }\n\n    return specification;\n  }\n\n  /**\n   * Gets the implementation of the specified restricted method.\n   *\n   * A JSON-RPC error is thrown if the method does not exist.\n   *\n   * @see {@link PermissionController.executeRestrictedMethod} and\n   * {@link PermissionController.createPermissionMiddleware} for internal usage.\n   * @param method - The name of the restricted method.\n   * @param origin - The origin associated with the request for the restricted\n   * method, if any.\n   * @returns The restricted method implementation.\n   */\n  getRestrictedMethod(\n    method: string,\n    origin?: string,\n  ): RestrictedMethod<RestrictedMethodParameters, Json> {\n    return this.getTypedPermissionSpecification(\n      PermissionType.RestrictedMethod,\n      method,\n      origin,\n    ).methodImplementation;\n  }\n\n  /**\n   * Gets a list of all origins of subjects.\n   *\n   * @returns The origins (i.e. IDs) of all subjects.\n   */\n  getSubjectNames(): OriginString[] {\n    return Object.keys(this.state.subjects);\n  }\n\n  /**\n   * Gets the permission for the specified target of the subject corresponding\n   * to the specified origin.\n   *\n   * @param origin - The origin of the subject.\n   * @param targetName - The method name as invoked by a third party (i.e., not\n   * a method key).\n   * @returns The permission if it exists, or undefined otherwise.\n   */\n  getPermission<\n    SubjectPermission extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >,\n  >(\n    origin: OriginString,\n    targetName: SubjectPermission['parentCapability'],\n  ): SubjectPermission | undefined {\n    return this.state.subjects[origin]?.permissions[targetName] as\n      | SubjectPermission\n      | undefined;\n  }\n\n  /**\n   * Gets all permissions for the specified subject, if any.\n   *\n   * @param origin - The origin of the subject.\n   * @returns The permissions of the subject, if any.\n   */\n  getPermissions(\n    origin: OriginString,\n  ):\n    | SubjectPermissions<\n        ValidPermission<string, ExtractCaveats<ControllerCaveatSpecification>>\n      >\n    | undefined {\n    return this.state.subjects[origin]?.permissions;\n  }\n\n  /**\n   * Checks whether the subject with the specified origin has the specified\n   * permission.\n   *\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @returns Whether the subject has the permission.\n   */\n  hasPermission(\n    origin: OriginString,\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n  ): boolean {\n    return Boolean(this.getPermission(origin, target));\n  }\n\n  /**\n   * Checks whether the subject with the specified origin has any permissions.\n   * Use this if you want to know if a subject \"exists\".\n   *\n   * @param origin - The origin of the subject to check.\n   * @returns Whether the subject has any permissions.\n   */\n  hasPermissions(origin: OriginString): boolean {\n    return Boolean(this.state.subjects[origin]);\n  }\n\n  /**\n   * Revokes all permissions from the specified origin.\n   *\n   * Throws an error of the origin has no permissions.\n   *\n   * @param origin - The origin whose permissions to revoke.\n   */\n  revokeAllPermissions(origin: OriginString): void {\n    this.update((draftState) => {\n      if (!draftState.subjects[origin]) {\n        throw new UnrecognizedSubjectError(origin);\n      }\n      delete draftState.subjects[origin];\n    });\n  }\n\n  /**\n   * Revokes the specified permission from the subject with the specified\n   * origin.\n   *\n   * Throws an error if the subject or the permission does not exist.\n   *\n   * @param origin - The origin of the subject whose permission to revoke.\n   * @param target - The target name of the permission to revoke.\n   */\n  revokePermission(\n    origin: OriginString,\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n  ): void {\n    this.revokePermissions({ [origin]: [target] });\n  }\n\n  /**\n   * Revokes the specified permissions from the specified subjects.\n   *\n   * Throws an error if any of the subjects or permissions do not exist.\n   *\n   * @param subjectsAndPermissions - An object mapping subject origins\n   * to arrays of permission target names to revoke.\n   */\n  revokePermissions(\n    subjectsAndPermissions: Record<\n      OriginString,\n      NonEmptyArray<\n        ExtractPermission<\n          ControllerPermissionSpecification,\n          ControllerCaveatSpecification\n        >['parentCapability']\n      >\n    >,\n  ): void {\n    this.update((draftState) => {\n      Object.keys(subjectsAndPermissions).forEach((origin) => {\n        if (!hasProperty(draftState.subjects, origin)) {\n          throw new UnrecognizedSubjectError(origin);\n        }\n\n        subjectsAndPermissions[origin].forEach((target) => {\n          const { permissions } = draftState.subjects[origin];\n          if (!hasProperty(permissions as Record<string, unknown>, target)) {\n            throw new PermissionDoesNotExistError(origin, target);\n          }\n\n          this.deletePermission(draftState.subjects, origin, target);\n        });\n      });\n    });\n  }\n\n  /**\n   * Revokes all permissions corresponding to the specified target for all subjects.\n   * Does nothing if no subjects or no such permission exists.\n   *\n   * @param target - The name of the target to revoke all permissions for.\n   */\n  revokePermissionForAllSubjects(\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n  ): void {\n    if (this.getSubjectNames().length === 0) {\n      return;\n    }\n\n    this.update((draftState) => {\n      Object.entries(draftState.subjects).forEach(([origin, subject]) => {\n        const { permissions } = subject;\n\n        if (hasProperty(permissions as Record<string, unknown>, target)) {\n          this.deletePermission(draftState.subjects, origin, target);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deletes the permission identified by the given origin and target. If the\n   * permission is the single remaining permission of its subject, the subject\n   * is also deleted.\n   *\n   * @param subjects - The draft permission controller subjects.\n   * @param origin - The origin of the subject associated with the permission\n   * to delete.\n   * @param target - The target name of the permission to delete.\n   */\n  private deletePermission(\n    subjects: Draft<PermissionControllerSubjects<PermissionConstraint>>,\n    origin: OriginString,\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n  ): void {\n    const { permissions } = subjects[origin];\n    if (Object.keys(permissions).length > 1) {\n      delete permissions[target];\n    } else {\n      delete subjects[origin];\n    }\n  }\n\n  /**\n   * Checks whether the permission of the subject corresponding to the given\n   * origin has a caveat of the specified type.\n   *\n   * Throws an error if the subject does not have a permission with the\n   * specified target name.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to check for.\n   * @returns Whether the permission has the specified caveat.\n   */\n  hasCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(origin: OriginString, target: TargetName, caveatType: CaveatType): boolean {\n    return Boolean(this.getCaveat(origin, target, caveatType));\n  }\n\n  /**\n   * Gets the caveat of the specified type, if any, for the permission of\n   * the subject corresponding to the given origin.\n   *\n   * Throws an error if the subject does not have a permission with the\n   * specified target name.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to get.\n   * @returns The caveat, or `undefined` if no such caveat exists.\n   */\n  getCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n  ): ExtractCaveat<ControllerCaveatSpecification, CaveatType> | undefined {\n    const permission = this.getPermission(origin, target);\n    if (!permission) {\n      throw new PermissionDoesNotExistError(origin, target);\n    }\n\n    return findCaveat(permission, caveatType) as\n      | ExtractCaveat<ControllerCaveatSpecification, CaveatType>\n      | undefined;\n  }\n\n  /**\n   * Adds a caveat of the specified type, with the specified caveat value, to\n   * the permission corresponding to the given subject origin and permission\n   * target.\n   *\n   * For modifying existing caveats, use\n   * {@link PermissionController.updateCaveat}.\n   *\n   * Throws an error if no such permission exists, or if the caveat already\n   * exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to add.\n   * @param caveatValue - The value of the caveat to add.\n   */\n  addCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n    caveatValue: ExtractCaveatValue<ControllerCaveatSpecification, CaveatType>,\n  ): void {\n    if (this.hasCaveat(origin, target, caveatType)) {\n      throw new CaveatAlreadyExistsError(origin, target, caveatType);\n    }\n\n    this.setCaveat(origin, target, caveatType, caveatValue);\n  }\n\n  /**\n   * Updates the value of the caveat of the specified type belonging to the\n   * permission corresponding to the given subject origin and permission\n   * target.\n   *\n   * For adding new caveats, use\n   * {@link PermissionController.addCaveat}.\n   *\n   * Throws an error if no such permission or caveat exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to update.\n   * @param caveatValue - The new value of the caveat.\n   */\n  updateCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n    CaveatValue extends ExtractCaveatValue<\n      ControllerCaveatSpecification,\n      CaveatType\n    >,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n    caveatValue: CaveatValue,\n  ): void {\n    if (!this.hasCaveat(origin, target, caveatType)) {\n      throw new CaveatDoesNotExistError(origin, target, caveatType);\n    }\n\n    this.setCaveat(origin, target, caveatType, caveatValue);\n  }\n\n  /**\n   * TODO:cm\n   * Updates the value of the caveat of the specified type belonging to the\n   * permission corresponding to the given subject origin and permission\n   * target.\n   *\n   * For adding new caveats, use\n   * {@link PermissionController.addCaveat}.\n   *\n   * Throws an error if no such permission or caveat exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to update.\n   * @param addedCaveatValue - The value to merge with the existing caveat's value.\n   */\n  updateCaveatIncremental<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n    CaveatValue extends ExtractCaveatValue<\n      ControllerCaveatSpecification,\n      CaveatType\n    >,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n    addedCaveatValue: CaveatValue,\n  ): void {\n    const existingCaveat = this.getCaveat(origin, target, caveatType);\n    if (!existingCaveat) {\n      throw new CaveatDoesNotExistError(origin, target, caveatType);\n    }\n\n    const { merger } = this.getCaveatSpecification(caveatType);\n    if (!merger) {\n      throw new CaveatMergerDoesNotExistError(caveatType);\n    }\n\n    this.setCaveat(\n      origin,\n      target,\n      caveatType,\n      merger(existingCaveat.value, addedCaveatValue),\n    );\n  }\n\n  /**\n   * Sets the specified caveat on the specified permission. Overwrites existing\n   * caveats of the same type in-place (preserving array order), and adds the\n   * caveat to the end of the array otherwise.\n   *\n   * Throws an error if the permission does not exist or fails to validate after\n   * its caveats have been modified.\n   *\n   * @see {@link PermissionController.addCaveat}\n   * @see {@link PermissionController.updateCaveat}\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to set.\n   * @param caveatValue - The value of the caveat to set.\n   */\n  private setCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n    caveatValue: ExtractCaveatValue<ControllerCaveatSpecification, CaveatType>,\n  ): void {\n    this.update((draftState) => {\n      const subject = draftState.subjects[origin];\n\n      // Unreachable because `hasCaveat` is always called before this, and it\n      // throws if permissions are missing. TypeScript needs this, however.\n      /* istanbul ignore if */\n      if (!subject) {\n        throw new UnrecognizedSubjectError(origin);\n      }\n\n      const permission = subject.permissions[target];\n\n      /* istanbul ignore if: practically impossible, but TypeScript wants it */\n      if (!permission) {\n        throw new PermissionDoesNotExistError(origin, target);\n      }\n\n      const caveat = {\n        type: caveatType,\n        value: caveatValue,\n      };\n      this.validateCaveat(caveat, origin, target);\n\n      if (permission.caveats) {\n        const caveatIndex = permission.caveats.findIndex(\n          (existingCaveat) => existingCaveat.type === caveat.type,\n        );\n\n        if (caveatIndex === -1) {\n          permission.caveats.push(caveat);\n        } else {\n          permission.caveats.splice(caveatIndex, 1, caveat);\n        }\n      } else {\n        // At this point, we don't know if the specific permission is allowed\n        // to have caveats, but it should be impossible to call this method\n        // for a permission that may not have any caveats. If all else fails,\n        // the permission validator is also called.\n        // @ts-expect-error See above comment\n        permission.caveats = [caveat];\n      }\n\n      this.validateModifiedPermission(permission, origin);\n    });\n  }\n\n  /**\n   * Updates all caveats with the specified type for all subjects and\n   * permissions by applying the specified mutator function to them.\n   *\n   * ATTN: Permissions can be revoked entirely by the action of this method,\n   * read on for details.\n   *\n   * Caveat mutators are functions that receive a caveat value and return a\n   * tuple consisting of a {@link CaveatMutatorOperation} and, optionally, a new\n   * value to update the existing caveat with.\n   *\n   * For each caveat, depending on the mutator result, this method will:\n   * - Do nothing ({@link CaveatMutatorOperation.noop})\n   * - Update the value of the caveat ({@link CaveatMutatorOperation.updateValue}). The caveat specification validator, if any, will be called after updating the value.\n   * - Delete the caveat ({@link CaveatMutatorOperation.deleteCaveat}). The permission specification validator, if any, will be called after deleting the caveat.\n   * - Revoke the parent permission ({@link CaveatMutatorOperation.revokePermission})\n   *\n   * This method throws if the validation of any caveat or permission fails.\n   *\n   * @param targetCaveatType - The type of the caveats to update.\n   * @param mutator - The mutator function which will be applied to all caveat\n   * values.\n   */\n  updatePermissionsByCaveat<\n    CaveatType extends ExtractCaveats<ControllerCaveatSpecification>['type'],\n    TargetCaveat extends ExtractCaveat<\n      ControllerCaveatSpecification,\n      CaveatType\n    >,\n  >(targetCaveatType: CaveatType, mutator: CaveatMutator<TargetCaveat>): void {\n    if (Object.keys(this.state.subjects).length === 0) {\n      return;\n    }\n\n    this.update((draftState) => {\n      Object.values(draftState.subjects).forEach((subject) => {\n        Object.values(subject.permissions).forEach((permission) => {\n          const { caveats } = permission;\n          const targetCaveat = caveats?.find(\n            ({ type }) => type === targetCaveatType,\n          );\n          if (!targetCaveat) {\n            return;\n          }\n\n          // The mutator may modify the caveat value in place, and must always\n          // return a valid mutation result.\n          const mutatorResult = mutator(targetCaveat.value);\n          const { operation } = mutatorResult;\n          switch (operation) {\n            case CaveatMutatorOperation.noop:\n              break;\n\n            case CaveatMutatorOperation.updateValue:\n              // Typecast: `Mutable` is used here to assign to a readonly\n              // property. `targetConstraint` should already be mutable because\n              // it's part of a draft, but for some reason it's not. We can't\n              // use the more-correct `Draft` type here either because it\n              // results in an error.\n              (targetCaveat as Mutable<CaveatConstraint, 'value'>).value =\n                mutatorResult.value;\n\n              this.validateCaveat(\n                targetCaveat,\n                subject.origin,\n                permission.parentCapability,\n              );\n              break;\n\n            case CaveatMutatorOperation.deleteCaveat:\n              this.deleteCaveat(permission, targetCaveatType, subject.origin);\n              break;\n\n            case CaveatMutatorOperation.revokePermission:\n              this.deletePermission(\n                draftState.subjects,\n                subject.origin,\n                permission.parentCapability,\n              );\n              break;\n\n            default: {\n              // Overriding as `never` is the expected result of exhaustiveness checking,\n              // and is intended to represent unchecked exception cases.\n              // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n              throw new Error(`Unrecognized mutation result: \"${operation}\"`);\n            }\n          }\n        });\n      });\n    });\n  }\n\n  /**\n   * Removes the caveat of the specified type from the permission corresponding\n   * to the given subject origin and target name.\n   *\n   * Throws an error if no such permission or caveat exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to remove.\n   */\n  removeCaveat<\n    TargetName extends ControllerPermissionSpecification['targetName'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(origin: OriginString, target: TargetName, caveatType: CaveatType): void {\n    this.update((draftState) => {\n      const permission = draftState.subjects[origin]?.permissions[target];\n      if (!permission) {\n        throw new PermissionDoesNotExistError(origin, target);\n      }\n\n      if (!permission.caveats) {\n        throw new CaveatDoesNotExistError(origin, target, caveatType);\n      }\n\n      this.deleteCaveat(permission, caveatType, origin);\n    });\n  }\n\n  /**\n   * Deletes the specified caveat from the specified permission. If no caveats\n   * remain after deletion, the permission's caveat property is set to `null`.\n   * The permission is validated after being modified.\n   *\n   * Throws an error if the permission does not have a caveat with the specified\n   * type.\n   *\n   * @param permission - The permission whose caveat to delete.\n   * @param caveatType - The type of the caveat to delete.\n   * @param origin - The origin the permission subject.\n   */\n  private deleteCaveat<\n    CaveatType extends ExtractCaveats<ControllerCaveatSpecification>['type'],\n  >(\n    permission: Draft<PermissionConstraint>,\n    caveatType: CaveatType,\n    origin: OriginString,\n  ): void {\n    /* istanbul ignore if: not possible in our usage */\n    if (!permission.caveats) {\n      throw new CaveatDoesNotExistError(\n        origin,\n        permission.parentCapability,\n        caveatType,\n      );\n    }\n\n    const caveatIndex = permission.caveats.findIndex(\n      (existingCaveat) => existingCaveat.type === caveatType,\n    );\n\n    if (caveatIndex === -1) {\n      throw new CaveatDoesNotExistError(\n        origin,\n        permission.parentCapability,\n        caveatType,\n      );\n    }\n\n    if (permission.caveats.length === 1) {\n      permission.caveats = null;\n    } else {\n      permission.caveats.splice(caveatIndex, 1);\n    }\n\n    this.validateModifiedPermission(permission, origin);\n  }\n\n  /**\n   * Validates the specified modified permission. Should **always** be invoked\n   * on a permission after its caveats have been modified.\n   *\n   * Just like {@link PermissionController.validatePermission}, except that the\n   * corresponding target name and specification are retrieved first, and an\n   * error is thrown if the target name does not exist.\n   *\n   * @param permission - The modified permission to validate.\n   * @param origin - The origin associated with the permission.\n   */\n  private validateModifiedPermission(\n    permission: Draft<PermissionConstraint>,\n    origin: OriginString,\n  ): void {\n    /* istanbul ignore if: this should be impossible */\n    if (!this.targetExists(permission.parentCapability)) {\n      throw new Error(\n        `Fatal: Existing permission target \"${permission.parentCapability}\" has no specification.`,\n      );\n    }\n\n    this.validatePermission(\n      this.getPermissionSpecification(permission.parentCapability),\n      permission as PermissionConstraint,\n      origin,\n    );\n  }\n\n  /**\n   * Verifies the existence the specified permission target, i.e. whether it has\n   * a specification.\n   *\n   * @param target - The requested permission target.\n   * @returns Whether the permission target exists.\n   */\n  private targetExists(\n    target: string,\n  ): target is ControllerPermissionSpecification['targetName'] {\n    return hasProperty(this._permissionSpecifications, target);\n  }\n\n  /**\n   * Grants _approved_ permissions to the specified subject. Every permission and\n   * caveat is stringently validated – including by calling every specification\n   * validator – and an error is thrown if any validation fails.\n   *\n   * ATTN: This method does **not** prompt the user for approval. Use consent must\n   * first be obtained through some other means.\n   *\n   * @see {@link PermissionController.requestPermissions} For initiating a\n   * permissions request requiring user approval.\n   * @param options - Options bag.\n   * @param options.approvedPermissions - The requested permissions approved by\n   * the user.\n   * @param options.requestData - Permission request data. Passed to permission\n   * factory functions.\n   * @param options.preserveExistingPermissions - Whether to preserve the\n   * subject's existing permissions.\n   * @param options.subject - The subject to grant permissions to.\n   * @returns The granted permissions.\n   */\n  grantPermissions({\n    approvedPermissions,\n    requestData,\n    preserveExistingPermissions = true,\n    subject,\n  }: {\n    approvedPermissions: RequestedPermissions;\n    subject: PermissionSubjectMetadata;\n    preserveExistingPermissions?: boolean;\n    requestData?: Record<string, unknown>;\n  }): SubjectPermissions<\n    ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >\n  > {\n    const { origin } = subject;\n\n    if (!origin || typeof origin !== 'string') {\n      throw new InvalidSubjectIdentifierError(origin);\n    }\n\n    const permissions = (\n      preserveExistingPermissions\n        ? {\n            ...this.getPermissions(origin),\n          }\n        : {}\n    ) as SubjectPermissions<\n      ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >\n    >;\n\n    for (const [requestedTarget, approvedPermission] of Object.entries(\n      approvedPermissions,\n    )) {\n      if (!this.targetExists(requestedTarget)) {\n        throw methodNotFound(requestedTarget);\n      }\n\n      if (\n        approvedPermission.parentCapability !== undefined &&\n        requestedTarget !== approvedPermission.parentCapability\n      ) {\n        throw new InvalidApprovedPermissionError(\n          origin,\n          requestedTarget,\n          approvedPermission,\n        );\n      }\n\n      // We have verified that the target exists, and reassign it to change its\n      // type.\n      const targetName = requestedTarget as ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >['parentCapability'];\n      const specification = this.getPermissionSpecification(targetName);\n\n      // The requested caveats are validated here.\n      const caveats = this.constructCaveats(\n        origin,\n        targetName,\n        approvedPermission.caveats,\n      );\n\n      const permissionOptions = {\n        caveats,\n        invoker: origin,\n        target: targetName,\n      };\n\n      let permission: ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >;\n      if (specification.factory) {\n        permission = specification.factory(permissionOptions, requestData);\n\n        // Full caveat and permission validation is performed here since the\n        // factory function can arbitrarily modify the entire permission object,\n        // including its caveats.\n        this.validatePermission(specification, permission, origin);\n      } else {\n        permission = constructPermission(permissionOptions);\n\n        // We do not need to validate caveats in this case, because the plain\n        // permission constructor function does not modify the caveats, which\n        // were already validated by `constructCaveats` above.\n        this.validatePermission(specification, permission, origin, {\n          invokePermissionValidator: true,\n          performCaveatValidation: false,\n        });\n      }\n      permissions[targetName] = permission;\n    }\n\n    this.setValidatedPermissions(origin, permissions);\n    return permissions;\n  }\n\n  /**\n   * Validates the specified permission by:\n   * - Ensuring that if `subjectTypes` is specified, the subject requesting the permission is of a type in the list.\n   * - Ensuring that its `caveats` property is either `null` or a non-empty array.\n   * - Ensuring that it only includes caveats allowed by its specification.\n   * - Ensuring that it includes no duplicate caveats (by caveat type).\n   * - Validating each caveat object, if `performCaveatValidation` is `true`.\n   * - Calling the validator of its specification, if one exists and `invokePermissionValidator` is `true`.\n   *\n   * An error is thrown if validation fails.\n   *\n   * @param specification - The specification of the permission.\n   * @param permission - The permission to validate.\n   * @param origin - The origin associated with the permission.\n   * @param validationOptions - Validation options.\n   * @param validationOptions.invokePermissionValidator - Whether to invoke the\n   * permission's consumer-specified validator function, if any.\n   * @param validationOptions.performCaveatValidation - Whether to invoke\n   * {@link PermissionController.validateCaveat} on each of the permission's\n   * caveats.\n   */\n  private validatePermission(\n    specification: PermissionSpecificationConstraint,\n    permission: PermissionConstraint,\n    origin: OriginString,\n    { invokePermissionValidator, performCaveatValidation } = {\n      invokePermissionValidator: true,\n      performCaveatValidation: true,\n    },\n  ): void {\n    const { allowedCaveats, validator, targetName } = specification;\n\n    if (\n      specification.subjectTypes?.length &&\n      specification.subjectTypes.length > 0\n    ) {\n      const metadata = this.messagingSystem.call(\n        'SubjectMetadataController:getSubjectMetadata',\n        origin,\n      );\n\n      if (\n        !metadata ||\n        metadata.subjectType === null ||\n        !specification.subjectTypes.includes(metadata.subjectType)\n      ) {\n        throw specification.permissionType === PermissionType.RestrictedMethod\n          ? methodNotFound(targetName, { origin })\n          : new EndowmentPermissionDoesNotExistError(targetName, origin);\n      }\n    }\n\n    if (hasProperty(permission, 'caveats')) {\n      const { caveats } = permission;\n\n      if (caveats !== null && !(Array.isArray(caveats) && caveats.length > 0)) {\n        throw new InvalidCaveatsPropertyError(origin, targetName, caveats);\n      }\n\n      const seenCaveatTypes = new Set<string>();\n      caveats?.forEach((caveat) => {\n        if (performCaveatValidation) {\n          this.validateCaveat(caveat, origin, targetName);\n        }\n\n        if (!allowedCaveats?.includes(caveat.type)) {\n          throw new ForbiddenCaveatError(caveat.type, origin, targetName);\n        }\n\n        if (seenCaveatTypes.has(caveat.type)) {\n          throw new DuplicateCaveatError(caveat.type, origin, targetName);\n        }\n        seenCaveatTypes.add(caveat.type);\n      });\n    }\n\n    if (invokePermissionValidator && validator) {\n      validator(permission, origin, targetName);\n    }\n  }\n\n  /**\n   * Assigns the specified permissions to the subject with the given origin.\n   * Overwrites all existing permissions, and creates a subject entry if it\n   * doesn't already exist.\n   *\n   * ATTN: Assumes that the new permissions have been validated.\n   *\n   * @param origin - The origin of the grantee subject.\n   * @param permissions - The new permissions for the grantee subject.\n   */\n  private setValidatedPermissions(\n    origin: OriginString,\n    permissions: Record<\n      string,\n      ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >\n    >,\n  ): void {\n    this.update((draftState) => {\n      if (!draftState.subjects[origin]) {\n        draftState.subjects[origin] = { origin, permissions: {} };\n      }\n\n      draftState.subjects[origin].permissions = castDraft(permissions);\n    });\n  }\n\n  /**\n   * Validates the requested caveats for the permission of the specified\n   * subject origin and target name and returns the validated caveat array.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param origin - The origin of the permission subject.\n   * @param target - The permission target name.\n   * @param requestedCaveats - The requested caveats to construct.\n   * @returns The constructed caveats.\n   */\n  private constructCaveats(\n    origin: OriginString,\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    requestedCaveats?: unknown[] | null,\n  ): NonEmptyArray<ExtractCaveats<ControllerCaveatSpecification>> | undefined {\n    const caveatArray = requestedCaveats?.map((requestedCaveat) => {\n      this.validateCaveat(requestedCaveat, origin, target);\n\n      // Reassign so that we have a fresh object.\n      const { type, value } = requestedCaveat as CaveatConstraint;\n      return { type, value } as ExtractCaveats<ControllerCaveatSpecification>;\n    });\n\n    return caveatArray && isNonEmptyArray(caveatArray)\n      ? caveatArray\n      : undefined;\n  }\n\n  /**\n   * This methods validates that the specified caveat is an object with the\n   * expected properties and types. It also ensures that a caveat specification\n   * exists for the requested caveat type, and calls the specification\n   * validator, if it exists, on the caveat object.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param caveat - The caveat object to validate.\n   * @param origin - The origin associated with the subject of the parent\n   * permission.\n   * @param target - The target name associated with the parent permission.\n   */\n  private validateCaveat(\n    caveat: unknown,\n    origin: OriginString,\n    target: string,\n  ): void {\n    if (!isPlainObject(caveat)) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw new InvalidCaveatError(caveat, origin, target);\n    }\n\n    if (Object.keys(caveat).length !== 2) {\n      throw new InvalidCaveatFieldsError(caveat, origin, target);\n    }\n\n    if (typeof caveat.type !== 'string') {\n      throw new InvalidCaveatTypeError(caveat, origin, target);\n    }\n\n    const specification = this.getCaveatSpecification(caveat.type);\n    if (!specification) {\n      throw new UnrecognizedCaveatTypeError(caveat.type, origin, target);\n    }\n\n    if (!hasProperty(caveat, 'value') || caveat.value === undefined) {\n      throw new CaveatMissingValueError(caveat, origin, target);\n    }\n\n    if (!isValidJson(caveat.value)) {\n      throw new CaveatInvalidJsonError(caveat, origin, target);\n    }\n\n    // Typecast: TypeScript still believes that the caveat is a PlainObject.\n    specification.validator?.(caveat as CaveatConstraint, origin, target);\n  }\n\n  /**\n   * Initiates a permission request that requires user approval.\n   *\n   * Either this or {@link PermissionController.requestPermissionsIncremental}\n   * should always be used to grant additional permissions to a subject,\n   * unless user approval has been obtained through some other means.\n   *\n   * Permissions are validated at every step of the approval process, and this\n   * method will reject if validation fails.\n   *\n   * @see {@link ApprovalController} For the user approval logic.\n   * @see {@link PermissionController.acceptPermissionsRequest} For the method\n   * that _accepts_ the request and resolves the user approval promise.\n   * @see {@link PermissionController.rejectPermissionsRequest} For the method\n   * that _rejects_ the request and the user approval promise.\n   * @param subject - The grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   * @param options - Additional options.\n   * @param options.id - The id of the permissions request. Defaults to a unique\n   * id.\n   * @param options.preserveExistingPermissions - Whether to preserve the\n   * subject's existing permissions. Defaults to `true`.\n   * @param options.metadata - Additional metadata about the permission request.\n   * @returns The granted permissions and request metadata.\n   */\n  async requestPermissions(\n    subject: PermissionSubjectMetadata,\n    requestedPermissions: RequestedPermissions,\n    options: {\n      id?: string;\n      preserveExistingPermissions?: boolean;\n      metadata?: Record<string, Json>;\n    } = {},\n  ): Promise<\n    [\n      SubjectPermissions<\n        ExtractPermission<\n          ControllerPermissionSpecification,\n          ControllerCaveatSpecification\n        >\n      >,\n      ApprovedPermissionsMetadata,\n    ]\n  > {\n    const { origin } = subject;\n    const { id = nanoid(), preserveExistingPermissions = true } = options;\n    this.validateRequestedPermissions(origin, requestedPermissions);\n\n    const metadata = {\n      ...options.metadata,\n      id,\n      origin,\n    };\n\n    const permissionsRequest = {\n      metadata,\n      permissions: requestedPermissions,\n    };\n\n    const approvedRequest = await this.requestUserApproval(permissionsRequest);\n    return await this.#handleApprovedPermissions({\n      subject,\n      metadata,\n      preserveExistingPermissions,\n      approvedRequest,\n    });\n  }\n\n  /**\n   * Initiates an incremental permission request that prompts for user approval.\n   * Incremental permission requests allow the caller to replace existing and/or\n   * add brand new permissions and caveats for the specified subject.\n   *\n   * Incremental permission request are merged with the subject's existing permissions\n   * through a right-biased union, where the incremental permission are the right-hand\n   * side of the merger. If both sides of the merger specify the same caveats for a\n   * given permission, the caveats are merged using their specification's caveat merger\n   * property.\n   *\n   * Either this or {@link PermissionController.requestPermissions} should\n   * always be used to grant additional permissions to a subject, unless user\n   * approval has been obtained through some other means.\n   *\n   * Permissions are validated at every step of the approval process, and this\n   * method will reject if validation fails.\n   *\n   * @see {@link ApprovalController} For the user approval logic.\n   * @see {@link PermissionController.acceptPermissionsRequest} For the method\n   * that _accepts_ the request and resolves the user approval promise.\n   * @see {@link PermissionController.rejectPermissionsRequest} For the method\n   * that _rejects_ the request and the user approval promise.\n   * @param subject - The grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   * @param options - Additional options.\n   * @param options.id - The id of the permissions request. Defaults to a unique\n   * id.\n   * @param options.metadata - Additional metadata about the permission request.\n   * @returns The granted permissions and request metadata.\n   */\n  async requestPermissionsIncremental(\n    subject: PermissionSubjectMetadata,\n    requestedPermissions: RequestedPermissions,\n    options: {\n      id?: string;\n      metadata?: Record<string, Json>;\n    } = {},\n  ) {\n    const { origin } = subject;\n    const { id = nanoid() } = options;\n    this.validateRequestedPermissions(origin, requestedPermissions);\n\n    const [newPermissions, permissionsDiff] = this.#mergeIncrementalPermissions(\n      origin,\n      requestedPermissions,\n    );\n\n    try {\n      // It does not spark joy to run this validation again after the merger operation.\n      // But, doing something about it is probably not worth it, especially considering\n      // that the worst-case scenario for validation is precisely as bad as this.\n      this.validateRequestedPermissions(origin, newPermissions);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new InvalidMergedPermissionsError(origin, error, permissionsDiff);\n      }\n      /* istanbul ignore next: This should be impossible */\n      throw internalError('Unrecognized error type', { error });\n    }\n\n    const metadata = {\n      ...options.metadata,\n      id,\n      origin,\n    };\n\n    const permissionsRequest = {\n      metadata,\n      permissions: newPermissions,\n      diff: permissionsDiff,\n    };\n\n    const approvedRequest = await this.requestUserApproval(permissionsRequest);\n    return await this.#handleApprovedPermissions({\n      subject,\n      metadata,\n      preserveExistingPermissions: false,\n      approvedRequest,\n    });\n  }\n\n  /**\n   * Validates requested permissions. Throws if validation fails.\n   *\n   * This method ensures that the requested permissions are a properly\n   * formatted {@link RequestedPermissions} object, and performs the same\n   * validation as {@link PermissionController.grantPermissions}, except that\n   * consumer-specified permission validator functions are not called, since\n   * they are only called on fully constructed, approved permissions that are\n   * otherwise completely valid.\n   *\n   * Unrecognzied properties on requested permissions are ignored.\n   *\n   * @param origin - The origin of the grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   */\n  private validateRequestedPermissions(\n    origin: OriginString,\n    requestedPermissions: unknown,\n  ): void {\n    if (!isPlainObject(requestedPermissions)) {\n      throw invalidParams({\n        message: `Requested permissions for origin \"${origin}\" is not a plain object.`,\n        data: { origin, requestedPermissions },\n      });\n    }\n\n    if (Object.keys(requestedPermissions).length === 0) {\n      throw invalidParams({\n        message: `Permissions request for origin \"${origin}\" contains no permissions.`,\n        data: { requestedPermissions },\n      });\n    }\n\n    for (const targetName of Object.keys(requestedPermissions)) {\n      const permission = requestedPermissions[targetName];\n\n      if (!this.targetExists(targetName)) {\n        throw methodNotFound(targetName, { origin, requestedPermissions });\n      }\n\n      if (\n        !isPlainObject(permission) ||\n        (permission.parentCapability !== undefined &&\n          targetName !== permission.parentCapability)\n      ) {\n        throw invalidParams({\n          message: `Permissions request for origin \"${origin}\" contains invalid requested permission(s).`,\n          data: { origin, requestedPermissions },\n        });\n      }\n\n      // Here we validate the permission without invoking its validator, if any.\n      // The validator will be invoked after the permission has been approved.\n      this.validatePermission(\n        this.getPermissionSpecification(targetName),\n        // Typecast: The permission is still a \"PlainObject\" here.\n        permission as PermissionConstraint,\n        origin,\n        { invokePermissionValidator: false, performCaveatValidation: true },\n      );\n    }\n  }\n\n  /**\n   * Merges a set of incrementally requested permissions into the existing permissions of\n   * the requesting subject. The merge is a right-biased union, where the existing\n   * permissions are the left-hand side, and the incrementally requested permissions are\n   * the right-hand side.\n   *\n   * @param origin - The origin of the subject.\n   * @param incrementalRequestedPermissions - The requested permissions to merge.\n   * @returns The merged permissions and the resulting diff.\n   */\n  #mergeIncrementalPermissions(\n    origin: OriginString,\n    incrementalRequestedPermissions: RequestedPermissions,\n  ) {\n    const [newPermissions, permissionsDiff] = produceWithPatches(\n      this.getPermissions(origin) ?? {},\n      (existingPermissions) => {\n        const leftPermissions = existingPermissions as RequestedPermissions;\n\n        Object.entries(incrementalRequestedPermissions).forEach(\n          ([targetName, rightPermission]) => {\n            if (\n              !hasProperty(\n                // We type-guard the targetName key out of existence without this cast.\n                leftPermissions as Record<string, unknown>,\n                targetName,\n              )\n            ) {\n              leftPermissions[targetName] = rightPermission;\n            } else {\n              const leftPermission = leftPermissions[targetName];\n              leftPermissions[targetName] = this.#mergePermission(\n                leftPermission,\n                rightPermission,\n              );\n            }\n          },\n        );\n      },\n    );\n\n    return [newPermissions, permissionsDiff as PermissionsDiff] as const;\n  }\n\n  /**\n   * Performs a right-biased union between two permissions. The task of merging caveats\n   * with the same type between the two permissions is delegated to the corresponding\n   * caveat's merger implementation.\n   *\n   * Throws if the left-hand and right-hand permissions both have a caveat whose\n   * specification does not provide a caveat merger function.\n   *\n   * @param leftPermission - The left-hand permission to merge.\n   * @param rightPermission - The right-hand permission to merge.\n   * @returns The merged permission.\n   */\n  #mergePermission(\n    leftPermission: Partial<PermissionConstraint>,\n    rightPermission: Partial<PermissionConstraint>,\n  ) {\n    const { caveatPairs, uniqueCaveats } = this.#collectUniqueAndPairedCaveats(\n      leftPermission,\n      rightPermission,\n    );\n\n    const mergedCaveats = caveatPairs.map(([leftCaveat, rightCaveat]) => {\n      const { merger } = this.getCaveatSpecification(leftCaveat.type);\n      if (!merger) {\n        throw new CaveatMergerDoesNotExistError(leftCaveat.type);\n      }\n\n      return merger(leftCaveat, rightCaveat);\n    });\n\n    const allCaveats = [...mergedCaveats, ...uniqueCaveats];\n\n    return {\n      ...leftPermission,\n      ...rightPermission,\n      ...(allCaveats.length > 0\n        ? { caveats: allCaveats as NonEmptyArray<CaveatConstraint> }\n        : {}),\n    };\n  }\n\n  /**\n   * Given two permission objects, computes two sets:\n   * - The set of caveats that are unique to either permission.\n   * - The set of caveat pairs that are common to both permissions.\n   *\n   * Assumes that the caveat arrays of both permissions do not contain duplicate\n   * caveats.\n   *\n   * @param leftPermission - The left-hand permission.\n   * @param rightPermission - The right-hand permission.\n   * @returns The sets of caveat pairs and unique caveats.\n   */\n  #collectUniqueAndPairedCaveats(\n    leftPermission: Partial<PermissionConstraint>,\n    rightPermission: Partial<PermissionConstraint>,\n  ) {\n    const leftCaveats = leftPermission.caveats ?? [];\n    const rightCaveats = rightPermission.caveats ?? [];\n    const uniqueCaveats: CaveatConstraint[] = [];\n    const caveatPairs: [CaveatConstraint, CaveatConstraint][] = [];\n\n    // Collect unique caveats and caveat pairs\n    leftCaveats.forEach((leftCaveat) => {\n      const rightCaveatIndex = rightCaveats.findIndex(\n        (rightCaveat) => rightCaveat.type === leftCaveat.type,\n      );\n\n      if (rightCaveatIndex === -1) {\n        uniqueCaveats.push(leftCaveat);\n      } else {\n        caveatPairs.push([leftCaveat, rightCaveats[rightCaveatIndex]]);\n        rightCaveats.splice(rightCaveatIndex, 1);\n      }\n    });\n\n    uniqueCaveats.push(...rightCaveats);\n\n    return { caveatPairs, uniqueCaveats };\n  }\n\n  /**\n   * Adds a request to the {@link ApprovalController} using the\n   * {@link AddApprovalRequest} action. Also validates the resulting approved\n   * permissions request, and throws an error if validation fails.\n   *\n   * @param permissionsRequest - The permissions request object.\n   * @returns The approved permissions request object.\n   */\n  private async requestUserApproval(permissionsRequest: PermissionsRequest) {\n    const { origin, id } = permissionsRequest.metadata;\n    const approvedRequest = await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        requestData: permissionsRequest,\n        type: MethodNames.requestPermissions,\n      },\n      true,\n    );\n\n    this.validateApprovedPermissions(approvedRequest, { id, origin });\n    return approvedRequest as PermissionsRequest;\n  }\n\n  /**\n   * Accepts a permissions request that has been approved by the user. This\n   * method should be called after the user has approved the request and the\n   * {@link ApprovalController} has resolved the user approval promise.\n   *\n   * @param options - Options bag.\n   * @param options.subject - The subject to grant permissions to.\n   * @param options.metadata - The metadata of the approved permissions request.\n   * @param options.preserveExistingPermissions - Whether to preserve the\n   * subject's existing permissions.\n   * @param options.approvedRequest - The approved permissions request to handle.\n   * @returns The granted permissions and request metadata.\n   */\n  async #handleApprovedPermissions({\n    subject,\n    metadata,\n    preserveExistingPermissions,\n    approvedRequest,\n  }: {\n    subject: PermissionSubjectMetadata;\n    metadata: PermissionsRequest['metadata'];\n    preserveExistingPermissions: boolean;\n    approvedRequest: PermissionsRequest;\n  }): Promise<\n    [ReturnType<typeof this.grantPermissions>, ApprovedPermissionsMetadata]\n  > {\n    const { permissions: approvedPermissions, ...requestData } =\n      approvedRequest;\n    const approvedMetadata: ApprovedPermissionsMetadata = { ...metadata };\n\n    const sideEffects = this.getSideEffects(approvedPermissions);\n    if (Object.values(sideEffects.permittedHandlers).length > 0) {\n      const sideEffectsData = await this.executeSideEffects(\n        sideEffects,\n        approvedRequest,\n      );\n\n      approvedMetadata.data = Object.keys(sideEffects.permittedHandlers).reduce(\n        (acc, permission, i) => ({ [permission]: sideEffectsData[i], ...acc }),\n        {},\n      );\n    }\n\n    return [\n      this.grantPermissions({\n        subject,\n        approvedPermissions,\n        preserveExistingPermissions,\n        requestData,\n      }),\n      approvedMetadata,\n    ];\n  }\n\n  /**\n   * Reunites all the side-effects (onPermitted and onFailure) of the requested permissions inside a record of arrays.\n   *\n   * @param permissions - The approved permissions.\n   * @returns The {@link SideEffects} object containing the handlers arrays.\n   */\n  private getSideEffects(permissions: RequestedPermissions) {\n    return Object.keys(permissions).reduce<SideEffects>(\n      (sideEffectList, targetName) => {\n        if (this.targetExists(targetName)) {\n          const specification = this.getPermissionSpecification(targetName);\n\n          if (specification.sideEffect) {\n            sideEffectList.permittedHandlers[targetName] =\n              specification.sideEffect.onPermitted;\n\n            if (specification.sideEffect.onFailure) {\n              sideEffectList.failureHandlers[targetName] =\n                specification.sideEffect.onFailure;\n            }\n          }\n        }\n        return sideEffectList;\n      },\n      { permittedHandlers: {}, failureHandlers: {} },\n    );\n  }\n\n  /**\n   * Executes the side-effects of the approved permissions while handling the errors if any.\n   * It will pass an instance of the {@link messagingSystem} and the request data associated with the permission request to the handlers through its params.\n   *\n   * @param sideEffects - the side-effect record created by {@link getSideEffects}\n   * @param requestData - the permissions requestData.\n   * @returns the value returned by all the `onPermitted` handlers in an array.\n   */\n  private async executeSideEffects(\n    sideEffects: SideEffects,\n    requestData: PermissionsRequest,\n  ) {\n    const { permittedHandlers, failureHandlers } = sideEffects;\n    const params = {\n      requestData,\n      messagingSystem: this.messagingSystem,\n    };\n\n    const promiseResults = await Promise.allSettled(\n      Object.values(permittedHandlers).map((permittedHandler) =>\n        permittedHandler(params),\n      ),\n    );\n\n    // lib.es2020.promise.d.ts does not export its types so we're using a simple type.\n    const rejectedHandlers = promiseResults.filter(\n      (promise) => promise.status === 'rejected',\n    ) as { status: 'rejected'; reason: Error }[];\n\n    if (rejectedHandlers.length > 0) {\n      const failureHandlersList = Object.values(failureHandlers);\n      if (failureHandlersList.length > 0) {\n        try {\n          await Promise.all(\n            failureHandlersList.map((failureHandler) => failureHandler(params)),\n          );\n        } catch (error) {\n          throw internalError('Unexpected error in side-effects', { error });\n        }\n      }\n      const reasons = rejectedHandlers.map((handler) => handler.reason);\n\n      reasons.forEach((reason) => {\n        console.error(reason);\n      });\n\n      throw reasons.length > 1\n        ? internalError(\n            'Multiple errors occurred during side-effects execution',\n            { errors: reasons },\n          )\n        : reasons[0];\n    }\n\n    // lib.es2020.promise.d.ts does not export its types so we're using a simple type.\n    return (promiseResults as { status: 'fulfilled'; value: unknown }[]).map(\n      ({ value }) => value,\n    );\n  }\n\n  /**\n   * Validates an approved {@link PermissionsRequest} object. The approved\n   * request must have the required `metadata` and `permissions` properties,\n   * the `id` and `origin` of the `metadata` must match the original request\n   * metadata, and the requested permissions must be valid per\n   * {@link PermissionController.validateRequestedPermissions}. Any extra\n   * metadata properties are ignored.\n   *\n   * An error is thrown if validation fails.\n   *\n   * @param approvedRequest - The approved permissions request object.\n   * @param originalMetadata - The original request metadata.\n   */\n  private validateApprovedPermissions(\n    approvedRequest: unknown,\n    originalMetadata: PermissionsRequestMetadata,\n  ) {\n    const { id, origin } = originalMetadata;\n\n    if (\n      !isPlainObject(approvedRequest) ||\n      !isPlainObject(approvedRequest.metadata)\n    ) {\n      throw internalError(\n        `Approved permissions request for subject \"${origin}\" is invalid.`,\n        { data: { approvedRequest } },\n      );\n    }\n\n    const {\n      metadata: { id: newId, origin: newOrigin },\n      permissions,\n    } = approvedRequest;\n\n    if (newId !== id) {\n      throw internalError(\n        `Approved permissions request for subject \"${origin}\" mutated its id.`,\n        { originalId: id, mutatedId: newId },\n      );\n    }\n\n    if (newOrigin !== origin) {\n      throw internalError(\n        `Approved permissions request for subject \"${origin}\" mutated its origin.`,\n        { originalOrigin: origin, mutatedOrigin: newOrigin },\n      );\n    }\n\n    try {\n      this.validateRequestedPermissions(origin, permissions);\n    } catch (error) {\n      if (error instanceof Error) {\n        // Re-throw as an internal error; we should never receive invalid approved\n        // permissions.\n        throw internalError(\n          `Invalid approved permissions request: ${error.message}`,\n          error instanceof JsonRpcError ? error.data : undefined,\n        );\n      }\n      /* istanbul ignore next: This should be impossible */\n      throw internalError('Unrecognized error type', { error });\n    }\n  }\n\n  /**\n   * Accepts a permissions request created by\n   * {@link PermissionController.requestPermissions}.\n   *\n   * @param request - The permissions request.\n   */\n  async acceptPermissionsRequest(request: PermissionsRequest): Promise<void> {\n    const { id } = request.metadata;\n\n    if (!this.hasApprovalRequest({ id })) {\n      throw new PermissionsRequestNotFoundError(id);\n    }\n\n    if (Object.keys(request.permissions).length === 0) {\n      this._rejectPermissionsRequest(\n        id,\n        invalidParams({\n          message: 'Must request at least one permission.',\n        }),\n      );\n      return;\n    }\n\n    try {\n      this.messagingSystem.call(\n        'ApprovalController:acceptRequest',\n        id,\n        request,\n      );\n    } catch (error) {\n      // If accepting unexpectedly fails, reject the request and re-throw the\n      // error\n      this._rejectPermissionsRequest(id, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Rejects a permissions request created by\n   * {@link PermissionController.requestPermissions}.\n   *\n   * @param id - The id of the request to be rejected.\n   */\n  async rejectPermissionsRequest(id: string): Promise<void> {\n    if (!this.hasApprovalRequest({ id })) {\n      throw new PermissionsRequestNotFoundError(id);\n    }\n\n    this._rejectPermissionsRequest(id, userRejectedRequest());\n  }\n\n  /**\n   * Checks whether the {@link ApprovalController} has a particular permissions\n   * request.\n   *\n   * @see {@link PermissionController.acceptPermissionsRequest} and\n   * {@link PermissionController.rejectPermissionsRequest} for usage.\n   * @param options - The {@link HasApprovalRequest} options.\n   * @param options.id - The id of the approval request to check for.\n   * @returns Whether the specified request exists.\n   */\n  private hasApprovalRequest(options: { id: string }): boolean {\n    return this.messagingSystem.call('ApprovalController:hasRequest', options);\n  }\n\n  /**\n   * Rejects the permissions request with the specified id, with the specified\n   * error as the reason. This method is effectively a wrapper around a\n   * messenger call for the `ApprovalController:rejectRequest` action.\n   *\n   * @see {@link PermissionController.acceptPermissionsRequest} and\n   * {@link PermissionController.rejectPermissionsRequest} for usage.\n   * @param id - The id of the request to reject.\n   * @param error - The error associated with the rejection.\n   * @returns Nothing\n   */\n  private _rejectPermissionsRequest(id: string, error: unknown): void {\n    return this.messagingSystem.call(\n      'ApprovalController:rejectRequest',\n      id,\n      error,\n    );\n  }\n\n  /**\n   * Gets the subject's endowments per the specified endowment permission.\n   * Throws if the subject does not have the required permission or if the\n   * permission is not an endowment permission.\n   *\n   * @param origin - The origin of the subject whose endowments to retrieve.\n   * @param targetName - The name of the endowment permission. This must be a\n   * valid permission target name.\n   * @param requestData - Additional data associated with the request, if any.\n   * Forwarded to the endowment getter function for the permission.\n   * @returns The endowments, if any.\n   */\n  async getEndowments(\n    origin: string,\n    targetName: ExtractEndowmentPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    requestData?: unknown,\n  ): Promise<Json> {\n    if (!this.hasPermission(origin, targetName)) {\n      throw unauthorized({ data: { origin, targetName } });\n    }\n\n    return this.getTypedPermissionSpecification(\n      PermissionType.Endowment,\n      targetName,\n      origin,\n    ).endowmentGetter({ origin, requestData });\n  }\n\n  /**\n   * Executes a restricted method as the subject with the given origin.\n   * The specified params, if any, will be passed to the method implementation.\n   *\n   * ATTN: Great caution should be exercised in the use of this method.\n   * Methods that cause side effects or affect application state should\n   * be avoided.\n   *\n   * This method will first attempt to retrieve the requested restricted method\n   * implementation, throwing if it does not exist. The method will then be\n   * invoked as though the subject with the specified origin had invoked it with\n   * the specified parameters. This means that any existing caveats will be\n   * applied to the restricted method, and this method will throw if the\n   * restricted method or its caveat decorators throw.\n   *\n   * In addition, this method will throw if the subject does not have a\n   * permission for the specified restricted method.\n   *\n   * @param origin - The origin of the subject to execute the method on behalf\n   * of.\n   * @param targetName - The name of the method to execute. This must be a valid\n   * permission target name.\n   * @param params - The parameters to pass to the method implementation.\n   * @returns The result of the executed method.\n   */\n  async executeRestrictedMethod(\n    origin: OriginString,\n    targetName: ExtractRestrictedMethodPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    params?: RestrictedMethodParameters,\n  ): Promise<Json> {\n    // Throws if the method does not exist\n    const methodImplementation = this.getRestrictedMethod(targetName, origin);\n\n    const result = await this._executeRestrictedMethod(\n      methodImplementation,\n      { origin },\n      targetName,\n      params,\n    );\n\n    if (result === undefined) {\n      throw new Error(\n        `Internal request for method \"${targetName}\" as origin \"${origin}\" returned no result.`,\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * An internal method used in the controller's `json-rpc-engine` middleware\n   * and {@link PermissionController.executeRestrictedMethod}. Calls the\n   * specified restricted method implementation after decorating it with the\n   * caveats of its permission. Throws if the subject does not have the\n   * requisite permission.\n   *\n   * ATTN: Parameter validation is the responsibility of the caller, or\n   * the restricted method implementation in the case of `params`.\n   *\n   * @see {@link PermissionController.executeRestrictedMethod} and\n   * {@link PermissionController.createPermissionMiddleware} for usage.\n   * @param methodImplementation - The implementation of the method to call.\n   * @param subject - Metadata about the subject that made the request.\n   * @param method - The method name\n   * @param params - Params needed for executing the restricted method\n   * @returns The result of the restricted method implementation\n   */\n  private _executeRestrictedMethod(\n    methodImplementation: RestrictedMethod<RestrictedMethodParameters, Json>,\n    subject: PermissionSubjectMetadata,\n    method: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    params: RestrictedMethodParameters = [],\n  ): ReturnType<RestrictedMethod<RestrictedMethodParameters, Json>> {\n    const { origin } = subject;\n\n    const permission = this.getPermission(origin, method);\n    if (!permission) {\n      throw unauthorized({ data: { origin, method } });\n    }\n\n    return decorateWithCaveats(\n      methodImplementation,\n      permission,\n      this._caveatSpecifications,\n    )({ method, params, context: { origin } });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-MSZMGMUN.mjs b/dist/chunk-MSZMGMUN.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..d1dfc9632a2e544736c4ea8e8b0a3e52a967144e
--- /dev/null
+++ b/dist/chunk-MSZMGMUN.mjs
@@ -0,0 +1,1619 @@
+import {
+  decorateWithCaveats,
+  isRestrictedMethodCaveatSpecification
+} from "./chunk-HPECMGYB.mjs";
+import {
+  PermissionType,
+  constructPermission,
+  findCaveat,
+  hasSpecificationType
+} from "./chunk-HYMS7IGB.mjs";
+import {
+  getPermissionMiddlewareFactory
+} from "./chunk-BIWDJTRD.mjs";
+import {
+  CaveatAlreadyExistsError,
+  CaveatDoesNotExistError,
+  CaveatInvalidJsonError,
+  CaveatMergerDoesNotExistError,
+  CaveatMissingValueError,
+  CaveatSpecificationMismatchError,
+  DuplicateCaveatError,
+  EndowmentPermissionDoesNotExistError,
+  ForbiddenCaveatError,
+  InvalidApprovedPermissionError,
+  InvalidCaveatError,
+  InvalidCaveatFieldsError,
+  InvalidCaveatTypeError,
+  InvalidCaveatsPropertyError,
+  InvalidMergedPermissionsError,
+  InvalidSubjectIdentifierError,
+  PermissionDoesNotExistError,
+  PermissionsRequestNotFoundError,
+  UnrecognizedCaveatTypeError,
+  UnrecognizedSubjectError,
+  internalError,
+  invalidParams,
+  methodNotFound,
+  unauthorized,
+  userRejectedRequest
+} from "./chunk-I4OI6AQF.mjs";
+import {
+  __privateAdd,
+  __privateMethod
+} from "./chunk-2L4QPE5A.mjs";
+
+// src/PermissionController.ts
+import { BaseController } from "@metamask/base-controller";
+import {
+  isNonEmptyArray,
+  isPlainObject,
+  isValidJson
+} from "@metamask/controller-utils";
+import { JsonRpcError } from "@metamask/rpc-errors";
+import { hasProperty } from "@metamask/utils";
+import deepFreeze from "deep-freeze-strict";
+import { castDraft, produceWithPatches } from "immer";
+import { nanoid } from "nanoid";
+var controllerName = "PermissionController";
+function getStateMetadata() {
+  return { subjects: { anonymous: true, persist: true } };
+}
+function getDefaultState() {
+  return { subjects: {} };
+}
+var CaveatMutatorOperation = /* @__PURE__ */ ((CaveatMutatorOperation2) => {
+  CaveatMutatorOperation2[CaveatMutatorOperation2["noop"] = 0] = "noop";
+  CaveatMutatorOperation2[CaveatMutatorOperation2["updateValue"] = 1] = "updateValue";
+  CaveatMutatorOperation2[CaveatMutatorOperation2["deleteCaveat"] = 2] = "deleteCaveat";
+  CaveatMutatorOperation2[CaveatMutatorOperation2["revokePermission"] = 3] = "revokePermission";
+  return CaveatMutatorOperation2;
+})(CaveatMutatorOperation || {});
+var _mergeIncrementalPermissions, mergeIncrementalPermissions_fn, _mergePermission, mergePermission_fn, _collectUniqueAndPairedCaveats, collectUniqueAndPairedCaveats_fn, _handleApprovedPermissions, handleApprovedPermissions_fn;
+var PermissionController = class extends BaseController {
+  /**
+   * Constructs the PermissionController.
+   *
+   * @param options - Permission controller options.
+   * @param options.caveatSpecifications - The specifications of all caveats
+   * available to the controller. See {@link CaveatSpecificationMap} and the
+   * documentation for more details.
+   * @param options.permissionSpecifications - The specifications of all
+   * permissions available to the controller. See
+   * {@link PermissionSpecificationMap} and the README for more details.
+   * @param options.unrestrictedMethods - The callable names of all JSON-RPC
+   * methods ignored by the new controller.
+   * @param options.messenger - The controller messenger. See
+   * {@link BaseController} for more information.
+   * @param options.state - Existing state to hydrate the controller with at
+   * initialization.
+   */
+  constructor(options) {
+    const {
+      caveatSpecifications,
+      permissionSpecifications,
+      unrestrictedMethods,
+      messenger,
+      state = {}
+    } = options;
+    super({
+      name: controllerName,
+      metadata: getStateMetadata(),
+      messenger,
+      state: {
+        ...getDefaultState(),
+        ...state
+      }
+    });
+    /**
+     * Merges a set of incrementally requested permissions into the existing permissions of
+     * the requesting subject. The merge is a right-biased union, where the existing
+     * permissions are the left-hand side, and the incrementally requested permissions are
+     * the right-hand side.
+     *
+     * @param origin - The origin of the subject.
+     * @param incrementalRequestedPermissions - The requested permissions to merge.
+     * @returns The merged permissions and the resulting diff.
+     */
+    __privateAdd(this, _mergeIncrementalPermissions);
+    /**
+     * Performs a right-biased union between two permissions. The task of merging caveats
+     * with the same type between the two permissions is delegated to the corresponding
+     * caveat's merger implementation.
+     *
+     * Throws if the left-hand and right-hand permissions both have a caveat whose
+     * specification does not provide a caveat merger function.
+     *
+     * @param leftPermission - The left-hand permission to merge.
+     * @param rightPermission - The right-hand permission to merge.
+     * @returns The merged permission.
+     */
+    __privateAdd(this, _mergePermission);
+    /**
+     * Given two permission objects, computes two sets:
+     * - The set of caveats that are unique to either permission.
+     * - The set of caveat pairs that are common to both permissions.
+     *
+     * Assumes that the caveat arrays of both permissions do not contain duplicate
+     * caveats.
+     *
+     * @param leftPermission - The left-hand permission.
+     * @param rightPermission - The right-hand permission.
+     * @returns The sets of caveat pairs and unique caveats.
+     */
+    __privateAdd(this, _collectUniqueAndPairedCaveats);
+    /**
+     * Accepts a permissions request that has been approved by the user. This
+     * method should be called after the user has approved the request and the
+     * {@link ApprovalController} has resolved the user approval promise.
+     *
+     * @param options - Options bag.
+     * @param options.subject - The subject to grant permissions to.
+     * @param options.metadata - The metadata of the approved permissions request.
+     * @param options.preserveExistingPermissions - Whether to preserve the
+     * subject's existing permissions.
+     * @param options.approvedRequest - The approved permissions request to handle.
+     * @returns The granted permissions and request metadata.
+     */
+    __privateAdd(this, _handleApprovedPermissions);
+    this._unrestrictedMethods = new Set(unrestrictedMethods);
+    this._caveatSpecifications = deepFreeze({ ...caveatSpecifications });
+    this.validatePermissionSpecifications(
+      permissionSpecifications,
+      this._caveatSpecifications
+    );
+    this._permissionSpecifications = deepFreeze({
+      ...permissionSpecifications
+    });
+    this.registerMessageHandlers();
+    this.createPermissionMiddleware = getPermissionMiddlewareFactory({
+      executeRestrictedMethod: this._executeRestrictedMethod.bind(this),
+      getRestrictedMethod: this.getRestrictedMethod.bind(this),
+      isUnrestrictedMethod: this.unrestrictedMethods.has.bind(
+        this.unrestrictedMethods
+      )
+    });
+  }
+  /**
+   * The names of all JSON-RPC methods that will be ignored by the controller.
+   *
+   * @returns The names of all unrestricted JSON-RPC methods
+   */
+  get unrestrictedMethods() {
+    return this._unrestrictedMethods;
+  }
+  /**
+   * Gets a permission specification.
+   *
+   * @param targetName - The name of the permission specification to get.
+   * @returns The permission specification with the specified target name.
+   */
+  getPermissionSpecification(targetName) {
+    return this._permissionSpecifications[targetName];
+  }
+  /**
+   * Gets a caveat specification.
+   *
+   * @param caveatType - The type of the caveat specification to get.
+   * @returns The caveat specification with the specified type.
+   */
+  getCaveatSpecification(caveatType) {
+    return this._caveatSpecifications[caveatType];
+  }
+  /**
+   * Constructor helper for validating permission specifications.
+   *
+   * Throws an error if validation fails.
+   *
+   * @param permissionSpecifications - The permission specifications passed to
+   * this controller's constructor.
+   * @param caveatSpecifications - The caveat specifications passed to this
+   * controller.
+   */
+  validatePermissionSpecifications(permissionSpecifications, caveatSpecifications) {
+    Object.entries(
+      permissionSpecifications
+    ).forEach(
+      ([
+        targetName,
+        { permissionType, targetName: innerTargetName, allowedCaveats }
+      ]) => {
+        if (!permissionType || !hasProperty(PermissionType, permissionType)) {
+          throw new Error(`Invalid permission type: "${permissionType}"`);
+        }
+        if (!targetName) {
+          throw new Error(`Invalid permission target name: "${targetName}"`);
+        }
+        if (targetName !== innerTargetName) {
+          throw new Error(
+            `Invalid permission specification: target name "${targetName}" must match specification.targetName value "${innerTargetName}".`
+          );
+        }
+        if (allowedCaveats) {
+          allowedCaveats.forEach((caveatType) => {
+            if (!hasProperty(caveatSpecifications, caveatType)) {
+              throw new UnrecognizedCaveatTypeError(caveatType);
+            }
+            const specification = caveatSpecifications[caveatType];
+            const isRestrictedMethodCaveat = isRestrictedMethodCaveatSpecification(specification);
+            if (permissionType === "RestrictedMethod" /* RestrictedMethod */ && !isRestrictedMethodCaveat || permissionType === "Endowment" /* Endowment */ && isRestrictedMethodCaveat) {
+              throw new CaveatSpecificationMismatchError(
+                specification,
+                permissionType
+              );
+            }
+          });
+        }
+      }
+    );
+  }
+  /**
+   * Constructor helper for registering the controller's messaging system
+   * actions.
+   */
+  registerMessageHandlers() {
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:clearPermissions`,
+      () => this.clearState()
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:getEndowments`,
+      (origin, targetName, requestData) => this.getEndowments(origin, targetName, requestData)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:getSubjectNames`,
+      () => this.getSubjectNames()
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:getPermissions`,
+      (origin) => this.getPermissions(origin)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:hasPermission`,
+      (origin, targetName) => this.hasPermission(origin, targetName)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:hasPermissions`,
+      (origin) => this.hasPermissions(origin)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:grantPermissions`,
+      this.grantPermissions.bind(this)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:requestPermissions`,
+      (subject, permissions) => this.requestPermissions(subject, permissions)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:revokeAllPermissions`,
+      (origin) => this.revokeAllPermissions(origin)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:revokePermissionForAllSubjects`,
+      (target) => this.revokePermissionForAllSubjects(target)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:revokePermissions`,
+      this.revokePermissions.bind(this)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:updateCaveat`,
+      (origin, target, caveatType, caveatValue) => {
+        this.updateCaveat(
+          origin,
+          target,
+          caveatType,
+          caveatValue
+        );
+      }
+    );
+    this.messagingSystem.registerActionHandler(
+      `${controllerName}:updateCaveatIncremental`,
+      (origin, target, caveatType, addedCaveatValue) => {
+        this.updateCaveatIncremental(
+          origin,
+          target,
+          caveatType,
+          addedCaveatValue
+        );
+      }
+    );
+  }
+  /**
+   * Clears the state of the controller.
+   */
+  clearState() {
+    this.update((_draftState) => {
+      return {
+        ...getDefaultState()
+      };
+    });
+  }
+  /**
+   * Gets the permission specification corresponding to the given permission
+   * type and target name. Throws an error if the target name does not
+   * correspond to a permission, or if the specification is not of the
+   * given permission type.
+   *
+   * @template Type - The type of the permission specification to get.
+   * @param permissionType - The type of the permission specification to get.
+   * @param targetName - The name of the permission whose specification to get.
+   * @param requestingOrigin - The origin of the requesting subject, if any.
+   * Will be added to any thrown errors.
+   * @returns The specification object corresponding to the given type and
+   * target name.
+   */
+  getTypedPermissionSpecification(permissionType, targetName, requestingOrigin) {
+    const failureError = permissionType === "RestrictedMethod" /* RestrictedMethod */ ? methodNotFound(
+      targetName,
+      requestingOrigin ? { origin: requestingOrigin } : void 0
+    ) : new EndowmentPermissionDoesNotExistError(
+      targetName,
+      requestingOrigin
+    );
+    if (!this.targetExists(targetName)) {
+      throw failureError;
+    }
+    const specification = this.getPermissionSpecification(targetName);
+    if (!hasSpecificationType(specification, permissionType)) {
+      throw failureError;
+    }
+    return specification;
+  }
+  /**
+   * Gets the implementation of the specified restricted method.
+   *
+   * A JSON-RPC error is thrown if the method does not exist.
+   *
+   * @see {@link PermissionController.executeRestrictedMethod} and
+   * {@link PermissionController.createPermissionMiddleware} for internal usage.
+   * @param method - The name of the restricted method.
+   * @param origin - The origin associated with the request for the restricted
+   * method, if any.
+   * @returns The restricted method implementation.
+   */
+  getRestrictedMethod(method, origin) {
+    return this.getTypedPermissionSpecification(
+      "RestrictedMethod" /* RestrictedMethod */,
+      method,
+      origin
+    ).methodImplementation;
+  }
+  /**
+   * Gets a list of all origins of subjects.
+   *
+   * @returns The origins (i.e. IDs) of all subjects.
+   */
+  getSubjectNames() {
+    return Object.keys(this.state.subjects);
+  }
+  /**
+   * Gets the permission for the specified target of the subject corresponding
+   * to the specified origin.
+   *
+   * @param origin - The origin of the subject.
+   * @param targetName - The method name as invoked by a third party (i.e., not
+   * a method key).
+   * @returns The permission if it exists, or undefined otherwise.
+   */
+  getPermission(origin, targetName) {
+    return this.state.subjects[origin]?.permissions[targetName];
+  }
+  /**
+   * Gets all permissions for the specified subject, if any.
+   *
+   * @param origin - The origin of the subject.
+   * @returns The permissions of the subject, if any.
+   */
+  getPermissions(origin) {
+    return this.state.subjects[origin]?.permissions;
+  }
+  /**
+   * Checks whether the subject with the specified origin has the specified
+   * permission.
+   *
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @returns Whether the subject has the permission.
+   */
+  hasPermission(origin, target) {
+    return Boolean(this.getPermission(origin, target));
+  }
+  /**
+   * Checks whether the subject with the specified origin has any permissions.
+   * Use this if you want to know if a subject "exists".
+   *
+   * @param origin - The origin of the subject to check.
+   * @returns Whether the subject has any permissions.
+   */
+  hasPermissions(origin) {
+    return Boolean(this.state.subjects[origin]);
+  }
+  /**
+   * Revokes all permissions from the specified origin.
+   *
+   * Throws an error of the origin has no permissions.
+   *
+   * @param origin - The origin whose permissions to revoke.
+   */
+  revokeAllPermissions(origin) {
+    this.update((draftState) => {
+      if (!draftState.subjects[origin]) {
+        throw new UnrecognizedSubjectError(origin);
+      }
+      delete draftState.subjects[origin];
+    });
+  }
+  /**
+   * Revokes the specified permission from the subject with the specified
+   * origin.
+   *
+   * Throws an error if the subject or the permission does not exist.
+   *
+   * @param origin - The origin of the subject whose permission to revoke.
+   * @param target - The target name of the permission to revoke.
+   */
+  revokePermission(origin, target) {
+    this.revokePermissions({ [origin]: [target] });
+  }
+  /**
+   * Revokes the specified permissions from the specified subjects.
+   *
+   * Throws an error if any of the subjects or permissions do not exist.
+   *
+   * @param subjectsAndPermissions - An object mapping subject origins
+   * to arrays of permission target names to revoke.
+   */
+  revokePermissions(subjectsAndPermissions) {
+    this.update((draftState) => {
+      Object.keys(subjectsAndPermissions).forEach((origin) => {
+        if (!hasProperty(draftState.subjects, origin)) {
+          throw new UnrecognizedSubjectError(origin);
+        }
+        subjectsAndPermissions[origin].forEach((target) => {
+          const { permissions } = draftState.subjects[origin];
+          if (!hasProperty(permissions, target)) {
+            throw new PermissionDoesNotExistError(origin, target);
+          }
+          this.deletePermission(draftState.subjects, origin, target);
+        });
+      });
+    });
+  }
+  /**
+   * Revokes all permissions corresponding to the specified target for all subjects.
+   * Does nothing if no subjects or no such permission exists.
+   *
+   * @param target - The name of the target to revoke all permissions for.
+   */
+  revokePermissionForAllSubjects(target) {
+    if (this.getSubjectNames().length === 0) {
+      return;
+    }
+    this.update((draftState) => {
+      Object.entries(draftState.subjects).forEach(([origin, subject]) => {
+        const { permissions } = subject;
+        if (hasProperty(permissions, target)) {
+          this.deletePermission(draftState.subjects, origin, target);
+        }
+      });
+    });
+  }
+  /**
+   * Deletes the permission identified by the given origin and target. If the
+   * permission is the single remaining permission of its subject, the subject
+   * is also deleted.
+   *
+   * @param subjects - The draft permission controller subjects.
+   * @param origin - The origin of the subject associated with the permission
+   * to delete.
+   * @param target - The target name of the permission to delete.
+   */
+  deletePermission(subjects, origin, target) {
+    const { permissions } = subjects[origin];
+    if (Object.keys(permissions).length > 1) {
+      delete permissions[target];
+    } else {
+      delete subjects[origin];
+    }
+  }
+  /**
+   * Checks whether the permission of the subject corresponding to the given
+   * origin has a caveat of the specified type.
+   *
+   * Throws an error if the subject does not have a permission with the
+   * specified target name.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to check for.
+   * @returns Whether the permission has the specified caveat.
+   */
+  hasCaveat(origin, target, caveatType) {
+    return Boolean(this.getCaveat(origin, target, caveatType));
+  }
+  /**
+   * Gets the caveat of the specified type, if any, for the permission of
+   * the subject corresponding to the given origin.
+   *
+   * Throws an error if the subject does not have a permission with the
+   * specified target name.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to get.
+   * @returns The caveat, or `undefined` if no such caveat exists.
+   */
+  getCaveat(origin, target, caveatType) {
+    const permission = this.getPermission(origin, target);
+    if (!permission) {
+      throw new PermissionDoesNotExistError(origin, target);
+    }
+    return findCaveat(permission, caveatType);
+  }
+  /**
+   * Adds a caveat of the specified type, with the specified caveat value, to
+   * the permission corresponding to the given subject origin and permission
+   * target.
+   *
+   * For modifying existing caveats, use
+   * {@link PermissionController.updateCaveat}.
+   *
+   * Throws an error if no such permission exists, or if the caveat already
+   * exists.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to add.
+   * @param caveatValue - The value of the caveat to add.
+   */
+  addCaveat(origin, target, caveatType, caveatValue) {
+    if (this.hasCaveat(origin, target, caveatType)) {
+      throw new CaveatAlreadyExistsError(origin, target, caveatType);
+    }
+    this.setCaveat(origin, target, caveatType, caveatValue);
+  }
+  /**
+   * Updates the value of the caveat of the specified type belonging to the
+   * permission corresponding to the given subject origin and permission
+   * target.
+   *
+   * For adding new caveats, use
+   * {@link PermissionController.addCaveat}.
+   *
+   * Throws an error if no such permission or caveat exists.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to update.
+   * @param caveatValue - The new value of the caveat.
+   */
+  updateCaveat(origin, target, caveatType, caveatValue) {
+    if (!this.hasCaveat(origin, target, caveatType)) {
+      throw new CaveatDoesNotExistError(origin, target, caveatType);
+    }
+    this.setCaveat(origin, target, caveatType, caveatValue);
+  }
+  /**
+   * TODO:cm
+   * Updates the value of the caveat of the specified type belonging to the
+   * permission corresponding to the given subject origin and permission
+   * target.
+   *
+   * For adding new caveats, use
+   * {@link PermissionController.addCaveat}.
+   *
+   * Throws an error if no such permission or caveat exists.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to update.
+   * @param addedCaveatValue - The value to merge with the existing caveat's value.
+   */
+  updateCaveatIncremental(origin, target, caveatType, addedCaveatValue) {
+    const existingCaveat = this.getCaveat(origin, target, caveatType);
+    if (!existingCaveat) {
+      throw new CaveatDoesNotExistError(origin, target, caveatType);
+    }
+    const { merger } = this.getCaveatSpecification(caveatType);
+    if (!merger) {
+      throw new CaveatMergerDoesNotExistError(caveatType);
+    }
+    this.setCaveat(
+      origin,
+      target,
+      caveatType,
+      merger(existingCaveat.value, addedCaveatValue)
+    );
+  }
+  /**
+   * Sets the specified caveat on the specified permission. Overwrites existing
+   * caveats of the same type in-place (preserving array order), and adds the
+   * caveat to the end of the array otherwise.
+   *
+   * Throws an error if the permission does not exist or fails to validate after
+   * its caveats have been modified.
+   *
+   * @see {@link PermissionController.addCaveat}
+   * @see {@link PermissionController.updateCaveat}
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to set.
+   * @param caveatValue - The value of the caveat to set.
+   */
+  setCaveat(origin, target, caveatType, caveatValue) {
+    this.update((draftState) => {
+      const subject = draftState.subjects[origin];
+      if (!subject) {
+        throw new UnrecognizedSubjectError(origin);
+      }
+      const permission = subject.permissions[target];
+      if (!permission) {
+        throw new PermissionDoesNotExistError(origin, target);
+      }
+      const caveat = {
+        type: caveatType,
+        value: caveatValue
+      };
+      this.validateCaveat(caveat, origin, target);
+      if (permission.caveats) {
+        const caveatIndex = permission.caveats.findIndex(
+          (existingCaveat) => existingCaveat.type === caveat.type
+        );
+        if (caveatIndex === -1) {
+          permission.caveats.push(caveat);
+        } else {
+          permission.caveats.splice(caveatIndex, 1, caveat);
+        }
+      } else {
+        permission.caveats = [caveat];
+      }
+      this.validateModifiedPermission(permission, origin);
+    });
+  }
+  /**
+   * Updates all caveats with the specified type for all subjects and
+   * permissions by applying the specified mutator function to them.
+   *
+   * ATTN: Permissions can be revoked entirely by the action of this method,
+   * read on for details.
+   *
+   * Caveat mutators are functions that receive a caveat value and return a
+   * tuple consisting of a {@link CaveatMutatorOperation} and, optionally, a new
+   * value to update the existing caveat with.
+   *
+   * For each caveat, depending on the mutator result, this method will:
+   * - Do nothing ({@link CaveatMutatorOperation.noop})
+   * - Update the value of the caveat ({@link CaveatMutatorOperation.updateValue}). The caveat specification validator, if any, will be called after updating the value.
+   * - Delete the caveat ({@link CaveatMutatorOperation.deleteCaveat}). The permission specification validator, if any, will be called after deleting the caveat.
+   * - Revoke the parent permission ({@link CaveatMutatorOperation.revokePermission})
+   *
+   * This method throws if the validation of any caveat or permission fails.
+   *
+   * @param targetCaveatType - The type of the caveats to update.
+   * @param mutator - The mutator function which will be applied to all caveat
+   * values.
+   */
+  updatePermissionsByCaveat(targetCaveatType, mutator) {
+    if (Object.keys(this.state.subjects).length === 0) {
+      return;
+    }
+    this.update((draftState) => {
+      Object.values(draftState.subjects).forEach((subject) => {
+        Object.values(subject.permissions).forEach((permission) => {
+          const { caveats } = permission;
+          const targetCaveat = caveats?.find(
+            ({ type }) => type === targetCaveatType
+          );
+          if (!targetCaveat) {
+            return;
+          }
+          const mutatorResult = mutator(targetCaveat.value);
+          const { operation } = mutatorResult;
+          switch (operation) {
+            case 0 /* noop */:
+              break;
+            case 1 /* updateValue */:
+              targetCaveat.value = mutatorResult.value;
+              this.validateCaveat(
+                targetCaveat,
+                subject.origin,
+                permission.parentCapability
+              );
+              break;
+            case 2 /* deleteCaveat */:
+              this.deleteCaveat(permission, targetCaveatType, subject.origin);
+              break;
+            case 3 /* revokePermission */:
+              this.deletePermission(
+                draftState.subjects,
+                subject.origin,
+                permission.parentCapability
+              );
+              break;
+            default: {
+              throw new Error(`Unrecognized mutation result: "${operation}"`);
+            }
+          }
+        });
+      });
+    });
+  }
+  /**
+   * Removes the caveat of the specified type from the permission corresponding
+   * to the given subject origin and target name.
+   *
+   * Throws an error if no such permission or caveat exists.
+   *
+   * @template TargetName - The permission target name. Should be inferred.
+   * @template CaveatType - The valid caveat types for the permission. Should
+   * be inferred.
+   * @param origin - The origin of the subject.
+   * @param target - The target name of the permission.
+   * @param caveatType - The type of the caveat to remove.
+   */
+  removeCaveat(origin, target, caveatType) {
+    this.update((draftState) => {
+      const permission = draftState.subjects[origin]?.permissions[target];
+      if (!permission) {
+        throw new PermissionDoesNotExistError(origin, target);
+      }
+      if (!permission.caveats) {
+        throw new CaveatDoesNotExistError(origin, target, caveatType);
+      }
+      this.deleteCaveat(permission, caveatType, origin);
+    });
+  }
+  /**
+   * Deletes the specified caveat from the specified permission. If no caveats
+   * remain after deletion, the permission's caveat property is set to `null`.
+   * The permission is validated after being modified.
+   *
+   * Throws an error if the permission does not have a caveat with the specified
+   * type.
+   *
+   * @param permission - The permission whose caveat to delete.
+   * @param caveatType - The type of the caveat to delete.
+   * @param origin - The origin the permission subject.
+   */
+  deleteCaveat(permission, caveatType, origin) {
+    if (!permission.caveats) {
+      throw new CaveatDoesNotExistError(
+        origin,
+        permission.parentCapability,
+        caveatType
+      );
+    }
+    const caveatIndex = permission.caveats.findIndex(
+      (existingCaveat) => existingCaveat.type === caveatType
+    );
+    if (caveatIndex === -1) {
+      throw new CaveatDoesNotExistError(
+        origin,
+        permission.parentCapability,
+        caveatType
+      );
+    }
+    if (permission.caveats.length === 1) {
+      permission.caveats = null;
+    } else {
+      permission.caveats.splice(caveatIndex, 1);
+    }
+    this.validateModifiedPermission(permission, origin);
+  }
+  /**
+   * Validates the specified modified permission. Should **always** be invoked
+   * on a permission after its caveats have been modified.
+   *
+   * Just like {@link PermissionController.validatePermission}, except that the
+   * corresponding target name and specification are retrieved first, and an
+   * error is thrown if the target name does not exist.
+   *
+   * @param permission - The modified permission to validate.
+   * @param origin - The origin associated with the permission.
+   */
+  validateModifiedPermission(permission, origin) {
+    if (!this.targetExists(permission.parentCapability)) {
+      throw new Error(
+        `Fatal: Existing permission target "${permission.parentCapability}" has no specification.`
+      );
+    }
+    this.validatePermission(
+      this.getPermissionSpecification(permission.parentCapability),
+      permission,
+      origin
+    );
+  }
+  /**
+   * Verifies the existence the specified permission target, i.e. whether it has
+   * a specification.
+   *
+   * @param target - The requested permission target.
+   * @returns Whether the permission target exists.
+   */
+  targetExists(target) {
+    return hasProperty(this._permissionSpecifications, target);
+  }
+  /**
+   * Grants _approved_ permissions to the specified subject. Every permission and
+   * caveat is stringently validated – including by calling every specification
+   * validator – and an error is thrown if any validation fails.
+   *
+   * ATTN: This method does **not** prompt the user for approval. Use consent must
+   * first be obtained through some other means.
+   *
+   * @see {@link PermissionController.requestPermissions} For initiating a
+   * permissions request requiring user approval.
+   * @param options - Options bag.
+   * @param options.approvedPermissions - The requested permissions approved by
+   * the user.
+   * @param options.requestData - Permission request data. Passed to permission
+   * factory functions.
+   * @param options.preserveExistingPermissions - Whether to preserve the
+   * subject's existing permissions.
+   * @param options.subject - The subject to grant permissions to.
+   * @returns The granted permissions.
+   */
+  grantPermissions({
+    approvedPermissions,
+    requestData,
+    preserveExistingPermissions = true,
+    subject
+  }) {
+    const { origin } = subject;
+    if (!origin || typeof origin !== "string") {
+      throw new InvalidSubjectIdentifierError(origin);
+    }
+    const permissions = preserveExistingPermissions ? {
+      ...this.getPermissions(origin)
+    } : {};
+    for (const [requestedTarget, approvedPermission] of Object.entries(
+      approvedPermissions
+    )) {
+      if (!this.targetExists(requestedTarget)) {
+        throw methodNotFound(requestedTarget);
+      }
+      if (approvedPermission.parentCapability !== void 0 && requestedTarget !== approvedPermission.parentCapability) {
+        throw new InvalidApprovedPermissionError(
+          origin,
+          requestedTarget,
+          approvedPermission
+        );
+      }
+      const targetName = requestedTarget;
+      const specification = this.getPermissionSpecification(targetName);
+      const caveats = this.constructCaveats(
+        origin,
+        targetName,
+        approvedPermission.caveats
+      );
+      const permissionOptions = {
+        caveats,
+        invoker: origin,
+        target: targetName
+      };
+      let permission;
+      if (specification.factory) {
+        permission = specification.factory(permissionOptions, requestData);
+        this.validatePermission(specification, permission, origin);
+      } else {
+        permission = constructPermission(permissionOptions);
+        this.validatePermission(specification, permission, origin, {
+          invokePermissionValidator: true,
+          performCaveatValidation: false
+        });
+      }
+      permissions[targetName] = permission;
+    }
+    this.setValidatedPermissions(origin, permissions);
+    return permissions;
+  }
+  /**
+   * Validates the specified permission by:
+   * - Ensuring that if `subjectTypes` is specified, the subject requesting the permission is of a type in the list.
+   * - Ensuring that its `caveats` property is either `null` or a non-empty array.
+   * - Ensuring that it only includes caveats allowed by its specification.
+   * - Ensuring that it includes no duplicate caveats (by caveat type).
+   * - Validating each caveat object, if `performCaveatValidation` is `true`.
+   * - Calling the validator of its specification, if one exists and `invokePermissionValidator` is `true`.
+   *
+   * An error is thrown if validation fails.
+   *
+   * @param specification - The specification of the permission.
+   * @param permission - The permission to validate.
+   * @param origin - The origin associated with the permission.
+   * @param validationOptions - Validation options.
+   * @param validationOptions.invokePermissionValidator - Whether to invoke the
+   * permission's consumer-specified validator function, if any.
+   * @param validationOptions.performCaveatValidation - Whether to invoke
+   * {@link PermissionController.validateCaveat} on each of the permission's
+   * caveats.
+   */
+  validatePermission(specification, permission, origin, { invokePermissionValidator, performCaveatValidation } = {
+    invokePermissionValidator: true,
+    performCaveatValidation: true
+  }) {
+    const { allowedCaveats, validator, targetName } = specification;
+    if (specification.subjectTypes?.length && specification.subjectTypes.length > 0) {
+      const metadata = this.messagingSystem.call(
+        "SubjectMetadataController:getSubjectMetadata",
+        origin
+      );
+      if (!metadata || metadata.subjectType === null || !specification.subjectTypes.includes(metadata.subjectType)) {
+        throw specification.permissionType === "RestrictedMethod" /* RestrictedMethod */ ? methodNotFound(targetName, { origin }) : new EndowmentPermissionDoesNotExistError(targetName, origin);
+      }
+    }
+    if (hasProperty(permission, "caveats")) {
+      const { caveats } = permission;
+      if (caveats !== null && !(Array.isArray(caveats) && caveats.length > 0)) {
+        throw new InvalidCaveatsPropertyError(origin, targetName, caveats);
+      }
+      const seenCaveatTypes = /* @__PURE__ */ new Set();
+      caveats?.forEach((caveat) => {
+        if (performCaveatValidation) {
+          this.validateCaveat(caveat, origin, targetName);
+        }
+        if (!allowedCaveats?.includes(caveat.type)) {
+          throw new ForbiddenCaveatError(caveat.type, origin, targetName);
+        }
+        if (seenCaveatTypes.has(caveat.type)) {
+          throw new DuplicateCaveatError(caveat.type, origin, targetName);
+        }
+        seenCaveatTypes.add(caveat.type);
+      });
+    }
+    if (invokePermissionValidator && validator) {
+      validator(permission, origin, targetName);
+    }
+  }
+  /**
+   * Assigns the specified permissions to the subject with the given origin.
+   * Overwrites all existing permissions, and creates a subject entry if it
+   * doesn't already exist.
+   *
+   * ATTN: Assumes that the new permissions have been validated.
+   *
+   * @param origin - The origin of the grantee subject.
+   * @param permissions - The new permissions for the grantee subject.
+   */
+  setValidatedPermissions(origin, permissions) {
+    this.update((draftState) => {
+      if (!draftState.subjects[origin]) {
+        draftState.subjects[origin] = { origin, permissions: {} };
+      }
+      draftState.subjects[origin].permissions = castDraft(permissions);
+    });
+  }
+  /**
+   * Validates the requested caveats for the permission of the specified
+   * subject origin and target name and returns the validated caveat array.
+   *
+   * Throws an error if validation fails.
+   *
+   * @param origin - The origin of the permission subject.
+   * @param target - The permission target name.
+   * @param requestedCaveats - The requested caveats to construct.
+   * @returns The constructed caveats.
+   */
+  constructCaveats(origin, target, requestedCaveats) {
+    const caveatArray = requestedCaveats?.map((requestedCaveat) => {
+      this.validateCaveat(requestedCaveat, origin, target);
+      const { type, value } = requestedCaveat;
+      return { type, value };
+    });
+    return caveatArray && isNonEmptyArray(caveatArray) ? caveatArray : void 0;
+  }
+  /**
+   * This methods validates that the specified caveat is an object with the
+   * expected properties and types. It also ensures that a caveat specification
+   * exists for the requested caveat type, and calls the specification
+   * validator, if it exists, on the caveat object.
+   *
+   * Throws an error if validation fails.
+   *
+   * @param caveat - The caveat object to validate.
+   * @param origin - The origin associated with the subject of the parent
+   * permission.
+   * @param target - The target name associated with the parent permission.
+   */
+  validateCaveat(caveat, origin, target) {
+    if (!isPlainObject(caveat)) {
+      throw new InvalidCaveatError(caveat, origin, target);
+    }
+    if (Object.keys(caveat).length !== 2) {
+      throw new InvalidCaveatFieldsError(caveat, origin, target);
+    }
+    if (typeof caveat.type !== "string") {
+      throw new InvalidCaveatTypeError(caveat, origin, target);
+    }
+    const specification = this.getCaveatSpecification(caveat.type);
+    if (!specification) {
+      throw new UnrecognizedCaveatTypeError(caveat.type, origin, target);
+    }
+    if (!hasProperty(caveat, "value") || caveat.value === void 0) {
+      throw new CaveatMissingValueError(caveat, origin, target);
+    }
+    if (!isValidJson(caveat.value)) {
+      throw new CaveatInvalidJsonError(caveat, origin, target);
+    }
+    specification.validator?.(caveat, origin, target);
+  }
+  /**
+   * Initiates a permission request that requires user approval.
+   *
+   * Either this or {@link PermissionController.requestPermissionsIncremental}
+   * should always be used to grant additional permissions to a subject,
+   * unless user approval has been obtained through some other means.
+   *
+   * Permissions are validated at every step of the approval process, and this
+   * method will reject if validation fails.
+   *
+   * @see {@link ApprovalController} For the user approval logic.
+   * @see {@link PermissionController.acceptPermissionsRequest} For the method
+   * that _accepts_ the request and resolves the user approval promise.
+   * @see {@link PermissionController.rejectPermissionsRequest} For the method
+   * that _rejects_ the request and the user approval promise.
+   * @param subject - The grantee subject.
+   * @param requestedPermissions - The requested permissions.
+   * @param options - Additional options.
+   * @param options.id - The id of the permissions request. Defaults to a unique
+   * id.
+   * @param options.preserveExistingPermissions - Whether to preserve the
+   * subject's existing permissions. Defaults to `true`.
+   * @param options.metadata - Additional metadata about the permission request.
+   * @returns The granted permissions and request metadata.
+   */
+  async requestPermissions(subject, requestedPermissions, options = {}) {
+    const { origin } = subject;
+    const { id = nanoid(), preserveExistingPermissions = true } = options;
+    this.validateRequestedPermissions(origin, requestedPermissions);
+    const metadata = {
+      ...options.metadata,
+      id,
+      origin
+    };
+    const permissionsRequest = {
+      metadata,
+      permissions: requestedPermissions
+    };
+    const approvedRequest = await this.requestUserApproval(permissionsRequest);
+    return await __privateMethod(this, _handleApprovedPermissions, handleApprovedPermissions_fn).call(this, {
+      subject,
+      metadata,
+      preserveExistingPermissions,
+      approvedRequest
+    });
+  }
+  /**
+   * Initiates an incremental permission request that prompts for user approval.
+   * Incremental permission requests allow the caller to replace existing and/or
+   * add brand new permissions and caveats for the specified subject.
+   *
+   * Incremental permission request are merged with the subject's existing permissions
+   * through a right-biased union, where the incremental permission are the right-hand
+   * side of the merger. If both sides of the merger specify the same caveats for a
+   * given permission, the caveats are merged using their specification's caveat merger
+   * property.
+   *
+   * Either this or {@link PermissionController.requestPermissions} should
+   * always be used to grant additional permissions to a subject, unless user
+   * approval has been obtained through some other means.
+   *
+   * Permissions are validated at every step of the approval process, and this
+   * method will reject if validation fails.
+   *
+   * @see {@link ApprovalController} For the user approval logic.
+   * @see {@link PermissionController.acceptPermissionsRequest} For the method
+   * that _accepts_ the request and resolves the user approval promise.
+   * @see {@link PermissionController.rejectPermissionsRequest} For the method
+   * that _rejects_ the request and the user approval promise.
+   * @param subject - The grantee subject.
+   * @param requestedPermissions - The requested permissions.
+   * @param options - Additional options.
+   * @param options.id - The id of the permissions request. Defaults to a unique
+   * id.
+   * @param options.metadata - Additional metadata about the permission request.
+   * @returns The granted permissions and request metadata.
+   */
+  async requestPermissionsIncremental(subject, requestedPermissions, options = {}) {
+    const { origin } = subject;
+    const { id = nanoid() } = options;
+    this.validateRequestedPermissions(origin, requestedPermissions);
+    const [newPermissions, permissionsDiff] = __privateMethod(this, _mergeIncrementalPermissions, mergeIncrementalPermissions_fn).call(this, origin, requestedPermissions);
+    try {
+      this.validateRequestedPermissions(origin, newPermissions);
+    } catch (error) {
+      if (error instanceof Error) {
+        throw new InvalidMergedPermissionsError(origin, error, permissionsDiff);
+      }
+      throw internalError("Unrecognized error type", { error });
+    }
+    const metadata = {
+      ...options.metadata,
+      id,
+      origin
+    };
+    const permissionsRequest = {
+      metadata,
+      permissions: newPermissions,
+      diff: permissionsDiff
+    };
+    const approvedRequest = await this.requestUserApproval(permissionsRequest);
+    return await __privateMethod(this, _handleApprovedPermissions, handleApprovedPermissions_fn).call(this, {
+      subject,
+      metadata,
+      preserveExistingPermissions: false,
+      approvedRequest
+    });
+  }
+  /**
+   * Validates requested permissions. Throws if validation fails.
+   *
+   * This method ensures that the requested permissions are a properly
+   * formatted {@link RequestedPermissions} object, and performs the same
+   * validation as {@link PermissionController.grantPermissions}, except that
+   * consumer-specified permission validator functions are not called, since
+   * they are only called on fully constructed, approved permissions that are
+   * otherwise completely valid.
+   *
+   * Unrecognzied properties on requested permissions are ignored.
+   *
+   * @param origin - The origin of the grantee subject.
+   * @param requestedPermissions - The requested permissions.
+   */
+  validateRequestedPermissions(origin, requestedPermissions) {
+    if (!isPlainObject(requestedPermissions)) {
+      throw invalidParams({
+        message: `Requested permissions for origin "${origin}" is not a plain object.`,
+        data: { origin, requestedPermissions }
+      });
+    }
+    if (Object.keys(requestedPermissions).length === 0) {
+      throw invalidParams({
+        message: `Permissions request for origin "${origin}" contains no permissions.`,
+        data: { requestedPermissions }
+      });
+    }
+    for (const targetName of Object.keys(requestedPermissions)) {
+      const permission = requestedPermissions[targetName];
+      if (!this.targetExists(targetName)) {
+        throw methodNotFound(targetName, { origin, requestedPermissions });
+      }
+      if (!isPlainObject(permission) || permission.parentCapability !== void 0 && targetName !== permission.parentCapability) {
+        throw invalidParams({
+          message: `Permissions request for origin "${origin}" contains invalid requested permission(s).`,
+          data: { origin, requestedPermissions }
+        });
+      }
+      this.validatePermission(
+        this.getPermissionSpecification(targetName),
+        // Typecast: The permission is still a "PlainObject" here.
+        permission,
+        origin,
+        { invokePermissionValidator: false, performCaveatValidation: true }
+      );
+    }
+  }
+  /**
+   * Adds a request to the {@link ApprovalController} using the
+   * {@link AddApprovalRequest} action. Also validates the resulting approved
+   * permissions request, and throws an error if validation fails.
+   *
+   * @param permissionsRequest - The permissions request object.
+   * @returns The approved permissions request object.
+   */
+  async requestUserApproval(permissionsRequest) {
+    const { origin, id } = permissionsRequest.metadata;
+    const approvedRequest = await this.messagingSystem.call(
+      "ApprovalController:addRequest",
+      {
+        id,
+        origin,
+        requestData: permissionsRequest,
+        type: "wallet_requestPermissions" /* requestPermissions */
+      },
+      true
+    );
+    this.validateApprovedPermissions(approvedRequest, { id, origin });
+    return approvedRequest;
+  }
+  /**
+   * Reunites all the side-effects (onPermitted and onFailure) of the requested permissions inside a record of arrays.
+   *
+   * @param permissions - The approved permissions.
+   * @returns The {@link SideEffects} object containing the handlers arrays.
+   */
+  getSideEffects(permissions) {
+    return Object.keys(permissions).reduce(
+      (sideEffectList, targetName) => {
+        if (this.targetExists(targetName)) {
+          const specification = this.getPermissionSpecification(targetName);
+          if (specification.sideEffect) {
+            sideEffectList.permittedHandlers[targetName] = specification.sideEffect.onPermitted;
+            if (specification.sideEffect.onFailure) {
+              sideEffectList.failureHandlers[targetName] = specification.sideEffect.onFailure;
+            }
+          }
+        }
+        return sideEffectList;
+      },
+      { permittedHandlers: {}, failureHandlers: {} }
+    );
+  }
+  /**
+   * Executes the side-effects of the approved permissions while handling the errors if any.
+   * It will pass an instance of the {@link messagingSystem} and the request data associated with the permission request to the handlers through its params.
+   *
+   * @param sideEffects - the side-effect record created by {@link getSideEffects}
+   * @param requestData - the permissions requestData.
+   * @returns the value returned by all the `onPermitted` handlers in an array.
+   */
+  async executeSideEffects(sideEffects, requestData) {
+    const { permittedHandlers, failureHandlers } = sideEffects;
+    const params = {
+      requestData,
+      messagingSystem: this.messagingSystem
+    };
+    const promiseResults = await Promise.allSettled(
+      Object.values(permittedHandlers).map(
+        (permittedHandler) => permittedHandler(params)
+      )
+    );
+    const rejectedHandlers = promiseResults.filter(
+      (promise) => promise.status === "rejected"
+    );
+    if (rejectedHandlers.length > 0) {
+      const failureHandlersList = Object.values(failureHandlers);
+      if (failureHandlersList.length > 0) {
+        try {
+          await Promise.all(
+            failureHandlersList.map((failureHandler) => failureHandler(params))
+          );
+        } catch (error) {
+          throw internalError("Unexpected error in side-effects", { error });
+        }
+      }
+      const reasons = rejectedHandlers.map((handler) => handler.reason);
+      reasons.forEach((reason) => {
+        console.error(reason);
+      });
+      throw reasons.length > 1 ? internalError(
+        "Multiple errors occurred during side-effects execution",
+        { errors: reasons }
+      ) : reasons[0];
+    }
+    return promiseResults.map(
+      ({ value }) => value
+    );
+  }
+  /**
+   * Validates an approved {@link PermissionsRequest} object. The approved
+   * request must have the required `metadata` and `permissions` properties,
+   * the `id` and `origin` of the `metadata` must match the original request
+   * metadata, and the requested permissions must be valid per
+   * {@link PermissionController.validateRequestedPermissions}. Any extra
+   * metadata properties are ignored.
+   *
+   * An error is thrown if validation fails.
+   *
+   * @param approvedRequest - The approved permissions request object.
+   * @param originalMetadata - The original request metadata.
+   */
+  validateApprovedPermissions(approvedRequest, originalMetadata) {
+    const { id, origin } = originalMetadata;
+    if (!isPlainObject(approvedRequest) || !isPlainObject(approvedRequest.metadata)) {
+      throw internalError(
+        `Approved permissions request for subject "${origin}" is invalid.`,
+        { data: { approvedRequest } }
+      );
+    }
+    const {
+      metadata: { id: newId, origin: newOrigin },
+      permissions
+    } = approvedRequest;
+    if (newId !== id) {
+      throw internalError(
+        `Approved permissions request for subject "${origin}" mutated its id.`,
+        { originalId: id, mutatedId: newId }
+      );
+    }
+    if (newOrigin !== origin) {
+      throw internalError(
+        `Approved permissions request for subject "${origin}" mutated its origin.`,
+        { originalOrigin: origin, mutatedOrigin: newOrigin }
+      );
+    }
+    try {
+      this.validateRequestedPermissions(origin, permissions);
+    } catch (error) {
+      if (error instanceof Error) {
+        throw internalError(
+          `Invalid approved permissions request: ${error.message}`,
+          error instanceof JsonRpcError ? error.data : void 0
+        );
+      }
+      throw internalError("Unrecognized error type", { error });
+    }
+  }
+  /**
+   * Accepts a permissions request created by
+   * {@link PermissionController.requestPermissions}.
+   *
+   * @param request - The permissions request.
+   */
+  async acceptPermissionsRequest(request) {
+    const { id } = request.metadata;
+    if (!this.hasApprovalRequest({ id })) {
+      throw new PermissionsRequestNotFoundError(id);
+    }
+    if (Object.keys(request.permissions).length === 0) {
+      this._rejectPermissionsRequest(
+        id,
+        invalidParams({
+          message: "Must request at least one permission."
+        })
+      );
+      return;
+    }
+    try {
+      this.messagingSystem.call(
+        "ApprovalController:acceptRequest",
+        id,
+        request
+      );
+    } catch (error) {
+      this._rejectPermissionsRequest(id, error);
+      throw error;
+    }
+  }
+  /**
+   * Rejects a permissions request created by
+   * {@link PermissionController.requestPermissions}.
+   *
+   * @param id - The id of the request to be rejected.
+   */
+  async rejectPermissionsRequest(id) {
+    if (!this.hasApprovalRequest({ id })) {
+      throw new PermissionsRequestNotFoundError(id);
+    }
+    this._rejectPermissionsRequest(id, userRejectedRequest());
+  }
+  /**
+   * Checks whether the {@link ApprovalController} has a particular permissions
+   * request.
+   *
+   * @see {@link PermissionController.acceptPermissionsRequest} and
+   * {@link PermissionController.rejectPermissionsRequest} for usage.
+   * @param options - The {@link HasApprovalRequest} options.
+   * @param options.id - The id of the approval request to check for.
+   * @returns Whether the specified request exists.
+   */
+  hasApprovalRequest(options) {
+    return this.messagingSystem.call("ApprovalController:hasRequest", options);
+  }
+  /**
+   * Rejects the permissions request with the specified id, with the specified
+   * error as the reason. This method is effectively a wrapper around a
+   * messenger call for the `ApprovalController:rejectRequest` action.
+   *
+   * @see {@link PermissionController.acceptPermissionsRequest} and
+   * {@link PermissionController.rejectPermissionsRequest} for usage.
+   * @param id - The id of the request to reject.
+   * @param error - The error associated with the rejection.
+   * @returns Nothing
+   */
+  _rejectPermissionsRequest(id, error) {
+    return this.messagingSystem.call(
+      "ApprovalController:rejectRequest",
+      id,
+      error
+    );
+  }
+  /**
+   * Gets the subject's endowments per the specified endowment permission.
+   * Throws if the subject does not have the required permission or if the
+   * permission is not an endowment permission.
+   *
+   * @param origin - The origin of the subject whose endowments to retrieve.
+   * @param targetName - The name of the endowment permission. This must be a
+   * valid permission target name.
+   * @param requestData - Additional data associated with the request, if any.
+   * Forwarded to the endowment getter function for the permission.
+   * @returns The endowments, if any.
+   */
+  async getEndowments(origin, targetName, requestData) {
+    if (!this.hasPermission(origin, targetName)) {
+      throw unauthorized({ data: { origin, targetName } });
+    }
+    return this.getTypedPermissionSpecification(
+      "Endowment" /* Endowment */,
+      targetName,
+      origin
+    ).endowmentGetter({ origin, requestData });
+  }
+  /**
+   * Executes a restricted method as the subject with the given origin.
+   * The specified params, if any, will be passed to the method implementation.
+   *
+   * ATTN: Great caution should be exercised in the use of this method.
+   * Methods that cause side effects or affect application state should
+   * be avoided.
+   *
+   * This method will first attempt to retrieve the requested restricted method
+   * implementation, throwing if it does not exist. The method will then be
+   * invoked as though the subject with the specified origin had invoked it with
+   * the specified parameters. This means that any existing caveats will be
+   * applied to the restricted method, and this method will throw if the
+   * restricted method or its caveat decorators throw.
+   *
+   * In addition, this method will throw if the subject does not have a
+   * permission for the specified restricted method.
+   *
+   * @param origin - The origin of the subject to execute the method on behalf
+   * of.
+   * @param targetName - The name of the method to execute. This must be a valid
+   * permission target name.
+   * @param params - The parameters to pass to the method implementation.
+   * @returns The result of the executed method.
+   */
+  async executeRestrictedMethod(origin, targetName, params) {
+    const methodImplementation = this.getRestrictedMethod(targetName, origin);
+    const result = await this._executeRestrictedMethod(
+      methodImplementation,
+      { origin },
+      targetName,
+      params
+    );
+    if (result === void 0) {
+      throw new Error(
+        `Internal request for method "${targetName}" as origin "${origin}" returned no result.`
+      );
+    }
+    return result;
+  }
+  /**
+   * An internal method used in the controller's `json-rpc-engine` middleware
+   * and {@link PermissionController.executeRestrictedMethod}. Calls the
+   * specified restricted method implementation after decorating it with the
+   * caveats of its permission. Throws if the subject does not have the
+   * requisite permission.
+   *
+   * ATTN: Parameter validation is the responsibility of the caller, or
+   * the restricted method implementation in the case of `params`.
+   *
+   * @see {@link PermissionController.executeRestrictedMethod} and
+   * {@link PermissionController.createPermissionMiddleware} for usage.
+   * @param methodImplementation - The implementation of the method to call.
+   * @param subject - Metadata about the subject that made the request.
+   * @param method - The method name
+   * @param params - Params needed for executing the restricted method
+   * @returns The result of the restricted method implementation
+   */
+  _executeRestrictedMethod(methodImplementation, subject, method, params = []) {
+    const { origin } = subject;
+    const permission = this.getPermission(origin, method);
+    if (!permission) {
+      throw unauthorized({ data: { origin, method } });
+    }
+    return decorateWithCaveats(
+      methodImplementation,
+      permission,
+      this._caveatSpecifications
+    )({ method, params, context: { origin } });
+  }
+};
+_mergeIncrementalPermissions = new WeakSet();
+mergeIncrementalPermissions_fn = function(origin, incrementalRequestedPermissions) {
+  const [newPermissions, permissionsDiff] = produceWithPatches(
+    this.getPermissions(origin) ?? {},
+    (existingPermissions) => {
+      const leftPermissions = existingPermissions;
+      Object.entries(incrementalRequestedPermissions).forEach(
+        ([targetName, rightPermission]) => {
+          if (!hasProperty(
+            // We type-guard the targetName key out of existence without this cast.
+            leftPermissions,
+            targetName
+          )) {
+            leftPermissions[targetName] = rightPermission;
+          } else {
+            const leftPermission = leftPermissions[targetName];
+            leftPermissions[targetName] = __privateMethod(this, _mergePermission, mergePermission_fn).call(this, leftPermission, rightPermission);
+          }
+        }
+      );
+    }
+  );
+  return [newPermissions, permissionsDiff];
+};
+_mergePermission = new WeakSet();
+mergePermission_fn = function(leftPermission, rightPermission) {
+  const { caveatPairs, uniqueCaveats } = __privateMethod(this, _collectUniqueAndPairedCaveats, collectUniqueAndPairedCaveats_fn).call(this, leftPermission, rightPermission);
+  const mergedCaveats = caveatPairs.map(([leftCaveat, rightCaveat]) => {
+    const { merger } = this.getCaveatSpecification(leftCaveat.type);
+    if (!merger) {
+      throw new CaveatMergerDoesNotExistError(leftCaveat.type);
+    }
+    return merger(leftCaveat, rightCaveat);
+  });
+  const allCaveats = [...mergedCaveats, ...uniqueCaveats];
+  return {
+    ...leftPermission,
+    ...rightPermission,
+    ...allCaveats.length > 0 ? { caveats: allCaveats } : {}
+  };
+};
+_collectUniqueAndPairedCaveats = new WeakSet();
+collectUniqueAndPairedCaveats_fn = function(leftPermission, rightPermission) {
+  const leftCaveats = leftPermission.caveats ?? [];
+  const rightCaveats = rightPermission.caveats ?? [];
+  const uniqueCaveats = [];
+  const caveatPairs = [];
+  leftCaveats.forEach((leftCaveat) => {
+    const rightCaveatIndex = rightCaveats.findIndex(
+      (rightCaveat) => rightCaveat.type === leftCaveat.type
+    );
+    if (rightCaveatIndex === -1) {
+      uniqueCaveats.push(leftCaveat);
+    } else {
+      caveatPairs.push([leftCaveat, rightCaveats[rightCaveatIndex]]);
+      rightCaveats.splice(rightCaveatIndex, 1);
+    }
+  });
+  uniqueCaveats.push(...rightCaveats);
+  return { caveatPairs, uniqueCaveats };
+};
+_handleApprovedPermissions = new WeakSet();
+handleApprovedPermissions_fn = async function({
+  subject,
+  metadata,
+  preserveExistingPermissions,
+  approvedRequest
+}) {
+  const { permissions: approvedPermissions, ...requestData } = approvedRequest;
+  const approvedMetadata = { ...metadata };
+  const sideEffects = this.getSideEffects(approvedPermissions);
+  if (Object.values(sideEffects.permittedHandlers).length > 0) {
+    const sideEffectsData = await this.executeSideEffects(
+      sideEffects,
+      approvedRequest
+    );
+    approvedMetadata.data = Object.keys(sideEffects.permittedHandlers).reduce(
+      (acc, permission, i) => ({ [permission]: sideEffectsData[i], ...acc }),
+      {}
+    );
+  }
+  return [
+    this.grantPermissions({
+      subject,
+      approvedPermissions,
+      preserveExistingPermissions,
+      requestData
+    }),
+    approvedMetadata
+  ];
+};
+
+export {
+  CaveatMutatorOperation,
+  PermissionController
+};
+//# sourceMappingURL=chunk-MSZMGMUN.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-MSZMGMUN.mjs.map b/dist/chunk-MSZMGMUN.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..902b90482c3d6f76609445fa519665fffcce1c75
--- /dev/null
+++ b/dist/chunk-MSZMGMUN.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/PermissionController.ts"],"sourcesContent":["/* eslint-enable @typescript-eslint/no-unused-vars */\nimport type {\n  AcceptRequest as AcceptApprovalRequest,\n  AddApprovalRequest,\n  HasApprovalRequest,\n  RejectRequest as RejectApprovalRequest,\n} from '@metamask/approval-controller';\nimport type {\n  StateMetadata,\n  RestrictedControllerMessenger,\n  ActionConstraint,\n  EventConstraint,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type { NonEmptyArray } from '@metamask/controller-utils';\nimport {\n  isNonEmptyArray,\n  isPlainObject,\n  isValidJson,\n} from '@metamask/controller-utils';\nimport { JsonRpcError } from '@metamask/rpc-errors';\nimport { hasProperty } from '@metamask/utils';\nimport type { Json, Mutable } from '@metamask/utils';\nimport deepFreeze from 'deep-freeze-strict';\nimport type { Patch } from 'immer';\nimport { castDraft, produceWithPatches, type Draft } from 'immer';\nimport { nanoid } from 'nanoid';\n\nimport type {\n  CaveatConstraint,\n  CaveatSpecificationConstraint,\n  CaveatSpecificationMap,\n  ExtractCaveat,\n  ExtractCaveats,\n  ExtractCaveatValue,\n} from './Caveat';\nimport {\n  decorateWithCaveats,\n  isRestrictedMethodCaveatSpecification,\n} from './Caveat';\nimport {\n  CaveatAlreadyExistsError,\n  CaveatDoesNotExistError,\n  CaveatInvalidJsonError,\n  CaveatMergerDoesNotExistError,\n  CaveatMissingValueError,\n  CaveatSpecificationMismatchError,\n  DuplicateCaveatError,\n  EndowmentPermissionDoesNotExistError,\n  ForbiddenCaveatError,\n  internalError,\n  InvalidApprovedPermissionError,\n  InvalidCaveatError,\n  InvalidCaveatFieldsError,\n  InvalidCaveatsPropertyError,\n  InvalidCaveatTypeError,\n  InvalidMergedPermissionsError,\n  invalidParams,\n  InvalidSubjectIdentifierError,\n  methodNotFound,\n  PermissionDoesNotExistError,\n  PermissionsRequestNotFoundError,\n  unauthorized,\n  UnrecognizedCaveatTypeError,\n  UnrecognizedSubjectError,\n  userRejectedRequest,\n} from './errors';\nimport type {\n  EndowmentSpecificationConstraint,\n  ExtractAllowedCaveatTypes,\n  ExtractPermissionSpecification,\n  OriginString,\n  PermissionConstraint,\n  PermissionSpecificationConstraint,\n  PermissionSpecificationMap,\n  RequestedPermissions,\n  RestrictedMethod,\n  RestrictedMethodParameters,\n  RestrictedMethodSpecificationConstraint,\n  SideEffectHandler,\n  ValidPermission,\n  ValidPermissionSpecification,\n} from './Permission';\nimport {\n  constructPermission,\n  findCaveat,\n  hasSpecificationType,\n  PermissionType,\n} from './Permission';\nimport { getPermissionMiddlewareFactory } from './permission-middleware';\nimport type { GetSubjectMetadata } from './SubjectMetadataController';\nimport { MethodNames } from './utils';\n\n/**\n * Metadata associated with {@link PermissionController} subjects.\n */\nexport type PermissionSubjectMetadata = {\n  origin: OriginString;\n};\n\n/**\n * Metadata associated with permission requests.\n */\nexport type PermissionsRequestMetadata = PermissionSubjectMetadata & {\n  id: string;\n  [key: string]: Json;\n};\n\n/**\n * A diff produced by an incremental permissions request.\n */\nexport type PermissionsDiff = (Omit<Patch, 'value'> & { value: Json })[];\n\n/**\n * Used for prompting the user about a proposed new permission.\n * Includes information about the grantee subject, requested permissions, and\n * any additional information added by the consumer.\n *\n * All properties except `permissions` are passed to any factories found for\n * the requested permissions.\n */\nexport type PermissionsRequest = {\n  metadata: PermissionsRequestMetadata;\n  permissions: RequestedPermissions;\n  [key: string]: Json;\n} & { diff?: PermissionsDiff };\n\n/**\n * Metadata associated with an approved permission request.\n */\ntype ApprovedPermissionsMetadata = {\n  data?: Record<string, unknown>;\n  id: string;\n  origin: OriginString;\n};\n\nexport type SideEffects = {\n  permittedHandlers: Record<\n    string,\n    SideEffectHandler<ActionConstraint, EventConstraint>\n  >;\n  failureHandlers: Record<\n    string,\n    SideEffectHandler<ActionConstraint, EventConstraint>\n  >;\n};\n\n/**\n * The name of the {@link PermissionController}.\n */\nconst controllerName = 'PermissionController';\n\n/**\n * Permissions associated with a {@link PermissionController} subject.\n */\nexport type SubjectPermissions<Permission extends PermissionConstraint> =\n  Record<Permission['parentCapability'], Permission>;\n\n/**\n * Permissions and metadata associated with a {@link PermissionController}\n * subject.\n */\nexport type PermissionSubjectEntry<\n  SubjectPermission extends PermissionConstraint,\n> = {\n  origin: SubjectPermission['invoker'];\n  permissions: SubjectPermissions<SubjectPermission>;\n};\n\n/**\n * All subjects of a {@link PermissionController}.\n *\n * @template SubjectPermission - The permissions of the subject.\n */\nexport type PermissionControllerSubjects<\n  SubjectPermission extends PermissionConstraint,\n> = Record<\n  SubjectPermission['invoker'],\n  PermissionSubjectEntry<SubjectPermission>\n>;\n\n/**\n * The state of a {@link PermissionController}.\n *\n * @template Permission - The controller's permission type union.\n */\nexport type PermissionControllerState<Permission> =\n  Permission extends PermissionConstraint\n    ? {\n        subjects: PermissionControllerSubjects<Permission>;\n      }\n    : never;\n\n/**\n * Get the state metadata of the {@link PermissionController}.\n *\n * @template Permission - The controller's permission type union.\n * @returns The state metadata\n */\nfunction getStateMetadata<Permission extends PermissionConstraint>() {\n  return { subjects: { anonymous: true, persist: true } } as StateMetadata<\n    PermissionControllerState<Permission>\n  >;\n}\n\n/**\n * Get the default state of the {@link PermissionController}.\n *\n * @template Permission - The controller's permission type union.\n * @returns The default state of the controller\n */\nfunction getDefaultState<Permission extends PermissionConstraint>() {\n  return { subjects: {} } as PermissionControllerState<Permission>;\n}\n\n/**\n * Gets the state of the {@link PermissionController}.\n */\nexport type GetPermissionControllerState = ControllerGetStateAction<\n  typeof controllerName,\n  PermissionControllerState<PermissionConstraint>\n>;\n\n/**\n * Gets the names of all subjects from the {@link PermissionController}.\n */\nexport type GetSubjects = {\n  type: `${typeof controllerName}:getSubjectNames`;\n  handler: () => (keyof PermissionControllerSubjects<PermissionConstraint>)[];\n};\n\n/**\n * Gets the permissions for specified subject\n */\nexport type GetPermissions = {\n  type: `${typeof controllerName}:getPermissions`;\n  handler: GenericPermissionController['getPermissions'];\n};\n\n/**\n * Checks whether the specified subject has any permissions.\n */\nexport type HasPermissions = {\n  type: `${typeof controllerName}:hasPermissions`;\n  handler: GenericPermissionController['hasPermissions'];\n};\n\n/**\n * Checks whether the specified subject has a specific permission.\n */\nexport type HasPermission = {\n  type: `${typeof controllerName}:hasPermission`;\n  handler: GenericPermissionController['hasPermission'];\n};\n\n/**\n * Directly grants given permissions for a specificed origin without requesting user approval\n */\nexport type GrantPermissions = {\n  type: `${typeof controllerName}:grantPermissions`;\n  handler: GenericPermissionController['grantPermissions'];\n};\n\n/**\n * Requests given permissions for a specified origin\n */\nexport type RequestPermissions = {\n  type: `${typeof controllerName}:requestPermissions`;\n  handler: GenericPermissionController['requestPermissions'];\n};\n\n/**\n * Removes the specified permissions for each origin.\n */\nexport type RevokePermissions = {\n  type: `${typeof controllerName}:revokePermissions`;\n  handler: GenericPermissionController['revokePermissions'];\n};\n\n/**\n * Removes all permissions for a given origin\n */\nexport type RevokeAllPermissions = {\n  type: `${typeof controllerName}:revokeAllPermissions`;\n  handler: GenericPermissionController['revokeAllPermissions'];\n};\n\n/**\n * Revokes all permissions corresponding to the specified target for all subjects.\n * Does nothing if no subjects or no such permission exists.\n */\nexport type RevokePermissionForAllSubjects = {\n  type: `${typeof controllerName}:revokePermissionForAllSubjects`;\n  handler: GenericPermissionController['revokePermissionForAllSubjects'];\n};\n\n/**\n * Updates a caveat value for a specified caveat type belonging to a specific target and origin.\n */\nexport type UpdateCaveat = {\n  type: `${typeof controllerName}:updateCaveat`;\n  handler: GenericPermissionController['updateCaveat'];\n};\n\n/**\n * TODO:cm\n * Updates a caveat value for a specified caveat type belonging to a specific target and origin.\n */\nexport type UpdateCaveatIncremental = {\n  type: `${typeof controllerName}:updateCaveatIncremental`;\n  handler: GenericPermissionController['updateCaveatIncremental'];\n};\n\n/**\n * Clears all permissions from the {@link PermissionController}.\n */\nexport type ClearPermissions = {\n  type: `${typeof controllerName}:clearPermissions`;\n  handler: () => void;\n};\n\n/**\n * Gets the endowments for the given subject and permission.\n */\nexport type GetEndowments = {\n  type: `${typeof controllerName}:getEndowments`;\n  handler: GenericPermissionController['getEndowments'];\n};\n\n/**\n * The {@link ControllerMessenger} actions of the {@link PermissionController}.\n */\nexport type PermissionControllerActions =\n  | ClearPermissions\n  | GetEndowments\n  | GetPermissionControllerState\n  | GetSubjects\n  | GetPermissions\n  | HasPermission\n  | HasPermissions\n  | GrantPermissions\n  | RequestPermissions\n  | RevokeAllPermissions\n  | RevokePermissionForAllSubjects\n  | RevokePermissions\n  | UpdateCaveat\n  | UpdateCaveatIncremental;\n\n/**\n * The generic state change event of the {@link PermissionController}.\n */\nexport type PermissionControllerStateChange = ControllerStateChangeEvent<\n  typeof controllerName,\n  PermissionControllerState<PermissionConstraint>\n>;\n\n/**\n * The {@link ControllerMessenger} events of the {@link PermissionController}.\n *\n * The permission controller only emits its generic state change events.\n * Consumers should use selector subscriptions to subscribe to relevant\n * substate.\n */\nexport type PermissionControllerEvents = PermissionControllerStateChange;\n\n/**\n * The external {@link ControllerMessenger} actions available to the\n * {@link PermissionController}.\n */\ntype AllowedActions =\n  | AddApprovalRequest\n  | HasApprovalRequest\n  | AcceptApprovalRequest\n  | RejectApprovalRequest\n  | GetSubjectMetadata;\n\n/**\n * The messenger of the {@link PermissionController}.\n */\nexport type PermissionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  PermissionControllerActions | AllowedActions,\n  PermissionControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\nexport type SideEffectMessenger<\n  Actions extends ActionConstraint,\n  Events extends EventConstraint,\n> = RestrictedControllerMessenger<\n  typeof controllerName,\n  Actions | AllowedActions,\n  Events,\n  AllowedActions['type'] | Actions['type'],\n  Events['type']\n>;\n\n/**\n * A generic {@link PermissionController}.\n */\nexport type GenericPermissionController = PermissionController<\n  PermissionSpecificationConstraint,\n  CaveatSpecificationConstraint\n>;\n\n/**\n * Describes the possible results of a {@link CaveatMutator} function.\n */\nexport enum CaveatMutatorOperation {\n  noop,\n  updateValue,\n  deleteCaveat,\n  revokePermission,\n}\n\n/**\n * Given a caveat value, returns a {@link CaveatMutatorOperation} and, optionally,\n * a new caveat value.\n *\n * @see {@link PermissionController.updatePermissionsByCaveat} for more details.\n * @template Caveat - The caveat type for which this mutator is intended.\n * @param caveatValue - The existing value of the caveat being mutated.\n * @returns A tuple of the mutation result and, optionally, the new caveat\n * value.\n */\nexport type CaveatMutator<TargetCaveat extends CaveatConstraint> = (\n  caveatValue: TargetCaveat['value'],\n) => CaveatMutatorResult;\n\ntype CaveatMutatorResult =\n  | Readonly<{\n      operation: CaveatMutatorOperation.updateValue;\n      value: CaveatConstraint['value'];\n    }>\n  | Readonly<{\n      operation: Exclude<\n        CaveatMutatorOperation,\n        CaveatMutatorOperation.updateValue\n      >;\n    }>;\n\n/**\n * Extracts the permission(s) specified by the given permission and caveat\n * specifications.\n *\n * @template ControllerPermissionSpecification - The permission specification(s)\n * to extract from.\n * @template ControllerCaveatSpecification - The caveat specification(s) to\n * extract from. Necessary because {@link Permission} has a generic parameter\n * that describes the allowed caveats for the permission.\n */\nexport type ExtractPermission<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> = ControllerPermissionSpecification extends ValidPermissionSpecification<ControllerPermissionSpecification>\n  ? ValidPermission<\n      ControllerPermissionSpecification['targetName'],\n      ExtractCaveats<ControllerCaveatSpecification>\n    >\n  : never;\n\n/**\n * Extracts the restricted method permission(s) specified by the given\n * permission and caveat specifications.\n *\n * @template ControllerPermissionSpecification - The permission specification(s)\n * to extract from.\n * @template ControllerCaveatSpecification - The caveat specification(s) to\n * extract from. Necessary because {@link Permission} has a generic parameter\n * that describes the allowed caveats for the permission.\n */\nexport type ExtractRestrictedMethodPermission<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> = ExtractPermission<\n  Extract<\n    ControllerPermissionSpecification,\n    RestrictedMethodSpecificationConstraint\n  >,\n  ControllerCaveatSpecification\n>;\n\n/**\n * Extracts the endowment permission(s) specified by the given permission and\n * caveat specifications.\n *\n * @template ControllerPermissionSpecification - The permission specification(s)\n * to extract from.\n * @template ControllerCaveatSpecification - The caveat specification(s) to\n * extract from. Necessary because {@link Permission} has a generic parameter\n * that describes the allowed caveats for the permission.\n */\nexport type ExtractEndowmentPermission<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> = ExtractPermission<\n  Extract<ControllerPermissionSpecification, EndowmentSpecificationConstraint>,\n  ControllerCaveatSpecification\n>;\n\n/**\n * Options for the {@link PermissionController} constructor.\n *\n * @template ControllerPermissionSpecification - A union of the types of all\n * permission specifications available to the controller. Any referenced caveats\n * must be included in the controller's caveat specifications.\n * @template ControllerCaveatSpecification - A union of the types of all\n * caveat specifications available to the controller.\n */\nexport type PermissionControllerOptions<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> = {\n  messenger: PermissionControllerMessenger;\n  caveatSpecifications: CaveatSpecificationMap<ControllerCaveatSpecification>;\n  permissionSpecifications: PermissionSpecificationMap<ControllerPermissionSpecification>;\n  unrestrictedMethods: readonly string[];\n  state?: Partial<\n    PermissionControllerState<\n      ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >\n    >\n  >;\n};\n\n/**\n * The permission controller. See the [Architecture](../ARCHITECTURE.md)\n * document for details.\n *\n * Assumes the existence of an {@link ApprovalController} reachable via the\n * {@link ControllerMessenger}.\n *\n * @template ControllerPermissionSpecification - A union of the types of all\n * permission specifications available to the controller. Any referenced caveats\n * must be included in the controller's caveat specifications.\n * @template ControllerCaveatSpecification - A union of the types of all\n * caveat specifications available to the controller.\n */\nexport class PermissionController<\n  ControllerPermissionSpecification extends PermissionSpecificationConstraint,\n  ControllerCaveatSpecification extends CaveatSpecificationConstraint,\n> extends BaseController<\n  typeof controllerName,\n  PermissionControllerState<\n    ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >\n  >,\n  PermissionControllerMessenger\n> {\n  private readonly _caveatSpecifications: Readonly<\n    CaveatSpecificationMap<ControllerCaveatSpecification>\n  >;\n\n  private readonly _permissionSpecifications: Readonly<\n    PermissionSpecificationMap<ControllerPermissionSpecification>\n  >;\n\n  private readonly _unrestrictedMethods: ReadonlySet<string>;\n\n  /**\n   * The names of all JSON-RPC methods that will be ignored by the controller.\n   *\n   * @returns The names of all unrestricted JSON-RPC methods\n   */\n  public get unrestrictedMethods(): ReadonlySet<string> {\n    return this._unrestrictedMethods;\n  }\n\n  /**\n   * Returns a `json-rpc-engine` middleware function factory, so that the rules\n   * described by the state of this controller can be applied to incoming\n   * JSON-RPC requests.\n   *\n   * The middleware **must** be added in the correct place in the middleware\n   * stack in order for it to work. See the README for an example.\n   */\n  public createPermissionMiddleware: ReturnType<\n    typeof getPermissionMiddlewareFactory\n  >;\n\n  /**\n   * Constructs the PermissionController.\n   *\n   * @param options - Permission controller options.\n   * @param options.caveatSpecifications - The specifications of all caveats\n   * available to the controller. See {@link CaveatSpecificationMap} and the\n   * documentation for more details.\n   * @param options.permissionSpecifications - The specifications of all\n   * permissions available to the controller. See\n   * {@link PermissionSpecificationMap} and the README for more details.\n   * @param options.unrestrictedMethods - The callable names of all JSON-RPC\n   * methods ignored by the new controller.\n   * @param options.messenger - The controller messenger. See\n   * {@link BaseController} for more information.\n   * @param options.state - Existing state to hydrate the controller with at\n   * initialization.\n   */\n  constructor(\n    options: PermissionControllerOptions<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >,\n  ) {\n    const {\n      caveatSpecifications,\n      permissionSpecifications,\n      unrestrictedMethods,\n      messenger,\n      state = {},\n    } = options;\n\n    super({\n      name: controllerName,\n      metadata:\n        getStateMetadata<\n          ExtractPermission<\n            ControllerPermissionSpecification,\n            ControllerCaveatSpecification\n          >\n        >(),\n      messenger,\n      state: {\n        ...getDefaultState<\n          ExtractPermission<\n            ControllerPermissionSpecification,\n            ControllerCaveatSpecification\n          >\n        >(),\n        ...state,\n      },\n    });\n\n    this._unrestrictedMethods = new Set(unrestrictedMethods);\n    this._caveatSpecifications = deepFreeze({ ...caveatSpecifications });\n\n    this.validatePermissionSpecifications(\n      permissionSpecifications,\n      this._caveatSpecifications,\n    );\n\n    this._permissionSpecifications = deepFreeze({\n      ...permissionSpecifications,\n    });\n\n    this.registerMessageHandlers();\n    this.createPermissionMiddleware = getPermissionMiddlewareFactory({\n      executeRestrictedMethod: this._executeRestrictedMethod.bind(this),\n      getRestrictedMethod: this.getRestrictedMethod.bind(this),\n      isUnrestrictedMethod: this.unrestrictedMethods.has.bind(\n        this.unrestrictedMethods,\n      ),\n    });\n  }\n\n  /**\n   * Gets a permission specification.\n   *\n   * @param targetName - The name of the permission specification to get.\n   * @returns The permission specification with the specified target name.\n   */\n  private getPermissionSpecification<\n    TargetName extends ControllerPermissionSpecification['targetName'],\n  >(\n    targetName: TargetName,\n  ): ExtractPermissionSpecification<\n    ControllerPermissionSpecification,\n    TargetName\n  > {\n    return this._permissionSpecifications[targetName];\n  }\n\n  /**\n   * Gets a caveat specification.\n   *\n   * @param caveatType - The type of the caveat specification to get.\n   * @returns The caveat specification with the specified type.\n   */\n  private getCaveatSpecification<\n    CaveatType extends ControllerCaveatSpecification['type'],\n  >(caveatType: CaveatType) {\n    return this._caveatSpecifications[caveatType];\n  }\n\n  /**\n   * Constructor helper for validating permission specifications.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param permissionSpecifications - The permission specifications passed to\n   * this controller's constructor.\n   * @param caveatSpecifications - The caveat specifications passed to this\n   * controller.\n   */\n  private validatePermissionSpecifications(\n    permissionSpecifications: PermissionSpecificationMap<ControllerPermissionSpecification>,\n    caveatSpecifications: CaveatSpecificationMap<ControllerCaveatSpecification>,\n  ) {\n    Object.entries<ControllerPermissionSpecification>(\n      permissionSpecifications,\n    ).forEach(\n      ([\n        targetName,\n        { permissionType, targetName: innerTargetName, allowedCaveats },\n      ]) => {\n        if (!permissionType || !hasProperty(PermissionType, permissionType)) {\n          throw new Error(`Invalid permission type: \"${permissionType}\"`);\n        }\n\n        if (!targetName) {\n          throw new Error(`Invalid permission target name: \"${targetName}\"`);\n        }\n\n        if (targetName !== innerTargetName) {\n          throw new Error(\n            `Invalid permission specification: target name \"${targetName}\" must match specification.targetName value \"${innerTargetName}\".`,\n          );\n        }\n\n        if (allowedCaveats) {\n          allowedCaveats.forEach((caveatType) => {\n            if (!hasProperty(caveatSpecifications, caveatType)) {\n              throw new UnrecognizedCaveatTypeError(caveatType);\n            }\n\n            const specification =\n              caveatSpecifications[\n                caveatType as ControllerCaveatSpecification['type']\n              ];\n            const isRestrictedMethodCaveat =\n              isRestrictedMethodCaveatSpecification(specification);\n\n            if (\n              (permissionType === PermissionType.RestrictedMethod &&\n                !isRestrictedMethodCaveat) ||\n              (permissionType === PermissionType.Endowment &&\n                isRestrictedMethodCaveat)\n            ) {\n              throw new CaveatSpecificationMismatchError(\n                specification,\n                permissionType,\n              );\n            }\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Constructor helper for registering the controller's messaging system\n   * actions.\n   */\n  private registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearPermissions` as const,\n      () => this.clearState(),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getEndowments` as const,\n      (origin: string, targetName: string, requestData?: unknown) =>\n        this.getEndowments(origin, targetName, requestData),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getSubjectNames` as const,\n      () => this.getSubjectNames(),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getPermissions` as const,\n      (origin: OriginString) => this.getPermissions(origin),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasPermission` as const,\n      (origin: OriginString, targetName: string) =>\n        this.hasPermission(origin, targetName),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasPermissions` as const,\n      (origin: OriginString) => this.hasPermissions(origin),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:grantPermissions` as const,\n      this.grantPermissions.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:requestPermissions` as const,\n      (subject: PermissionSubjectMetadata, permissions: RequestedPermissions) =>\n        this.requestPermissions(subject, permissions),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokeAllPermissions` as const,\n      (origin: OriginString) => this.revokeAllPermissions(origin),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokePermissionForAllSubjects` as const,\n      (\n        target: ExtractPermission<\n          ControllerPermissionSpecification,\n          ControllerCaveatSpecification\n        >['parentCapability'],\n      ) => this.revokePermissionForAllSubjects(target),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokePermissions` as const,\n      this.revokePermissions.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateCaveat` as const,\n      (origin, target, caveatType, caveatValue) => {\n        this.updateCaveat(\n          origin,\n          target,\n          caveatType as ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n          caveatValue,\n        );\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateCaveatIncremental` as const,\n      (origin, target, caveatType, addedCaveatValue) => {\n        this.updateCaveatIncremental(\n          origin,\n          target,\n          caveatType as ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n          addedCaveatValue,\n        );\n      },\n    );\n  }\n\n  /**\n   * Clears the state of the controller.\n   */\n  clearState(): void {\n    this.update((_draftState) => {\n      return {\n        ...getDefaultState<\n          ExtractPermission<\n            ControllerPermissionSpecification,\n            ControllerCaveatSpecification\n          >\n        >(),\n      };\n    });\n  }\n\n  /**\n   * Gets the permission specification corresponding to the given permission\n   * type and target name. Throws an error if the target name does not\n   * correspond to a permission, or if the specification is not of the\n   * given permission type.\n   *\n   * @template Type - The type of the permission specification to get.\n   * @param permissionType - The type of the permission specification to get.\n   * @param targetName - The name of the permission whose specification to get.\n   * @param requestingOrigin - The origin of the requesting subject, if any.\n   * Will be added to any thrown errors.\n   * @returns The specification object corresponding to the given type and\n   * target name.\n   */\n  private getTypedPermissionSpecification<Type extends PermissionType>(\n    permissionType: Type,\n    targetName: string,\n    requestingOrigin?: string,\n  ): ControllerPermissionSpecification & { permissionType: Type } {\n    const failureError =\n      permissionType === PermissionType.RestrictedMethod\n        ? methodNotFound(\n            targetName,\n            requestingOrigin ? { origin: requestingOrigin } : undefined,\n          )\n        : new EndowmentPermissionDoesNotExistError(\n            targetName,\n            requestingOrigin,\n          );\n\n    if (!this.targetExists(targetName)) {\n      throw failureError;\n    }\n\n    const specification = this.getPermissionSpecification(targetName);\n    if (!hasSpecificationType(specification, permissionType)) {\n      throw failureError;\n    }\n\n    return specification;\n  }\n\n  /**\n   * Gets the implementation of the specified restricted method.\n   *\n   * A JSON-RPC error is thrown if the method does not exist.\n   *\n   * @see {@link PermissionController.executeRestrictedMethod} and\n   * {@link PermissionController.createPermissionMiddleware} for internal usage.\n   * @param method - The name of the restricted method.\n   * @param origin - The origin associated with the request for the restricted\n   * method, if any.\n   * @returns The restricted method implementation.\n   */\n  getRestrictedMethod(\n    method: string,\n    origin?: string,\n  ): RestrictedMethod<RestrictedMethodParameters, Json> {\n    return this.getTypedPermissionSpecification(\n      PermissionType.RestrictedMethod,\n      method,\n      origin,\n    ).methodImplementation;\n  }\n\n  /**\n   * Gets a list of all origins of subjects.\n   *\n   * @returns The origins (i.e. IDs) of all subjects.\n   */\n  getSubjectNames(): OriginString[] {\n    return Object.keys(this.state.subjects);\n  }\n\n  /**\n   * Gets the permission for the specified target of the subject corresponding\n   * to the specified origin.\n   *\n   * @param origin - The origin of the subject.\n   * @param targetName - The method name as invoked by a third party (i.e., not\n   * a method key).\n   * @returns The permission if it exists, or undefined otherwise.\n   */\n  getPermission<\n    SubjectPermission extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >,\n  >(\n    origin: OriginString,\n    targetName: SubjectPermission['parentCapability'],\n  ): SubjectPermission | undefined {\n    return this.state.subjects[origin]?.permissions[targetName] as\n      | SubjectPermission\n      | undefined;\n  }\n\n  /**\n   * Gets all permissions for the specified subject, if any.\n   *\n   * @param origin - The origin of the subject.\n   * @returns The permissions of the subject, if any.\n   */\n  getPermissions(\n    origin: OriginString,\n  ):\n    | SubjectPermissions<\n        ValidPermission<string, ExtractCaveats<ControllerCaveatSpecification>>\n      >\n    | undefined {\n    return this.state.subjects[origin]?.permissions;\n  }\n\n  /**\n   * Checks whether the subject with the specified origin has the specified\n   * permission.\n   *\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @returns Whether the subject has the permission.\n   */\n  hasPermission(\n    origin: OriginString,\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n  ): boolean {\n    return Boolean(this.getPermission(origin, target));\n  }\n\n  /**\n   * Checks whether the subject with the specified origin has any permissions.\n   * Use this if you want to know if a subject \"exists\".\n   *\n   * @param origin - The origin of the subject to check.\n   * @returns Whether the subject has any permissions.\n   */\n  hasPermissions(origin: OriginString): boolean {\n    return Boolean(this.state.subjects[origin]);\n  }\n\n  /**\n   * Revokes all permissions from the specified origin.\n   *\n   * Throws an error of the origin has no permissions.\n   *\n   * @param origin - The origin whose permissions to revoke.\n   */\n  revokeAllPermissions(origin: OriginString): void {\n    this.update((draftState) => {\n      if (!draftState.subjects[origin]) {\n        throw new UnrecognizedSubjectError(origin);\n      }\n      delete draftState.subjects[origin];\n    });\n  }\n\n  /**\n   * Revokes the specified permission from the subject with the specified\n   * origin.\n   *\n   * Throws an error if the subject or the permission does not exist.\n   *\n   * @param origin - The origin of the subject whose permission to revoke.\n   * @param target - The target name of the permission to revoke.\n   */\n  revokePermission(\n    origin: OriginString,\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n  ): void {\n    this.revokePermissions({ [origin]: [target] });\n  }\n\n  /**\n   * Revokes the specified permissions from the specified subjects.\n   *\n   * Throws an error if any of the subjects or permissions do not exist.\n   *\n   * @param subjectsAndPermissions - An object mapping subject origins\n   * to arrays of permission target names to revoke.\n   */\n  revokePermissions(\n    subjectsAndPermissions: Record<\n      OriginString,\n      NonEmptyArray<\n        ExtractPermission<\n          ControllerPermissionSpecification,\n          ControllerCaveatSpecification\n        >['parentCapability']\n      >\n    >,\n  ): void {\n    this.update((draftState) => {\n      Object.keys(subjectsAndPermissions).forEach((origin) => {\n        if (!hasProperty(draftState.subjects, origin)) {\n          throw new UnrecognizedSubjectError(origin);\n        }\n\n        subjectsAndPermissions[origin].forEach((target) => {\n          const { permissions } = draftState.subjects[origin];\n          if (!hasProperty(permissions as Record<string, unknown>, target)) {\n            throw new PermissionDoesNotExistError(origin, target);\n          }\n\n          this.deletePermission(draftState.subjects, origin, target);\n        });\n      });\n    });\n  }\n\n  /**\n   * Revokes all permissions corresponding to the specified target for all subjects.\n   * Does nothing if no subjects or no such permission exists.\n   *\n   * @param target - The name of the target to revoke all permissions for.\n   */\n  revokePermissionForAllSubjects(\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n  ): void {\n    if (this.getSubjectNames().length === 0) {\n      return;\n    }\n\n    this.update((draftState) => {\n      Object.entries(draftState.subjects).forEach(([origin, subject]) => {\n        const { permissions } = subject;\n\n        if (hasProperty(permissions as Record<string, unknown>, target)) {\n          this.deletePermission(draftState.subjects, origin, target);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deletes the permission identified by the given origin and target. If the\n   * permission is the single remaining permission of its subject, the subject\n   * is also deleted.\n   *\n   * @param subjects - The draft permission controller subjects.\n   * @param origin - The origin of the subject associated with the permission\n   * to delete.\n   * @param target - The target name of the permission to delete.\n   */\n  private deletePermission(\n    subjects: Draft<PermissionControllerSubjects<PermissionConstraint>>,\n    origin: OriginString,\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n  ): void {\n    const { permissions } = subjects[origin];\n    if (Object.keys(permissions).length > 1) {\n      delete permissions[target];\n    } else {\n      delete subjects[origin];\n    }\n  }\n\n  /**\n   * Checks whether the permission of the subject corresponding to the given\n   * origin has a caveat of the specified type.\n   *\n   * Throws an error if the subject does not have a permission with the\n   * specified target name.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to check for.\n   * @returns Whether the permission has the specified caveat.\n   */\n  hasCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(origin: OriginString, target: TargetName, caveatType: CaveatType): boolean {\n    return Boolean(this.getCaveat(origin, target, caveatType));\n  }\n\n  /**\n   * Gets the caveat of the specified type, if any, for the permission of\n   * the subject corresponding to the given origin.\n   *\n   * Throws an error if the subject does not have a permission with the\n   * specified target name.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to get.\n   * @returns The caveat, or `undefined` if no such caveat exists.\n   */\n  getCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n  ): ExtractCaveat<ControllerCaveatSpecification, CaveatType> | undefined {\n    const permission = this.getPermission(origin, target);\n    if (!permission) {\n      throw new PermissionDoesNotExistError(origin, target);\n    }\n\n    return findCaveat(permission, caveatType) as\n      | ExtractCaveat<ControllerCaveatSpecification, CaveatType>\n      | undefined;\n  }\n\n  /**\n   * Adds a caveat of the specified type, with the specified caveat value, to\n   * the permission corresponding to the given subject origin and permission\n   * target.\n   *\n   * For modifying existing caveats, use\n   * {@link PermissionController.updateCaveat}.\n   *\n   * Throws an error if no such permission exists, or if the caveat already\n   * exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to add.\n   * @param caveatValue - The value of the caveat to add.\n   */\n  addCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n    caveatValue: ExtractCaveatValue<ControllerCaveatSpecification, CaveatType>,\n  ): void {\n    if (this.hasCaveat(origin, target, caveatType)) {\n      throw new CaveatAlreadyExistsError(origin, target, caveatType);\n    }\n\n    this.setCaveat(origin, target, caveatType, caveatValue);\n  }\n\n  /**\n   * Updates the value of the caveat of the specified type belonging to the\n   * permission corresponding to the given subject origin and permission\n   * target.\n   *\n   * For adding new caveats, use\n   * {@link PermissionController.addCaveat}.\n   *\n   * Throws an error if no such permission or caveat exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to update.\n   * @param caveatValue - The new value of the caveat.\n   */\n  updateCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n    CaveatValue extends ExtractCaveatValue<\n      ControllerCaveatSpecification,\n      CaveatType\n    >,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n    caveatValue: CaveatValue,\n  ): void {\n    if (!this.hasCaveat(origin, target, caveatType)) {\n      throw new CaveatDoesNotExistError(origin, target, caveatType);\n    }\n\n    this.setCaveat(origin, target, caveatType, caveatValue);\n  }\n\n  /**\n   * TODO:cm\n   * Updates the value of the caveat of the specified type belonging to the\n   * permission corresponding to the given subject origin and permission\n   * target.\n   *\n   * For adding new caveats, use\n   * {@link PermissionController.addCaveat}.\n   *\n   * Throws an error if no such permission or caveat exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to update.\n   * @param addedCaveatValue - The value to merge with the existing caveat's value.\n   */\n  updateCaveatIncremental<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n    CaveatValue extends ExtractCaveatValue<\n      ControllerCaveatSpecification,\n      CaveatType\n    >,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n    addedCaveatValue: CaveatValue,\n  ): void {\n    const existingCaveat = this.getCaveat(origin, target, caveatType);\n    if (!existingCaveat) {\n      throw new CaveatDoesNotExistError(origin, target, caveatType);\n    }\n\n    const { merger } = this.getCaveatSpecification(caveatType);\n    if (!merger) {\n      throw new CaveatMergerDoesNotExistError(caveatType);\n    }\n\n    this.setCaveat(\n      origin,\n      target,\n      caveatType,\n      merger(existingCaveat.value, addedCaveatValue),\n    );\n  }\n\n  /**\n   * Sets the specified caveat on the specified permission. Overwrites existing\n   * caveats of the same type in-place (preserving array order), and adds the\n   * caveat to the end of the array otherwise.\n   *\n   * Throws an error if the permission does not exist or fails to validate after\n   * its caveats have been modified.\n   *\n   * @see {@link PermissionController.addCaveat}\n   * @see {@link PermissionController.updateCaveat}\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to set.\n   * @param caveatValue - The value of the caveat to set.\n   */\n  private setCaveat<\n    TargetName extends ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(\n    origin: OriginString,\n    target: TargetName,\n    caveatType: CaveatType,\n    caveatValue: ExtractCaveatValue<ControllerCaveatSpecification, CaveatType>,\n  ): void {\n    this.update((draftState) => {\n      const subject = draftState.subjects[origin];\n\n      // Unreachable because `hasCaveat` is always called before this, and it\n      // throws if permissions are missing. TypeScript needs this, however.\n      /* istanbul ignore if */\n      if (!subject) {\n        throw new UnrecognizedSubjectError(origin);\n      }\n\n      const permission = subject.permissions[target];\n\n      /* istanbul ignore if: practically impossible, but TypeScript wants it */\n      if (!permission) {\n        throw new PermissionDoesNotExistError(origin, target);\n      }\n\n      const caveat = {\n        type: caveatType,\n        value: caveatValue,\n      };\n      this.validateCaveat(caveat, origin, target);\n\n      if (permission.caveats) {\n        const caveatIndex = permission.caveats.findIndex(\n          (existingCaveat) => existingCaveat.type === caveat.type,\n        );\n\n        if (caveatIndex === -1) {\n          permission.caveats.push(caveat);\n        } else {\n          permission.caveats.splice(caveatIndex, 1, caveat);\n        }\n      } else {\n        // At this point, we don't know if the specific permission is allowed\n        // to have caveats, but it should be impossible to call this method\n        // for a permission that may not have any caveats. If all else fails,\n        // the permission validator is also called.\n        // @ts-expect-error See above comment\n        permission.caveats = [caveat];\n      }\n\n      this.validateModifiedPermission(permission, origin);\n    });\n  }\n\n  /**\n   * Updates all caveats with the specified type for all subjects and\n   * permissions by applying the specified mutator function to them.\n   *\n   * ATTN: Permissions can be revoked entirely by the action of this method,\n   * read on for details.\n   *\n   * Caveat mutators are functions that receive a caveat value and return a\n   * tuple consisting of a {@link CaveatMutatorOperation} and, optionally, a new\n   * value to update the existing caveat with.\n   *\n   * For each caveat, depending on the mutator result, this method will:\n   * - Do nothing ({@link CaveatMutatorOperation.noop})\n   * - Update the value of the caveat ({@link CaveatMutatorOperation.updateValue}). The caveat specification validator, if any, will be called after updating the value.\n   * - Delete the caveat ({@link CaveatMutatorOperation.deleteCaveat}). The permission specification validator, if any, will be called after deleting the caveat.\n   * - Revoke the parent permission ({@link CaveatMutatorOperation.revokePermission})\n   *\n   * This method throws if the validation of any caveat or permission fails.\n   *\n   * @param targetCaveatType - The type of the caveats to update.\n   * @param mutator - The mutator function which will be applied to all caveat\n   * values.\n   */\n  updatePermissionsByCaveat<\n    CaveatType extends ExtractCaveats<ControllerCaveatSpecification>['type'],\n    TargetCaveat extends ExtractCaveat<\n      ControllerCaveatSpecification,\n      CaveatType\n    >,\n  >(targetCaveatType: CaveatType, mutator: CaveatMutator<TargetCaveat>): void {\n    if (Object.keys(this.state.subjects).length === 0) {\n      return;\n    }\n\n    this.update((draftState) => {\n      Object.values(draftState.subjects).forEach((subject) => {\n        Object.values(subject.permissions).forEach((permission) => {\n          const { caveats } = permission;\n          const targetCaveat = caveats?.find(\n            ({ type }) => type === targetCaveatType,\n          );\n          if (!targetCaveat) {\n            return;\n          }\n\n          // The mutator may modify the caveat value in place, and must always\n          // return a valid mutation result.\n          const mutatorResult = mutator(targetCaveat.value);\n          const { operation } = mutatorResult;\n          switch (operation) {\n            case CaveatMutatorOperation.noop:\n              break;\n\n            case CaveatMutatorOperation.updateValue:\n              // Typecast: `Mutable` is used here to assign to a readonly\n              // property. `targetConstraint` should already be mutable because\n              // it's part of a draft, but for some reason it's not. We can't\n              // use the more-correct `Draft` type here either because it\n              // results in an error.\n              (targetCaveat as Mutable<CaveatConstraint, 'value'>).value =\n                mutatorResult.value;\n\n              this.validateCaveat(\n                targetCaveat,\n                subject.origin,\n                permission.parentCapability,\n              );\n              break;\n\n            case CaveatMutatorOperation.deleteCaveat:\n              this.deleteCaveat(permission, targetCaveatType, subject.origin);\n              break;\n\n            case CaveatMutatorOperation.revokePermission:\n              this.deletePermission(\n                draftState.subjects,\n                subject.origin,\n                permission.parentCapability,\n              );\n              break;\n\n            default: {\n              // Overriding as `never` is the expected result of exhaustiveness checking,\n              // and is intended to represent unchecked exception cases.\n              // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n              throw new Error(`Unrecognized mutation result: \"${operation}\"`);\n            }\n          }\n        });\n      });\n    });\n  }\n\n  /**\n   * Removes the caveat of the specified type from the permission corresponding\n   * to the given subject origin and target name.\n   *\n   * Throws an error if no such permission or caveat exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to remove.\n   */\n  removeCaveat<\n    TargetName extends ControllerPermissionSpecification['targetName'],\n    CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>,\n  >(origin: OriginString, target: TargetName, caveatType: CaveatType): void {\n    this.update((draftState) => {\n      const permission = draftState.subjects[origin]?.permissions[target];\n      if (!permission) {\n        throw new PermissionDoesNotExistError(origin, target);\n      }\n\n      if (!permission.caveats) {\n        throw new CaveatDoesNotExistError(origin, target, caveatType);\n      }\n\n      this.deleteCaveat(permission, caveatType, origin);\n    });\n  }\n\n  /**\n   * Deletes the specified caveat from the specified permission. If no caveats\n   * remain after deletion, the permission's caveat property is set to `null`.\n   * The permission is validated after being modified.\n   *\n   * Throws an error if the permission does not have a caveat with the specified\n   * type.\n   *\n   * @param permission - The permission whose caveat to delete.\n   * @param caveatType - The type of the caveat to delete.\n   * @param origin - The origin the permission subject.\n   */\n  private deleteCaveat<\n    CaveatType extends ExtractCaveats<ControllerCaveatSpecification>['type'],\n  >(\n    permission: Draft<PermissionConstraint>,\n    caveatType: CaveatType,\n    origin: OriginString,\n  ): void {\n    /* istanbul ignore if: not possible in our usage */\n    if (!permission.caveats) {\n      throw new CaveatDoesNotExistError(\n        origin,\n        permission.parentCapability,\n        caveatType,\n      );\n    }\n\n    const caveatIndex = permission.caveats.findIndex(\n      (existingCaveat) => existingCaveat.type === caveatType,\n    );\n\n    if (caveatIndex === -1) {\n      throw new CaveatDoesNotExistError(\n        origin,\n        permission.parentCapability,\n        caveatType,\n      );\n    }\n\n    if (permission.caveats.length === 1) {\n      permission.caveats = null;\n    } else {\n      permission.caveats.splice(caveatIndex, 1);\n    }\n\n    this.validateModifiedPermission(permission, origin);\n  }\n\n  /**\n   * Validates the specified modified permission. Should **always** be invoked\n   * on a permission after its caveats have been modified.\n   *\n   * Just like {@link PermissionController.validatePermission}, except that the\n   * corresponding target name and specification are retrieved first, and an\n   * error is thrown if the target name does not exist.\n   *\n   * @param permission - The modified permission to validate.\n   * @param origin - The origin associated with the permission.\n   */\n  private validateModifiedPermission(\n    permission: Draft<PermissionConstraint>,\n    origin: OriginString,\n  ): void {\n    /* istanbul ignore if: this should be impossible */\n    if (!this.targetExists(permission.parentCapability)) {\n      throw new Error(\n        `Fatal: Existing permission target \"${permission.parentCapability}\" has no specification.`,\n      );\n    }\n\n    this.validatePermission(\n      this.getPermissionSpecification(permission.parentCapability),\n      permission as PermissionConstraint,\n      origin,\n    );\n  }\n\n  /**\n   * Verifies the existence the specified permission target, i.e. whether it has\n   * a specification.\n   *\n   * @param target - The requested permission target.\n   * @returns Whether the permission target exists.\n   */\n  private targetExists(\n    target: string,\n  ): target is ControllerPermissionSpecification['targetName'] {\n    return hasProperty(this._permissionSpecifications, target);\n  }\n\n  /**\n   * Grants _approved_ permissions to the specified subject. Every permission and\n   * caveat is stringently validated – including by calling every specification\n   * validator – and an error is thrown if any validation fails.\n   *\n   * ATTN: This method does **not** prompt the user for approval. Use consent must\n   * first be obtained through some other means.\n   *\n   * @see {@link PermissionController.requestPermissions} For initiating a\n   * permissions request requiring user approval.\n   * @param options - Options bag.\n   * @param options.approvedPermissions - The requested permissions approved by\n   * the user.\n   * @param options.requestData - Permission request data. Passed to permission\n   * factory functions.\n   * @param options.preserveExistingPermissions - Whether to preserve the\n   * subject's existing permissions.\n   * @param options.subject - The subject to grant permissions to.\n   * @returns The granted permissions.\n   */\n  grantPermissions({\n    approvedPermissions,\n    requestData,\n    preserveExistingPermissions = true,\n    subject,\n  }: {\n    approvedPermissions: RequestedPermissions;\n    subject: PermissionSubjectMetadata;\n    preserveExistingPermissions?: boolean;\n    requestData?: Record<string, unknown>;\n  }): SubjectPermissions<\n    ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >\n  > {\n    const { origin } = subject;\n\n    if (!origin || typeof origin !== 'string') {\n      throw new InvalidSubjectIdentifierError(origin);\n    }\n\n    const permissions = (\n      preserveExistingPermissions\n        ? {\n            ...this.getPermissions(origin),\n          }\n        : {}\n    ) as SubjectPermissions<\n      ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >\n    >;\n\n    for (const [requestedTarget, approvedPermission] of Object.entries(\n      approvedPermissions,\n    )) {\n      if (!this.targetExists(requestedTarget)) {\n        throw methodNotFound(requestedTarget);\n      }\n\n      if (\n        approvedPermission.parentCapability !== undefined &&\n        requestedTarget !== approvedPermission.parentCapability\n      ) {\n        throw new InvalidApprovedPermissionError(\n          origin,\n          requestedTarget,\n          approvedPermission,\n        );\n      }\n\n      // We have verified that the target exists, and reassign it to change its\n      // type.\n      const targetName = requestedTarget as ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >['parentCapability'];\n      const specification = this.getPermissionSpecification(targetName);\n\n      // The requested caveats are validated here.\n      const caveats = this.constructCaveats(\n        origin,\n        targetName,\n        approvedPermission.caveats,\n      );\n\n      const permissionOptions = {\n        caveats,\n        invoker: origin,\n        target: targetName,\n      };\n\n      let permission: ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >;\n      if (specification.factory) {\n        permission = specification.factory(permissionOptions, requestData);\n\n        // Full caveat and permission validation is performed here since the\n        // factory function can arbitrarily modify the entire permission object,\n        // including its caveats.\n        this.validatePermission(specification, permission, origin);\n      } else {\n        permission = constructPermission(permissionOptions);\n\n        // We do not need to validate caveats in this case, because the plain\n        // permission constructor function does not modify the caveats, which\n        // were already validated by `constructCaveats` above.\n        this.validatePermission(specification, permission, origin, {\n          invokePermissionValidator: true,\n          performCaveatValidation: false,\n        });\n      }\n      permissions[targetName] = permission;\n    }\n\n    this.setValidatedPermissions(origin, permissions);\n    return permissions;\n  }\n\n  /**\n   * Validates the specified permission by:\n   * - Ensuring that if `subjectTypes` is specified, the subject requesting the permission is of a type in the list.\n   * - Ensuring that its `caveats` property is either `null` or a non-empty array.\n   * - Ensuring that it only includes caveats allowed by its specification.\n   * - Ensuring that it includes no duplicate caveats (by caveat type).\n   * - Validating each caveat object, if `performCaveatValidation` is `true`.\n   * - Calling the validator of its specification, if one exists and `invokePermissionValidator` is `true`.\n   *\n   * An error is thrown if validation fails.\n   *\n   * @param specification - The specification of the permission.\n   * @param permission - The permission to validate.\n   * @param origin - The origin associated with the permission.\n   * @param validationOptions - Validation options.\n   * @param validationOptions.invokePermissionValidator - Whether to invoke the\n   * permission's consumer-specified validator function, if any.\n   * @param validationOptions.performCaveatValidation - Whether to invoke\n   * {@link PermissionController.validateCaveat} on each of the permission's\n   * caveats.\n   */\n  private validatePermission(\n    specification: PermissionSpecificationConstraint,\n    permission: PermissionConstraint,\n    origin: OriginString,\n    { invokePermissionValidator, performCaveatValidation } = {\n      invokePermissionValidator: true,\n      performCaveatValidation: true,\n    },\n  ): void {\n    const { allowedCaveats, validator, targetName } = specification;\n\n    if (\n      specification.subjectTypes?.length &&\n      specification.subjectTypes.length > 0\n    ) {\n      const metadata = this.messagingSystem.call(\n        'SubjectMetadataController:getSubjectMetadata',\n        origin,\n      );\n\n      if (\n        !metadata ||\n        metadata.subjectType === null ||\n        !specification.subjectTypes.includes(metadata.subjectType)\n      ) {\n        throw specification.permissionType === PermissionType.RestrictedMethod\n          ? methodNotFound(targetName, { origin })\n          : new EndowmentPermissionDoesNotExistError(targetName, origin);\n      }\n    }\n\n    if (hasProperty(permission, 'caveats')) {\n      const { caveats } = permission;\n\n      if (caveats !== null && !(Array.isArray(caveats) && caveats.length > 0)) {\n        throw new InvalidCaveatsPropertyError(origin, targetName, caveats);\n      }\n\n      const seenCaveatTypes = new Set<string>();\n      caveats?.forEach((caveat) => {\n        if (performCaveatValidation) {\n          this.validateCaveat(caveat, origin, targetName);\n        }\n\n        if (!allowedCaveats?.includes(caveat.type)) {\n          throw new ForbiddenCaveatError(caveat.type, origin, targetName);\n        }\n\n        if (seenCaveatTypes.has(caveat.type)) {\n          throw new DuplicateCaveatError(caveat.type, origin, targetName);\n        }\n        seenCaveatTypes.add(caveat.type);\n      });\n    }\n\n    if (invokePermissionValidator && validator) {\n      validator(permission, origin, targetName);\n    }\n  }\n\n  /**\n   * Assigns the specified permissions to the subject with the given origin.\n   * Overwrites all existing permissions, and creates a subject entry if it\n   * doesn't already exist.\n   *\n   * ATTN: Assumes that the new permissions have been validated.\n   *\n   * @param origin - The origin of the grantee subject.\n   * @param permissions - The new permissions for the grantee subject.\n   */\n  private setValidatedPermissions(\n    origin: OriginString,\n    permissions: Record<\n      string,\n      ExtractPermission<\n        ControllerPermissionSpecification,\n        ControllerCaveatSpecification\n      >\n    >,\n  ): void {\n    this.update((draftState) => {\n      if (!draftState.subjects[origin]) {\n        draftState.subjects[origin] = { origin, permissions: {} };\n      }\n\n      draftState.subjects[origin].permissions = castDraft(permissions);\n    });\n  }\n\n  /**\n   * Validates the requested caveats for the permission of the specified\n   * subject origin and target name and returns the validated caveat array.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param origin - The origin of the permission subject.\n   * @param target - The permission target name.\n   * @param requestedCaveats - The requested caveats to construct.\n   * @returns The constructed caveats.\n   */\n  private constructCaveats(\n    origin: OriginString,\n    target: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    requestedCaveats?: unknown[] | null,\n  ): NonEmptyArray<ExtractCaveats<ControllerCaveatSpecification>> | undefined {\n    const caveatArray = requestedCaveats?.map((requestedCaveat) => {\n      this.validateCaveat(requestedCaveat, origin, target);\n\n      // Reassign so that we have a fresh object.\n      const { type, value } = requestedCaveat as CaveatConstraint;\n      return { type, value } as ExtractCaveats<ControllerCaveatSpecification>;\n    });\n\n    return caveatArray && isNonEmptyArray(caveatArray)\n      ? caveatArray\n      : undefined;\n  }\n\n  /**\n   * This methods validates that the specified caveat is an object with the\n   * expected properties and types. It also ensures that a caveat specification\n   * exists for the requested caveat type, and calls the specification\n   * validator, if it exists, on the caveat object.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param caveat - The caveat object to validate.\n   * @param origin - The origin associated with the subject of the parent\n   * permission.\n   * @param target - The target name associated with the parent permission.\n   */\n  private validateCaveat(\n    caveat: unknown,\n    origin: OriginString,\n    target: string,\n  ): void {\n    if (!isPlainObject(caveat)) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw new InvalidCaveatError(caveat, origin, target);\n    }\n\n    if (Object.keys(caveat).length !== 2) {\n      throw new InvalidCaveatFieldsError(caveat, origin, target);\n    }\n\n    if (typeof caveat.type !== 'string') {\n      throw new InvalidCaveatTypeError(caveat, origin, target);\n    }\n\n    const specification = this.getCaveatSpecification(caveat.type);\n    if (!specification) {\n      throw new UnrecognizedCaveatTypeError(caveat.type, origin, target);\n    }\n\n    if (!hasProperty(caveat, 'value') || caveat.value === undefined) {\n      throw new CaveatMissingValueError(caveat, origin, target);\n    }\n\n    if (!isValidJson(caveat.value)) {\n      throw new CaveatInvalidJsonError(caveat, origin, target);\n    }\n\n    // Typecast: TypeScript still believes that the caveat is a PlainObject.\n    specification.validator?.(caveat as CaveatConstraint, origin, target);\n  }\n\n  /**\n   * Initiates a permission request that requires user approval.\n   *\n   * Either this or {@link PermissionController.requestPermissionsIncremental}\n   * should always be used to grant additional permissions to a subject,\n   * unless user approval has been obtained through some other means.\n   *\n   * Permissions are validated at every step of the approval process, and this\n   * method will reject if validation fails.\n   *\n   * @see {@link ApprovalController} For the user approval logic.\n   * @see {@link PermissionController.acceptPermissionsRequest} For the method\n   * that _accepts_ the request and resolves the user approval promise.\n   * @see {@link PermissionController.rejectPermissionsRequest} For the method\n   * that _rejects_ the request and the user approval promise.\n   * @param subject - The grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   * @param options - Additional options.\n   * @param options.id - The id of the permissions request. Defaults to a unique\n   * id.\n   * @param options.preserveExistingPermissions - Whether to preserve the\n   * subject's existing permissions. Defaults to `true`.\n   * @param options.metadata - Additional metadata about the permission request.\n   * @returns The granted permissions and request metadata.\n   */\n  async requestPermissions(\n    subject: PermissionSubjectMetadata,\n    requestedPermissions: RequestedPermissions,\n    options: {\n      id?: string;\n      preserveExistingPermissions?: boolean;\n      metadata?: Record<string, Json>;\n    } = {},\n  ): Promise<\n    [\n      SubjectPermissions<\n        ExtractPermission<\n          ControllerPermissionSpecification,\n          ControllerCaveatSpecification\n        >\n      >,\n      ApprovedPermissionsMetadata,\n    ]\n  > {\n    const { origin } = subject;\n    const { id = nanoid(), preserveExistingPermissions = true } = options;\n    this.validateRequestedPermissions(origin, requestedPermissions);\n\n    const metadata = {\n      ...options.metadata,\n      id,\n      origin,\n    };\n\n    const permissionsRequest = {\n      metadata,\n      permissions: requestedPermissions,\n    };\n\n    const approvedRequest = await this.requestUserApproval(permissionsRequest);\n    return await this.#handleApprovedPermissions({\n      subject,\n      metadata,\n      preserveExistingPermissions,\n      approvedRequest,\n    });\n  }\n\n  /**\n   * Initiates an incremental permission request that prompts for user approval.\n   * Incremental permission requests allow the caller to replace existing and/or\n   * add brand new permissions and caveats for the specified subject.\n   *\n   * Incremental permission request are merged with the subject's existing permissions\n   * through a right-biased union, where the incremental permission are the right-hand\n   * side of the merger. If both sides of the merger specify the same caveats for a\n   * given permission, the caveats are merged using their specification's caveat merger\n   * property.\n   *\n   * Either this or {@link PermissionController.requestPermissions} should\n   * always be used to grant additional permissions to a subject, unless user\n   * approval has been obtained through some other means.\n   *\n   * Permissions are validated at every step of the approval process, and this\n   * method will reject if validation fails.\n   *\n   * @see {@link ApprovalController} For the user approval logic.\n   * @see {@link PermissionController.acceptPermissionsRequest} For the method\n   * that _accepts_ the request and resolves the user approval promise.\n   * @see {@link PermissionController.rejectPermissionsRequest} For the method\n   * that _rejects_ the request and the user approval promise.\n   * @param subject - The grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   * @param options - Additional options.\n   * @param options.id - The id of the permissions request. Defaults to a unique\n   * id.\n   * @param options.metadata - Additional metadata about the permission request.\n   * @returns The granted permissions and request metadata.\n   */\n  async requestPermissionsIncremental(\n    subject: PermissionSubjectMetadata,\n    requestedPermissions: RequestedPermissions,\n    options: {\n      id?: string;\n      metadata?: Record<string, Json>;\n    } = {},\n  ) {\n    const { origin } = subject;\n    const { id = nanoid() } = options;\n    this.validateRequestedPermissions(origin, requestedPermissions);\n\n    const [newPermissions, permissionsDiff] = this.#mergeIncrementalPermissions(\n      origin,\n      requestedPermissions,\n    );\n\n    try {\n      // It does not spark joy to run this validation again after the merger operation.\n      // But, doing something about it is probably not worth it, especially considering\n      // that the worst-case scenario for validation is precisely as bad as this.\n      this.validateRequestedPermissions(origin, newPermissions);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new InvalidMergedPermissionsError(origin, error, permissionsDiff);\n      }\n      /* istanbul ignore next: This should be impossible */\n      throw internalError('Unrecognized error type', { error });\n    }\n\n    const metadata = {\n      ...options.metadata,\n      id,\n      origin,\n    };\n\n    const permissionsRequest = {\n      metadata,\n      permissions: newPermissions,\n      diff: permissionsDiff,\n    };\n\n    const approvedRequest = await this.requestUserApproval(permissionsRequest);\n    return await this.#handleApprovedPermissions({\n      subject,\n      metadata,\n      preserveExistingPermissions: false,\n      approvedRequest,\n    });\n  }\n\n  /**\n   * Validates requested permissions. Throws if validation fails.\n   *\n   * This method ensures that the requested permissions are a properly\n   * formatted {@link RequestedPermissions} object, and performs the same\n   * validation as {@link PermissionController.grantPermissions}, except that\n   * consumer-specified permission validator functions are not called, since\n   * they are only called on fully constructed, approved permissions that are\n   * otherwise completely valid.\n   *\n   * Unrecognzied properties on requested permissions are ignored.\n   *\n   * @param origin - The origin of the grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   */\n  private validateRequestedPermissions(\n    origin: OriginString,\n    requestedPermissions: unknown,\n  ): void {\n    if (!isPlainObject(requestedPermissions)) {\n      throw invalidParams({\n        message: `Requested permissions for origin \"${origin}\" is not a plain object.`,\n        data: { origin, requestedPermissions },\n      });\n    }\n\n    if (Object.keys(requestedPermissions).length === 0) {\n      throw invalidParams({\n        message: `Permissions request for origin \"${origin}\" contains no permissions.`,\n        data: { requestedPermissions },\n      });\n    }\n\n    for (const targetName of Object.keys(requestedPermissions)) {\n      const permission = requestedPermissions[targetName];\n\n      if (!this.targetExists(targetName)) {\n        throw methodNotFound(targetName, { origin, requestedPermissions });\n      }\n\n      if (\n        !isPlainObject(permission) ||\n        (permission.parentCapability !== undefined &&\n          targetName !== permission.parentCapability)\n      ) {\n        throw invalidParams({\n          message: `Permissions request for origin \"${origin}\" contains invalid requested permission(s).`,\n          data: { origin, requestedPermissions },\n        });\n      }\n\n      // Here we validate the permission without invoking its validator, if any.\n      // The validator will be invoked after the permission has been approved.\n      this.validatePermission(\n        this.getPermissionSpecification(targetName),\n        // Typecast: The permission is still a \"PlainObject\" here.\n        permission as PermissionConstraint,\n        origin,\n        { invokePermissionValidator: false, performCaveatValidation: true },\n      );\n    }\n  }\n\n  /**\n   * Merges a set of incrementally requested permissions into the existing permissions of\n   * the requesting subject. The merge is a right-biased union, where the existing\n   * permissions are the left-hand side, and the incrementally requested permissions are\n   * the right-hand side.\n   *\n   * @param origin - The origin of the subject.\n   * @param incrementalRequestedPermissions - The requested permissions to merge.\n   * @returns The merged permissions and the resulting diff.\n   */\n  #mergeIncrementalPermissions(\n    origin: OriginString,\n    incrementalRequestedPermissions: RequestedPermissions,\n  ) {\n    const [newPermissions, permissionsDiff] = produceWithPatches(\n      this.getPermissions(origin) ?? {},\n      (existingPermissions) => {\n        const leftPermissions = existingPermissions as RequestedPermissions;\n\n        Object.entries(incrementalRequestedPermissions).forEach(\n          ([targetName, rightPermission]) => {\n            if (\n              !hasProperty(\n                // We type-guard the targetName key out of existence without this cast.\n                leftPermissions as Record<string, unknown>,\n                targetName,\n              )\n            ) {\n              leftPermissions[targetName] = rightPermission;\n            } else {\n              const leftPermission = leftPermissions[targetName];\n              leftPermissions[targetName] = this.#mergePermission(\n                leftPermission,\n                rightPermission,\n              );\n            }\n          },\n        );\n      },\n    );\n\n    return [newPermissions, permissionsDiff as PermissionsDiff] as const;\n  }\n\n  /**\n   * Performs a right-biased union between two permissions. The task of merging caveats\n   * with the same type between the two permissions is delegated to the corresponding\n   * caveat's merger implementation.\n   *\n   * Throws if the left-hand and right-hand permissions both have a caveat whose\n   * specification does not provide a caveat merger function.\n   *\n   * @param leftPermission - The left-hand permission to merge.\n   * @param rightPermission - The right-hand permission to merge.\n   * @returns The merged permission.\n   */\n  #mergePermission(\n    leftPermission: Partial<PermissionConstraint>,\n    rightPermission: Partial<PermissionConstraint>,\n  ) {\n    const { caveatPairs, uniqueCaveats } = this.#collectUniqueAndPairedCaveats(\n      leftPermission,\n      rightPermission,\n    );\n\n    const mergedCaveats = caveatPairs.map(([leftCaveat, rightCaveat]) => {\n      const { merger } = this.getCaveatSpecification(leftCaveat.type);\n      if (!merger) {\n        throw new CaveatMergerDoesNotExistError(leftCaveat.type);\n      }\n\n      return merger(leftCaveat, rightCaveat);\n    });\n\n    const allCaveats = [...mergedCaveats, ...uniqueCaveats];\n\n    return {\n      ...leftPermission,\n      ...rightPermission,\n      ...(allCaveats.length > 0\n        ? { caveats: allCaveats as NonEmptyArray<CaveatConstraint> }\n        : {}),\n    };\n  }\n\n  /**\n   * Given two permission objects, computes two sets:\n   * - The set of caveats that are unique to either permission.\n   * - The set of caveat pairs that are common to both permissions.\n   *\n   * Assumes that the caveat arrays of both permissions do not contain duplicate\n   * caveats.\n   *\n   * @param leftPermission - The left-hand permission.\n   * @param rightPermission - The right-hand permission.\n   * @returns The sets of caveat pairs and unique caveats.\n   */\n  #collectUniqueAndPairedCaveats(\n    leftPermission: Partial<PermissionConstraint>,\n    rightPermission: Partial<PermissionConstraint>,\n  ) {\n    const leftCaveats = leftPermission.caveats ?? [];\n    const rightCaveats = rightPermission.caveats ?? [];\n    const uniqueCaveats: CaveatConstraint[] = [];\n    const caveatPairs: [CaveatConstraint, CaveatConstraint][] = [];\n\n    // Collect unique caveats and caveat pairs\n    leftCaveats.forEach((leftCaveat) => {\n      const rightCaveatIndex = rightCaveats.findIndex(\n        (rightCaveat) => rightCaveat.type === leftCaveat.type,\n      );\n\n      if (rightCaveatIndex === -1) {\n        uniqueCaveats.push(leftCaveat);\n      } else {\n        caveatPairs.push([leftCaveat, rightCaveats[rightCaveatIndex]]);\n        rightCaveats.splice(rightCaveatIndex, 1);\n      }\n    });\n\n    uniqueCaveats.push(...rightCaveats);\n\n    return { caveatPairs, uniqueCaveats };\n  }\n\n  /**\n   * Adds a request to the {@link ApprovalController} using the\n   * {@link AddApprovalRequest} action. Also validates the resulting approved\n   * permissions request, and throws an error if validation fails.\n   *\n   * @param permissionsRequest - The permissions request object.\n   * @returns The approved permissions request object.\n   */\n  private async requestUserApproval(permissionsRequest: PermissionsRequest) {\n    const { origin, id } = permissionsRequest.metadata;\n    const approvedRequest = await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        requestData: permissionsRequest,\n        type: MethodNames.requestPermissions,\n      },\n      true,\n    );\n\n    this.validateApprovedPermissions(approvedRequest, { id, origin });\n    return approvedRequest as PermissionsRequest;\n  }\n\n  /**\n   * Accepts a permissions request that has been approved by the user. This\n   * method should be called after the user has approved the request and the\n   * {@link ApprovalController} has resolved the user approval promise.\n   *\n   * @param options - Options bag.\n   * @param options.subject - The subject to grant permissions to.\n   * @param options.metadata - The metadata of the approved permissions request.\n   * @param options.preserveExistingPermissions - Whether to preserve the\n   * subject's existing permissions.\n   * @param options.approvedRequest - The approved permissions request to handle.\n   * @returns The granted permissions and request metadata.\n   */\n  async #handleApprovedPermissions({\n    subject,\n    metadata,\n    preserveExistingPermissions,\n    approvedRequest,\n  }: {\n    subject: PermissionSubjectMetadata;\n    metadata: PermissionsRequest['metadata'];\n    preserveExistingPermissions: boolean;\n    approvedRequest: PermissionsRequest;\n  }): Promise<\n    [ReturnType<typeof this.grantPermissions>, ApprovedPermissionsMetadata]\n  > {\n    const { permissions: approvedPermissions, ...requestData } =\n      approvedRequest;\n    const approvedMetadata: ApprovedPermissionsMetadata = { ...metadata };\n\n    const sideEffects = this.getSideEffects(approvedPermissions);\n    if (Object.values(sideEffects.permittedHandlers).length > 0) {\n      const sideEffectsData = await this.executeSideEffects(\n        sideEffects,\n        approvedRequest,\n      );\n\n      approvedMetadata.data = Object.keys(sideEffects.permittedHandlers).reduce(\n        (acc, permission, i) => ({ [permission]: sideEffectsData[i], ...acc }),\n        {},\n      );\n    }\n\n    return [\n      this.grantPermissions({\n        subject,\n        approvedPermissions,\n        preserveExistingPermissions,\n        requestData,\n      }),\n      approvedMetadata,\n    ];\n  }\n\n  /**\n   * Reunites all the side-effects (onPermitted and onFailure) of the requested permissions inside a record of arrays.\n   *\n   * @param permissions - The approved permissions.\n   * @returns The {@link SideEffects} object containing the handlers arrays.\n   */\n  private getSideEffects(permissions: RequestedPermissions) {\n    return Object.keys(permissions).reduce<SideEffects>(\n      (sideEffectList, targetName) => {\n        if (this.targetExists(targetName)) {\n          const specification = this.getPermissionSpecification(targetName);\n\n          if (specification.sideEffect) {\n            sideEffectList.permittedHandlers[targetName] =\n              specification.sideEffect.onPermitted;\n\n            if (specification.sideEffect.onFailure) {\n              sideEffectList.failureHandlers[targetName] =\n                specification.sideEffect.onFailure;\n            }\n          }\n        }\n        return sideEffectList;\n      },\n      { permittedHandlers: {}, failureHandlers: {} },\n    );\n  }\n\n  /**\n   * Executes the side-effects of the approved permissions while handling the errors if any.\n   * It will pass an instance of the {@link messagingSystem} and the request data associated with the permission request to the handlers through its params.\n   *\n   * @param sideEffects - the side-effect record created by {@link getSideEffects}\n   * @param requestData - the permissions requestData.\n   * @returns the value returned by all the `onPermitted` handlers in an array.\n   */\n  private async executeSideEffects(\n    sideEffects: SideEffects,\n    requestData: PermissionsRequest,\n  ) {\n    const { permittedHandlers, failureHandlers } = sideEffects;\n    const params = {\n      requestData,\n      messagingSystem: this.messagingSystem,\n    };\n\n    const promiseResults = await Promise.allSettled(\n      Object.values(permittedHandlers).map((permittedHandler) =>\n        permittedHandler(params),\n      ),\n    );\n\n    // lib.es2020.promise.d.ts does not export its types so we're using a simple type.\n    const rejectedHandlers = promiseResults.filter(\n      (promise) => promise.status === 'rejected',\n    ) as { status: 'rejected'; reason: Error }[];\n\n    if (rejectedHandlers.length > 0) {\n      const failureHandlersList = Object.values(failureHandlers);\n      if (failureHandlersList.length > 0) {\n        try {\n          await Promise.all(\n            failureHandlersList.map((failureHandler) => failureHandler(params)),\n          );\n        } catch (error) {\n          throw internalError('Unexpected error in side-effects', { error });\n        }\n      }\n      const reasons = rejectedHandlers.map((handler) => handler.reason);\n\n      reasons.forEach((reason) => {\n        console.error(reason);\n      });\n\n      throw reasons.length > 1\n        ? internalError(\n            'Multiple errors occurred during side-effects execution',\n            { errors: reasons },\n          )\n        : reasons[0];\n    }\n\n    // lib.es2020.promise.d.ts does not export its types so we're using a simple type.\n    return (promiseResults as { status: 'fulfilled'; value: unknown }[]).map(\n      ({ value }) => value,\n    );\n  }\n\n  /**\n   * Validates an approved {@link PermissionsRequest} object. The approved\n   * request must have the required `metadata` and `permissions` properties,\n   * the `id` and `origin` of the `metadata` must match the original request\n   * metadata, and the requested permissions must be valid per\n   * {@link PermissionController.validateRequestedPermissions}. Any extra\n   * metadata properties are ignored.\n   *\n   * An error is thrown if validation fails.\n   *\n   * @param approvedRequest - The approved permissions request object.\n   * @param originalMetadata - The original request metadata.\n   */\n  private validateApprovedPermissions(\n    approvedRequest: unknown,\n    originalMetadata: PermissionsRequestMetadata,\n  ) {\n    const { id, origin } = originalMetadata;\n\n    if (\n      !isPlainObject(approvedRequest) ||\n      !isPlainObject(approvedRequest.metadata)\n    ) {\n      throw internalError(\n        `Approved permissions request for subject \"${origin}\" is invalid.`,\n        { data: { approvedRequest } },\n      );\n    }\n\n    const {\n      metadata: { id: newId, origin: newOrigin },\n      permissions,\n    } = approvedRequest;\n\n    if (newId !== id) {\n      throw internalError(\n        `Approved permissions request for subject \"${origin}\" mutated its id.`,\n        { originalId: id, mutatedId: newId },\n      );\n    }\n\n    if (newOrigin !== origin) {\n      throw internalError(\n        `Approved permissions request for subject \"${origin}\" mutated its origin.`,\n        { originalOrigin: origin, mutatedOrigin: newOrigin },\n      );\n    }\n\n    try {\n      this.validateRequestedPermissions(origin, permissions);\n    } catch (error) {\n      if (error instanceof Error) {\n        // Re-throw as an internal error; we should never receive invalid approved\n        // permissions.\n        throw internalError(\n          `Invalid approved permissions request: ${error.message}`,\n          error instanceof JsonRpcError ? error.data : undefined,\n        );\n      }\n      /* istanbul ignore next: This should be impossible */\n      throw internalError('Unrecognized error type', { error });\n    }\n  }\n\n  /**\n   * Accepts a permissions request created by\n   * {@link PermissionController.requestPermissions}.\n   *\n   * @param request - The permissions request.\n   */\n  async acceptPermissionsRequest(request: PermissionsRequest): Promise<void> {\n    const { id } = request.metadata;\n\n    if (!this.hasApprovalRequest({ id })) {\n      throw new PermissionsRequestNotFoundError(id);\n    }\n\n    if (Object.keys(request.permissions).length === 0) {\n      this._rejectPermissionsRequest(\n        id,\n        invalidParams({\n          message: 'Must request at least one permission.',\n        }),\n      );\n      return;\n    }\n\n    try {\n      this.messagingSystem.call(\n        'ApprovalController:acceptRequest',\n        id,\n        request,\n      );\n    } catch (error) {\n      // If accepting unexpectedly fails, reject the request and re-throw the\n      // error\n      this._rejectPermissionsRequest(id, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Rejects a permissions request created by\n   * {@link PermissionController.requestPermissions}.\n   *\n   * @param id - The id of the request to be rejected.\n   */\n  async rejectPermissionsRequest(id: string): Promise<void> {\n    if (!this.hasApprovalRequest({ id })) {\n      throw new PermissionsRequestNotFoundError(id);\n    }\n\n    this._rejectPermissionsRequest(id, userRejectedRequest());\n  }\n\n  /**\n   * Checks whether the {@link ApprovalController} has a particular permissions\n   * request.\n   *\n   * @see {@link PermissionController.acceptPermissionsRequest} and\n   * {@link PermissionController.rejectPermissionsRequest} for usage.\n   * @param options - The {@link HasApprovalRequest} options.\n   * @param options.id - The id of the approval request to check for.\n   * @returns Whether the specified request exists.\n   */\n  private hasApprovalRequest(options: { id: string }): boolean {\n    return this.messagingSystem.call('ApprovalController:hasRequest', options);\n  }\n\n  /**\n   * Rejects the permissions request with the specified id, with the specified\n   * error as the reason. This method is effectively a wrapper around a\n   * messenger call for the `ApprovalController:rejectRequest` action.\n   *\n   * @see {@link PermissionController.acceptPermissionsRequest} and\n   * {@link PermissionController.rejectPermissionsRequest} for usage.\n   * @param id - The id of the request to reject.\n   * @param error - The error associated with the rejection.\n   * @returns Nothing\n   */\n  private _rejectPermissionsRequest(id: string, error: unknown): void {\n    return this.messagingSystem.call(\n      'ApprovalController:rejectRequest',\n      id,\n      error,\n    );\n  }\n\n  /**\n   * Gets the subject's endowments per the specified endowment permission.\n   * Throws if the subject does not have the required permission or if the\n   * permission is not an endowment permission.\n   *\n   * @param origin - The origin of the subject whose endowments to retrieve.\n   * @param targetName - The name of the endowment permission. This must be a\n   * valid permission target name.\n   * @param requestData - Additional data associated with the request, if any.\n   * Forwarded to the endowment getter function for the permission.\n   * @returns The endowments, if any.\n   */\n  async getEndowments(\n    origin: string,\n    targetName: ExtractEndowmentPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    requestData?: unknown,\n  ): Promise<Json> {\n    if (!this.hasPermission(origin, targetName)) {\n      throw unauthorized({ data: { origin, targetName } });\n    }\n\n    return this.getTypedPermissionSpecification(\n      PermissionType.Endowment,\n      targetName,\n      origin,\n    ).endowmentGetter({ origin, requestData });\n  }\n\n  /**\n   * Executes a restricted method as the subject with the given origin.\n   * The specified params, if any, will be passed to the method implementation.\n   *\n   * ATTN: Great caution should be exercised in the use of this method.\n   * Methods that cause side effects or affect application state should\n   * be avoided.\n   *\n   * This method will first attempt to retrieve the requested restricted method\n   * implementation, throwing if it does not exist. The method will then be\n   * invoked as though the subject with the specified origin had invoked it with\n   * the specified parameters. This means that any existing caveats will be\n   * applied to the restricted method, and this method will throw if the\n   * restricted method or its caveat decorators throw.\n   *\n   * In addition, this method will throw if the subject does not have a\n   * permission for the specified restricted method.\n   *\n   * @param origin - The origin of the subject to execute the method on behalf\n   * of.\n   * @param targetName - The name of the method to execute. This must be a valid\n   * permission target name.\n   * @param params - The parameters to pass to the method implementation.\n   * @returns The result of the executed method.\n   */\n  async executeRestrictedMethod(\n    origin: OriginString,\n    targetName: ExtractRestrictedMethodPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    params?: RestrictedMethodParameters,\n  ): Promise<Json> {\n    // Throws if the method does not exist\n    const methodImplementation = this.getRestrictedMethod(targetName, origin);\n\n    const result = await this._executeRestrictedMethod(\n      methodImplementation,\n      { origin },\n      targetName,\n      params,\n    );\n\n    if (result === undefined) {\n      throw new Error(\n        `Internal request for method \"${targetName}\" as origin \"${origin}\" returned no result.`,\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * An internal method used in the controller's `json-rpc-engine` middleware\n   * and {@link PermissionController.executeRestrictedMethod}. Calls the\n   * specified restricted method implementation after decorating it with the\n   * caveats of its permission. Throws if the subject does not have the\n   * requisite permission.\n   *\n   * ATTN: Parameter validation is the responsibility of the caller, or\n   * the restricted method implementation in the case of `params`.\n   *\n   * @see {@link PermissionController.executeRestrictedMethod} and\n   * {@link PermissionController.createPermissionMiddleware} for usage.\n   * @param methodImplementation - The implementation of the method to call.\n   * @param subject - Metadata about the subject that made the request.\n   * @param method - The method name\n   * @param params - Params needed for executing the restricted method\n   * @returns The result of the restricted method implementation\n   */\n  private _executeRestrictedMethod(\n    methodImplementation: RestrictedMethod<RestrictedMethodParameters, Json>,\n    subject: PermissionSubjectMetadata,\n    method: ExtractPermission<\n      ControllerPermissionSpecification,\n      ControllerCaveatSpecification\n    >['parentCapability'],\n    params: RestrictedMethodParameters = [],\n  ): ReturnType<RestrictedMethod<RestrictedMethodParameters, Json>> {\n    const { origin } = subject;\n\n    const permission = this.getPermission(origin, method);\n    if (!permission) {\n      throw unauthorized({ data: { origin, method } });\n    }\n\n    return decorateWithCaveats(\n      methodImplementation,\n      permission,\n      this._caveatSpecifications,\n    )({ method, params, context: { origin } });\n  }\n}\n"],"mappings":"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","names":["CaveatMutatorOperation"]}
\ No newline at end of file
diff --git a/dist/chunk-SEPTGKNB.js b/dist/chunk-SEPTGKNB.js
new file mode 100644
index 0000000000000000000000000000000000000000..0a2659b5ff761023b1cbef73d473315cfcfe4e6f
--- /dev/null
+++ b/dist/chunk-SEPTGKNB.js
@@ -0,0 +1,218 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/errors.ts
+
+
+
+
+
+var _rpcerrors = require('@metamask/rpc-errors');
+function unauthorized(opts) {
+  return _rpcerrors.providerErrors.unauthorized({
+    message: "Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions",
+    data: opts.data
+  });
+}
+function methodNotFound(method, data) {
+  const message = `The method "${method}" does not exist / is not available.`;
+  const opts = { message };
+  if (data !== void 0) {
+    opts.data = data;
+  }
+  return _rpcerrors.rpcErrors.methodNotFound(opts);
+}
+function invalidParams(opts) {
+  return _rpcerrors.rpcErrors.invalidParams({
+    data: opts.data,
+    message: opts.message
+  });
+}
+function userRejectedRequest(data) {
+  return _rpcerrors.providerErrors.userRejectedRequest({ data });
+}
+function internalError(message, data) {
+  return _rpcerrors.rpcErrors.internal({ message, data });
+}
+var InvalidSubjectIdentifierError = class extends Error {
+  constructor(origin) {
+    super(
+      `Invalid subject identifier: "${typeof origin === "string" ? origin : typeof origin}"`
+    );
+  }
+};
+var UnrecognizedSubjectError = class extends Error {
+  constructor(origin) {
+    super(`Unrecognized subject: "${origin}" has no permissions.`);
+  }
+};
+var CaveatMergerDoesNotExistError = class extends Error {
+  constructor(caveatType) {
+    super(`Caveat merger does not exist for type: "${caveatType}"`);
+  }
+};
+var InvalidMergedPermissionsError = class extends Error {
+  constructor(origin, cause, diff) {
+    super(
+      `Invalid merged permissions for subject "${origin}":
+${cause.message}`
+    );
+    this.cause = cause;
+    this.data = { diff };
+  }
+};
+var InvalidApprovedPermissionError = class extends Error {
+  constructor(origin, target, approvedPermission) {
+    super(
+      `Invalid approved permission for origin "${origin}" and target "${target}".`
+    );
+    this.data = { origin, target, approvedPermission };
+  }
+};
+var PermissionDoesNotExistError = class extends Error {
+  constructor(origin, target) {
+    super(`Subject "${origin}" has no permission for "${target}".`);
+  }
+};
+var EndowmentPermissionDoesNotExistError = class extends Error {
+  constructor(target, origin) {
+    super(`Subject "${origin}" has no permission for "${target}".`);
+    if (origin) {
+      this.data = { origin };
+    }
+  }
+};
+var UnrecognizedCaveatTypeError = class extends Error {
+  constructor(caveatType, origin, target) {
+    super(`Unrecognized caveat type: "${caveatType}"`);
+    this.data = { caveatType };
+    if (origin !== void 0) {
+      this.data.origin = origin;
+    }
+    if (target !== void 0) {
+      this.data.target = target;
+    }
+  }
+};
+var InvalidCaveatsPropertyError = class extends Error {
+  constructor(origin, target, caveatsProperty) {
+    super(
+      `The "caveats" property of permission for "${target}" of subject "${origin}" is invalid. It must be a non-empty array if specified.`
+    );
+    this.data = { origin, target, caveatsProperty };
+  }
+};
+var CaveatDoesNotExistError = class extends Error {
+  constructor(origin, target, caveatType) {
+    super(
+      `Permission for "${target}" of subject "${origin}" has no caveat of type "${caveatType}".`
+    );
+  }
+};
+var CaveatAlreadyExistsError = class extends Error {
+  constructor(origin, target, caveatType) {
+    super(
+      `Permission for "${target}" of subject "${origin}" already has a caveat of type "${caveatType}".`
+    );
+  }
+};
+var InvalidCaveatError = class extends _rpcerrors.JsonRpcError {
+  constructor(receivedCaveat, origin, target) {
+    super(
+      _rpcerrors.errorCodes.rpc.invalidParams,
+      `Invalid caveat. Caveats must be plain objects.`,
+      { receivedCaveat }
+    );
+    this.data = { origin, target };
+  }
+};
+var InvalidCaveatTypeError = class extends Error {
+  constructor(caveat, origin, target) {
+    super(`Caveat types must be strings. Received: "${typeof caveat.type}"`);
+    this.data = { caveat, origin, target };
+  }
+};
+var CaveatMissingValueError = class extends Error {
+  constructor(caveat, origin, target) {
+    super(`Caveat is missing "value" field.`);
+    this.data = { caveat, origin, target };
+  }
+};
+var CaveatInvalidJsonError = class extends Error {
+  constructor(caveat, origin, target) {
+    super(`Caveat "value" is invalid JSON.`);
+    this.data = { caveat, origin, target };
+  }
+};
+var InvalidCaveatFieldsError = class extends Error {
+  constructor(caveat, origin, target) {
+    super(
+      `Caveat has unexpected number of fields: "${Object.keys(caveat).length}"`
+    );
+    this.data = { caveat, origin, target };
+  }
+};
+var ForbiddenCaveatError = class extends Error {
+  constructor(caveatType, origin, targetName) {
+    super(
+      `Permissions for target "${targetName}" may not have caveats of type "${caveatType}".`
+    );
+    this.data = { caveatType, origin, target: targetName };
+  }
+};
+var DuplicateCaveatError = class extends Error {
+  constructor(caveatType, origin, targetName) {
+    super(
+      `Permissions for target "${targetName}" contains multiple caveats of type "${caveatType}".`
+    );
+    this.data = { caveatType, origin, target: targetName };
+  }
+};
+var CaveatMergeTypeMismatchError = class extends Error {
+  constructor(leftCaveatType, rightCaveatType) {
+    super(
+      `Cannot merge caveats of different types: "${leftCaveatType}" and "${rightCaveatType}".`
+    );
+    this.data = { leftCaveatType, rightCaveatType };
+  }
+};
+var CaveatSpecificationMismatchError = class extends Error {
+  constructor(caveatSpec, permissionType) {
+    super(
+      `Caveat specification uses a mismatched type. Expected caveats for ${permissionType}`
+    );
+    this.data = { caveatSpec, permissionType };
+  }
+};
+var PermissionsRequestNotFoundError = class extends Error {
+  constructor(id) {
+    super(`Permissions request with id "${id}" not found.`);
+  }
+};
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+exports.unauthorized = unauthorized; exports.methodNotFound = methodNotFound; exports.invalidParams = invalidParams; exports.userRejectedRequest = userRejectedRequest; exports.internalError = internalError; exports.InvalidSubjectIdentifierError = InvalidSubjectIdentifierError; exports.UnrecognizedSubjectError = UnrecognizedSubjectError; exports.CaveatMergerDoesNotExistError = CaveatMergerDoesNotExistError; exports.InvalidMergedPermissionsError = InvalidMergedPermissionsError; exports.InvalidApprovedPermissionError = InvalidApprovedPermissionError; exports.PermissionDoesNotExistError = PermissionDoesNotExistError; exports.EndowmentPermissionDoesNotExistError = EndowmentPermissionDoesNotExistError; exports.UnrecognizedCaveatTypeError = UnrecognizedCaveatTypeError; exports.InvalidCaveatsPropertyError = InvalidCaveatsPropertyError; exports.CaveatDoesNotExistError = CaveatDoesNotExistError; exports.CaveatAlreadyExistsError = CaveatAlreadyExistsError; exports.InvalidCaveatError = InvalidCaveatError; exports.InvalidCaveatTypeError = InvalidCaveatTypeError; exports.CaveatMissingValueError = CaveatMissingValueError; exports.CaveatInvalidJsonError = CaveatInvalidJsonError; exports.InvalidCaveatFieldsError = InvalidCaveatFieldsError; exports.ForbiddenCaveatError = ForbiddenCaveatError; exports.DuplicateCaveatError = DuplicateCaveatError; exports.CaveatMergeTypeMismatchError = CaveatMergeTypeMismatchError; exports.CaveatSpecificationMismatchError = CaveatSpecificationMismatchError; exports.PermissionsRequestNotFoundError = PermissionsRequestNotFoundError;
+//# sourceMappingURL=chunk-SEPTGKNB.js.map
\ No newline at end of file
diff --git a/dist/chunk-SEPTGKNB.js.map b/dist/chunk-SEPTGKNB.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..89f0fa5c2d306387c76e996e095cce2bf4a2adc5
--- /dev/null
+++ b/dist/chunk-SEPTGKNB.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DataWithOptionalCause } from '@metamask/rpc-errors';\nimport {\n  errorCodes,\n  providerErrors,\n  rpcErrors,\n  JsonRpcError,\n} from '@metamask/rpc-errors';\n\nimport type { PermissionType } from './Permission';\nimport type { PermissionsDiff } from './PermissionController';\n\ntype UnauthorizedArg = {\n  data?: Record<string, unknown>;\n  message?: string;\n};\n\n/**\n * Utility function for building an \"unauthorized\" error.\n *\n * @param opts - Optional arguments that add extra context\n * @returns The built error\n */\nexport function unauthorized(opts: UnauthorizedArg) {\n  return providerErrors.unauthorized({\n    message:\n      'Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions',\n    data: opts.data,\n  });\n}\n\n/**\n * Utility function for building a \"method not found\" error.\n *\n * @param method - The method in question.\n * @param data - Optional data for context.\n * @returns The built error\n */\nexport function methodNotFound(method: string, data?: DataWithOptionalCause) {\n  const message = `The method \"${method}\" does not exist / is not available.`;\n\n  const opts: Parameters<typeof rpcErrors.methodNotFound>[0] = { message };\n  if (data !== undefined) {\n    opts.data = data;\n  }\n  return rpcErrors.methodNotFound(opts);\n}\n\ntype InvalidParamsArg = {\n  message?: string;\n  data?: DataWithOptionalCause;\n};\n\n/**\n * Utility function for building an \"invalid params\" error.\n *\n * @param opts - Optional arguments that add extra context\n * @returns The built error\n */\nexport function invalidParams(opts: InvalidParamsArg) {\n  return rpcErrors.invalidParams({\n    data: opts.data,\n    message: opts.message,\n  });\n}\n\n/**\n * Utility function for building an \"user rejected request\" error.\n *\n * @param data - Optional data to add extra context\n * @returns The built error\n */\nexport function userRejectedRequest<Data extends Record<string, unknown>>(\n  data?: Data,\n): JsonRpcError<Data> {\n  return providerErrors.userRejectedRequest({ data });\n}\n\n/**\n * Utility function for building an internal error.\n *\n * @param message - The error message\n * @param data - Optional data to add extra context\n * @returns The built error\n */\nexport function internalError<Data extends Record<string, unknown>>(\n  message: string,\n  data?: Data,\n): JsonRpcError<Data> {\n  return rpcErrors.internal({ message, data });\n}\n\nexport class InvalidSubjectIdentifierError extends Error {\n  constructor(origin: unknown) {\n    super(\n      `Invalid subject identifier: \"${\n        typeof origin === 'string' ? origin : typeof origin\n      }\"`,\n    );\n  }\n}\n\nexport class UnrecognizedSubjectError extends Error {\n  constructor(origin: string) {\n    super(`Unrecognized subject: \"${origin}\" has no permissions.`);\n  }\n}\n\nexport class CaveatMergerDoesNotExistError extends Error {\n  constructor(caveatType: string) {\n    super(`Caveat merger does not exist for type: \"${caveatType}\"`);\n  }\n}\n\nexport class InvalidMergedPermissionsError extends Error {\n  public cause: Error;\n\n  public data: {\n    diff: PermissionsDiff;\n  };\n\n  constructor(origin: string, cause: Error, diff: PermissionsDiff) {\n    super(\n      `Invalid merged permissions for subject \"${origin}\":\\n${cause.message}`,\n    );\n    this.cause = cause;\n    this.data = { diff };\n  }\n}\n\nexport class InvalidApprovedPermissionError extends Error {\n  public data: {\n    origin: string;\n    target: string;\n    approvedPermission: Record<string, unknown>;\n  };\n\n  constructor(\n    origin: string,\n    target: string,\n    approvedPermission: Record<string, unknown>,\n  ) {\n    super(\n      `Invalid approved permission for origin \"${origin}\" and target \"${target}\".`,\n    );\n    this.data = { origin, target, approvedPermission };\n  }\n}\nexport class PermissionDoesNotExistError extends Error {\n  constructor(origin: string, target: string) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n  }\n}\n\nexport class EndowmentPermissionDoesNotExistError extends Error {\n  public data?: { origin: string };\n\n  constructor(target: string, origin?: string) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n    if (origin) {\n      this.data = { origin };\n    }\n  }\n}\n\nexport class UnrecognizedCaveatTypeError extends Error {\n  public data: {\n    caveatType: string;\n    origin?: string;\n    target?: string;\n  };\n\n  constructor(caveatType: string);\n\n  constructor(caveatType: string, origin: string, target: string);\n\n  constructor(caveatType: string, origin?: string, target?: string) {\n    super(`Unrecognized caveat type: \"${caveatType}\"`);\n    this.data = { caveatType };\n    if (origin !== undefined) {\n      this.data.origin = origin;\n    }\n\n    if (target !== undefined) {\n      this.data.target = target;\n    }\n  }\n}\n\nexport class InvalidCaveatsPropertyError extends Error {\n  public data: { origin: string; target: string; caveatsProperty: unknown };\n\n  constructor(origin: string, target: string, caveatsProperty: unknown) {\n    super(\n      `The \"caveats\" property of permission for \"${target}\" of subject \"${origin}\" is invalid. It must be a non-empty array if specified.`,\n    );\n    this.data = { origin, target, caveatsProperty };\n  }\n}\n\nexport class CaveatDoesNotExistError extends Error {\n  constructor(origin: string, target: string, caveatType: string) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" has no caveat of type \"${caveatType}\".`,\n    );\n  }\n}\n\nexport class CaveatAlreadyExistsError extends Error {\n  constructor(origin: string, target: string, caveatType: string) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" already has a caveat of type \"${caveatType}\".`,\n    );\n  }\n}\n\nexport class InvalidCaveatError extends JsonRpcError<\n  DataWithOptionalCause | undefined\n> {\n  public override data: { origin: string; target: string };\n\n  constructor(receivedCaveat: unknown, origin: string, target: string) {\n    super(\n      errorCodes.rpc.invalidParams,\n      `Invalid caveat. Caveats must be plain objects.`,\n      { receivedCaveat },\n    );\n    this.data = { origin, target };\n  }\n}\n\nexport class InvalidCaveatTypeError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat types must be strings. Received: \"${typeof caveat.type}\"`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class CaveatMissingValueError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat is missing \"value\" field.`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class CaveatInvalidJsonError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat \"value\" is invalid JSON.`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class InvalidCaveatFieldsError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(\n      `Caveat has unexpected number of fields: \"${Object.keys(caveat).length}\"`,\n    );\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class ForbiddenCaveatError extends Error {\n  public data: {\n    caveatType: string;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveatType: string, origin: string, targetName: string) {\n    super(\n      `Permissions for target \"${targetName}\" may not have caveats of type \"${caveatType}\".`,\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n}\n\nexport class DuplicateCaveatError extends Error {\n  public data: {\n    caveatType: string;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveatType: string, origin: string, targetName: string) {\n    super(\n      `Permissions for target \"${targetName}\" contains multiple caveats of type \"${caveatType}\".`,\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n}\n\nexport class CaveatMergeTypeMismatchError extends Error {\n  public data: {\n    leftCaveatType: string;\n    rightCaveatType: string;\n  };\n\n  constructor(leftCaveatType: string, rightCaveatType: string) {\n    super(\n      `Cannot merge caveats of different types: \"${leftCaveatType}\" and \"${rightCaveatType}\".`,\n    );\n    this.data = { leftCaveatType, rightCaveatType };\n  }\n}\n\nexport class CaveatSpecificationMismatchError extends Error {\n  public data: {\n    caveatSpec: Record<string, unknown>;\n    permissionType: PermissionType;\n  };\n\n  constructor(\n    caveatSpec: Record<string, unknown>,\n    permissionType: PermissionType,\n  ) {\n    super(\n      `Caveat specification uses a mismatched type. Expected caveats for ${permissionType}`,\n    );\n    this.data = { caveatSpec, permissionType };\n  }\n}\n\nexport class PermissionsRequestNotFoundError extends Error {\n  constructor(id: string) {\n    super(`Permissions request with id \"${id}\" not found.`);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-URGYGS3N.mjs b/dist/chunk-URGYGS3N.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..e69b6ca2476fde5a4fcc58518b8c764673a98c1a
--- /dev/null
+++ b/dist/chunk-URGYGS3N.mjs
@@ -0,0 +1,29 @@
+import {
+  getPermissionsHandler
+} from "./chunk-73M67Z5X.mjs";
+import {
+  requestPermissionsHandler
+} from "./chunk-Z36MN4RC.mjs";
+import {
+  revokePermissionsHandler
+} from "./chunk-YGXO4JGU.mjs";
+import {
+  __export
+} from "./chunk-2L4QPE5A.mjs";
+
+// src/rpc-methods/index.ts
+var rpc_methods_exports = {};
+__export(rpc_methods_exports, {
+  handlers: () => handlers
+});
+var handlers = [
+  requestPermissionsHandler,
+  getPermissionsHandler,
+  revokePermissionsHandler
+];
+
+export {
+  handlers,
+  rpc_methods_exports
+};
+//# sourceMappingURL=chunk-URGYGS3N.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-URGYGS3N.mjs.map b/dist/chunk-URGYGS3N.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..3746645ef62883ff726cf669552a7eceb77cd1e1
--- /dev/null
+++ b/dist/chunk-URGYGS3N.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/rpc-methods/index.ts"],"sourcesContent":["import type { GetPermissionsHooks } from './getPermissions';\nimport { getPermissionsHandler } from './getPermissions';\nimport type { RequestPermissionsHooks } from './requestPermissions';\nimport { requestPermissionsHandler } from './requestPermissions';\nimport type { RevokePermissionsHooks } from './revokePermissions';\nimport { revokePermissionsHandler } from './revokePermissions';\n\nexport type PermittedRpcMethodHooks = RequestPermissionsHooks &\n  GetPermissionsHooks &\n  RevokePermissionsHooks;\n\nexport const handlers = [\n  requestPermissionsHandler,\n  getPermissionsHandler,\n  revokePermissionsHandler,\n] as const;\n"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAWO,IAAM,WAAW;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACF;","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-VVMWFMOZ.js b/dist/chunk-VVMWFMOZ.js
new file mode 100644
index 0000000000000000000000000000000000000000..427fb03dd8481da6bdad88b08d57ea680c60e835
--- /dev/null
+++ b/dist/chunk-VVMWFMOZ.js
@@ -0,0 +1,29 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkHRDKMOYSjs = require('./chunk-HRDKMOYS.js');
+
+
+var _chunkX5SE32ZWjs = require('./chunk-X5SE32ZW.js');
+
+
+var _chunkH3MUXLE4js = require('./chunk-H3MUXLE4.js');
+
+
+var _chunkZ2XKIXLSjs = require('./chunk-Z2XKIXLS.js');
+
+// src/rpc-methods/index.ts
+var rpc_methods_exports = {};
+_chunkZ2XKIXLSjs.__export.call(void 0, rpc_methods_exports, {
+  handlers: () => handlers
+});
+var handlers = [
+  _chunkX5SE32ZWjs.requestPermissionsHandler,
+  _chunkHRDKMOYSjs.getPermissionsHandler,
+  _chunkH3MUXLE4js.revokePermissionsHandler
+];
+
+
+
+
+exports.handlers = handlers; exports.rpc_methods_exports = rpc_methods_exports;
+//# sourceMappingURL=chunk-VVMWFMOZ.js.map
\ No newline at end of file
diff --git a/dist/chunk-VVMWFMOZ.js.map b/dist/chunk-VVMWFMOZ.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..6c6b6d6d1147190f60d5306a0e64ca5ee93c4505
--- /dev/null
+++ b/dist/chunk-VVMWFMOZ.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/rpc-methods/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAWO,IAAM,WAAW;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACF","sourcesContent":["import type { GetPermissionsHooks } from './getPermissions';\nimport { getPermissionsHandler } from './getPermissions';\nimport type { RequestPermissionsHooks } from './requestPermissions';\nimport { requestPermissionsHandler } from './requestPermissions';\nimport type { RevokePermissionsHooks } from './revokePermissions';\nimport { revokePermissionsHandler } from './revokePermissions';\n\nexport type PermittedRpcMethodHooks = RequestPermissionsHooks &\n  GetPermissionsHooks &\n  RevokePermissionsHooks;\n\nexport const handlers = [\n  requestPermissionsHandler,\n  getPermissionsHandler,\n  revokePermissionsHandler,\n] as const;\n"]}
\ No newline at end of file
diff --git a/dist/chunk-W4CPVA4J.mjs b/dist/chunk-W4CPVA4J.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..7b5c18c6ad43acf2321cf360cf3762240214a697
--- /dev/null
+++ b/dist/chunk-W4CPVA4J.mjs
@@ -0,0 +1,151 @@
+// src/SubjectMetadataController.ts
+import { BaseController } from "@metamask/base-controller";
+var controllerName = "SubjectMetadataController";
+var SubjectType = /* @__PURE__ */ ((SubjectType2) => {
+  SubjectType2["Extension"] = "extension";
+  SubjectType2["Internal"] = "internal";
+  SubjectType2["Unknown"] = "unknown";
+  SubjectType2["Website"] = "website";
+  SubjectType2["Snap"] = "snap";
+  return SubjectType2;
+})(SubjectType || {});
+var stateMetadata = {
+  subjectMetadata: { persist: true, anonymous: false }
+};
+var defaultState = {
+  subjectMetadata: {}
+};
+var SubjectMetadataController = class _SubjectMetadataController extends BaseController {
+  constructor({
+    messenger,
+    subjectCacheLimit,
+    state = {}
+  }) {
+    if (!Number.isInteger(subjectCacheLimit) || subjectCacheLimit < 1) {
+      throw new Error(
+        `subjectCacheLimit must be a positive integer. Received: "${subjectCacheLimit}"`
+      );
+    }
+    const hasPermissions = (origin) => {
+      return messenger.call("PermissionController:hasPermissions", origin);
+    };
+    super({
+      name: controllerName,
+      metadata: stateMetadata,
+      messenger,
+      state: {
+        ..._SubjectMetadataController.getTrimmedState(state, hasPermissions)
+      }
+    });
+    this.subjectHasPermissions = hasPermissions;
+    this.subjectCacheLimit = subjectCacheLimit;
+    this.subjectsWithoutPermissionsEncounteredSinceStartup = /* @__PURE__ */ new Set();
+    this.messagingSystem.registerActionHandler(
+      `${this.name}:getSubjectMetadata`,
+      this.getSubjectMetadata.bind(this)
+    );
+    this.messagingSystem.registerActionHandler(
+      `${this.name}:addSubjectMetadata`,
+      this.addSubjectMetadata.bind(this)
+    );
+  }
+  /**
+   * Clears the state of this controller. Also resets the cache of subjects
+   * encountered since startup, so as to not prematurely reach the cache limit.
+   */
+  clearState() {
+    this.subjectsWithoutPermissionsEncounteredSinceStartup.clear();
+    this.update((_draftState) => {
+      return { ...defaultState };
+    });
+  }
+  /**
+   * Stores domain metadata for the given origin (subject). Deletes metadata for
+   * subjects without permissions in a FIFO manner once more than
+   * {@link SubjectMetadataController.subjectCacheLimit} distinct origins have
+   * been added since boot.
+   *
+   * In order to prevent a degraded user experience,
+   * metadata is never deleted for subjects with permissions, since metadata
+   * cannot yet be requested on demand.
+   *
+   * @param metadata - The subject metadata to store.
+   */
+  addSubjectMetadata(metadata) {
+    const { origin } = metadata;
+    const newMetadata = {
+      ...metadata,
+      extensionId: metadata.extensionId || null,
+      iconUrl: metadata.iconUrl || null,
+      name: metadata.name || null,
+      subjectType: metadata.subjectType || null
+    };
+    let originToForget = null;
+    if (this.subjectsWithoutPermissionsEncounteredSinceStartup.size >= this.subjectCacheLimit) {
+      const cachedOrigin = this.subjectsWithoutPermissionsEncounteredSinceStartup.values().next().value;
+      this.subjectsWithoutPermissionsEncounteredSinceStartup.delete(
+        cachedOrigin
+      );
+      if (!this.subjectHasPermissions(cachedOrigin)) {
+        originToForget = cachedOrigin;
+      }
+    }
+    this.subjectsWithoutPermissionsEncounteredSinceStartup.add(origin);
+    this.update((draftState) => {
+      draftState.subjectMetadata[origin] = newMetadata;
+      if (typeof originToForget === "string") {
+        delete draftState.subjectMetadata[originToForget];
+      }
+    });
+  }
+  /**
+   * Gets the subject metadata for the given origin, if any.
+   *
+   * @param origin - The origin for which to get the subject metadata.
+   * @returns The subject metadata, if any, or `undefined` otherwise.
+   */
+  getSubjectMetadata(origin) {
+    return this.state.subjectMetadata[origin];
+  }
+  /**
+   * Deletes all subjects without permissions from the controller's state.
+   */
+  trimMetadataState() {
+    this.update((draftState) => {
+      return _SubjectMetadataController.getTrimmedState(
+        draftState,
+        this.subjectHasPermissions
+      );
+    });
+  }
+  /**
+   * Returns a new state object that only includes subjects with permissions.
+   * This method is static because we want to call it in the constructor, before
+   * the controller's state is initialized.
+   *
+   * @param state - The state object to trim.
+   * @param hasPermissions - A function that returns a boolean indicating
+   * whether a particular subject (identified by its origin) has any
+   * permissions.
+   * @returns The new state object. If the specified `state` object has no
+   * subject metadata, the returned object will be equivalent to the default
+   * state of this controller.
+   */
+  static getTrimmedState(state, hasPermissions) {
+    const { subjectMetadata = {} } = state;
+    return {
+      subjectMetadata: Object.keys(subjectMetadata).reduce((newSubjectMetadata, origin) => {
+        if (hasPermissions(origin)) {
+          newSubjectMetadata[origin] = subjectMetadata[origin];
+        }
+        return newSubjectMetadata;
+      }, {})
+    };
+  }
+};
+
+export {
+  SubjectType,
+  SubjectMetadataController
+};
+//# sourceMappingURL=chunk-W4CPVA4J.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-W4CPVA4J.mjs.map b/dist/chunk-W4CPVA4J.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..8291cd8871651a6f673b7c0377a65af8b69a1a5a
--- /dev/null
+++ b/dist/chunk-W4CPVA4J.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/SubjectMetadataController.ts"],"sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type { Json } from '@metamask/utils';\n\nimport type {\n  GenericPermissionController,\n  HasPermissions,\n  PermissionSubjectMetadata,\n} from './PermissionController';\n\nconst controllerName = 'SubjectMetadataController';\n\ntype SubjectOrigin = string;\n\n/**\n * The different kinds of subjects that MetaMask may interact with, including\n * third parties and itself (e.g., when the background communicated with the UI).\n */\nexport enum SubjectType {\n  Extension = 'extension',\n  Internal = 'internal',\n  Unknown = 'unknown',\n  Website = 'website',\n  Snap = 'snap',\n}\n\nexport type SubjectMetadata = PermissionSubjectMetadata & {\n  [key: string]: Json;\n  name: string | null;\n  subjectType: SubjectType | null;\n  extensionId: string | null;\n  iconUrl: string | null;\n};\n\ntype SubjectMetadataToAdd = PermissionSubjectMetadata & {\n  name?: string | null;\n  subjectType?: SubjectType | null;\n  extensionId?: string | null;\n  iconUrl?: string | null;\n} & Record<string, Json>;\n\nexport type SubjectMetadataControllerState = {\n  subjectMetadata: Record<SubjectOrigin, SubjectMetadata>;\n};\n\nconst stateMetadata = {\n  subjectMetadata: { persist: true, anonymous: false },\n};\n\nconst defaultState: SubjectMetadataControllerState = {\n  subjectMetadata: {},\n};\n\nexport type GetSubjectMetadataState = ControllerGetStateAction<\n  typeof controllerName,\n  SubjectMetadataControllerState\n>;\n\nexport type GetSubjectMetadata = {\n  type: `${typeof controllerName}:getSubjectMetadata`;\n  handler: (origin: SubjectOrigin) => SubjectMetadata | undefined;\n};\n\nexport type AddSubjectMetadata = {\n  type: `${typeof controllerName}:addSubjectMetadata`;\n  handler: (metadata: SubjectMetadataToAdd) => void;\n};\n\nexport type SubjectMetadataControllerActions =\n  | GetSubjectMetadataState\n  | GetSubjectMetadata\n  | AddSubjectMetadata;\n\nexport type SubjectMetadataStateChange = ControllerStateChangeEvent<\n  typeof controllerName,\n  SubjectMetadataControllerState\n>;\n\nexport type SubjectMetadataControllerEvents = SubjectMetadataStateChange;\n\ntype AllowedActions = HasPermissions;\n\nexport type SubjectMetadataControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SubjectMetadataControllerActions | AllowedActions,\n  SubjectMetadataControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\ntype SubjectMetadataControllerOptions = {\n  messenger: SubjectMetadataControllerMessenger;\n  subjectCacheLimit: number;\n  state?: Partial<SubjectMetadataControllerState>;\n};\n\n/**\n * A controller for storing metadata associated with permission subjects. More\n * or less, a cache.\n */\nexport class SubjectMetadataController extends BaseController<\n  typeof controllerName,\n  SubjectMetadataControllerState,\n  SubjectMetadataControllerMessenger\n> {\n  private readonly subjectCacheLimit: number;\n\n  private readonly subjectsWithoutPermissionsEncounteredSinceStartup: Set<string>;\n\n  private readonly subjectHasPermissions: GenericPermissionController['hasPermissions'];\n\n  constructor({\n    messenger,\n    subjectCacheLimit,\n    state = {},\n  }: SubjectMetadataControllerOptions) {\n    if (!Number.isInteger(subjectCacheLimit) || subjectCacheLimit < 1) {\n      throw new Error(\n        `subjectCacheLimit must be a positive integer. Received: \"${subjectCacheLimit}\"`,\n      );\n    }\n\n    const hasPermissions = (origin: string) => {\n      return messenger.call('PermissionController:hasPermissions', origin);\n    };\n\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: {\n        ...SubjectMetadataController.getTrimmedState(state, hasPermissions),\n      },\n    });\n\n    this.subjectHasPermissions = hasPermissions;\n    this.subjectCacheLimit = subjectCacheLimit;\n    this.subjectsWithoutPermissionsEncounteredSinceStartup = new Set();\n\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:getSubjectMetadata`,\n      this.getSubjectMetadata.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:addSubjectMetadata`,\n      this.addSubjectMetadata.bind(this),\n    );\n  }\n\n  /**\n   * Clears the state of this controller. Also resets the cache of subjects\n   * encountered since startup, so as to not prematurely reach the cache limit.\n   */\n  clearState(): void {\n    this.subjectsWithoutPermissionsEncounteredSinceStartup.clear();\n    this.update((_draftState) => {\n      return { ...defaultState };\n    });\n  }\n\n  /**\n   * Stores domain metadata for the given origin (subject). Deletes metadata for\n   * subjects without permissions in a FIFO manner once more than\n   * {@link SubjectMetadataController.subjectCacheLimit} distinct origins have\n   * been added since boot.\n   *\n   * In order to prevent a degraded user experience,\n   * metadata is never deleted for subjects with permissions, since metadata\n   * cannot yet be requested on demand.\n   *\n   * @param metadata - The subject metadata to store.\n   */\n  addSubjectMetadata(metadata: SubjectMetadataToAdd): void {\n    const { origin } = metadata;\n    const newMetadata: SubjectMetadata = {\n      ...metadata,\n      extensionId: metadata.extensionId || null,\n      iconUrl: metadata.iconUrl || null,\n      name: metadata.name || null,\n      subjectType: metadata.subjectType || null,\n    };\n\n    let originToForget: string | null = null;\n    // We only delete the oldest encountered subject from the cache, again to\n    // ensure that the user's experience isn't degraded by missing icons etc.\n    if (\n      this.subjectsWithoutPermissionsEncounteredSinceStartup.size >=\n      this.subjectCacheLimit\n    ) {\n      const cachedOrigin =\n        this.subjectsWithoutPermissionsEncounteredSinceStartup\n          .values()\n          .next().value;\n\n      this.subjectsWithoutPermissionsEncounteredSinceStartup.delete(\n        cachedOrigin,\n      );\n\n      if (!this.subjectHasPermissions(cachedOrigin)) {\n        originToForget = cachedOrigin;\n      }\n    }\n\n    this.subjectsWithoutPermissionsEncounteredSinceStartup.add(origin);\n\n    this.update((draftState) => {\n      draftState.subjectMetadata[origin] = newMetadata;\n      if (typeof originToForget === 'string') {\n        delete draftState.subjectMetadata[originToForget];\n      }\n    });\n  }\n\n  /**\n   * Gets the subject metadata for the given origin, if any.\n   *\n   * @param origin - The origin for which to get the subject metadata.\n   * @returns The subject metadata, if any, or `undefined` otherwise.\n   */\n  getSubjectMetadata(origin: SubjectOrigin): SubjectMetadata | undefined {\n    return this.state.subjectMetadata[origin];\n  }\n\n  /**\n   * Deletes all subjects without permissions from the controller's state.\n   */\n  trimMetadataState(): void {\n    this.update((draftState) => {\n      // @ts-expect-error ts(2589)\n      return SubjectMetadataController.getTrimmedState(\n        draftState,\n        this.subjectHasPermissions,\n      );\n    });\n  }\n\n  /**\n   * Returns a new state object that only includes subjects with permissions.\n   * This method is static because we want to call it in the constructor, before\n   * the controller's state is initialized.\n   *\n   * @param state - The state object to trim.\n   * @param hasPermissions - A function that returns a boolean indicating\n   * whether a particular subject (identified by its origin) has any\n   * permissions.\n   * @returns The new state object. If the specified `state` object has no\n   * subject metadata, the returned object will be equivalent to the default\n   * state of this controller.\n   */\n  private static getTrimmedState(\n    state: Partial<SubjectMetadataControllerState>,\n    hasPermissions: SubjectMetadataController['subjectHasPermissions'],\n  ): SubjectMetadataControllerState {\n    const { subjectMetadata = {} } = state;\n\n    return {\n      subjectMetadata: Object.keys(subjectMetadata).reduce<\n        Record<SubjectOrigin, SubjectMetadata>\n      >((newSubjectMetadata, origin) => {\n        if (hasPermissions(origin)) {\n          newSubjectMetadata[origin] = subjectMetadata[origin];\n        }\n        return newSubjectMetadata;\n      }, {}),\n    };\n  }\n}\n"],"mappings":";AAKA,SAAS,sBAAsB;AAS/B,IAAM,iBAAiB;AAQhB,IAAK,cAAL,kBAAKA,iBAAL;AACL,EAAAA,aAAA,eAAY;AACZ,EAAAA,aAAA,cAAW;AACX,EAAAA,aAAA,aAAU;AACV,EAAAA,aAAA,aAAU;AACV,EAAAA,aAAA,UAAO;AALG,SAAAA;AAAA,GAAA;AA2BZ,IAAM,gBAAgB;AAAA,EACpB,iBAAiB,EAAE,SAAS,MAAM,WAAW,MAAM;AACrD;AAEA,IAAM,eAA+C;AAAA,EACnD,iBAAiB,CAAC;AACpB;AAiDO,IAAM,4BAAN,MAAM,mCAAkC,eAI7C;AAAA,EAOA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA,QAAQ,CAAC;AAAA,EACX,GAAqC;AACnC,QAAI,CAAC,OAAO,UAAU,iBAAiB,KAAK,oBAAoB,GAAG;AACjE,YAAM,IAAI;AAAA,QACR,4DAA4D,iBAAiB;AAAA,MAC/E;AAAA,IACF;AAEA,UAAM,iBAAiB,CAAC,WAAmB;AACzC,aAAO,UAAU,KAAK,uCAAuC,MAAM;AAAA,IACrE;AAEA,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,MACV;AAAA,MACA,OAAO;AAAA,QACL,GAAG,2BAA0B,gBAAgB,OAAO,cAAc;AAAA,MACpE;AAAA,IACF,CAAC;AAED,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB;AACzB,SAAK,oDAAoD,oBAAI,IAAI;AAEjE,SAAK,gBAAgB;AAAA,MACnB,GAAG,KAAK,IAAI;AAAA,MACZ,KAAK,mBAAmB,KAAK,IAAI;AAAA,IACnC;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,KAAK,IAAI;AAAA,MACZ,KAAK,mBAAmB,KAAK,IAAI;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAmB;AACjB,SAAK,kDAAkD,MAAM;AAC7D,SAAK,OAAO,CAAC,gBAAgB;AAC3B,aAAO,EAAE,GAAG,aAAa;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,mBAAmB,UAAsC;AACvD,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,cAA+B;AAAA,MACnC,GAAG;AAAA,MACH,aAAa,SAAS,eAAe;AAAA,MACrC,SAAS,SAAS,WAAW;AAAA,MAC7B,MAAM,SAAS,QAAQ;AAAA,MACvB,aAAa,SAAS,eAAe;AAAA,IACvC;AAEA,QAAI,iBAAgC;AAGpC,QACE,KAAK,kDAAkD,QACvD,KAAK,mBACL;AACA,YAAM,eACJ,KAAK,kDACF,OAAO,EACP,KAAK,EAAE;AAEZ,WAAK,kDAAkD;AAAA,QACrD;AAAA,MACF;AAEA,UAAI,CAAC,KAAK,sBAAsB,YAAY,GAAG;AAC7C,yBAAiB;AAAA,MACnB;AAAA,IACF;AAEA,SAAK,kDAAkD,IAAI,MAAM;AAEjE,SAAK,OAAO,CAAC,eAAe;AAC1B,iBAAW,gBAAgB,MAAM,IAAI;AACrC,UAAI,OAAO,mBAAmB,UAAU;AACtC,eAAO,WAAW,gBAAgB,cAAc;AAAA,MAClD;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,QAAoD;AACrE,WAAO,KAAK,MAAM,gBAAgB,MAAM;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAKA,oBAA0B;AACxB,SAAK,OAAO,CAAC,eAAe;AAE1B,aAAO,2BAA0B;AAAA,QAC/B;AAAA,QACA,KAAK;AAAA,MACP;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAe,gBACb,OACA,gBACgC;AAChC,UAAM,EAAE,kBAAkB,CAAC,EAAE,IAAI;AAEjC,WAAO;AAAA,MACL,iBAAiB,OAAO,KAAK,eAAe,EAAE,OAE5C,CAAC,oBAAoB,WAAW;AAChC,YAAI,eAAe,MAAM,GAAG;AAC1B,6BAAmB,MAAM,IAAI,gBAAgB,MAAM;AAAA,QACrD;AACA,eAAO;AAAA,MACT,GAAG,CAAC,CAAC;AAAA,IACP;AAAA,EACF;AACF;","names":["SubjectType"]}
\ No newline at end of file
diff --git a/dist/chunk-X5SE32ZW.js b/dist/chunk-X5SE32ZW.js
new file mode 100644
index 0000000000000000000000000000000000000000..ed9e7874b9a81c7dff19d7204e65e48573de8993
--- /dev/null
+++ b/dist/chunk-X5SE32ZW.js
@@ -0,0 +1,30 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+var _chunkSEPTGKNBjs = require('./chunk-SEPTGKNB.js');
+
+// src/rpc-methods/requestPermissions.ts
+var _controllerutils = require('@metamask/controller-utils');
+var requestPermissionsHandler = {
+  methodNames: ["wallet_requestPermissions" /* requestPermissions */],
+  implementation: requestPermissionsImplementation,
+  hookNames: {
+    requestPermissionsForOrigin: true
+  }
+};
+async function requestPermissionsImplementation(req, res, _next, end, { requestPermissionsForOrigin }) {
+  const { params } = req;
+  if (!Array.isArray(params) || !_controllerutils.isPlainObject.call(void 0, params[0])) {
+    return end(_chunkSEPTGKNBjs.invalidParams.call(void 0, { data: { request: req } }));
+  }
+  const [requestedPermissions] = params;
+  const [grantedPermissions] = await requestPermissionsForOrigin(
+    requestedPermissions
+  );
+  res.result = Object.values(grantedPermissions);
+  return end();
+}
+
+
+
+exports.requestPermissionsHandler = requestPermissionsHandler;
+//# sourceMappingURL=chunk-X5SE32ZW.js.map
\ No newline at end of file
diff --git a/dist/chunk-X5SE32ZW.js.map b/dist/chunk-X5SE32ZW.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..ee5720357ce1da22a09bbbb0e36a9f9565f8e765
--- /dev/null
+++ b/dist/chunk-X5SE32ZW.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/rpc-methods/requestPermissions.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,qBAAqB;AASvB,IAAM,4BAIT;AAAA,EACF,aAAa,qDAA+B;AAAA,EAC5C,gBAAgB;AAAA,EAChB,WAAW;AAAA,IACT,6BAA6B;AAAA,EAC/B;AACF;AAuBA,eAAe,iCACb,KACA,KACA,OACA,KACA,EAAE,4BAA4B,GACf;AACf,QAAM,EAAE,OAAO,IAAI;AAEnB,MAAI,CAAC,MAAM,QAAQ,MAAM,KAAK,CAAC,cAAc,OAAO,CAAC,CAAC,GAAG;AACvD,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAEA,QAAM,CAAC,oBAAoB,IAAI;AAC/B,QAAM,CAAC,kBAAkB,IAAI,MAAM;AAAA,IACjC;AAAA,EACF;AAGA,MAAI,SAAS,OAAO,OAAO,kBAAkB;AAC7C,SAAO,IAAI;AACb","sourcesContent":["import { isPlainObject } from '@metamask/controller-utils';\nimport type { JsonRpcEngineEndCallback } from '@metamask/json-rpc-engine';\nimport type { JsonRpcRequest, PendingJsonRpcResponse } from '@metamask/utils';\n\nimport { invalidParams } from '../errors';\nimport type { PermissionConstraint, RequestedPermissions } from '../Permission';\nimport type { PermittedHandlerExport } from '../utils';\nimport { MethodNames } from '../utils';\n\nexport const requestPermissionsHandler: PermittedHandlerExport<\n  RequestPermissionsHooks,\n  [RequestedPermissions],\n  PermissionConstraint[]\n> = {\n  methodNames: [MethodNames.requestPermissions],\n  implementation: requestPermissionsImplementation,\n  hookNames: {\n    requestPermissionsForOrigin: true,\n  },\n};\n\ntype RequestPermissions = (\n  requestedPermissions: RequestedPermissions,\n) => Promise<\n  [Record<string, PermissionConstraint>, { id: string; origin: string }]\n>;\n\nexport type RequestPermissionsHooks = {\n  requestPermissionsForOrigin: RequestPermissions;\n};\n\n/**\n * Request Permissions implementation to be used in JsonRpcEngine middleware.\n *\n * @param req - The JsonRpcEngine request\n * @param res - The JsonRpcEngine result object\n * @param _next - JsonRpcEngine next() callback - unused\n * @param end - JsonRpcEngine end() callback\n * @param options - Method hooks passed to the method implementation\n * @param options.requestPermissionsForOrigin - The specific method hook needed for this method implementation\n * @returns A promise that resolves to nothing\n */\nasync function requestPermissionsImplementation(\n  req: JsonRpcRequest<[RequestedPermissions]>,\n  res: PendingJsonRpcResponse<PermissionConstraint[]>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  { requestPermissionsForOrigin }: RequestPermissionsHooks,\n): Promise<void> {\n  const { params } = req;\n\n  if (!Array.isArray(params) || !isPlainObject(params[0])) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  const [requestedPermissions] = params;\n  const [grantedPermissions] = await requestPermissionsForOrigin(\n    requestedPermissions,\n  );\n\n  // `wallet_requestPermission` is specified to return an array.\n  res.result = Object.values(grantedPermissions);\n  return end();\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-YGXO4JGU.mjs b/dist/chunk-YGXO4JGU.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..9dfa0f1735a5e8f9a001d7eba3719e2529d07e12
--- /dev/null
+++ b/dist/chunk-YGXO4JGU.mjs
@@ -0,0 +1,34 @@
+import {
+  invalidParams
+} from "./chunk-I4OI6AQF.mjs";
+
+// src/rpc-methods/revokePermissions.ts
+import {
+  isNonEmptyArray
+} from "@metamask/utils";
+var revokePermissionsHandler = {
+  methodNames: ["wallet_revokePermissions" /* revokePermissions */],
+  implementation: revokePermissionsImplementation,
+  hookNames: {
+    revokePermissionsForOrigin: true
+  }
+};
+async function revokePermissionsImplementation(req, res, _next, end, { revokePermissionsForOrigin }) {
+  const { params } = req;
+  const param = params?.[0];
+  if (!param) {
+    return end(invalidParams({ data: { request: req } }));
+  }
+  const permissionKeys = Object.keys(param);
+  if (!isNonEmptyArray(permissionKeys)) {
+    return end(invalidParams({ data: { request: req } }));
+  }
+  revokePermissionsForOrigin(permissionKeys);
+  res.result = null;
+  return end();
+}
+
+export {
+  revokePermissionsHandler
+};
+//# sourceMappingURL=chunk-YGXO4JGU.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-YGXO4JGU.mjs.map b/dist/chunk-YGXO4JGU.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..f7994607baa2f2608b93de04b13c32ddba454252
--- /dev/null
+++ b/dist/chunk-YGXO4JGU.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/rpc-methods/revokePermissions.ts"],"sourcesContent":["import type { JsonRpcEngineEndCallback } from '@metamask/json-rpc-engine';\nimport {\n  isNonEmptyArray,\n  type Json,\n  type JsonRpcRequest,\n  type NonEmptyArray,\n  type PendingJsonRpcResponse,\n} from '@metamask/utils';\n\nimport { invalidParams } from '../errors';\nimport type { PermissionConstraint } from '../Permission';\nimport type { PermittedHandlerExport } from '../utils';\nimport { MethodNames } from '../utils';\n\nexport const revokePermissionsHandler: PermittedHandlerExport<\n  RevokePermissionsHooks,\n  RevokePermissionArgs,\n  null\n> = {\n  methodNames: [MethodNames.revokePermissions],\n  implementation: revokePermissionsImplementation,\n  hookNames: {\n    revokePermissionsForOrigin: true,\n  },\n};\n\nexport type RevokePermissionArgs = Record<\n  PermissionConstraint['parentCapability'],\n  Json\n>;\n\ntype RevokePermissions = (\n  permissions: NonEmptyArray<PermissionConstraint['parentCapability']>,\n) => void;\n\nexport type RevokePermissionsHooks = {\n  revokePermissionsForOrigin: RevokePermissions;\n};\n\n/**\n * Revoke Permissions implementation to be used in JsonRpcEngine middleware.\n *\n * @param req - The JsonRpcEngine request\n * @param res - The JsonRpcEngine result object\n * @param _next - JsonRpcEngine next() callback - unused\n * @param end - JsonRpcEngine end() callback\n * @param options - Method hooks passed to the method implementation\n * @param options.revokePermissionsForOrigin - A hook that revokes given permission keys for an origin\n * @returns A promise that resolves to nothing\n */\nasync function revokePermissionsImplementation(\n  req: JsonRpcRequest<RevokePermissionArgs>,\n  res: PendingJsonRpcResponse<null>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  { revokePermissionsForOrigin }: RevokePermissionsHooks,\n): Promise<void> {\n  const { params } = req;\n\n  const param = params?.[0];\n\n  if (!param) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  // For now, this API revokes the entire permission key\n  // even if caveats are specified.\n  const permissionKeys = Object.keys(param);\n\n  if (!isNonEmptyArray(permissionKeys)) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  revokePermissionsForOrigin(permissionKeys);\n\n  res.result = null;\n\n  return end();\n}\n"],"mappings":";;;;;AACA;AAAA,EACE;AAAA,OAKK;AAOA,IAAM,2BAIT;AAAA,EACF,aAAa,mDAA8B;AAAA,EAC3C,gBAAgB;AAAA,EAChB,WAAW;AAAA,IACT,4BAA4B;AAAA,EAC9B;AACF;AA0BA,eAAe,gCACb,KACA,KACA,OACA,KACA,EAAE,2BAA2B,GACd;AACf,QAAM,EAAE,OAAO,IAAI;AAEnB,QAAM,QAAQ,SAAS,CAAC;AAExB,MAAI,CAAC,OAAO;AACV,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAIA,QAAM,iBAAiB,OAAO,KAAK,KAAK;AAExC,MAAI,CAAC,gBAAgB,cAAc,GAAG;AACpC,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAEA,6BAA2B,cAAc;AAEzC,MAAI,SAAS;AAEb,SAAO,IAAI;AACb;","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-Z2XKIXLS.js b/dist/chunk-Z2XKIXLS.js
new file mode 100644
index 0000000000000000000000000000000000000000..dd9496e2305796fc15f368fc82ea8e89bad50d69
--- /dev/null
+++ b/dist/chunk-Z2XKIXLS.js
@@ -0,0 +1,25 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});var __defProp = Object.defineProperty;
+var __export = (target, all) => {
+  for (var name in all)
+    __defProp(target, name, { get: all[name], enumerable: true });
+};
+var __accessCheck = (obj, member, msg) => {
+  if (!member.has(obj))
+    throw TypeError("Cannot " + msg);
+};
+var __privateAdd = (obj, member, value) => {
+  if (member.has(obj))
+    throw TypeError("Cannot add the same private member more than once");
+  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
+};
+var __privateMethod = (obj, member, method) => {
+  __accessCheck(obj, member, "access private method");
+  return method;
+};
+
+
+
+
+
+exports.__export = __export; exports.__privateAdd = __privateAdd; exports.__privateMethod = __privateMethod;
+//# sourceMappingURL=chunk-Z2XKIXLS.js.map
\ No newline at end of file
diff --git a/dist/chunk-Z2XKIXLS.js.map b/dist/chunk-Z2XKIXLS.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..a464c6732ec9fa9ef5cf78917d42f90f2200eb58
--- /dev/null
+++ b/dist/chunk-Z2XKIXLS.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/chunk-Z36MN4RC.mjs b/dist/chunk-Z36MN4RC.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..d5cb914f3abf88393e7f2d9627a267c362b721ec
--- /dev/null
+++ b/dist/chunk-Z36MN4RC.mjs
@@ -0,0 +1,30 @@
+import {
+  invalidParams
+} from "./chunk-I4OI6AQF.mjs";
+
+// src/rpc-methods/requestPermissions.ts
+import { isPlainObject } from "@metamask/controller-utils";
+var requestPermissionsHandler = {
+  methodNames: ["wallet_requestPermissions" /* requestPermissions */],
+  implementation: requestPermissionsImplementation,
+  hookNames: {
+    requestPermissionsForOrigin: true
+  }
+};
+async function requestPermissionsImplementation(req, res, _next, end, { requestPermissionsForOrigin }) {
+  const { params } = req;
+  if (!Array.isArray(params) || !isPlainObject(params[0])) {
+    return end(invalidParams({ data: { request: req } }));
+  }
+  const [requestedPermissions] = params;
+  const [grantedPermissions] = await requestPermissionsForOrigin(
+    requestedPermissions
+  );
+  res.result = Object.values(grantedPermissions);
+  return end();
+}
+
+export {
+  requestPermissionsHandler
+};
+//# sourceMappingURL=chunk-Z36MN4RC.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-Z36MN4RC.mjs.map b/dist/chunk-Z36MN4RC.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..3a14f031172cd8a91746b1f441a035bc471bd023
--- /dev/null
+++ b/dist/chunk-Z36MN4RC.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/rpc-methods/requestPermissions.ts"],"sourcesContent":["import { isPlainObject } from '@metamask/controller-utils';\nimport type { JsonRpcEngineEndCallback } from '@metamask/json-rpc-engine';\nimport type { JsonRpcRequest, PendingJsonRpcResponse } from '@metamask/utils';\n\nimport { invalidParams } from '../errors';\nimport type { PermissionConstraint, RequestedPermissions } from '../Permission';\nimport type { PermittedHandlerExport } from '../utils';\nimport { MethodNames } from '../utils';\n\nexport const requestPermissionsHandler: PermittedHandlerExport<\n  RequestPermissionsHooks,\n  [RequestedPermissions],\n  PermissionConstraint[]\n> = {\n  methodNames: [MethodNames.requestPermissions],\n  implementation: requestPermissionsImplementation,\n  hookNames: {\n    requestPermissionsForOrigin: true,\n  },\n};\n\ntype RequestPermissions = (\n  requestedPermissions: RequestedPermissions,\n) => Promise<\n  [Record<string, PermissionConstraint>, { id: string; origin: string }]\n>;\n\nexport type RequestPermissionsHooks = {\n  requestPermissionsForOrigin: RequestPermissions;\n};\n\n/**\n * Request Permissions implementation to be used in JsonRpcEngine middleware.\n *\n * @param req - The JsonRpcEngine request\n * @param res - The JsonRpcEngine result object\n * @param _next - JsonRpcEngine next() callback - unused\n * @param end - JsonRpcEngine end() callback\n * @param options - Method hooks passed to the method implementation\n * @param options.requestPermissionsForOrigin - The specific method hook needed for this method implementation\n * @returns A promise that resolves to nothing\n */\nasync function requestPermissionsImplementation(\n  req: JsonRpcRequest<[RequestedPermissions]>,\n  res: PendingJsonRpcResponse<PermissionConstraint[]>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  { requestPermissionsForOrigin }: RequestPermissionsHooks,\n): Promise<void> {\n  const { params } = req;\n\n  if (!Array.isArray(params) || !isPlainObject(params[0])) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  const [requestedPermissions] = params;\n  const [grantedPermissions] = await requestPermissionsForOrigin(\n    requestedPermissions,\n  );\n\n  // `wallet_requestPermission` is specified to return an array.\n  res.result = Object.values(grantedPermissions);\n  return end();\n}\n"],"mappings":";;;;;AAAA,SAAS,qBAAqB;AASvB,IAAM,4BAIT;AAAA,EACF,aAAa,qDAA+B;AAAA,EAC5C,gBAAgB;AAAA,EAChB,WAAW;AAAA,IACT,6BAA6B;AAAA,EAC/B;AACF;AAuBA,eAAe,iCACb,KACA,KACA,OACA,KACA,EAAE,4BAA4B,GACf;AACf,QAAM,EAAE,OAAO,IAAI;AAEnB,MAAI,CAAC,MAAM,QAAQ,MAAM,KAAK,CAAC,cAAc,OAAO,CAAC,CAAC,GAAG;AACvD,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAEA,QAAM,CAAC,oBAAoB,IAAI;AAC/B,QAAM,CAAC,kBAAkB,IAAI,MAAM;AAAA,IACjC;AAAA,EACF;AAGA,MAAI,SAAS,OAAO,OAAO,kBAAkB;AAC7C,SAAO,IAAI;AACb;","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-ZH4MLSXX.js b/dist/chunk-ZH4MLSXX.js
new file mode 100644
index 0000000000000000000000000000000000000000..d798f10a1d61c775c289d376a7dc4ab2bb20abfa
--- /dev/null
+++ b/dist/chunk-ZH4MLSXX.js
@@ -0,0 +1,31 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/Permission.ts
+var _nanoid = require('nanoid');
+function constructPermission(options) {
+  const { caveats = null, invoker, target } = options;
+  return {
+    id: _nanoid.nanoid.call(void 0, ),
+    parentCapability: target,
+    invoker,
+    caveats,
+    date: (/* @__PURE__ */ new Date()).getTime()
+  };
+}
+function findCaveat(permission, caveatType) {
+  return permission.caveats?.find((caveat) => caveat.type === caveatType);
+}
+var PermissionType = /* @__PURE__ */ ((PermissionType2) => {
+  PermissionType2["RestrictedMethod"] = "RestrictedMethod";
+  PermissionType2["Endowment"] = "Endowment";
+  return PermissionType2;
+})(PermissionType || {});
+function hasSpecificationType(specification, expectedType) {
+  return specification.permissionType === expectedType;
+}
+
+
+
+
+
+
+exports.constructPermission = constructPermission; exports.findCaveat = findCaveat; exports.PermissionType = PermissionType; exports.hasSpecificationType = hasSpecificationType;
+//# sourceMappingURL=chunk-ZH4MLSXX.js.map
\ No newline at end of file
diff --git a/dist/chunk-ZH4MLSXX.js.map b/dist/chunk-ZH4MLSXX.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..b6a603808c2b0f37efd054060c873a8a012787ae
--- /dev/null
+++ b/dist/chunk-ZH4MLSXX.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/Permission.ts"],"names":["PermissionType"],"mappings":";AAMA,SAAS,cAAc;AA2JhB,SAAS,oBAEd,SAAgE;AAChE,QAAM,EAAE,UAAU,MAAM,SAAS,OAAO,IAAI;AAE5C,SAAO;AAAA,IACL,IAAI,OAAO;AAAA,IACX,kBAAkB;AAAA,IAClB;AAAA,IACA;AAAA,IACA,OAAM,oBAAI,KAAK,GAAE,QAAQ;AAAA,EAC3B;AACF;AASO,SAAS,WACd,YACA,YAC8B;AAC9B,SAAO,WAAW,SAAS,KAAK,CAAC,WAAW,OAAO,SAAS,UAAU;AACxE;AAmKO,IAAK,iBAAL,kBAAKA,oBAAL;AAKL,EAAAA,gBAAA,sBAAmB;AAMnB,EAAAA,gBAAA,eAAY;AAXF,SAAAA;AAAA,GAAA;AA2NL,SAAS,qBAId,eACA,cAGA;AACA,SAAO,cAAc,mBAAmB;AAC1C","sourcesContent":["import type {\n  ActionConstraint,\n  EventConstraint,\n} from '@metamask/base-controller';\nimport type { NonEmptyArray } from '@metamask/controller-utils';\nimport type { Json } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { CaveatConstraint, Caveat } from './Caveat';\nimport type {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  PermissionController,\n  PermissionsRequest,\n  SideEffectMessenger,\n} from './PermissionController';\nimport type { SubjectType } from './SubjectMetadataController';\n\n/**\n * The origin of a subject.\n * Effectively the GUID of an entity that can have permissions.\n */\nexport type OriginString = string;\n\n/**\n * The name of a permission target.\n */\ntype TargetName = string;\n\n/**\n * A `ZCAP-LD`-like permission object. A permission is associated with a\n * particular `invoker`, which is the holder of the permission. Possessing the\n * permission grants access to a particular restricted resource, identified by\n * the `parentCapability`. The use of the restricted resource may be further\n * restricted by any `caveats` associated with the permission.\n *\n * See the README for details.\n */\nexport type PermissionConstraint = {\n  /**\n   * The context(s) in which this capability is meaningful.\n   *\n   * It is required by the standard, but we make it optional since there is only\n   * one context in our usage (i.e. the user's MetaMask instance).\n   */\n  readonly '@context'?: NonEmptyArray<string>;\n\n  /**\n   * The caveats of the permission.\n   *\n   * @see {@link Caveat} For more information.\n   */\n  readonly caveats: null | NonEmptyArray<CaveatConstraint>;\n\n  /**\n   * The creation date of the permission, in UNIX epoch time.\n   */\n  readonly date: number;\n\n  /**\n   * The GUID of the permission object.\n   */\n  readonly id: string;\n\n  /**\n   * The origin string of the subject that has the permission.\n   */\n  readonly invoker: OriginString;\n\n  /**\n   * A pointer to the resource that possession of the capability grants\n   * access to, for example a JSON-RPC method or endowment.\n   */\n  readonly parentCapability: string;\n};\n\n/**\n * A `ZCAP-LD`-like permission object. A permission is associated with a\n * particular `invoker`, which is the holder of the permission. Possessing the\n * permission grants access to a particular restricted resource, identified by\n * the `parentCapability`. The use of the restricted resource may be further\n * restricted by any `caveats` associated with the permission.\n *\n * See the README for details.\n *\n * @template Name - The name of the permission that the target corresponds to.\n * @template AllowedCaveat - A union of the allowed {@link Caveat} types\n * for the permission.\n */\nexport type ValidPermission<\n  Name extends TargetName,\n  AllowedCaveat extends CaveatConstraint,\n> = PermissionConstraint & {\n  /**\n   * The caveats of the permission.\n   *\n   * @see {@link Caveat} For more information.\n   */\n  readonly caveats: AllowedCaveat extends never\n    ? null\n    : NonEmptyArray<AllowedCaveat> | null;\n\n  /**\n   * A pointer to the resource that possession of the capability grants\n   * access to, for example a JSON-RPC method or endowment.\n   */\n  readonly parentCapability: Name;\n};\n\n/**\n * Internal utility for extracting the members types of an array. The type\n * evalutes to `never` if the specified type is the empty tuple or neither\n * an array nor a tuple.\n *\n * @template ArrayType - The array type whose members to extract.\n */\ntype ExtractArrayMembers<ArrayType> = ArrayType extends []\n  ? never\n  : ArrayType extends unknown[] | readonly unknown[]\n  ? ArrayType[number]\n  : never;\n\n/**\n * A utility type for extracting the allowed caveat types for a particular\n * permission from a permission specification type.\n *\n * @template PermissionSpecification - The permission specification type to\n * extract valid caveat types from.\n */\nexport type ExtractAllowedCaveatTypes<\n  PermissionSpecification extends PermissionSpecificationConstraint,\n> = ExtractArrayMembers<PermissionSpecification['allowedCaveats']>;\n\n/**\n * The options object of {@link constructPermission}.\n *\n * @template TargetPermission - The {@link Permission} that will be constructed.\n */\nexport type PermissionOptions<TargetPermission extends PermissionConstraint> = {\n  target: TargetPermission['parentCapability'];\n  /**\n   * The origin string of the subject that has the permission.\n   */\n  invoker: OriginString;\n\n  /**\n   * The caveats of the permission.\n   * See {@link Caveat}.\n   */\n  caveats?: NonEmptyArray<CaveatConstraint>;\n};\n\n/**\n * The default permission factory function. Naively constructs a permission from\n * the inputs. Sets a default, random `id` if none is provided.\n *\n * @see {@link Permission} For more details.\n * @template TargetPermission- - The {@link Permission} that will be constructed.\n * @param options - The options for the permission.\n * @returns The new permission object.\n */\nexport function constructPermission<\n  TargetPermission extends PermissionConstraint,\n>(options: PermissionOptions<TargetPermission>): TargetPermission {\n  const { caveats = null, invoker, target } = options;\n\n  return {\n    id: nanoid(),\n    parentCapability: target,\n    invoker,\n    caveats,\n    date: new Date().getTime(),\n  } as TargetPermission;\n}\n\n/**\n * Gets the caveat of the specified type belonging to the specified permission.\n *\n * @param permission - The permission whose caveat to retrieve.\n * @param caveatType - The type of the caveat to retrieve.\n * @returns The caveat, or undefined if no such caveat exists.\n */\nexport function findCaveat(\n  permission: PermissionConstraint,\n  caveatType: string,\n): CaveatConstraint | undefined {\n  return permission.caveats?.find((caveat) => caveat.type === caveatType);\n}\n\n/**\n * A requested permission object. Just an object with any of the properties\n * of a {@link PermissionConstraint} object.\n */\ntype RequestedPermission = Partial<PermissionConstraint>;\n\n/**\n * A record of target names and their {@link RequestedPermission} objects.\n */\nexport type RequestedPermissions = Record<TargetName, RequestedPermission>;\n\n/**\n * The restricted method context object. Essentially a way to pass internal\n * arguments to restricted methods and caveat functions, most importantly the\n * requesting origin.\n */\ntype RestrictedMethodContext = Readonly<{\n  origin: OriginString;\n  [key: string]: unknown;\n}>;\n\nexport type RestrictedMethodParameters = Json[] | Record<string, Json>;\n\n/**\n * The arguments passed to a restricted method implementation.\n *\n * @template Params - The JSON-RPC parameters of the restricted method.\n */\nexport type RestrictedMethodOptions<\n  Params extends RestrictedMethodParameters | null,\n> = {\n  method: TargetName;\n  params?: Params;\n  context: RestrictedMethodContext;\n};\n\n/**\n * A synchronous restricted method implementation.\n *\n * @template Params - The JSON-RPC parameters of the restricted method.\n * @template Result - The JSON-RPC result of the restricted method.\n */\nexport type SyncRestrictedMethod<\n  Params extends RestrictedMethodParameters,\n  Result extends Json,\n> = (args: RestrictedMethodOptions<Params>) => Result;\n\n/**\n * An asynchronous restricted method implementation.\n *\n * @template Params - The JSON-RPC parameters of the restricted method.\n * @template Result - The JSON-RPC result of the restricted method.\n */\nexport type AsyncRestrictedMethod<\n  Params extends RestrictedMethodParameters,\n  Result extends Json,\n> = (args: RestrictedMethodOptions<Params>) => Promise<Result>;\n\n/**\n * A synchronous or asynchronous restricted method implementation.\n *\n * @template Params - The JSON-RPC parameters of the restricted method.\n * @template Result - The JSON-RPC result of the restricted method.\n */\nexport type RestrictedMethod<\n  Params extends RestrictedMethodParameters,\n  Result extends Json,\n> =\n  | SyncRestrictedMethod<Params, Result>\n  | AsyncRestrictedMethod<Params, Result>;\n\nexport type ValidRestrictedMethod<\n  MethodImplementation extends RestrictedMethod<\n    RestrictedMethodParameters,\n    Json\n  >,\n> = MethodImplementation extends (args: infer Options) => Json | Promise<Json>\n  ? Options extends RestrictedMethodOptions<RestrictedMethodParameters>\n    ? MethodImplementation\n    : never\n  : never;\n\n/**\n * {@link EndowmentGetter} parameter object.\n */\nexport type EndowmentGetterParams = {\n  /**\n   * The origin of the requesting subject.\n   */\n  origin: string;\n\n  /**\n   * Any additional data associated with the request.\n   */\n  requestData?: unknown;\n\n  [key: string]: unknown;\n};\n\n/**\n * A synchronous or asynchronous function that gets the endowments for a\n * particular endowment permission. The getter receives the origin of the\n * requesting subject and, optionally, additional request metadata.\n */\nexport type EndowmentGetter<Endowments extends Json> = (\n  options: EndowmentGetterParams,\n) => Endowments | Promise<Endowments>;\n\nexport type PermissionFactory<\n  TargetPermission extends PermissionConstraint,\n  RequestData extends Record<string, unknown>,\n> = (\n  options: PermissionOptions<TargetPermission>,\n  requestData?: RequestData,\n) => TargetPermission;\n\nexport type PermissionValidatorConstraint = (\n  permission: PermissionConstraint,\n  origin?: OriginString,\n  target?: string,\n) => void;\n\n/**\n * The parameters passed to the side-effect function.\n */\nexport type SideEffectParams<\n  Actions extends ActionConstraint,\n  Events extends EventConstraint,\n> = {\n  requestData: PermissionsRequest;\n  messagingSystem: SideEffectMessenger<Actions, Events>;\n};\n\n/**\n * A function that will execute actions as a permission side-effect.\n */\nexport type SideEffectHandler<\n  Actions extends ActionConstraint,\n  Events extends EventConstraint,\n> = (params: SideEffectParams<Actions, Events>) => Promise<unknown>;\n\n/**\n * The permissions side effects.\n */\nexport type PermissionSideEffect<\n  Actions extends ActionConstraint,\n  Events extends EventConstraint,\n> = {\n  /**\n   * A method triggered when the permission is accepted by the user\n   */\n  onPermitted: SideEffectHandler<Actions, Events>;\n  /**\n   * A method triggered if a `onPermitted` method rejected.\n   */\n  onFailure?: SideEffectHandler<Actions, Events>;\n};\n\n/**\n * The different possible types of permissions.\n */\nexport enum PermissionType {\n  /**\n   * A restricted JSON-RPC method. A subject must have the requisite permission\n   * to call a restricted JSON-RPC method.\n   */\n  RestrictedMethod = 'RestrictedMethod',\n\n  /**\n   * An \"endowment\" granted to subjects that possess the requisite permission,\n   * such as a global environment variable exposing a restricted API, etc.\n   */\n  Endowment = 'Endowment',\n}\n\n/**\n * The base constraint for permission specification objects. Every\n * {@link Permission} supported by a {@link PermissionController} must have an\n * associated specification, which is the source of truth for all permission-\n * related types. A permission specification includes the list of permitted\n * caveats, and any factory and validation functions specified by the consumer.\n * A concrete permission specification may specify further fields as necessary.\n *\n * See the README for more details.\n */\ntype PermissionSpecificationBase<Type extends PermissionType> = {\n  /**\n   * The type of the specified permission.\n   */\n  permissionType: Type;\n\n  /**\n   * The name of the target resource of the permission.\n   */\n  targetName: string;\n\n  /**\n   * An array of the caveat types that may be added to instances of this\n   * permission.\n   */\n  allowedCaveats: Readonly<NonEmptyArray<string>> | null;\n\n  /**\n   * The factory function used to get permission objects. Permissions returned\n   * by this function are presumed to valid, and they will not be passed to the\n   * validator function associated with this specification (if any). In other\n   * words, the factory function should validate the permissions it creates.\n   *\n   * If no factory is specified, the {@link Permission} constructor will be\n   * used, and the validator function (if specified) will be called on newly\n   * constructed permissions.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  factory?: PermissionFactory<any, Record<string, unknown>>;\n\n  /**\n   * The validator function used to validate permissions of the associated type\n   * whenever they are mutated. The only way a permission can be legally mutated\n   * is when its caveats are modified by the permission controller.\n   *\n   * The validator should throw an appropriate JSON-RPC error if validation fails.\n   */\n  validator?: PermissionValidatorConstraint;\n\n  /**\n   * The side-effect triggered by the {@link PermissionController} once the user approved it.\n   * The side-effect can only be an action allowed to be called inside the {@link PermissionController}.\n   *\n   * If the side-effect action fails, the permission that triggered it is revoked.\n   */\n  sideEffect?: PermissionSideEffect<ActionConstraint, EventConstraint>;\n\n  /**\n   * The Permission may be available to only a subset of the subject types. If so, specify the subject types as an array.\n   * If a subject with a type not in this array tries to request the permission, the call will fail.\n   *\n   * Leaving this as undefined uses default behaviour where the permission is available to request for all subject types.\n   */\n  subjectTypes?: readonly SubjectType[];\n};\n\n/**\n * The constraint for restricted method permission specification objects.\n * Permissions that correspond to JSON-RPC methods are specified using objects\n * that conform to this type.\n *\n * See the README for more details.\n */\nexport type RestrictedMethodSpecificationConstraint =\n  PermissionSpecificationBase<PermissionType.RestrictedMethod> & {\n    /**\n     * The implementation of the restricted method that the permission\n     * corresponds to.\n     */\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodImplementation: RestrictedMethod<any, Json>;\n  };\n\n/**\n * The constraint for endowment permission specification objects. Permissions\n * that endow callers with some restricted resource are specified using objects\n * that conform to this type.\n *\n * See the README for more details.\n */\nexport type EndowmentSpecificationConstraint =\n  PermissionSpecificationBase<PermissionType.Endowment> & {\n    /**\n     * The {@link EndowmentGetter} function for the permission. This function\n     * will be called by the {@link PermissionController} whenever the\n     * permission is invoked, after which the host can apply the endowments to\n     * the requesting subject in the intended manner.\n     */\n    endowmentGetter: EndowmentGetter<Json>;\n  };\n\n/**\n * The constraint for permission specification objects. Every {@link Permission}\n * supported by a {@link PermissionController} must have an associated\n * specification, which is the source of truth for all permission-related types.\n * All specifications must adhere to the {@link PermissionSpecificationBase}\n * interface, but specifications may have different fields depending on the\n * {@link PermissionType}.\n *\n * See the README for more details.\n */\nexport type PermissionSpecificationConstraint =\n  | EndowmentSpecificationConstraint\n  | RestrictedMethodSpecificationConstraint;\n\n/**\n * Options for {@link PermissionSpecificationBuilder} functions.\n */\ntype PermissionSpecificationBuilderOptions<\n  FactoryHooks extends Record<string, unknown>,\n  MethodHooks extends Record<string, unknown>,\n  ValidatorHooks extends Record<string, unknown>,\n> = {\n  targetName?: string;\n  allowedCaveats?: Readonly<NonEmptyArray<string>> | null;\n  factoryHooks?: FactoryHooks;\n  methodHooks?: MethodHooks;\n  validatorHooks?: ValidatorHooks;\n};\n\n/**\n * A function that builds a permission specification. Modules that specify\n * permissions for external consumption should make this their primary /\n * default export so that host applications can use them to generate concrete\n * specifications tailored to their requirements.\n */\nexport type PermissionSpecificationBuilder<\n  Type extends PermissionType,\n  Options extends PermissionSpecificationBuilderOptions<\n    Record<string, unknown>,\n    Record<string, unknown>,\n    Record<string, unknown>\n  >,\n  Specification extends PermissionSpecificationConstraint & {\n    permissionType: Type;\n  },\n> = (options: Options) => Specification;\n\n/**\n * A restricted method permission export object, containing the\n * {@link PermissionSpecificationBuilder} function and \"hook name\" objects.\n */\nexport type PermissionSpecificationBuilderExportConstraint = {\n  targetName: string;\n  specificationBuilder: PermissionSpecificationBuilder<\n    PermissionType,\n    PermissionSpecificationBuilderOptions<\n      Record<string, unknown>,\n      Record<string, unknown>,\n      Record<string, unknown>\n    >,\n    PermissionSpecificationConstraint\n  >;\n  factoryHookNames?: Record<string, true>;\n  methodHookNames?: Record<string, true>;\n  validatorHookNames?: Record<string, true>;\n};\n\ntype ValidRestrictedMethodSpecification<\n  Specification extends RestrictedMethodSpecificationConstraint,\n> = Specification['methodImplementation'] extends ValidRestrictedMethod<\n  Specification['methodImplementation']\n>\n  ? Specification\n  : never;\n\n/**\n * Constraint for {@link PermissionSpecificationConstraint} objects that\n * evaluates to `never` if the specification contains any invalid fields.\n *\n * @template Specification - The permission specification to validate.\n */\nexport type ValidPermissionSpecification<\n  Specification extends PermissionSpecificationConstraint,\n> = Specification['targetName'] extends TargetName\n  ? Specification['permissionType'] extends PermissionType.Endowment\n    ? Specification\n    : Specification['permissionType'] extends PermissionType.RestrictedMethod\n    ? ValidRestrictedMethodSpecification<\n        Extract<Specification, RestrictedMethodSpecificationConstraint>\n      >\n    : never\n  : never;\n\n/**\n * Checks that the specification has the expected permission type.\n *\n * @param specification - The specification to check.\n * @param expectedType - The expected permission type.\n * @template Specification - The specification to check.\n * @template Type - The expected permission type.\n * @returns Whether or not the specification is of the expected type.\n */\nexport function hasSpecificationType<\n  Specification extends PermissionSpecificationConstraint,\n  Type extends PermissionType,\n>(\n  specification: Specification,\n  expectedType: Type,\n): specification is Specification & {\n  permissionType: Type;\n} {\n  return specification.permissionType === expectedType;\n}\n\n/**\n * The specifications for all permissions supported by a particular\n * {@link PermissionController}.\n *\n * @template Specifications - The union of all {@link PermissionSpecificationConstraint} types.\n */\nexport type PermissionSpecificationMap<\n  Specification extends PermissionSpecificationConstraint,\n> = {\n  [Name in Specification['targetName']]: Specification extends {\n    targetName: Name;\n  }\n    ? Specification\n    : never;\n};\n\n/**\n * Extracts a specific {@link PermissionSpecificationConstraint} from a union of\n * permission specifications.\n *\n * @template Specification - The specification union type to extract from.\n * @template Name - The `targetName` of the specification to extract.\n */\nexport type ExtractPermissionSpecification<\n  Specification extends PermissionSpecificationConstraint,\n  Name extends Specification['targetName'],\n> = Specification extends {\n  targetName: Name;\n}\n  ? Specification\n  : never;\n"]}
\ No newline at end of file
diff --git a/dist/errors.js b/dist/errors.js
index 5c6cbe45ff00bd89091585f9627e0176f25cfc21..4c4c0079a7f7e23abcd8db86d5f086c3599b50a4 100644
--- a/dist/errors.js
+++ b/dist/errors.js
@@ -22,11 +22,11 @@
 
 
 
-var _chunkU5LTEXSUjs = require('./chunk-U5LTEXSU.js');
-require('./chunk-CSAU5B4Q.js');
 
 
 
+var _chunkSEPTGKNBjs = require('./chunk-SEPTGKNB.js');
+require('./chunk-Z2XKIXLS.js');
 
 
 
@@ -48,5 +48,11 @@ require('./chunk-CSAU5B4Q.js');
 
 
 
-exports.CaveatAlreadyExistsError = _chunkU5LTEXSUjs.CaveatAlreadyExistsError; exports.CaveatDoesNotExistError = _chunkU5LTEXSUjs.CaveatDoesNotExistError; exports.CaveatInvalidJsonError = _chunkU5LTEXSUjs.CaveatInvalidJsonError; exports.CaveatMissingValueError = _chunkU5LTEXSUjs.CaveatMissingValueError; exports.CaveatSpecificationMismatchError = _chunkU5LTEXSUjs.CaveatSpecificationMismatchError; exports.DuplicateCaveatError = _chunkU5LTEXSUjs.DuplicateCaveatError; exports.EndowmentPermissionDoesNotExistError = _chunkU5LTEXSUjs.EndowmentPermissionDoesNotExistError; exports.ForbiddenCaveatError = _chunkU5LTEXSUjs.ForbiddenCaveatError; exports.InvalidApprovedPermissionError = _chunkU5LTEXSUjs.InvalidApprovedPermissionError; exports.InvalidCaveatError = _chunkU5LTEXSUjs.InvalidCaveatError; exports.InvalidCaveatFieldsError = _chunkU5LTEXSUjs.InvalidCaveatFieldsError; exports.InvalidCaveatTypeError = _chunkU5LTEXSUjs.InvalidCaveatTypeError; exports.InvalidCaveatsPropertyError = _chunkU5LTEXSUjs.InvalidCaveatsPropertyError; exports.InvalidSubjectIdentifierError = _chunkU5LTEXSUjs.InvalidSubjectIdentifierError; exports.PermissionDoesNotExistError = _chunkU5LTEXSUjs.PermissionDoesNotExistError; exports.PermissionsRequestNotFoundError = _chunkU5LTEXSUjs.PermissionsRequestNotFoundError; exports.UnrecognizedCaveatTypeError = _chunkU5LTEXSUjs.UnrecognizedCaveatTypeError; exports.UnrecognizedSubjectError = _chunkU5LTEXSUjs.UnrecognizedSubjectError; exports.internalError = _chunkU5LTEXSUjs.internalError; exports.invalidParams = _chunkU5LTEXSUjs.invalidParams; exports.methodNotFound = _chunkU5LTEXSUjs.methodNotFound; exports.unauthorized = _chunkU5LTEXSUjs.unauthorized; exports.userRejectedRequest = _chunkU5LTEXSUjs.userRejectedRequest;
+
+
+
+
+
+
+exports.CaveatAlreadyExistsError = _chunkSEPTGKNBjs.CaveatAlreadyExistsError; exports.CaveatDoesNotExistError = _chunkSEPTGKNBjs.CaveatDoesNotExistError; exports.CaveatInvalidJsonError = _chunkSEPTGKNBjs.CaveatInvalidJsonError; exports.CaveatMergeTypeMismatchError = _chunkSEPTGKNBjs.CaveatMergeTypeMismatchError; exports.CaveatMergerDoesNotExistError = _chunkSEPTGKNBjs.CaveatMergerDoesNotExistError; exports.CaveatMissingValueError = _chunkSEPTGKNBjs.CaveatMissingValueError; exports.CaveatSpecificationMismatchError = _chunkSEPTGKNBjs.CaveatSpecificationMismatchError; exports.DuplicateCaveatError = _chunkSEPTGKNBjs.DuplicateCaveatError; exports.EndowmentPermissionDoesNotExistError = _chunkSEPTGKNBjs.EndowmentPermissionDoesNotExistError; exports.ForbiddenCaveatError = _chunkSEPTGKNBjs.ForbiddenCaveatError; exports.InvalidApprovedPermissionError = _chunkSEPTGKNBjs.InvalidApprovedPermissionError; exports.InvalidCaveatError = _chunkSEPTGKNBjs.InvalidCaveatError; exports.InvalidCaveatFieldsError = _chunkSEPTGKNBjs.InvalidCaveatFieldsError; exports.InvalidCaveatTypeError = _chunkSEPTGKNBjs.InvalidCaveatTypeError; exports.InvalidCaveatsPropertyError = _chunkSEPTGKNBjs.InvalidCaveatsPropertyError; exports.InvalidMergedPermissionsError = _chunkSEPTGKNBjs.InvalidMergedPermissionsError; exports.InvalidSubjectIdentifierError = _chunkSEPTGKNBjs.InvalidSubjectIdentifierError; exports.PermissionDoesNotExistError = _chunkSEPTGKNBjs.PermissionDoesNotExistError; exports.PermissionsRequestNotFoundError = _chunkSEPTGKNBjs.PermissionsRequestNotFoundError; exports.UnrecognizedCaveatTypeError = _chunkSEPTGKNBjs.UnrecognizedCaveatTypeError; exports.UnrecognizedSubjectError = _chunkSEPTGKNBjs.UnrecognizedSubjectError; exports.internalError = _chunkSEPTGKNBjs.internalError; exports.invalidParams = _chunkSEPTGKNBjs.invalidParams; exports.methodNotFound = _chunkSEPTGKNBjs.methodNotFound; exports.unauthorized = _chunkSEPTGKNBjs.unauthorized; exports.userRejectedRequest = _chunkSEPTGKNBjs.userRejectedRequest;
 //# sourceMappingURL=errors.js.map
\ No newline at end of file
diff --git a/dist/errors.mjs b/dist/errors.mjs
index c0287dc928cf2d8e30b1b5040815685dad6ca8aa..efe5f840fdd7431594bf1a4dbf2780d12daa6cae 100644
--- a/dist/errors.mjs
+++ b/dist/errors.mjs
@@ -2,6 +2,8 @@ import {
   CaveatAlreadyExistsError,
   CaveatDoesNotExistError,
   CaveatInvalidJsonError,
+  CaveatMergeTypeMismatchError,
+  CaveatMergerDoesNotExistError,
   CaveatMissingValueError,
   CaveatSpecificationMismatchError,
   DuplicateCaveatError,
@@ -12,6 +14,7 @@ import {
   InvalidCaveatFieldsError,
   InvalidCaveatTypeError,
   InvalidCaveatsPropertyError,
+  InvalidMergedPermissionsError,
   InvalidSubjectIdentifierError,
   PermissionDoesNotExistError,
   PermissionsRequestNotFoundError,
@@ -22,12 +25,14 @@ import {
   methodNotFound,
   unauthorized,
   userRejectedRequest
-} from "./chunk-FEXS6SJF.mjs";
-import "./chunk-ZSTKOCBT.mjs";
+} from "./chunk-I4OI6AQF.mjs";
+import "./chunk-2L4QPE5A.mjs";
 export {
   CaveatAlreadyExistsError,
   CaveatDoesNotExistError,
   CaveatInvalidJsonError,
+  CaveatMergeTypeMismatchError,
+  CaveatMergerDoesNotExistError,
   CaveatMissingValueError,
   CaveatSpecificationMismatchError,
   DuplicateCaveatError,
@@ -38,6 +43,7 @@ export {
   InvalidCaveatFieldsError,
   InvalidCaveatTypeError,
   InvalidCaveatsPropertyError,
+  InvalidMergedPermissionsError,
   InvalidSubjectIdentifierError,
   PermissionDoesNotExistError,
   PermissionsRequestNotFoundError,
diff --git a/dist/index.js b/dist/index.js
index 1af0654a0542c756bb25ca2c12224266d4b2582c..06345968de9d55814687b22db34bfdd34acb502d 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,29 +1,29 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
-var _chunk7CTPRFQ3js = require('./chunk-7CTPRFQ3.js');
+var _chunkVVMWFMOZjs = require('./chunk-VVMWFMOZ.js');
 require('./chunk-HRDKMOYS.js');
-require('./chunk-YRNH4R3G.js');
-require('./chunk-ZVO26XPN.js');
+require('./chunk-X5SE32ZW.js');
+require('./chunk-H3MUXLE4.js');
 
 
 
-var _chunkQ4TESWPEjs = require('./chunk-Q4TESWPE.js');
+var _chunkLSJJ7IYCjs = require('./chunk-LSJJ7IYC.js');
 
 
 
-var _chunkEGNDXGRGjs = require('./chunk-EGNDXGRG.js');
 
+var _chunkL5ZQETZ4js = require('./chunk-L5ZQETZ4.js');
 
 
 
 
-var _chunk6CID6TBWjs = require('./chunk-6CID6TBW.js');
 
+var _chunkZH4MLSXXjs = require('./chunk-ZH4MLSXX.js');
 
 
-var _chunkSFKE5HHKjs = require('./chunk-SFKE5HHK.js');
-require('./chunk-AQ35E2HU.js');
 
+var _chunkC73QV75Djs = require('./chunk-C73QV75D.js');
+require('./chunk-2S4DNIEN.js');
 
 
 
@@ -47,11 +47,19 @@ require('./chunk-AQ35E2HU.js');
 
 
 
-var _chunkU5LTEXSUjs = require('./chunk-U5LTEXSU.js');
+
+
+
+
+var _chunkSEPTGKNBjs = require('./chunk-SEPTGKNB.js');
 
 
 var _chunkK5R57Y57js = require('./chunk-K5R57Y57.js');
-require('./chunk-CSAU5B4Q.js');
+require('./chunk-Z2XKIXLS.js');
+
+
+
+
 
 
 
@@ -88,5 +96,5 @@ require('./chunk-CSAU5B4Q.js');
 
 
 
-exports.CaveatAlreadyExistsError = _chunkU5LTEXSUjs.CaveatAlreadyExistsError; exports.CaveatDoesNotExistError = _chunkU5LTEXSUjs.CaveatDoesNotExistError; exports.CaveatInvalidJsonError = _chunkU5LTEXSUjs.CaveatInvalidJsonError; exports.CaveatMissingValueError = _chunkU5LTEXSUjs.CaveatMissingValueError; exports.CaveatMutatorOperation = _chunkQ4TESWPEjs.CaveatMutatorOperation; exports.CaveatSpecificationMismatchError = _chunkU5LTEXSUjs.CaveatSpecificationMismatchError; exports.DuplicateCaveatError = _chunkU5LTEXSUjs.DuplicateCaveatError; exports.EndowmentPermissionDoesNotExistError = _chunkU5LTEXSUjs.EndowmentPermissionDoesNotExistError; exports.ForbiddenCaveatError = _chunkU5LTEXSUjs.ForbiddenCaveatError; exports.InvalidApprovedPermissionError = _chunkU5LTEXSUjs.InvalidApprovedPermissionError; exports.InvalidCaveatError = _chunkU5LTEXSUjs.InvalidCaveatError; exports.InvalidCaveatFieldsError = _chunkU5LTEXSUjs.InvalidCaveatFieldsError; exports.InvalidCaveatTypeError = _chunkU5LTEXSUjs.InvalidCaveatTypeError; exports.InvalidCaveatsPropertyError = _chunkU5LTEXSUjs.InvalidCaveatsPropertyError; exports.InvalidSubjectIdentifierError = _chunkU5LTEXSUjs.InvalidSubjectIdentifierError; exports.MethodNames = _chunkK5R57Y57js.MethodNames; exports.PermissionController = _chunkQ4TESWPEjs.PermissionController; exports.PermissionDoesNotExistError = _chunkU5LTEXSUjs.PermissionDoesNotExistError; exports.PermissionType = _chunk6CID6TBWjs.PermissionType; exports.PermissionsRequestNotFoundError = _chunkU5LTEXSUjs.PermissionsRequestNotFoundError; exports.SubjectMetadataController = _chunkSFKE5HHKjs.SubjectMetadataController; exports.SubjectType = _chunkSFKE5HHKjs.SubjectType; exports.UnrecognizedCaveatTypeError = _chunkU5LTEXSUjs.UnrecognizedCaveatTypeError; exports.UnrecognizedSubjectError = _chunkU5LTEXSUjs.UnrecognizedSubjectError; exports.constructPermission = _chunk6CID6TBWjs.constructPermission; exports.decorateWithCaveats = _chunkEGNDXGRGjs.decorateWithCaveats; exports.findCaveat = _chunk6CID6TBWjs.findCaveat; exports.hasSpecificationType = _chunk6CID6TBWjs.hasSpecificationType; exports.internalError = _chunkU5LTEXSUjs.internalError; exports.invalidParams = _chunkU5LTEXSUjs.invalidParams; exports.isRestrictedMethodCaveatSpecification = _chunkEGNDXGRGjs.isRestrictedMethodCaveatSpecification; exports.methodNotFound = _chunkU5LTEXSUjs.methodNotFound; exports.permissionRpcMethods = _chunk7CTPRFQ3js.rpc_methods_exports; exports.unauthorized = _chunkU5LTEXSUjs.unauthorized; exports.userRejectedRequest = _chunkU5LTEXSUjs.userRejectedRequest;
+exports.CaveatAlreadyExistsError = _chunkSEPTGKNBjs.CaveatAlreadyExistsError; exports.CaveatDoesNotExistError = _chunkSEPTGKNBjs.CaveatDoesNotExistError; exports.CaveatInvalidJsonError = _chunkSEPTGKNBjs.CaveatInvalidJsonError; exports.CaveatMergeTypeMismatchError = _chunkSEPTGKNBjs.CaveatMergeTypeMismatchError; exports.CaveatMergerDoesNotExistError = _chunkSEPTGKNBjs.CaveatMergerDoesNotExistError; exports.CaveatMissingValueError = _chunkSEPTGKNBjs.CaveatMissingValueError; exports.CaveatMutatorOperation = _chunkLSJJ7IYCjs.CaveatMutatorOperation; exports.CaveatSpecificationMismatchError = _chunkSEPTGKNBjs.CaveatSpecificationMismatchError; exports.DuplicateCaveatError = _chunkSEPTGKNBjs.DuplicateCaveatError; exports.EndowmentPermissionDoesNotExistError = _chunkSEPTGKNBjs.EndowmentPermissionDoesNotExistError; exports.ForbiddenCaveatError = _chunkSEPTGKNBjs.ForbiddenCaveatError; exports.InvalidApprovedPermissionError = _chunkSEPTGKNBjs.InvalidApprovedPermissionError; exports.InvalidCaveatError = _chunkSEPTGKNBjs.InvalidCaveatError; exports.InvalidCaveatFieldsError = _chunkSEPTGKNBjs.InvalidCaveatFieldsError; exports.InvalidCaveatTypeError = _chunkSEPTGKNBjs.InvalidCaveatTypeError; exports.InvalidCaveatsPropertyError = _chunkSEPTGKNBjs.InvalidCaveatsPropertyError; exports.InvalidMergedPermissionsError = _chunkSEPTGKNBjs.InvalidMergedPermissionsError; exports.InvalidSubjectIdentifierError = _chunkSEPTGKNBjs.InvalidSubjectIdentifierError; exports.MethodNames = _chunkK5R57Y57js.MethodNames; exports.PermissionController = _chunkLSJJ7IYCjs.PermissionController; exports.PermissionDoesNotExistError = _chunkSEPTGKNBjs.PermissionDoesNotExistError; exports.PermissionType = _chunkZH4MLSXXjs.PermissionType; exports.PermissionsRequestNotFoundError = _chunkSEPTGKNBjs.PermissionsRequestNotFoundError; exports.SubjectMetadataController = _chunkC73QV75Djs.SubjectMetadataController; exports.SubjectType = _chunkC73QV75Djs.SubjectType; exports.UnrecognizedCaveatTypeError = _chunkSEPTGKNBjs.UnrecognizedCaveatTypeError; exports.UnrecognizedSubjectError = _chunkSEPTGKNBjs.UnrecognizedSubjectError; exports.constructPermission = _chunkZH4MLSXXjs.constructPermission; exports.decorateWithCaveats = _chunkL5ZQETZ4js.decorateWithCaveats; exports.findCaveat = _chunkZH4MLSXXjs.findCaveat; exports.hasSpecificationType = _chunkZH4MLSXXjs.hasSpecificationType; exports.internalError = _chunkSEPTGKNBjs.internalError; exports.invalidParams = _chunkSEPTGKNBjs.invalidParams; exports.isRestrictedMethodCaveatSpecification = _chunkL5ZQETZ4js.isRestrictedMethodCaveatSpecification; exports.makeCaveatMerger = _chunkL5ZQETZ4js.makeCaveatMerger; exports.methodNotFound = _chunkSEPTGKNBjs.methodNotFound; exports.permissionRpcMethods = _chunkVVMWFMOZjs.rpc_methods_exports; exports.unauthorized = _chunkSEPTGKNBjs.unauthorized; exports.userRejectedRequest = _chunkSEPTGKNBjs.userRejectedRequest;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/dist/index.mjs b/dist/index.mjs
index 36c7362e6a1adb25b1bc7819c06089e20ec07049..25f029ad286d029b29287100c26ab63508f9e34e 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1,32 +1,35 @@
 import {
   rpc_methods_exports
-} from "./chunk-5C5SZO74.mjs";
+} from "./chunk-URGYGS3N.mjs";
 import "./chunk-73M67Z5X.mjs";
-import "./chunk-YVXIWLBE.mjs";
-import "./chunk-BEQEQLRE.mjs";
+import "./chunk-Z36MN4RC.mjs";
+import "./chunk-YGXO4JGU.mjs";
 import {
   CaveatMutatorOperation,
   PermissionController
-} from "./chunk-VFQJB7BG.mjs";
+} from "./chunk-MSZMGMUN.mjs";
 import {
   decorateWithCaveats,
-  isRestrictedMethodCaveatSpecification
-} from "./chunk-XBFHEZRU.mjs";
+  isRestrictedMethodCaveatSpecification,
+  makeCaveatMerger
+} from "./chunk-HPECMGYB.mjs";
 import {
   PermissionType,
   constructPermission,
   findCaveat,
   hasSpecificationType
-} from "./chunk-ODCVB4BB.mjs";
+} from "./chunk-HYMS7IGB.mjs";
 import {
   SubjectMetadataController,
   SubjectType
-} from "./chunk-4D2RVWNF.mjs";
-import "./chunk-N4KQ2BHF.mjs";
+} from "./chunk-W4CPVA4J.mjs";
+import "./chunk-BIWDJTRD.mjs";
 import {
   CaveatAlreadyExistsError,
   CaveatDoesNotExistError,
   CaveatInvalidJsonError,
+  CaveatMergeTypeMismatchError,
+  CaveatMergerDoesNotExistError,
   CaveatMissingValueError,
   CaveatSpecificationMismatchError,
   DuplicateCaveatError,
@@ -37,6 +40,7 @@ import {
   InvalidCaveatFieldsError,
   InvalidCaveatTypeError,
   InvalidCaveatsPropertyError,
+  InvalidMergedPermissionsError,
   InvalidSubjectIdentifierError,
   PermissionDoesNotExistError,
   PermissionsRequestNotFoundError,
@@ -47,15 +51,17 @@ import {
   methodNotFound,
   unauthorized,
   userRejectedRequest
-} from "./chunk-FEXS6SJF.mjs";
+} from "./chunk-I4OI6AQF.mjs";
 import {
   MethodNames
 } from "./chunk-KVKKNDYV.mjs";
-import "./chunk-ZSTKOCBT.mjs";
+import "./chunk-2L4QPE5A.mjs";
 export {
   CaveatAlreadyExistsError,
   CaveatDoesNotExistError,
   CaveatInvalidJsonError,
+  CaveatMergeTypeMismatchError,
+  CaveatMergerDoesNotExistError,
   CaveatMissingValueError,
   CaveatMutatorOperation,
   CaveatSpecificationMismatchError,
@@ -67,6 +73,7 @@ export {
   InvalidCaveatFieldsError,
   InvalidCaveatTypeError,
   InvalidCaveatsPropertyError,
+  InvalidMergedPermissionsError,
   InvalidSubjectIdentifierError,
   MethodNames,
   PermissionController,
@@ -84,6 +91,7 @@ export {
   internalError,
   invalidParams,
   isRestrictedMethodCaveatSpecification,
+  makeCaveatMerger,
   methodNotFound,
   rpc_methods_exports as permissionRpcMethods,
   unauthorized,
diff --git a/dist/permission-middleware.js b/dist/permission-middleware.js
index 8bf756f836d34b97dbc7800b1fac4aa7f753a990..4f3c3fe22dbf1683bae8b52198ad808357faf0b9 100644
--- a/dist/permission-middleware.js
+++ b/dist/permission-middleware.js
@@ -1,9 +1,9 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
-var _chunkAQ35E2HUjs = require('./chunk-AQ35E2HU.js');
-require('./chunk-U5LTEXSU.js');
-require('./chunk-CSAU5B4Q.js');
+var _chunk2S4DNIENjs = require('./chunk-2S4DNIEN.js');
+require('./chunk-SEPTGKNB.js');
+require('./chunk-Z2XKIXLS.js');
 
 
-exports.getPermissionMiddlewareFactory = _chunkAQ35E2HUjs.getPermissionMiddlewareFactory;
+exports.getPermissionMiddlewareFactory = _chunk2S4DNIENjs.getPermissionMiddlewareFactory;
 //# sourceMappingURL=permission-middleware.js.map
\ No newline at end of file
diff --git a/dist/permission-middleware.mjs b/dist/permission-middleware.mjs
index eca02b38a774cf66fadd23b69d5404be48b45d91..8374f3a2454c3465ee6e228645256382d972db4e 100644
--- a/dist/permission-middleware.mjs
+++ b/dist/permission-middleware.mjs
@@ -1,8 +1,8 @@
 import {
   getPermissionMiddlewareFactory
-} from "./chunk-N4KQ2BHF.mjs";
-import "./chunk-FEXS6SJF.mjs";
-import "./chunk-ZSTKOCBT.mjs";
+} from "./chunk-BIWDJTRD.mjs";
+import "./chunk-I4OI6AQF.mjs";
+import "./chunk-2L4QPE5A.mjs";
 export {
   getPermissionMiddlewareFactory
 };
diff --git a/dist/rpc-methods/getPermissions.js b/dist/rpc-methods/getPermissions.js
index 54372e31631412d111ffd9f2369a8641cfed7267..7793131964c7b238282e82e04d0ca6bb7acbbe98 100644
--- a/dist/rpc-methods/getPermissions.js
+++ b/dist/rpc-methods/getPermissions.js
@@ -2,7 +2,7 @@
 
 var _chunkHRDKMOYSjs = require('../chunk-HRDKMOYS.js');
 require('../chunk-K5R57Y57.js');
-require('../chunk-CSAU5B4Q.js');
+require('../chunk-Z2XKIXLS.js');
 
 
 exports.getPermissionsHandler = _chunkHRDKMOYSjs.getPermissionsHandler;
diff --git a/dist/rpc-methods/getPermissions.mjs b/dist/rpc-methods/getPermissions.mjs
index c2e92b0e78e3cfad960a59945730d5b979814147..3ec39db84f440abe058e3c5c18ce3a240f99eac5 100644
--- a/dist/rpc-methods/getPermissions.mjs
+++ b/dist/rpc-methods/getPermissions.mjs
@@ -2,7 +2,7 @@ import {
   getPermissionsHandler
 } from "../chunk-73M67Z5X.mjs";
 import "../chunk-KVKKNDYV.mjs";
-import "../chunk-ZSTKOCBT.mjs";
+import "../chunk-2L4QPE5A.mjs";
 export {
   getPermissionsHandler
 };
diff --git a/dist/rpc-methods/index.js b/dist/rpc-methods/index.js
index afd5cdcdb5849a5c0a4c36313b2eda4995d8dec2..84099e3496a56d38514afeaa46bb7884cae90ae2 100644
--- a/dist/rpc-methods/index.js
+++ b/dist/rpc-methods/index.js
@@ -1,13 +1,13 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
-var _chunk7CTPRFQ3js = require('../chunk-7CTPRFQ3.js');
+var _chunkVVMWFMOZjs = require('../chunk-VVMWFMOZ.js');
 require('../chunk-HRDKMOYS.js');
-require('../chunk-YRNH4R3G.js');
-require('../chunk-ZVO26XPN.js');
-require('../chunk-U5LTEXSU.js');
+require('../chunk-X5SE32ZW.js');
+require('../chunk-H3MUXLE4.js');
+require('../chunk-SEPTGKNB.js');
 require('../chunk-K5R57Y57.js');
-require('../chunk-CSAU5B4Q.js');
+require('../chunk-Z2XKIXLS.js');
 
 
-exports.handlers = _chunk7CTPRFQ3js.handlers;
+exports.handlers = _chunkVVMWFMOZjs.handlers;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/dist/rpc-methods/index.mjs b/dist/rpc-methods/index.mjs
index a45daa9afff317ef924d3062cc7a931ba8de523a..ef808233972c23c7fb6ba9d196ecc60c5dd525c8 100644
--- a/dist/rpc-methods/index.mjs
+++ b/dist/rpc-methods/index.mjs
@@ -1,12 +1,12 @@
 import {
   handlers
-} from "../chunk-5C5SZO74.mjs";
+} from "../chunk-URGYGS3N.mjs";
 import "../chunk-73M67Z5X.mjs";
-import "../chunk-YVXIWLBE.mjs";
-import "../chunk-BEQEQLRE.mjs";
-import "../chunk-FEXS6SJF.mjs";
+import "../chunk-Z36MN4RC.mjs";
+import "../chunk-YGXO4JGU.mjs";
+import "../chunk-I4OI6AQF.mjs";
 import "../chunk-KVKKNDYV.mjs";
-import "../chunk-ZSTKOCBT.mjs";
+import "../chunk-2L4QPE5A.mjs";
 export {
   handlers
 };
diff --git a/dist/rpc-methods/requestPermissions.js b/dist/rpc-methods/requestPermissions.js
index 1249d03e713812036db2a14e25a2aa5cb249d8fa..0070e3c0de6c2f0cd61afd9a5d40be6ec7b5d4cd 100644
--- a/dist/rpc-methods/requestPermissions.js
+++ b/dist/rpc-methods/requestPermissions.js
@@ -1,10 +1,10 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
-var _chunkYRNH4R3Gjs = require('../chunk-YRNH4R3G.js');
-require('../chunk-U5LTEXSU.js');
+var _chunkX5SE32ZWjs = require('../chunk-X5SE32ZW.js');
+require('../chunk-SEPTGKNB.js');
 require('../chunk-K5R57Y57.js');
-require('../chunk-CSAU5B4Q.js');
+require('../chunk-Z2XKIXLS.js');
 
 
-exports.requestPermissionsHandler = _chunkYRNH4R3Gjs.requestPermissionsHandler;
+exports.requestPermissionsHandler = _chunkX5SE32ZWjs.requestPermissionsHandler;
 //# sourceMappingURL=requestPermissions.js.map
\ No newline at end of file
diff --git a/dist/rpc-methods/requestPermissions.mjs b/dist/rpc-methods/requestPermissions.mjs
index ba5d5792798d7e819cc1e5d1a6e2251eacee7874..576ef2d3c1bfa853ae968ffadc71dabd3205ec79 100644
--- a/dist/rpc-methods/requestPermissions.mjs
+++ b/dist/rpc-methods/requestPermissions.mjs
@@ -1,9 +1,9 @@
 import {
   requestPermissionsHandler
-} from "../chunk-YVXIWLBE.mjs";
-import "../chunk-FEXS6SJF.mjs";
+} from "../chunk-Z36MN4RC.mjs";
+import "../chunk-I4OI6AQF.mjs";
 import "../chunk-KVKKNDYV.mjs";
-import "../chunk-ZSTKOCBT.mjs";
+import "../chunk-2L4QPE5A.mjs";
 export {
   requestPermissionsHandler
 };
diff --git a/dist/rpc-methods/revokePermissions.js b/dist/rpc-methods/revokePermissions.js
index 87632938f4c41163eece095fbd3e36a606a9266f..e143b8c079c32bda432bf66ea39ba37db729d368 100644
--- a/dist/rpc-methods/revokePermissions.js
+++ b/dist/rpc-methods/revokePermissions.js
@@ -1,10 +1,10 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
-var _chunkZVO26XPNjs = require('../chunk-ZVO26XPN.js');
-require('../chunk-U5LTEXSU.js');
+var _chunkH3MUXLE4js = require('../chunk-H3MUXLE4.js');
+require('../chunk-SEPTGKNB.js');
 require('../chunk-K5R57Y57.js');
-require('../chunk-CSAU5B4Q.js');
+require('../chunk-Z2XKIXLS.js');
 
 
-exports.revokePermissionsHandler = _chunkZVO26XPNjs.revokePermissionsHandler;
+exports.revokePermissionsHandler = _chunkH3MUXLE4js.revokePermissionsHandler;
 //# sourceMappingURL=revokePermissions.js.map
\ No newline at end of file
diff --git a/dist/rpc-methods/revokePermissions.mjs b/dist/rpc-methods/revokePermissions.mjs
index 1f2c82b4cefd601ae6ee01d87e9252131361642b..53ac6609631a89e87259b02069433eae8efc1a88 100644
--- a/dist/rpc-methods/revokePermissions.mjs
+++ b/dist/rpc-methods/revokePermissions.mjs
@@ -1,9 +1,9 @@
 import {
   revokePermissionsHandler
-} from "../chunk-BEQEQLRE.mjs";
-import "../chunk-FEXS6SJF.mjs";
+} from "../chunk-YGXO4JGU.mjs";
+import "../chunk-I4OI6AQF.mjs";
 import "../chunk-KVKKNDYV.mjs";
-import "../chunk-ZSTKOCBT.mjs";
+import "../chunk-2L4QPE5A.mjs";
 export {
   revokePermissionsHandler
 };
diff --git a/dist/tsconfig.build.tsbuildinfo b/dist/tsconfig.build.tsbuildinfo
index 87bc672a7ed4e55d6c7d7f8d5fd7bbcf21ff73b8..32338f4b0159040aee547b1c91bc218231717f3a 100644
--- a/dist/tsconfig.build.tsbuildinfo
+++ b/dist/tsconfig.build.tsbuildinfo
@@ -1 +1 @@
-{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.dom.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../types/eth-ens-namehash.d.ts","../../../types/ethereum-ens-network-map.d.ts","../../../types/global.d.ts","../../../types/single-call-balance-checker-abi.d.ts","../../../types/@metamask/contract-metadata.d.ts","../../../types/@metamask/eth-hd-keyring.d.ts","../../../types/@metamask/eth-simple-keyring.d.ts","../../../types/@metamask/ethjs-provider-http.d.ts","../../../types/@metamask/ethjs-unit.d.ts","../../../types/@metamask/metamask-eth-abis.d.ts","../../../types/eth-json-rpc-infura/src/createProvider.d.ts","../../../types/eth-phishing-detect/src/config.json.d.ts","../../../types/eth-phishing-detect/src/detector.d.ts","../../../node_modules/superstruct/dist/error.d.ts","../../../node_modules/superstruct/dist/utils.d.ts","../../../node_modules/superstruct/dist/struct.d.ts","../../../node_modules/superstruct/dist/structs/coercions.d.ts","../../../node_modules/superstruct/dist/structs/refinements.d.ts","../../../node_modules/superstruct/dist/structs/types.d.ts","../../../node_modules/superstruct/dist/structs/utilities.d.ts","../../../node_modules/superstruct/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/assert.d.ts","../../../node_modules/@metamask/utils/dist/types/base64.d.ts","../../../node_modules/@metamask/utils/dist/types/hex.d.ts","../../../node_modules/@metamask/utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/utils/dist/types/caip-types.d.ts","../../../node_modules/@metamask/utils/dist/types/checksum.d.ts","../../../node_modules/@metamask/utils/dist/types/coercers.d.ts","../../../node_modules/@metamask/utils/dist/types/collections.d.ts","../../../node_modules/@metamask/utils/dist/types/encryption-types.d.ts","../../../node_modules/@metamask/utils/dist/types/errors.d.ts","../../../node_modules/@metamask/utils/dist/types/json.d.ts","../../../node_modules/@types/node/ts4.8/assert.d.ts","../../../node_modules/@types/node/ts4.8/assert/strict.d.ts","../../../node_modules/@types/node/ts4.8/globals.d.ts","../../../node_modules/@types/node/ts4.8/async_hooks.d.ts","../../../node_modules/@types/node/ts4.8/buffer.d.ts","../../../node_modules/@types/node/ts4.8/child_process.d.ts","../../../node_modules/@types/node/ts4.8/cluster.d.ts","../../../node_modules/@types/node/ts4.8/console.d.ts","../../../node_modules/@types/node/ts4.8/constants.d.ts","../../../node_modules/@types/node/ts4.8/crypto.d.ts","../../../node_modules/@types/node/ts4.8/dgram.d.ts","../../../node_modules/@types/node/ts4.8/diagnostics_channel.d.ts","../../../node_modules/@types/node/ts4.8/dns.d.ts","../../../node_modules/@types/node/ts4.8/dns/promises.d.ts","../../../node_modules/@types/node/ts4.8/domain.d.ts","../../../node_modules/@types/node/ts4.8/events.d.ts","../../../node_modules/@types/node/ts4.8/fs.d.ts","../../../node_modules/@types/node/ts4.8/fs/promises.d.ts","../../../node_modules/@types/node/ts4.8/http.d.ts","../../../node_modules/@types/node/ts4.8/http2.d.ts","../../../node_modules/@types/node/ts4.8/https.d.ts","../../../node_modules/@types/node/ts4.8/inspector.d.ts","../../../node_modules/@types/node/ts4.8/module.d.ts","../../../node_modules/@types/node/ts4.8/net.d.ts","../../../node_modules/@types/node/ts4.8/os.d.ts","../../../node_modules/@types/node/ts4.8/path.d.ts","../../../node_modules/@types/node/ts4.8/perf_hooks.d.ts","../../../node_modules/@types/node/ts4.8/process.d.ts","../../../node_modules/@types/node/ts4.8/punycode.d.ts","../../../node_modules/@types/node/ts4.8/querystring.d.ts","../../../node_modules/@types/node/ts4.8/readline.d.ts","../../../node_modules/@types/node/ts4.8/repl.d.ts","../../../node_modules/@types/node/ts4.8/stream.d.ts","../../../node_modules/@types/node/ts4.8/stream/promises.d.ts","../../../node_modules/@types/node/ts4.8/stream/consumers.d.ts","../../../node_modules/@types/node/ts4.8/stream/web.d.ts","../../../node_modules/@types/node/ts4.8/string_decoder.d.ts","../../../node_modules/@types/node/ts4.8/test.d.ts","../../../node_modules/@types/node/ts4.8/timers.d.ts","../../../node_modules/@types/node/ts4.8/timers/promises.d.ts","../../../node_modules/@types/node/ts4.8/tls.d.ts","../../../node_modules/@types/node/ts4.8/trace_events.d.ts","../../../node_modules/@types/node/ts4.8/tty.d.ts","../../../node_modules/@types/node/ts4.8/url.d.ts","../../../node_modules/@types/node/ts4.8/util.d.ts","../../../node_modules/@types/node/ts4.8/v8.d.ts","../../../node_modules/@types/node/ts4.8/vm.d.ts","../../../node_modules/@types/node/ts4.8/wasi.d.ts","../../../node_modules/@types/node/ts4.8/worker_threads.d.ts","../../../node_modules/@types/node/ts4.8/zlib.d.ts","../../../node_modules/@types/node/ts4.8/globals.global.d.ts","../../../node_modules/@types/node/ts4.8/index.d.ts","../../../node_modules/@ethereumjs/common/dist/enums.d.ts","../../../node_modules/@ethereumjs/common/dist/types.d.ts","../../../node_modules/buffer/index.d.ts","../../../node_modules/@ethereumjs/util/dist/constants.d.ts","../../../node_modules/@ethereumjs/util/dist/units.d.ts","../../../node_modules/@ethereumjs/util/dist/address.d.ts","../../../node_modules/@ethereumjs/util/dist/bytes.d.ts","../../../node_modules/@ethereumjs/util/dist/types.d.ts","../../../node_modules/@ethereumjs/util/dist/account.d.ts","../../../node_modules/@ethereumjs/util/dist/withdrawal.d.ts","../../../node_modules/@ethereumjs/util/dist/signature.d.ts","../../../node_modules/@ethereumjs/util/dist/encoding.d.ts","../../../node_modules/@ethereumjs/util/dist/asyncEventEmitter.d.ts","../../../node_modules/@ethereumjs/util/dist/internal.d.ts","../../../node_modules/@ethereumjs/util/dist/lock.d.ts","../../../node_modules/@ethereumjs/util/dist/provider.d.ts","../../../node_modules/@ethereumjs/util/dist/index.d.ts","../../../node_modules/@ethereumjs/common/dist/common.d.ts","../../../node_modules/@ethereumjs/common/dist/utils.d.ts","../../../node_modules/@ethereumjs/common/dist/index.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip2930Transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/legacyTransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/types.d.ts","../../../node_modules/@ethereumjs/tx/dist/baseTransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip1559Transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/transactionFactory.d.ts","../../../node_modules/@ethereumjs/tx/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/keyring.d.ts","../../../node_modules/@types/ms/index.d.ts","../../../node_modules/@types/debug/index.d.ts","../../../node_modules/@metamask/utils/dist/types/logging.d.ts","../../../node_modules/@metamask/utils/dist/types/misc.d.ts","../../../node_modules/@metamask/utils/dist/types/number.d.ts","../../../node_modules/@metamask/utils/dist/types/opaque.d.ts","../../../node_modules/@metamask/utils/dist/types/promise.d.ts","../../../node_modules/@metamask/utils/dist/types/time.d.ts","../../../node_modules/@metamask/utils/dist/types/transaction-types.d.ts","../../../node_modules/@metamask/utils/dist/types/versions.d.ts","../../../node_modules/@metamask/utils/dist/types/index.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/utils.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/classes.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/errors.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/error-constants.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/index.d.ts","../../base-controller/dist/types/BaseControllerV1.d.ts","../../../node_modules/immer/dist/utils/env.d.ts","../../../node_modules/immer/dist/utils/errors.d.ts","../../../node_modules/immer/dist/types/types-external.d.ts","../../../node_modules/immer/dist/types/types-internal.d.ts","../../../node_modules/immer/dist/utils/common.d.ts","../../../node_modules/immer/dist/utils/plugins.d.ts","../../../node_modules/immer/dist/core/scope.d.ts","../../../node_modules/immer/dist/core/finalize.d.ts","../../../node_modules/immer/dist/core/proxy.d.ts","../../../node_modules/immer/dist/core/immerClass.d.ts","../../../node_modules/immer/dist/core/current.d.ts","../../../node_modules/immer/dist/internal.d.ts","../../../node_modules/immer/dist/plugins/es5.d.ts","../../../node_modules/immer/dist/plugins/patches.d.ts","../../../node_modules/immer/dist/plugins/mapset.d.ts","../../../node_modules/immer/dist/plugins/all.d.ts","../../../node_modules/immer/dist/immer.d.ts","../../base-controller/dist/types/RestrictedControllerMessenger.d.ts","../../base-controller/dist/types/ControllerMessenger.d.ts","../../base-controller/dist/types/BaseControllerV2.d.ts","../../base-controller/dist/types/index.d.ts","../../controller-utils/dist/types/types.d.ts","../../controller-utils/dist/types/constants.d.ts","../../../node_modules/@metamask/eth-query/index.d.ts","../../../node_modules/@types/bn.js/index.d.ts","../../controller-utils/dist/types/util.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/abnf.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/regex.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/parsers.d.ts","../../controller-utils/dist/types/siwe.d.ts","../../controller-utils/dist/types/index.d.ts","../../../node_modules/nanoid/index.d.ts","../../approval-controller/dist/types/ApprovalController.d.ts","../../approval-controller/dist/types/errors.d.ts","../../approval-controller/dist/types/index.d.ts","../../../node_modules/@types/deep-freeze-strict/index.d.ts","../../../node_modules/@metamask/safe-event-emitter/index.d.ts","../../json-rpc-engine/dist/types/JsonRpcEngine.d.ts","../../json-rpc-engine/dist/types/createAsyncMiddleware.d.ts","../../json-rpc-engine/dist/types/createScaffoldMiddleware.d.ts","../../json-rpc-engine/dist/types/getUniqueId.d.ts","../../json-rpc-engine/dist/types/idRemapMiddleware.d.ts","../../json-rpc-engine/dist/types/mergeMiddleware.d.ts","../../json-rpc-engine/dist/types/index.d.ts","../src/utils.ts","../src/rpc-methods/getPermissions.ts","../src/rpc-methods/requestPermissions.ts","../src/rpc-methods/revokePermissions.ts","../src/rpc-methods/index.ts","../src/SubjectMetadataController.ts","../src/index.ts","../src/permission-middleware.ts","../src/PermissionController.ts","../src/Permission.ts","../src/errors.ts","../src/Caveat.ts","../../../node_modules/@babel/types/lib/index.d.ts","../../../node_modules/@types/babel__generator/index.d.ts","../../../node_modules/@babel/parser/typings/babel-parser.d.ts","../../../node_modules/@types/babel__template/index.d.ts","../../../node_modules/@types/babel__traverse/index.d.ts","../../../node_modules/@types/babel__core/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/graceful-fs/index.d.ts","../../../node_modules/@types/istanbul-lib-coverage/index.d.ts","../../../node_modules/@types/istanbul-lib-report/index.d.ts","../../../node_modules/@types/istanbul-reports/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../node_modules/jest-diff/build/cleanupSemantic.d.ts","../../../node_modules/pretty-format/build/types.d.ts","../../../node_modules/pretty-format/build/index.d.ts","../../../node_modules/jest-diff/build/types.d.ts","../../../node_modules/jest-diff/build/diffLines.d.ts","../../../node_modules/jest-diff/build/printDiffs.d.ts","../../../node_modules/jest-diff/build/index.d.ts","../../../node_modules/jest-matcher-utils/build/index.d.ts","../../../node_modules/@types/jest/index.d.ts","../../../node_modules/@types/jest-when/index.d.ts","../../../node_modules/@types/json5/index.d.ts","../../../node_modules/@types/lodash/common/common.d.ts","../../../node_modules/@types/lodash/common/array.d.ts","../../../node_modules/@types/lodash/common/collection.d.ts","../../../node_modules/@types/lodash/common/date.d.ts","../../../node_modules/@types/lodash/common/function.d.ts","../../../node_modules/@types/lodash/common/lang.d.ts","../../../node_modules/@types/lodash/common/math.d.ts","../../../node_modules/@types/lodash/common/number.d.ts","../../../node_modules/@types/lodash/common/object.d.ts","../../../node_modules/@types/lodash/common/seq.d.ts","../../../node_modules/@types/lodash/common/string.d.ts","../../../node_modules/@types/lodash/common/util.d.ts","../../../node_modules/@types/lodash/index.d.ts","../../../node_modules/@types/minimatch/index.d.ts","../../../node_modules/@types/parse-json/index.d.ts","../../../node_modules/@types/pbkdf2/index.d.ts","../../../node_modules/@types/prettier/index.d.ts","../../../node_modules/@types/punycode/index.d.ts","../../../node_modules/@types/readable-stream/node_modules/safe-buffer/index.d.ts","../../../node_modules/@types/readable-stream/index.d.ts","../../../node_modules/@types/secp256k1/index.d.ts","../../../node_modules/@types/semver/classes/semver.d.ts","../../../node_modules/@types/semver/functions/parse.d.ts","../../../node_modules/@types/semver/functions/valid.d.ts","../../../node_modules/@types/semver/functions/clean.d.ts","../../../node_modules/@types/semver/functions/inc.d.ts","../../../node_modules/@types/semver/functions/diff.d.ts","../../../node_modules/@types/semver/functions/major.d.ts","../../../node_modules/@types/semver/functions/minor.d.ts","../../../node_modules/@types/semver/functions/patch.d.ts","../../../node_modules/@types/semver/functions/prerelease.d.ts","../../../node_modules/@types/semver/functions/compare.d.ts","../../../node_modules/@types/semver/functions/rcompare.d.ts","../../../node_modules/@types/semver/functions/compare-loose.d.ts","../../../node_modules/@types/semver/functions/compare-build.d.ts","../../../node_modules/@types/semver/functions/sort.d.ts","../../../node_modules/@types/semver/functions/rsort.d.ts","../../../node_modules/@types/semver/functions/gt.d.ts","../../../node_modules/@types/semver/functions/lt.d.ts","../../../node_modules/@types/semver/functions/eq.d.ts","../../../node_modules/@types/semver/functions/neq.d.ts","../../../node_modules/@types/semver/functions/gte.d.ts","../../../node_modules/@types/semver/functions/lte.d.ts","../../../node_modules/@types/semver/functions/cmp.d.ts","../../../node_modules/@types/semver/functions/coerce.d.ts","../../../node_modules/@types/semver/classes/comparator.d.ts","../../../node_modules/@types/semver/classes/range.d.ts","../../../node_modules/@types/semver/functions/satisfies.d.ts","../../../node_modules/@types/semver/ranges/max-satisfying.d.ts","../../../node_modules/@types/semver/ranges/min-satisfying.d.ts","../../../node_modules/@types/semver/ranges/to-comparators.d.ts","../../../node_modules/@types/semver/ranges/min-version.d.ts","../../../node_modules/@types/semver/ranges/valid.d.ts","../../../node_modules/@types/semver/ranges/outside.d.ts","../../../node_modules/@types/semver/ranges/gtr.d.ts","../../../node_modules/@types/semver/ranges/ltr.d.ts","../../../node_modules/@types/semver/ranges/intersects.d.ts","../../../node_modules/@types/semver/ranges/simplify.d.ts","../../../node_modules/@types/semver/ranges/subset.d.ts","../../../node_modules/@types/semver/internals/identifiers.d.ts","../../../node_modules/@types/semver/index.d.ts","../../../node_modules/@types/sinonjs__fake-timers/index.d.ts","../../../node_modules/@types/sinon/index.d.ts","../../../node_modules/@types/stack-utils/index.d.ts","../../../node_modules/@types/uuid/index.d.ts","../../../node_modules/@types/yargs-parser/index.d.ts","../../../node_modules/@types/yargs/index.d.ts"],"fileInfos":[{"version":"f20c05dbfe50a208301d2a1da37b9931bce0466eb5a1f4fe240971b4ecc82b67","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","e6b724280c694a9f588847f754198fb96c43d805f065c3a5b28bbc9594541c84","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9",{"version":"9b087de7268e4efc5f215347a62656663933d63c0b1d7b624913240367b999ea","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"0d5f52b3174bee6edb81260ebcd792692c32c81fd55499d69531496f3f2b25e7","affectsGlobalScope":true},{"version":"55f400eec64d17e888e278f4def2f254b41b89515d3b88ad75d5e05f019daddd","affectsGlobalScope":true},{"version":"181f1784c6c10b751631b24ce60c7f78b20665db4550b335be179217bacc0d5f","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"75ec0bdd727d887f1b79ed6619412ea72ba3c81d92d0787ccb64bab18d261f14","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"775d9c9fd150d5de79e0450f35bc8b8f94ae64e3eb5da12725ff2a649dccc777","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"70bbfaec021ac4a0c805374225b55d70887f987df8b8dd7711d79464bb7b4385","869089d60b67219f63e6aca810284c89bae1b384b5cbc7ce64e53d82ad223ed5",{"version":"18338b6a4b920ec7d49b4ffafcbf0fa8a86b4bfd432966efd722dab611157cf4","affectsGlobalScope":true},"62a0875a0397b35a2364f1d401c0ce17975dfa4d47bf6844de858ae04da349f9","ee7491d0318d1fafcba97d5b72b450eb52671570f7a4ecd9e8898d40eaae9472","e3e7d217d89b380c1f34395eadc9289542851b0f0a64007dfe1fb7cf7423d24e","fd79909e93b4d50fd0ed9f3d39ddf8ba0653290bac25c295aac49f6befbd081b","345a9cc2945406f53051cd0e9b51f82e1e53929848eab046fdda91ee8aa7da31","9debe2de883da37a914e5e784a7be54c201b8f1d783822ad6f443ff409a5ea21","dee5d5c5440cda1f3668f11809a5503c30db0476ad117dd450f7ba5a45300e8f","f5e396c1424c391078c866d6f84afe0b4d2f7f85a160b9c756cd63b5b1775d93","5caa6f4fff16066d377d4e254f6c34c16540da3809cd66cd626a303bc33c419f","730d055528bdf12c8524870bb33d237991be9084c57634e56e5d8075f6605e02","e475453e7140e95542332943d3052fe4c7430ad1efce42b3e9157f1fee8cbc5f","ebfdf904255ce746c9d30117c2edef355fb19bf7650478d2405f39f0e4f302e6","f3f63b48addb8e2ea9d20bb671c3c306413b3daa39996d0ae52f63d8e32158e1","a50599c08934a62f11657bdbe0dc929ab66da1b1f09974408fd9a33ec1bb8060","5a20e7d6c630b91be15e9b837853173829d00273197481dc8d3e94df61105a71","8d478048d71cc16f806d4b71b252ecb67c7444ccf4f4b09b29a312712184f859","b4000a0a525fa921e896cbdb32ae802c9684f0fd371b5fc69e7310f7918cc2c3","9df4662ca3dbc2522bc115833ee04faa1afbb4e249a85ef4a0a09c621346bd08","b25d9065cf1c1f537a140bbc508e953ed2262f77134574c432d206ff36f4bdbf","1b103313097041aa9cd705a682c652f08613cb5cf8663321061c0902f845e81c","68ccec8662818911d8a12b8ed028bc5729fb4f1d34793c4701265ba60bc73cf4","5f85b8b79dc4d36af672c035b2beb71545de63a5d60bccbeee64c260941672ab","affb9dc7079c3a3522e046c5dc1325950a843b1ebd7dc0f0386aeb2397b9f0db","40fe4b689225816b31fe5794c0fbf3534568819709e40295ead998a2bc1ab237","f65b5e33b9ad545a1eebbd6afe857314725ad42aaf069913e33f928ab3e4990a","fb6f2a87beb7fb1f4c2b762d0c76a9459fc91f557231569b0ee21399e22aa13d","31c858dc85996fac4b7fa944e1016d5c72f514930a72357ab5001097bf6511c7","3de30a871b3340be8b679c52aa12f90dd1c8c60874517be58968fdbcc4d79445","6fd985bd31eaf77542625306fb0404d32bff978990f0a06428e5f0b9a3b58109","34693fb4a5e771e11668219221344dd1bd7d8b77ed005a1c1d965fb559be8406","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419",{"version":"8c61d5fc50490af59daf69c4e601cc76de260ee5b2ff057d608a78d6acb0b61a","affectsGlobalScope":true},"f51b4042a3ac86f1f707500a9768f88d0b0c1fc3f3e45a73333283dea720cdc6",{"version":"a7289d79eb84a59d2475b4d0136b4404be3cfdd17c3ea46b9194add1d645df01","affectsGlobalScope":true},"0bb26fa2a90ee890eed57ee812c71fa84d3d07850163ec4a204de86412cc57c1","132ca47da601c60141dd6f10bd08c70d0620177e5638439df2464ec3945b6d98",{"version":"55d2bbae076fed7269c3e16faeb32f988f558427b7a1c3bf04aa7551ab86ae90","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","543c6e3a2353e9ad08b4090e1fb88a95cefb756d0d173b6ec045d7dc70a79964","3a41ebe7f089d50f447466b35b6cabb8b584c0994fc9809d0cd0a4ebc41e1239","f5350b93f10178838c23b3a81f3791d839bc44d1a2a89edb60069250fab90899","aa07f7230bcc5733919c941753d067cb8816dcad6651edb815cb302ae8ddd931","649ba4638a25c54a18dffe37367c6b7848a0bca53fa42fbbd7300b0c61aa861c","5f20d20b7607174caf1a6da9141aeb9f2142159ae2410ca30c7a0fccd1d19c99",{"version":"a34d65f61ec5aac5b53502c8b0bd4e00d217bccb95bf94d449e2571baa11fb8c","affectsGlobalScope":true},"8d42e5af5fb0a96a77e135ce84cc60636c9bad39d9dba043a4efe9d1bdeb3cc3","56fcc451e9065eb121c9cc4c1b9994a816306f3b0b3b1fce7ad59f0ac97a9999","d4a13a5a2e6df8ef02a84ac6fd5bad4a1ec54fdef47f33250da386ea6d5c1864","c3759b5bc5cc40f5988d86a497741a80fa91258629ae50a2b3735e774cd377cc","bf268a0aea37ad4ae3b7a9b58559190b6fc01ea16a31e35cd05817a0a60f895a","45dd82fb5aea9b12b2a90b427b28f3a014e8b2ee9b74087a5ab882841cb5fbc5",{"version":"d7dad6db394a3d9f7b49755e4b610fbf8ed6eb0c9810ae5f1a119f6b5d76de45","affectsGlobalScope":true},"48b2f9302651eb31acd5be69bb4e6b35797a7fcd6b77391d10a4ccadf7dc3609","605bed8af3052e790865a35e3d538a5447764a4ff01989c0f6b084a96f40e1cb","dd67d2b5e4e8a182a38de8e69fb736945eaa4588e0909c14e01a14bd3cc1fd1e",{"version":"2db274de1088f268805043df72e21258eae845e6418dada65331d2898998f330","affectsGlobalScope":true},{"version":"2923dee3c897f03e91b54a210cdbefea7290562f0ac4b948667d4c9ee844b79e","affectsGlobalScope":true},"79169698d09a2be54b14f3bcad2575b414bf3525063fde0a1e4fcd5d6efd380e","051d939bcf77caa3cef3282708ab3a6fdfb741a7366e1d74a9e7603b67417ec3","0be79b3ff0f16b6c2f9bc8c4cc7097ea417d8d67f8267f7e1eec8e32b548c2ff","1c61ffa3a71b77363b30d19832c269ef62fba787f5610cac7254728d3b69ab2e","f6877afc4b9d0b72e15378b187492a6547e48783980e9ff1301163b7b1c15b2e","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","09ed02a725db002693236b6dfc49b2c6eb5557be1421d7fbe4f07cfe38211d92","09d801ff4a303d4976d4b9cb94af3a9097c4a70345e662d176975872d2998e51","c8558b01389b5f7610ac293aa612ccea2ae64d83af43b49f8142f190be1f414c","c40fdf7b2e18df49ce0568e37f0292c12807a0748be79e272745e7216bed2606",{"version":"b10b426c56e220b5093bf8a2446ee47af47263b7b1a03f4b18e42326b231b111","affectsGlobalScope":true},"4e228e78c1e9b0a75c70588d59288f63a6258e8b1fe4a67b0c53fe03461421d9","b4635ef36bee17e1304337d591c3b6b461ecdbc1876d0effbe6a581e62201fe5","205d50c24359ead003dc537b9b65d2a64208dfdffe368f403cf9e0357831db9e","1265fddcd0c68be9d2a3b29805d0280484c961264dd95e0b675f7bd91f777e78",{"version":"e4507242542bd499238f693d88b2d32e22177cc508854625f87bcc9bc3fa1256","affectsGlobalScope":true},{"version":"d942354e4966a98d3a92d1b1af0b4ac06f33af3f88116743e2c304c027ca26ef","affectsGlobalScope":true},"39f0808e5be3cb38674726c21fe2eb453c55e48a901679b4ce30fef85549b892","6afd66a7432ef100027ea110449e874196381e019e30eda7e7d8ca390366b7a8","befb8a9a78ac99d8fbc3ed392810489a7b90760c7a58934e8f1c8538f581cff3","e670bdf01540d35c170fae68edfd2f288eff909936780c379d6a9103b787b22c","867f95abf1df444aab146b19847391fc2f922a55f6a970a27ed8226766cee29f",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"e3685a8957b4e2af64c3f04a58289ee0858a649dbcd963a2b897fe85858ae18a","175323e2a79a6076e0bada8a390d535a3ea817158bf1b1f46e31efca9028a0a2","7a10053aadc19335532a4d02756db4865974fd69bea5439ddcc5bfdf062d9476","4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","aed9e712a9b168345362e8f3a949f16c99ca1e05d21328f05735dfdbb24414ef","b04fe6922ed3db93afdbd49cdda8576aa75f744592fceea96fb0d5f32158c4f5","ed8d6c8de90fc2a4faaebc28e91f2469928738efd5208fb75ade0fa607e892b7","d7c52b198d680fe65b1a8d1b001f0173ffa2536ca2e7082431d726ce1f6714cd","c07f251e1c4e415a838e5498380b55cfea94f3513229de292d2aa85ae52fc3e9","0ed401424892d6bf294a5374efe512d6951b54a71e5dd0290c55b6d0d915f6f7","b945be6da6a3616ef3a250bfe223362b1c7c6872e775b0c4d82a1bf7a28ff902","beea49237dd7c7110fabf3c7509919c9cb9da841d847c53cac162dc3479e2f87","0f45f8a529c450d8f394106cc622bff79e44a1716e1ac9c3cc68b43f7ecf65ee","c624ce90b04c27ce4f318ba6330d39bde3d4e306f0f497ce78d4bda5ab8e22ca","9b8253aa5cb2c82d505f72afdbf96e83b15cc6b9a6f4fadbbbab46210d5f1977","86a8f52e4b1ac49155e889376bcfa8528a634c90c27fec65aa0e949f77b740c5","aab5dd41c1e2316cc0b42a7dd15684f8582d5a1d16c0516276a2a8a7d0fecd9c","59948226626ee210045296ba1fc6cb0fe748d1ff613204e08e7157ab6862dee7","ec3e54d8b713c170fdc8110a7e4a6a97513a7ab6b05ac9e1100cb064d2bb7349","43beb30ecb39a603fde4376554887310b0699f25f7f39c5c91e3147b51bb3a26","666b77d7f06f49da114b090a399abbfa66d5b6c01a3fd9dc4f063a52ace28507","31997714a93fbc570f52d47d6a8ebfb021a34a68ea9ba58bbb69cdec9565657e","6032e4262822160128e644de3fc4410bcd7517c2f137525fd2623d2bb23cb0d3","8bd5c9b1016629c144fd228983395b9dbf0676a576716bc3d316cab612c33cd5","2ed90bd3925b23aed8f859ffd0e885250be0424ca2b57e9866dabef152e1d6b7","93f6bd17d92dab9db7897e1430a5aeaa03bcf51623156213d8397710367a76ce","3f62b770a42e8c47c7008726f95aa383e69d97e85e680d237b99fcb0ee601dd8","5b84cfe78028c35c3bb89c042f18bf08d09da11e82d275c378ae4d07d8477e6c","980d21b0081cbf81774083b1e3a46f4bbdcd2b68858df0f66d7fad9c82bc34bc","6a9c5127096b35264eb7cd21b2417bfc1d42cceca9ba4ce2bb0c3410b7816042","93b7325b49dfbf613d940ed0e471216657b2d77459dac34f1b5b1678f08f884c","b17f3bb7d8333479c7e45e5f3d876761b9bca58f97594eca3f6a944fd825e632","3c1f1236cce6d6e0c4e2c1b4371e6f72d7c14842ecd76a98ed0748ee5730c8f3","6d7f58d5ea72d7834946fd7104a734dc7d40661be8b2e1eaced1ddce3268ebaf","4c26222991e6c97d5a8f541d4f2c67585eda9e8b33cf9f52931b098045236e88","3140d587067e55ce4028275cf71b40a3fd431863ad148efc3106af84a0794cf9","47383b45796d525a4039cd22d2840ac55a1ff03a43d027f7f867ba7314a9cf53","6548773b3abbc18de29176c2141f766d4e437e40596ee480447abf83575445ad","6ddd27af0436ce59dd4c1896e2bfdb2bdb2529847d078b83ce67a144dff05491","816264799aef3fd5a09a3b6c25217d5ec26a9dfc7465eac7d6073bcdc7d88f3f","9f9e5bae412fa5909fae636d6733aee27a108cc2ed5b13980611016336774d3c","662fe197bba64bd3f17ee118058cd2d0d2dbe33d7c0c865fd6365d90bfc44e1e","030519c351f800551cac2658038804969ca4584d2c0175a710602ac234ca1340","0278a6939ca83cd040b08ff8c5fc7838b6693ddc52f22526bf158e6b10e0246c","c2d6206e5ba4fd3063b01218c2b3b997afc1cfbeb49fcee991fa8595842ce53d","869b0f507115c42896d917642f821752e8a84827bfe9ed74c23d76fb0c64c681","4df0891b133884cd9ed752d31c7d0ec0a09234e9ed5394abffd3c660761598db","b603b62d3dcd31ef757dc7339b4fa8acdbca318b0fb9ac485f9a1351955615f9","e642bd47b75ad6b53cbf0dfd7ddfa0f120bd10193f0c58ec37d87b59bf604aca","be90b24d2ee6f875ce3aaa482e7c41a54278856b03d04212681c4032df62baf9","78f5ff400b3cb37e7b90eef1ff311253ed31c8cb66505e9828fad099bffde021","372c47090e1131305d163469a895ff2938f33fa73aad988df31cd31743f9efb6","71c67dc6987bdbd5599353f90009ff825dd7db0450ef9a0aee5bb0c574d18512","6f12403b5eca6ae7ca8e3efe3eeb9c683b06ce3e3844ccfd04098d83cd7e4957","282c535df88175d64d9df4550d2fd1176fd940c1c6822f1e7584003237f179d3","c3a4752cf103e4c6034d5bd449c8f9d5e7b352d22a5f8f9a41a8efb11646f9c2","11a9e38611ac3c77c74240c58b6bd64a0032128b29354e999650f1de1e034b1c","4ed103ca6fff9cb244f7c4b86d1eb28ce8069c32db720784329946731badb5bb","d738f282842970e058672663311c6875482ee36607c88b98ffb6604fba99cb2a","ec859cd8226aa623e41bbb47c249a55ee16dc1b8647359585244d57d3a5ed0c7","8891c6e959d253a66434ff5dc9ae46058fb3493e84b4ca39f710ef2d350656b1","c4463cf02535444dcbc3e67ecd29f1972490f74e49957d6fd4282a1013796ba6","0cb0a957ff02de0b25fd0f3f37130ca7f22d1e0dea256569c714c1f73c6791f8","2f5075dc512d51786b1ba3b1696565641dfaae3ac854f5f13d61fa12ef81a47e","55fcfa6909a227963d5ad3d59ea9f99480106ebd9c69d87fce8a66f8f66e23c3","7f03c7ae3f6cedb6d9261d31d0fb518d940fb2f1b8d2b02b306c6d4b7e1bc8aa","45351e0d51780b6f4088277a4457b9879506ee2720a887de232df0f1efcb33d8","b59e5a5f93b7bbf729cacd0bc86106498e58f07114868350265a3de3598312c7","7c1b05262a4623e5d2a5832433582e0d6b453a3db8aa799b98f38d105812296f","6ee58aa536dabb19b09bc036f1abe83feb51e13d63b23d30b2d0631a2de99b8f","8aceb205dcc6f814ad99635baf1e40b6e01d06d3fe27b72fd766c6d0b8c0c600","530fb1c53338ac6618f8b8c4aa30acf89a9fe13b2bf92184ad966c824350d827","c1e87ae9c6982a1628be91d9f3a52ec5a73ed1a6d42e4e8119bf96c453b14cc0","161a4d1342b99b095a9531e65ba773ab33df0d906d7ae9f4f39180320fe23237","722cf9592e0d42cb903e40aa725f3e8e7cde91271f6be8c318bfbd7e337ff886","6a6aaf58d8ccff1409f921c37d0eb6cec3113df483c485385af3d90414e8eb07","ac9b69620b356f5bcfbc17d6a2a0591354eade1c5febb05cb1079b30ea0094c6","a45ee7555d019a67fbe092898d1aef0b1d02a9f6679ab84461ff515b4460d706","63fe140d17cf720381cc2bdd92e3336d8dbeda2f056567a882a3b79b3c2dbd13","1ed0bf138e87912d741e28333b58cbf814ae863783b3b404d2454cbabb9c5fc0","3452ee7d8ef0b1bbd47b2a56924a1dc3c79dc84a19d212e9dc496f92e4943aa0","9990f9e566bc3c2c6e38df81294fb756e7f5b7b0e5bb17ab75384e190548b4b6","fcc8beef29f39f09b1d9c9f99c42f9fed605ab1c28d2a630185f732b9ba53763","8b497c8cdd875848164f60712378fb15fbc2d625b67d29285845a51fcca57aff","0be91c7eb27de7e2b84c2caa3f89ac2c314de7e00d142c01b3baa0c88163bba4","0a0658c71cfa72984205a2f33b1e28e5e5fdbce0e4fb88186aed4e5a658065dc","cb047832dc68f5a2c41c62c5e95ddcacbae3a8b034d40cd15319a8cb7f25104a","980336ccdfc3c08f3c3b201aa6662e6016e20f15847f8465b68f3e8e67b4665c","5a3493939995f46ff3d9073cd534fb8961c3bf4e08c71db27066ff03d906dea8","bb5a2ac327605ebebf831c469b05bd34a33a6a46ee8c1edd9f3310aad32cf6a1",{"version":"1a7cee6cce12f69f55f8fc7a55093a26a6618596399e25ccb7b29d86bc5df45f","signature":"0dd67f231e9ba1ab70843a23805d762634bcdd0ddb0bc0499084d37be2e42a0e"},{"version":"a39c32b055d2e6103e5c49b9aed2d7bb5b06571c98fc31105264d280431bdbd7","signature":"83e17d1c9514071e3fd3ca7949eda05af8462628f73cbf1bbad7187753454245"},{"version":"618ebb93311695a13844118cdc9a7314dd3a2c6f35092d87f76828cac555ddc9","signature":"c070323db80e5d130f4f86e7b18afd3ca966fc027f0c669094cf68c3be42dfd1"},{"version":"cc0917950dfdfb1e67d99fb605517b9d1d03e2fdf7e62cd463d99295851d3b1f","signature":"2894564809287d1fb8666d11af62e1c53f9fbb87793c9a3dc5b5ccea10dd3dc8"},{"version":"9bed8447acaa89be63540ec500b165442fcb0de020015175b5a5c66d42a61c4a","signature":"fdff10889fe0d84bc3e61d14861b7576f38c506bb50341fe56f33937001492b4"},{"version":"b4c7f80da76735fc6e12c1fc28792c901273aadda9cce74223e586182b856757","signature":"e7db721287abd9771812402c393ac8131b77418042b22cd5bcc4ec7a616ba835"},"0df1434fa41979b81c7872ffdf6bb4890de5d3f1deddec785330ccfbd20928e5",{"version":"6fe7571c8a80808224648046008d1366ba4e29206ac79ce4c56d6fab3350492b","signature":"3547c349ac9d36a3ffc3335c090e62c84dca0bd12b784354b4e4a4106b121cdb"},{"version":"d49e656fbe9e3fb40f1b381699bd97d87165b287f25178e28e991016a22c9df2","signature":"0491b9d016e1afc43b353cee80376e532f5d5723e9ddd61c7f171c4ea09bce6f"},{"version":"61355e28a4c25220df8819b47d091a996782f335aba4d5496ad7348749e0433f","signature":"882b772fda964b822b04561db38c7fff07c284379a30f500a3b2a602e3bc4231"},{"version":"11a8a3bf561b28e887819dec170064b63eaa3e08ab8c9385858a152f0764368b","signature":"569a01372a34283293caeb9486aed5823d7835db0f422e09a15e6466696feded"},{"version":"9ef37c71b0f65869e429820c761c07550bdc5e354182fc73d486345ddfefd8b4","signature":"e5892cb55871e771d33f45116fe9988f6d1a339d09b57abdbb860adb41825320"},"a5aaeca001d2f69093d04aac4db321e4c338fd9b20cbc4f0b0af3dc6ae0f235b","cc957354aa3c94c9961ebf46282cfde1e81d107fc5785a61f62c67f1dd3ac2eb","8041cfce439ff29d339742389de04c136e3029d6b1817f07b2d7fcbfb7534990","93de1c6dab503f053efe8d304cb522bb3a89feab8c98f307a674a4fae04773e9","29a46d003ca3c721e6405f00dee7e3de91b14e09701eba5d887bf76fb2d47d38","069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"ee7d8894904b465b072be0d2e4b45cf6b887cdba16a467645c4e200982ece7ea","f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","df95e00612c1faa5e0e7ef0dba589b18665bbeb3221db2b6cee1fe4d0e61921f","afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","8b06ac3faeacb8484d84ddb44571d8f410697f98d7bfa86c0fda60373a9f5215","7eb06594824ada538b1d8b48c3925a83e7db792f47a081a62cf3e5c4e23cf0ee","f5638f7c2f12a9a1a57b5c41b3c1ea7db3876c003bab68e6a57afd6bcc169af0","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","d8aab31ba8e618cc3eea10b0945de81cb93b7e8150a013a482332263b9305322","462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","7adecb2c3238794c378d336a8182d4c3dd2c4fa6fa1785e2797a3db550edea62","dc12dc0e5aa06f4e1a7692149b78f89116af823b9e1f1e4eae140cd3e0e674e6","1bfc6565b90c8771615cd8cfcf9b36efc0275e5e83ac7d9181307e96eb495161","8a8a96898906f065f296665e411f51010b51372fa260d5373bf9f64356703190","7f82ef88bdb67d9a850dd1c7cd2d690f33e0f0acd208e3c9eba086f3670d4f73",{"version":"ccfd8774cd9b929f63ff7dcf657977eb0652e3547f1fcac1b3a1dc5db22d4d58","affectsGlobalScope":true},"d92dc90fecd2552db74d8dc3c6fb4db9145b2aa0efe2c127236ba035969068d4","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","675e702f2032766a91eeadee64f51014c64688525da99dccd8178f0c599f13a8","458111fc89d11d2151277c822dfdc1a28fa5b6b2493cf942e37d4cd0a6ee5f22","19c816167e076e7c24f074389c6cf3ed87bdbb917d1ea439ca281f9d26db2439","187119ff4f9553676a884e296089e131e8cc01691c546273b1d0089c3533ce42","febf0b2de54781102b00f61653b21377390a048fbf5262718c91860d11ff34a6","98f9d826db9cd99d27a01a59ee5f22863df00ccf1aaf43e1d7db80ebf716f7c3","0aaef8cded245bf5036a7a40b65622dd6c4da71f7a35343112edbe112b348a1e","00baffbe8a2f2e4875367479489b5d43b5fc1429ecb4a4cc98cfc3009095f52a","dcd91d3b697cb650b95db5471189b99815af5db2a1cd28760f91e0b12ede8ed5","3c92b6dfd43cc1c2485d9eba5ff0b74a19bb8725b692773ef1d66dac48cda4bd","3cf0d343c2276842a5b617f22ba82af6322c7cfe8bb52238ffc0c491a3c21019","df996e25faa505f85aeb294d15ebe61b399cf1d1e49959cdfaf2cc0815c203f9",{"version":"f2eff8704452659641164876c1ef0df4174659ce7311b0665798ea3f556fa9ad","affectsGlobalScope":true},"8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","2b8264b2fefd7367e0f20e2c04eed5d3038831fe00f5efbc110ff0131aab899b","a73a445c1e0a6d0f8b48e8eb22dc9d647896783a7f8991cbbc31c0d94bf1f5a2","d88a5e779faf033be3d52142a04fbe1cb96009868e3bbdd296b2bc6c59e06c0e","cd1d2f103b79002cd94b85a640a103f094227a2c4c53bc8af1fdbf4e13d9729e","5e379df3d61561c2ed7789b5995b9ba2143bbba21a905e2381e16efe7d1fa424","f07a137bbe2de7a122c37bfea00e761975fb264c49f18003d398d71b3fb35a5f","3dce33e7eb25594863b8e615f14a45ab98190d85953436750644212d8a18c066","2b93035328f7778d200252681c1d86285d501ed424825a18f81e4c3028aa51d9","2ac9c8332c5f8510b8bdd571f8271e0f39b0577714d5e95c1e79a12b2616f069","42c21aa963e7b86fa00801d96e88b36803188018d5ad91db2a9101bccd40b3ff","d31eb848cdebb4c55b4893b335a7c0cca95ad66dee13cbb7d0893810c0a9c301","b9f96255e1048ed2ea33ec553122716f0e57fc1c3ad778e9aa15f5b46547bd23","7a9e0a564fee396cacf706523b5aeed96e04c6b871a8bebefad78499fbffc5bc","906c751ef5822ec0dadcea2f0e9db64a33fb4ee926cc9f7efa38afe5d5371b2a","5387c049e9702f2d2d7ece1a74836a14b47fbebe9bbeb19f94c580a37c855351","c68391fb9efad5d99ff332c65b1606248c4e4a9f1dd9a087204242b56c7126d6","e9cf02252d3a0ced987d24845dcb1f11c1be5541f17e5daa44c6de2d18138d0c","e8b02b879754d85f48489294f99147aeccc352c760d95a6fe2b6e49cd400b2fe","9f6908ab3d8a86c68b86e38578afc7095114e66b2fc36a2a96e9252aac3998e0","0eedb2344442b143ddcd788f87096961cd8572b64f10b4afc3356aa0460171c6","71405cc70f183d029cc5018375f6c35117ffdaf11846c35ebf85ee3956b1b2a6","c68baff4d8ba346130e9753cefe2e487a16731bf17e05fdacc81e8c9a26aae9d","2cd15528d8bb5d0453aa339b4b52e0696e8b07e790c153831c642c3dea5ac8af","479d622e66283ffa9883fbc33e441f7fc928b2277ff30aacbec7b7761b4e9579","ade307876dc5ca267ca308d09e737b611505e015c535863f22420a11fffc1c54","f8cdefa3e0dee639eccbe9794b46f90291e5fd3989fcba60d2f08fde56179fb9","86c5a62f99aac7053976e317dbe9acb2eaf903aaf3d2e5bb1cafe5c2df7b37a8","2b300954ce01a8343866f737656e13243e86e5baef51bd0631b21dcef1f6e954","a2d409a9ffd872d6b9d78ead00baa116bbc73cfa959fce9a2f29d3227876b2a1","b288936f560cd71f4a6002953290de9ff8dfbfbf37f5a9391be5c83322324898","61178a781ef82e0ff54f9430397e71e8f365fc1e3725e0e5346f2de7b0d50dfa","6a6ccb37feb3aad32d9be026a3337db195979cd5727a616fc0f557e974101a54","c649ea79205c029a02272ef55b7ab14ada0903db26144d2205021f24727ac7a3","38e2b02897c6357bbcff729ef84c736727b45cc152abe95a7567caccdfad2a1d","d6610ea7e0b1a7686dba062a1e5544dd7d34140f4545305b7c6afaebfb348341","3dee35db743bdba2c8d19aece7ac049bde6fa587e195d86547c882784e6ba34c","b15e55c5fa977c2f25ca0b1db52cfa2d1fd4bf0baf90a8b90d4a7678ca462ff1","f41d30972724714763a2698ae949fbc463afb203b5fa7c4ad7e4de0871129a17","843dd7b6a7c6269fd43827303f5cbe65c1fecabc30b4670a50d5a15d57daeeb9","f06d8b8567ee9fd799bf7f806efe93b67683ef24f4dea5b23ef12edff4434d9d","6017384f697ff38bc3ef6a546df5b230c3c31329db84cbfe686c83bec011e2b2","e1a5b30d9248549ca0c0bb1d653bafae20c64c4aa5928cc4cd3017b55c2177b0","a593632d5878f17295bd53e1c77f27bf4c15212822f764a2bfc1702f4b413fa0","a868a534ba1c2ca9060b8a13b0ffbbbf78b4be7b0ff80d8c75b02773f7192c29","da7545aba8f54a50fde23e2ede00158dc8112560d934cee58098dfb03aae9b9d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","a1a261624efb3a00ff346b13580f70f3463b8cdcc58b60f5793ff11785d52cab","f83b320cceccfc48457a818d18fc9a006ab18d0bdd727aa2c2e73dc1b4a45e98","9d92b037978bb9525bc4b673ebddd443277542e010c0aef019c03a170ccdaa73","b0d10e46cfe3f6c476b69af02eaa38e4ccc7430221ce3109ae84bb9fb8282298","fab58e600970e66547644a44bc9918e3223aa2cbd9e8763cec004b2cfb48827e","70e9a18da08294f75bf23e46c7d69e67634c0765d355887b9b41f0d959e1426e","ed44ba6b95f08b758748be7902e0cc54178b1337c56d0e2469c77b03f63ac73b"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":true,"esModuleInterop":true,"inlineSources":true,"module":1,"outDir":"./types","rootDir":"../src","sourceMap":true,"strict":true,"target":7},"fileIdsList":[[118,227],[118],[89,118,125,126,127,142],[118,126,127,143,144],[118,125,126],[118,125,142,145,148],[118,125,145,148,149],[118,146,147,148,150,151],[118,125,148],[118,125,142,145,146,147,150],[118,125,133],[118,125],[89,118,125],[78,118,125],[118,129,130,131,132,133,134,135,136,137,138,139,140,141],[118,125,131,132],[118,125,131,133],[118,164,165],[118,165,166],[118,165,166,167,168],[118,164],[62,118],[65,118],[62,65,118],[63,64,65,66,67,68,69,70,71,72,73,118,153,156,157,158,159,160,161,162,163],[56,62,63,118],[65,71,73,118,152],[118,155],[65,66,118],[62,118,159],[118,197,198],[118,227,228,229,230,231],[118,227,229],[118,154],[118,233,234,235],[90,118,125],[118,238],[118,239],[118,250],[118,244,249],[118,253,255,256,257,258,259,260,261,262,263,264,265],[118,253,254,256,257,258,259,260,261,262,263,264,265],[118,254,255,256,257,258,259,260,261,262,263,264,265],[118,253,254,255,257,258,259,260,261,262,263,264,265],[118,253,254,255,256,258,259,260,261,262,263,264,265],[118,253,254,255,256,257,259,260,261,262,263,264,265],[118,253,254,255,256,257,258,260,261,262,263,264,265],[118,253,254,255,256,257,258,259,261,262,263,264,265],[118,253,254,255,256,257,258,259,260,262,263,264,265],[118,253,254,255,256,257,258,259,260,261,263,264,265],[118,253,254,255,256,257,258,259,260,261,262,264,265],[118,253,254,255,256,257,258,259,260,261,262,263,265],[118,253,254,255,256,257,258,259,260,261,262,263,264],[74,118],[77,118],[78,83,109,118],[79,89,90,97,106,117,118],[79,80,89,97,118],[81,118],[82,83,90,98,118],[83,106,114,118],[84,86,89,97,118],[85,118],[86,87,118],[88,89,118],[89,118],[89,90,91,106,117,118],[89,90,91,106,118],[92,97,106,117,118],[89,90,92,93,97,106,114,117,118],[92,94,106,114,117,118],[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],[89,95,118],[96,117,118,122],[86,89,97,106,118],[98,118],[99,118],[77,100,118],[101,116,118,122],[102,118],[103,118],[89,104,118],[104,105,118,120],[78,89,106,107,108,118],[78,106,108,118],[106,107,118],[109,118],[110,118],[89,112,113,118],[112,113,118],[83,97,114,118],[115,118],[97,116,118],[78,92,103,117,118],[83,118],[106,118,119],[118,120],[118,121],[78,83,89,91,100,106,117,118,120,122],[106,118,123],[118,125,271],[118,274,313],[118,274,298,313],[118,313],[118,274],[118,274,299,313],[118,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312],[118,299,313],[118,314],[118,318],[118,182],[118,182,183,184,185,186],[118,171,172,173,174,175,176,177,178,179,180,181],[118,242,245],[118,242,245,246,247],[118,244],[118,241,248],[118,243],[55,57,58,59,60,61,118],[55,56,118],[57,118],[56,57,118],[55,57,118],[118,164,169,191],[118,203,204],[118,164,187,188,189],[118,188],[118,189],[118,170,188,189,190],[118,192],[118,192,193,196,200],[118,199],[118,164,194,195],[118,164,207],[118,164,208],[118,208,209,210,211,212,213],[118,164,223,224,225],[118,164,191,201,202,220,223,226],[118,164,169,187,191,201,202,205,206,215,220,222,224,225,226],[118,164,191,223],[118,169,224],[118,215,219,220,223,224,225,226],[118,164,214,221,223,225],[118,164,214,215,223,224],[118,216,217,218],[118,164,201,214,215,224,225],[118,164,214,215,224,225],[118,164,214,224,226],[164,224],[164,191,201,220,223,226],[164,191,201,205,220,222,224,226],[164,191,223],[164,169,224],[164,214,221],[215,223,224],[164,216,217,218,221],[215,224],[164,215,224],[164,214,224,226]],"referencedMap":[[229,1],[227,2],[143,3],[126,2],[145,4],[127,5],[144,2],[149,6],[150,7],[146,7],[152,8],[147,7],[151,9],[148,10],[134,11],[131,12],[138,13],[132,11],[129,14],[137,2],[142,15],[139,2],[140,2],[141,2],[136,12],[133,16],[130,2],[135,17],[194,2],[166,18],[168,2],[167,19],[169,20],[165,21],[207,13],[63,22],[64,22],[66,23],[67,22],[68,22],[69,24],[70,2],[71,2],[72,2],[65,22],[164,25],[73,26],[153,27],[156,28],[157,2],[158,2],[159,2],[160,2],[161,2],[162,29],[163,30],[197,2],[199,31],[198,2],[232,32],[228,1],[230,33],[231,1],[195,12],[155,34],[206,2],[233,2],[236,35],[234,2],[237,36],[238,2],[239,37],[240,38],[251,39],[250,40],[235,2],[252,2],[254,41],[255,42],[253,43],[256,44],[257,45],[258,46],[259,47],[260,48],[261,49],[262,50],[263,51],[264,52],[265,53],[266,2],[154,2],[74,54],[75,54],[77,55],[78,56],[79,57],[80,58],[81,59],[82,60],[83,61],[84,62],[85,63],[86,64],[87,64],[88,65],[89,66],[90,67],[91,68],[76,2],[124,2],[92,69],[93,70],[94,71],[125,72],[95,73],[96,74],[97,75],[98,76],[99,77],[100,78],[101,79],[102,80],[103,81],[104,82],[105,83],[106,84],[108,85],[107,86],[109,87],[110,88],[111,2],[112,89],[113,90],[114,91],[115,92],[116,93],[117,94],[118,95],[119,96],[120,97],[121,98],[122,99],[123,100],[267,2],[268,12],[269,2],[270,2],[272,101],[271,2],[273,12],[298,102],[299,103],[274,104],[277,104],[296,102],[297,102],[287,102],[286,105],[284,102],[279,102],[292,102],[290,102],[294,102],[278,102],[291,102],[295,102],[280,102],[281,102],[293,102],[275,102],[282,102],[283,102],[285,102],[289,102],[300,106],[288,102],[276,102],[313,107],[312,2],[307,106],[309,108],[308,106],[301,106],[302,106],[304,106],[306,106],[310,108],[311,108],[303,108],[305,108],[315,109],[314,2],[316,2],[317,2],[318,2],[319,110],[128,2],[241,2],[181,2],[178,111],[180,111],[179,111],[177,111],[187,112],[182,113],[186,2],[183,2],[185,2],[184,2],[173,111],[174,111],[175,111],[171,2],[172,2],[176,111],[242,2],[246,114],[248,115],[247,114],[245,116],[249,117],[202,2],[244,118],[243,2],[55,2],[62,119],[57,120],[58,121],[59,121],[60,122],[61,122],[56,123],[8,2],[10,2],[9,2],[2,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[3,2],[4,2],[22,2],[19,2],[20,2],[21,2],[23,2],[24,2],[25,2],[5,2],[26,2],[27,2],[28,2],[29,2],[6,2],[30,2],[31,2],[32,2],[33,2],[7,2],[34,2],[39,2],[40,2],[35,2],[36,2],[37,2],[38,2],[1,2],[41,2],[203,124],[204,2],[205,125],[170,2],[190,126],[189,127],[188,128],[191,129],[193,130],[201,131],[200,132],[192,2],[196,133],[208,134],[209,135],[210,135],[211,2],[212,135],[214,136],[213,135],[226,137],[224,138],[223,139],[220,140],[225,141],[221,142],[222,143],[216,144],[219,145],[217,146],[218,147],[215,148],[46,2],[47,2],[48,2],[49,2],[50,2],[51,2],[42,2],[52,2],[53,2],[54,2],[43,2],[44,2],[45,2]],"exportedModulesMap":[[229,1],[227,2],[143,3],[126,2],[145,4],[127,5],[144,2],[149,6],[150,7],[146,7],[152,8],[147,7],[151,9],[148,10],[134,11],[131,12],[138,13],[132,11],[129,14],[137,2],[142,15],[139,2],[140,2],[141,2],[136,12],[133,16],[130,2],[135,17],[194,2],[166,18],[168,2],[167,19],[169,20],[165,21],[207,13],[63,22],[64,22],[66,23],[67,22],[68,22],[69,24],[70,2],[71,2],[72,2],[65,22],[164,25],[73,26],[153,27],[156,28],[157,2],[158,2],[159,2],[160,2],[161,2],[162,29],[163,30],[197,2],[199,31],[198,2],[232,32],[228,1],[230,33],[231,1],[195,12],[155,34],[206,2],[233,2],[236,35],[234,2],[237,36],[238,2],[239,37],[240,38],[251,39],[250,40],[235,2],[252,2],[254,41],[255,42],[253,43],[256,44],[257,45],[258,46],[259,47],[260,48],[261,49],[262,50],[263,51],[264,52],[265,53],[266,2],[154,2],[74,54],[75,54],[77,55],[78,56],[79,57],[80,58],[81,59],[82,60],[83,61],[84,62],[85,63],[86,64],[87,64],[88,65],[89,66],[90,67],[91,68],[76,2],[124,2],[92,69],[93,70],[94,71],[125,72],[95,73],[96,74],[97,75],[98,76],[99,77],[100,78],[101,79],[102,80],[103,81],[104,82],[105,83],[106,84],[108,85],[107,86],[109,87],[110,88],[111,2],[112,89],[113,90],[114,91],[115,92],[116,93],[117,94],[118,95],[119,96],[120,97],[121,98],[122,99],[123,100],[267,2],[268,12],[269,2],[270,2],[272,101],[271,2],[273,12],[298,102],[299,103],[274,104],[277,104],[296,102],[297,102],[287,102],[286,105],[284,102],[279,102],[292,102],[290,102],[294,102],[278,102],[291,102],[295,102],[280,102],[281,102],[293,102],[275,102],[282,102],[283,102],[285,102],[289,102],[300,106],[288,102],[276,102],[313,107],[312,2],[307,106],[309,108],[308,106],[301,106],[302,106],[304,106],[306,106],[310,108],[311,108],[303,108],[305,108],[315,109],[314,2],[316,2],[317,2],[318,2],[319,110],[128,2],[241,2],[181,2],[178,111],[180,111],[179,111],[177,111],[187,112],[182,113],[186,2],[183,2],[185,2],[184,2],[173,111],[174,111],[175,111],[171,2],[172,2],[176,111],[242,2],[246,114],[248,115],[247,114],[245,116],[249,117],[202,2],[244,118],[243,2],[55,2],[62,119],[57,120],[58,121],[59,121],[60,122],[61,122],[56,123],[8,2],[10,2],[9,2],[2,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[3,2],[4,2],[22,2],[19,2],[20,2],[21,2],[23,2],[24,2],[25,2],[5,2],[26,2],[27,2],[28,2],[29,2],[6,2],[30,2],[31,2],[32,2],[33,2],[7,2],[34,2],[39,2],[40,2],[35,2],[36,2],[37,2],[38,2],[1,2],[41,2],[203,124],[204,2],[205,125],[170,2],[190,126],[189,127],[188,128],[191,129],[193,130],[201,131],[200,132],[192,2],[196,133],[208,134],[209,135],[210,135],[211,2],[212,135],[214,136],[213,135],[226,149],[224,150],[223,151],[220,152],[225,153],[221,142],[222,154],[216,155],[219,156],[217,157],[218,158],[215,159],[46,2],[47,2],[48,2],[49,2],[50,2],[51,2],[42,2],[52,2],[53,2],[54,2],[43,2],[44,2],[45,2]],"semanticDiagnosticsPerFile":[229,227,143,126,145,127,144,149,150,146,152,147,151,148,134,131,138,132,129,137,142,139,140,141,136,133,130,135,194,166,168,167,169,165,207,63,64,66,67,68,69,70,71,72,65,164,73,153,156,157,158,159,160,161,162,163,197,199,198,232,228,230,231,195,155,206,233,236,234,237,238,239,240,251,250,235,252,254,255,253,256,257,258,259,260,261,262,263,264,265,266,154,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,76,124,92,93,94,125,95,96,97,98,99,100,101,102,103,104,105,106,108,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,267,268,269,270,272,271,273,298,299,274,277,296,297,287,286,284,279,292,290,294,278,291,295,280,281,293,275,282,283,285,289,300,288,276,313,312,307,309,308,301,302,304,306,310,311,303,305,315,314,316,317,318,319,128,241,181,178,180,179,177,187,182,186,183,185,184,173,174,175,171,172,176,242,246,248,247,245,249,202,244,243,55,62,57,58,59,60,61,56,8,10,9,2,11,12,13,14,15,16,17,18,3,4,22,19,20,21,23,24,25,5,26,27,28,29,6,30,31,32,33,7,34,39,40,35,36,37,38,1,41,203,204,205,170,190,189,188,191,193,201,200,192,196,208,209,210,211,212,214,213,226,224,223,220,225,221,222,216,219,217,218,215,46,47,48,49,50,51,42,52,53,54,43,44,45],"latestChangedDtsFile":"./types/Caveat.d.ts"},"version":"4.8.4"}
\ No newline at end of file
+{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.dom.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../types/eth-ens-namehash.d.ts","../../../types/ethereum-ens-network-map.d.ts","../../../types/global.d.ts","../../../types/single-call-balance-checker-abi.d.ts","../../../types/@metamask/contract-metadata.d.ts","../../../types/@metamask/eth-hd-keyring.d.ts","../../../types/@metamask/eth-simple-keyring.d.ts","../../../types/@metamask/ethjs-provider-http.d.ts","../../../types/@metamask/ethjs-unit.d.ts","../../../types/@metamask/metamask-eth-abis.d.ts","../../../types/eth-json-rpc-infura/src/createprovider.d.ts","../../../types/eth-phishing-detect/src/config.json.d.ts","../../../types/eth-phishing-detect/src/detector.d.ts","../../../node_modules/superstruct/dist/error.d.ts","../../../node_modules/superstruct/dist/utils.d.ts","../../../node_modules/superstruct/dist/struct.d.ts","../../../node_modules/superstruct/dist/structs/coercions.d.ts","../../../node_modules/superstruct/dist/structs/refinements.d.ts","../../../node_modules/superstruct/dist/structs/types.d.ts","../../../node_modules/superstruct/dist/structs/utilities.d.ts","../../../node_modules/superstruct/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/assert.d.ts","../../../node_modules/@metamask/utils/dist/types/base64.d.ts","../../../node_modules/@metamask/utils/dist/types/hex.d.ts","../../../node_modules/@metamask/utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/utils/dist/types/caip-types.d.ts","../../../node_modules/@metamask/utils/dist/types/checksum.d.ts","../../../node_modules/@metamask/utils/dist/types/coercers.d.ts","../../../node_modules/@metamask/utils/dist/types/collections.d.ts","../../../node_modules/@metamask/utils/dist/types/encryption-types.d.ts","../../../node_modules/@metamask/utils/dist/types/errors.d.ts","../../../node_modules/@metamask/utils/dist/types/json.d.ts","../../../node_modules/@types/node/assert.d.ts","../../../node_modules/@types/node/assert/strict.d.ts","../../../node_modules/@types/node/globals.d.ts","../../../node_modules/@types/node/async_hooks.d.ts","../../../node_modules/@types/node/buffer.d.ts","../../../node_modules/@types/node/child_process.d.ts","../../../node_modules/@types/node/cluster.d.ts","../../../node_modules/@types/node/console.d.ts","../../../node_modules/@types/node/constants.d.ts","../../../node_modules/@types/node/crypto.d.ts","../../../node_modules/@types/node/dgram.d.ts","../../../node_modules/@types/node/diagnostics_channel.d.ts","../../../node_modules/@types/node/dns.d.ts","../../../node_modules/@types/node/dns/promises.d.ts","../../../node_modules/@types/node/domain.d.ts","../../../node_modules/@types/node/events.d.ts","../../../node_modules/@types/node/fs.d.ts","../../../node_modules/@types/node/fs/promises.d.ts","../../../node_modules/@types/node/http.d.ts","../../../node_modules/@types/node/http2.d.ts","../../../node_modules/@types/node/https.d.ts","../../../node_modules/@types/node/inspector.d.ts","../../../node_modules/@types/node/module.d.ts","../../../node_modules/@types/node/net.d.ts","../../../node_modules/@types/node/os.d.ts","../../../node_modules/@types/node/path.d.ts","../../../node_modules/@types/node/perf_hooks.d.ts","../../../node_modules/@types/node/process.d.ts","../../../node_modules/@types/node/punycode.d.ts","../../../node_modules/@types/node/querystring.d.ts","../../../node_modules/@types/node/readline.d.ts","../../../node_modules/@types/node/repl.d.ts","../../../node_modules/@types/node/stream.d.ts","../../../node_modules/@types/node/stream/promises.d.ts","../../../node_modules/@types/node/stream/consumers.d.ts","../../../node_modules/@types/node/stream/web.d.ts","../../../node_modules/@types/node/string_decoder.d.ts","../../../node_modules/@types/node/test.d.ts","../../../node_modules/@types/node/timers.d.ts","../../../node_modules/@types/node/timers/promises.d.ts","../../../node_modules/@types/node/tls.d.ts","../../../node_modules/@types/node/trace_events.d.ts","../../../node_modules/@types/node/tty.d.ts","../../../node_modules/@types/node/url.d.ts","../../../node_modules/@types/node/util.d.ts","../../../node_modules/@types/node/v8.d.ts","../../../node_modules/@types/node/vm.d.ts","../../../node_modules/@types/node/wasi.d.ts","../../../node_modules/@types/node/worker_threads.d.ts","../../../node_modules/@types/node/zlib.d.ts","../../../node_modules/@types/node/globals.global.d.ts","../../../node_modules/@types/node/index.d.ts","../../../node_modules/@ethereumjs/common/dist/enums.d.ts","../../../node_modules/@ethereumjs/common/dist/types.d.ts","../../../node_modules/buffer/index.d.ts","../../../node_modules/@ethereumjs/util/dist/constants.d.ts","../../../node_modules/@ethereumjs/util/dist/units.d.ts","../../../node_modules/@ethereumjs/util/dist/address.d.ts","../../../node_modules/@ethereumjs/util/dist/bytes.d.ts","../../../node_modules/@ethereumjs/util/dist/types.d.ts","../../../node_modules/@ethereumjs/util/dist/account.d.ts","../../../node_modules/@ethereumjs/util/dist/withdrawal.d.ts","../../../node_modules/@ethereumjs/util/dist/signature.d.ts","../../../node_modules/@ethereumjs/util/dist/encoding.d.ts","../../../node_modules/@ethereumjs/util/dist/asynceventemitter.d.ts","../../../node_modules/@ethereumjs/util/dist/internal.d.ts","../../../node_modules/@ethereumjs/util/dist/lock.d.ts","../../../node_modules/@ethereumjs/util/dist/provider.d.ts","../../../node_modules/@ethereumjs/util/dist/index.d.ts","../../../node_modules/@ethereumjs/common/dist/common.d.ts","../../../node_modules/@ethereumjs/common/dist/utils.d.ts","../../../node_modules/@ethereumjs/common/dist/index.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip2930transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/legacytransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/types.d.ts","../../../node_modules/@ethereumjs/tx/dist/basetransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip1559transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/transactionfactory.d.ts","../../../node_modules/@ethereumjs/tx/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/keyring.d.ts","../../../node_modules/@types/ms/index.d.ts","../../../node_modules/@types/debug/index.d.ts","../../../node_modules/@metamask/utils/dist/types/logging.d.ts","../../../node_modules/@metamask/utils/dist/types/misc.d.ts","../../../node_modules/@metamask/utils/dist/types/number.d.ts","../../../node_modules/@metamask/utils/dist/types/opaque.d.ts","../../../node_modules/@metamask/utils/dist/types/promise.d.ts","../../../node_modules/@metamask/utils/dist/types/time.d.ts","../../../node_modules/@metamask/utils/dist/types/transaction-types.d.ts","../../../node_modules/@metamask/utils/dist/types/versions.d.ts","../../../node_modules/@metamask/utils/dist/types/index.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/utils.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/classes.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/errors.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/error-constants.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/index.d.ts","../../base-controller/dist/types/basecontrollerv1.d.ts","../../../node_modules/immer/dist/utils/env.d.ts","../../../node_modules/immer/dist/utils/errors.d.ts","../../../node_modules/immer/dist/types/types-external.d.ts","../../../node_modules/immer/dist/types/types-internal.d.ts","../../../node_modules/immer/dist/utils/common.d.ts","../../../node_modules/immer/dist/utils/plugins.d.ts","../../../node_modules/immer/dist/core/scope.d.ts","../../../node_modules/immer/dist/core/finalize.d.ts","../../../node_modules/immer/dist/core/proxy.d.ts","../../../node_modules/immer/dist/core/immerclass.d.ts","../../../node_modules/immer/dist/core/current.d.ts","../../../node_modules/immer/dist/internal.d.ts","../../../node_modules/immer/dist/plugins/es5.d.ts","../../../node_modules/immer/dist/plugins/patches.d.ts","../../../node_modules/immer/dist/plugins/mapset.d.ts","../../../node_modules/immer/dist/plugins/all.d.ts","../../../node_modules/immer/dist/immer.d.ts","../../base-controller/dist/types/restrictedcontrollermessenger.d.ts","../../base-controller/dist/types/controllermessenger.d.ts","../../base-controller/dist/types/basecontrollerv2.d.ts","../../base-controller/dist/types/index.d.ts","../../controller-utils/dist/types/types.d.ts","../../controller-utils/dist/types/constants.d.ts","../../../node_modules/@metamask/eth-query/index.d.ts","../../../node_modules/@types/bn.js/index.d.ts","../../controller-utils/dist/types/util.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/abnf.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/utils.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/parsers.d.ts","../../controller-utils/dist/types/siwe.d.ts","../../controller-utils/dist/types/index.d.ts","../../../node_modules/nanoid/index.d.ts","../../approval-controller/dist/types/approvalcontroller.d.ts","../../approval-controller/dist/types/errors.d.ts","../../approval-controller/dist/types/index.d.ts","../../../node_modules/@types/deep-freeze-strict/index.d.ts","../../../node_modules/@metamask/safe-event-emitter/index.d.ts","../../json-rpc-engine/dist/types/jsonrpcengine.d.ts","../../json-rpc-engine/dist/types/createasyncmiddleware.d.ts","../../json-rpc-engine/dist/types/createscaffoldmiddleware.d.ts","../../json-rpc-engine/dist/types/getuniqueid.d.ts","../../json-rpc-engine/dist/types/idremapmiddleware.d.ts","../../json-rpc-engine/dist/types/mergemiddleware.d.ts","../../json-rpc-engine/dist/types/index.d.ts","../src/utils.ts","../src/rpc-methods/getpermissions.ts","../src/rpc-methods/requestpermissions.ts","../src/rpc-methods/revokepermissions.ts","../src/rpc-methods/index.ts","../src/subjectmetadatacontroller.ts","../src/index.ts","../src/permission-middleware.ts","../src/permissioncontroller.ts","../src/permission.ts","../src/errors.ts","../src/caveat.ts","../../../node_modules/@babel/types/lib/index.d.ts","../../../node_modules/@types/babel__generator/index.d.ts","../../../node_modules/@babel/parser/typings/babel-parser.d.ts","../../../node_modules/@types/babel__template/index.d.ts","../../../node_modules/@types/babel__traverse/index.d.ts","../../../node_modules/@types/babel__core/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/graceful-fs/index.d.ts","../../../node_modules/@types/istanbul-lib-coverage/index.d.ts","../../../node_modules/@types/istanbul-lib-report/index.d.ts","../../../node_modules/@types/istanbul-reports/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../node_modules/jest-diff/build/cleanupsemantic.d.ts","../../../node_modules/pretty-format/build/types.d.ts","../../../node_modules/pretty-format/build/index.d.ts","../../../node_modules/jest-diff/build/types.d.ts","../../../node_modules/jest-diff/build/difflines.d.ts","../../../node_modules/jest-diff/build/printdiffs.d.ts","../../../node_modules/jest-diff/build/index.d.ts","../../../node_modules/jest-matcher-utils/build/index.d.ts","../../../node_modules/@types/jest/index.d.ts","../../../node_modules/@types/jest-when/index.d.ts","../../../node_modules/@types/json5/index.d.ts","../../../node_modules/@types/lodash/common/common.d.ts","../../../node_modules/@types/lodash/common/array.d.ts","../../../node_modules/@types/lodash/common/collection.d.ts","../../../node_modules/@types/lodash/common/date.d.ts","../../../node_modules/@types/lodash/common/function.d.ts","../../../node_modules/@types/lodash/common/lang.d.ts","../../../node_modules/@types/lodash/common/math.d.ts","../../../node_modules/@types/lodash/common/number.d.ts","../../../node_modules/@types/lodash/common/object.d.ts","../../../node_modules/@types/lodash/common/seq.d.ts","../../../node_modules/@types/lodash/common/string.d.ts","../../../node_modules/@types/lodash/common/util.d.ts","../../../node_modules/@types/lodash/index.d.ts","../../../node_modules/@types/minimatch/index.d.ts","../../../node_modules/@types/parse-json/index.d.ts","../../../node_modules/@types/pbkdf2/index.d.ts","../../../node_modules/@types/prettier/index.d.ts","../../../node_modules/@types/punycode/index.d.ts","../../../node_modules/@types/readable-stream/node_modules/safe-buffer/index.d.ts","../../../node_modules/@types/readable-stream/index.d.ts","../../../node_modules/@types/secp256k1/index.d.ts","../../../node_modules/@types/semver/classes/semver.d.ts","../../../node_modules/@types/semver/functions/parse.d.ts","../../../node_modules/@types/semver/functions/valid.d.ts","../../../node_modules/@types/semver/functions/clean.d.ts","../../../node_modules/@types/semver/functions/inc.d.ts","../../../node_modules/@types/semver/functions/diff.d.ts","../../../node_modules/@types/semver/functions/major.d.ts","../../../node_modules/@types/semver/functions/minor.d.ts","../../../node_modules/@types/semver/functions/patch.d.ts","../../../node_modules/@types/semver/functions/prerelease.d.ts","../../../node_modules/@types/semver/functions/compare.d.ts","../../../node_modules/@types/semver/functions/rcompare.d.ts","../../../node_modules/@types/semver/functions/compare-loose.d.ts","../../../node_modules/@types/semver/functions/compare-build.d.ts","../../../node_modules/@types/semver/functions/sort.d.ts","../../../node_modules/@types/semver/functions/rsort.d.ts","../../../node_modules/@types/semver/functions/gt.d.ts","../../../node_modules/@types/semver/functions/lt.d.ts","../../../node_modules/@types/semver/functions/eq.d.ts","../../../node_modules/@types/semver/functions/neq.d.ts","../../../node_modules/@types/semver/functions/gte.d.ts","../../../node_modules/@types/semver/functions/lte.d.ts","../../../node_modules/@types/semver/functions/cmp.d.ts","../../../node_modules/@types/semver/functions/coerce.d.ts","../../../node_modules/@types/semver/classes/comparator.d.ts","../../../node_modules/@types/semver/classes/range.d.ts","../../../node_modules/@types/semver/functions/satisfies.d.ts","../../../node_modules/@types/semver/ranges/max-satisfying.d.ts","../../../node_modules/@types/semver/ranges/min-satisfying.d.ts","../../../node_modules/@types/semver/ranges/to-comparators.d.ts","../../../node_modules/@types/semver/ranges/min-version.d.ts","../../../node_modules/@types/semver/ranges/valid.d.ts","../../../node_modules/@types/semver/ranges/outside.d.ts","../../../node_modules/@types/semver/ranges/gtr.d.ts","../../../node_modules/@types/semver/ranges/ltr.d.ts","../../../node_modules/@types/semver/ranges/intersects.d.ts","../../../node_modules/@types/semver/ranges/simplify.d.ts","../../../node_modules/@types/semver/ranges/subset.d.ts","../../../node_modules/@types/semver/internals/identifiers.d.ts","../../../node_modules/@types/semver/index.d.ts","../../../node_modules/@types/sinonjs__fake-timers/index.d.ts","../../../node_modules/@types/sinon/index.d.ts","../../../node_modules/@types/stack-utils/index.d.ts","../../../node_modules/@types/uuid/index.d.ts","../../../node_modules/@types/yargs-parser/index.d.ts","../../../node_modules/@types/yargs/index.d.ts"],"fileInfos":[{"version":"8730f4bf322026ff5229336391a18bcaa1f94d4f82416c8b2f3954e2ccaae2ba","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","4b421cbfb3a38a27c279dec1e9112c3d1da296f77a1a85ddadf7e7a425d45d18","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9",{"version":"3aafcb693fe5b5c3bd277bd4c3a617b53db474fe498fc5df067c5603b1eebde7","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"5f406584aef28a331c36523df688ca3650288d14f39c5d2e555c95f0d2ff8f6f","affectsGlobalScope":true},{"version":"22f230e544b35349cfb3bd9110b6ef37b41c6d6c43c3314a31bd0d9652fcec72","affectsGlobalScope":true},{"version":"7ea0b55f6b315cf9ac2ad622b0a7813315bb6e97bf4bb3fbf8f8affbca7dc695","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"eb26de841c52236d8222f87e9e6a235332e0788af8c87a71e9e210314300410a","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"5e5e095c4470c8bab227dbbc61374878ecead104c74ab9960d3adcccfee23205","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"2768ef564cfc0689a1b76106c421a2909bdff0acbe87da010785adab80efdd5c","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"70bbfaec021ac4a0c805374225b55d70887f987df8b8dd7711d79464bb7b4385","869089d60b67219f63e6aca810284c89bae1b384b5cbc7ce64e53d82ad223ed5",{"version":"18338b6a4b920ec7d49b4ffafcbf0fa8a86b4bfd432966efd722dab611157cf4","affectsGlobalScope":true},"62a0875a0397b35a2364f1d401c0ce17975dfa4d47bf6844de858ae04da349f9","ee7491d0318d1fafcba97d5b72b450eb52671570f7a4ecd9e8898d40eaae9472","e3e7d217d89b380c1f34395eadc9289542851b0f0a64007dfe1fb7cf7423d24e","fd79909e93b4d50fd0ed9f3d39ddf8ba0653290bac25c295aac49f6befbd081b","345a9cc2945406f53051cd0e9b51f82e1e53929848eab046fdda91ee8aa7da31","9debe2de883da37a914e5e784a7be54c201b8f1d783822ad6f443ff409a5ea21","dee5d5c5440cda1f3668f11809a5503c30db0476ad117dd450f7ba5a45300e8f","f5e396c1424c391078c866d6f84afe0b4d2f7f85a160b9c756cd63b5b1775d93","5caa6f4fff16066d377d4e254f6c34c16540da3809cd66cd626a303bc33c419f","730d055528bdf12c8524870bb33d237991be9084c57634e56e5d8075f6605e02","e475453e7140e95542332943d3052fe4c7430ad1efce42b3e9157f1fee8cbc5f","ebfdf904255ce746c9d30117c2edef355fb19bf7650478d2405f39f0e4f302e6","f3f63b48addb8e2ea9d20bb671c3c306413b3daa39996d0ae52f63d8e32158e1","a50599c08934a62f11657bdbe0dc929ab66da1b1f09974408fd9a33ec1bb8060","5a20e7d6c630b91be15e9b837853173829d00273197481dc8d3e94df61105a71","8d478048d71cc16f806d4b71b252ecb67c7444ccf4f4b09b29a312712184f859","b4000a0a525fa921e896cbdb32ae802c9684f0fd371b5fc69e7310f7918cc2c3","9df4662ca3dbc2522bc115833ee04faa1afbb4e249a85ef4a0a09c621346bd08","b25d9065cf1c1f537a140bbc508e953ed2262f77134574c432d206ff36f4bdbf","1b103313097041aa9cd705a682c652f08613cb5cf8663321061c0902f845e81c","68ccec8662818911d8a12b8ed028bc5729fb4f1d34793c4701265ba60bc73cf4","5f85b8b79dc4d36af672c035b2beb71545de63a5d60bccbeee64c260941672ab","b3d48529ae61dc27d0bfbfa2cb3e0dff8189644bd155bdf5df1e8e14669f7043","40fe4b689225816b31fe5794c0fbf3534568819709e40295ead998a2bc1ab237","f65b5e33b9ad545a1eebbd6afe857314725ad42aaf069913e33f928ab3e4990a","fb6f2a87beb7fb1f4c2b762d0c76a9459fc91f557231569b0ee21399e22aa13d","31c858dc85996fac4b7fa944e1016d5c72f514930a72357ab5001097bf6511c7","3de30a871b3340be8b679c52aa12f90dd1c8c60874517be58968fdbcc4d79445","6fd985bd31eaf77542625306fb0404d32bff978990f0a06428e5f0b9a3b58109","34693fb4a5e771e11668219221344dd1bd7d8b77ed005a1c1d965fb559be8406","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419",{"version":"e44ea2d6b7b853f6c81482416db43dafc11944561b810e469ae423085511ce7e","affectsGlobalScope":true},"f51b4042a3ac86f1f707500a9768f88d0b0c1fc3f3e45a73333283dea720cdc6",{"version":"a7289d79eb84a59d2475b4d0136b4404be3cfdd17c3ea46b9194add1d645df01","affectsGlobalScope":true},"0bb26fa2a90ee890eed57ee812c71fa84d3d07850163ec4a204de86412cc57c1","132ca47da601c60141dd6f10bd08c70d0620177e5638439df2464ec3945b6d98",{"version":"55d2bbae076fed7269c3e16faeb32f988f558427b7a1c3bf04aa7551ab86ae90","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","cf83847c9264dcd592b6c89c1542925b899b277228687f3638614e3fa784cf76","3a41ebe7f089d50f447466b35b6cabb8b584c0994fc9809d0cd0a4ebc41e1239","7693b90b3075deaccafd5efb467bf9f2b747a3075be888652ef73e64396d8628","0c42d6cba77d9ad1cf45256ccb8489aa502fe2dbee1ec9048a29d49f5d532e73","2cf89c17245db65d175d4ef699cd68187516f9b3ae5c572fc0b9ad60f35dc223","5f20d20b7607174caf1a6da9141aeb9f2142159ae2410ca30c7a0fccd1d19c99",{"version":"a34d65f61ec5aac5b53502c8b0bd4e00d217bccb95bf94d449e2571baa11fb8c","affectsGlobalScope":true},"8d42e5af5fb0a96a77e135ce84cc60636c9bad39d9dba043a4efe9d1bdeb3cc3","56fcc451e9065eb121c9cc4c1b9994a816306f3b0b3b1fce7ad59f0ac97a9999","8a6f12b74d3e6c4f5e1b918cb8e64ae16bc6756cf0d48bcc28a28e1bf26ca0cd","c3759b5bc5cc40f5988d86a497741a80fa91258629ae50a2b3735e774cd377cc","bf268a0aea37ad4ae3b7a9b58559190b6fc01ea16a31e35cd05817a0a60f895a","45dd82fb5aea9b12b2a90b427b28f3a014e8b2ee9b74087a5ab882841cb5fbc5",{"version":"d7dad6db394a3d9f7b49755e4b610fbf8ed6eb0c9810ae5f1a119f6b5d76de45","affectsGlobalScope":true},"48b2f9302651eb31acd5be69bb4e6b35797a7fcd6b77391d10a4ccadf7dc3609","0c8c917ef15498c827bd494a0ef365e9f76deb211f8acbb86932e20489310788","dd67d2b5e4e8a182a38de8e69fb736945eaa4588e0909c14e01a14bd3cc1fd1e",{"version":"9cdc2c6144b03822c9842505d09945bcf813b86827fdb260dd7586b63abc19bf","affectsGlobalScope":true},{"version":"2923dee3c897f03e91b54a210cdbefea7290562f0ac4b948667d4c9ee844b79e","affectsGlobalScope":true},"79169698d09a2be54b14f3bcad2575b414bf3525063fde0a1e4fcd5d6efd380e","051d939bcf77caa3cef3282708ab3a6fdfb741a7366e1d74a9e7603b67417ec3","0be79b3ff0f16b6c2f9bc8c4cc7097ea417d8d67f8267f7e1eec8e32b548c2ff","1c61ffa3a71b77363b30d19832c269ef62fba787f5610cac7254728d3b69ab2e","a234d62ae81d012ebf23898a45672edf3e5c93ecf5a438a42b96c08dd68cde43","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","09ed02a725db002693236b6dfc49b2c6eb5557be1421d7fbe4f07cfe38211d92","09d801ff4a303d4976d4b9cb94af3a9097c4a70345e662d176975872d2998e51","c8558b01389b5f7610ac293aa612ccea2ae64d83af43b49f8142f190be1f414c","c40fdf7b2e18df49ce0568e37f0292c12807a0748be79e272745e7216bed2606",{"version":"b10b426c56e220b5093bf8a2446ee47af47263b7b1a03f4b18e42326b231b111","affectsGlobalScope":true},"4e228e78c1e9b0a75c70588d59288f63a6258e8b1fe4a67b0c53fe03461421d9","b4635ef36bee17e1304337d591c3b6b461ecdbc1876d0effbe6a581e62201fe5","205d50c24359ead003dc537b9b65d2a64208dfdffe368f403cf9e0357831db9e","1265fddcd0c68be9d2a3b29805d0280484c961264dd95e0b675f7bd91f777e78",{"version":"e4507242542bd499238f693d88b2d32e22177cc508854625f87bcc9bc3fa1256","affectsGlobalScope":true},{"version":"d942354e4966a98d3a92d1b1af0b4ac06f33af3f88116743e2c304c027ca26ef","affectsGlobalScope":true},"39f0808e5be3cb38674726c21fe2eb453c55e48a901679b4ce30fef85549b892","6afd66a7432ef100027ea110449e874196381e019e30eda7e7d8ca390366b7a8","befb8a9a78ac99d8fbc3ed392810489a7b90760c7a58934e8f1c8538f581cff3","e670bdf01540d35c170fae68edfd2f288eff909936780c379d6a9103b787b22c","867f95abf1df444aab146b19847391fc2f922a55f6a970a27ed8226766cee29f",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"88003d9ab15507806f41b120be6d407c1afe566c2f6689ebe3a034dd5ec0c8dc","175323e2a79a6076e0bada8a390d535a3ea817158bf1b1f46e31efca9028a0a2","7a10053aadc19335532a4d02756db4865974fd69bea5439ddcc5bfdf062d9476","4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","aed9e712a9b168345362e8f3a949f16c99ca1e05d21328f05735dfdbb24414ef","b04fe6922ed3db93afdbd49cdda8576aa75f744592fceea96fb0d5f32158c4f5","ed8d6c8de90fc2a4faaebc28e91f2469928738efd5208fb75ade0fa607e892b7","d7c52b198d680fe65b1a8d1b001f0173ffa2536ca2e7082431d726ce1f6714cd","c07f251e1c4e415a838e5498380b55cfea94f3513229de292d2aa85ae52fc3e9","0ed401424892d6bf294a5374efe512d6951b54a71e5dd0290c55b6d0d915f6f7","b945be6da6a3616ef3a250bfe223362b1c7c6872e775b0c4d82a1bf7a28ff902","beea49237dd7c7110fabf3c7509919c9cb9da841d847c53cac162dc3479e2f87","0f45f8a529c450d8f394106cc622bff79e44a1716e1ac9c3cc68b43f7ecf65ee","c624ce90b04c27ce4f318ba6330d39bde3d4e306f0f497ce78d4bda5ab8e22ca","9b8253aa5cb2c82d505f72afdbf96e83b15cc6b9a6f4fadbbbab46210d5f1977","86a8f52e4b1ac49155e889376bcfa8528a634c90c27fec65aa0e949f77b740c5","aab5dd41c1e2316cc0b42a7dd15684f8582d5a1d16c0516276a2a8a7d0fecd9c","59948226626ee210045296ba1fc6cb0fe748d1ff613204e08e7157ab6862dee7","ec3e54d8b713c170fdc8110a7e4a6a97513a7ab6b05ac9e1100cb064d2bb7349","43beb30ecb39a603fde4376554887310b0699f25f7f39c5c91e3147b51bb3a26","666b77d7f06f49da114b090a399abbfa66d5b6c01a3fd9dc4f063a52ace28507","31997714a93fbc570f52d47d6a8ebfb021a34a68ea9ba58bbb69cdec9565657e","6032e4262822160128e644de3fc4410bcd7517c2f137525fd2623d2bb23cb0d3","8bd5c9b1016629c144fd228983395b9dbf0676a576716bc3d316cab612c33cd5","2ed90bd3925b23aed8f859ffd0e885250be0424ca2b57e9866dabef152e1d6b7","93f6bd17d92dab9db7897e1430a5aeaa03bcf51623156213d8397710367a76ce","3f62b770a42e8c47c7008726f95aa383e69d97e85e680d237b99fcb0ee601dd8","5b84cfe78028c35c3bb89c042f18bf08d09da11e82d275c378ae4d07d8477e6c","980d21b0081cbf81774083b1e3a46f4bbdcd2b68858df0f66d7fad9c82bc34bc","6a9c5127096b35264eb7cd21b2417bfc1d42cceca9ba4ce2bb0c3410b7816042","93b7325b49dfbf613d940ed0e471216657b2d77459dac34f1b5b1678f08f884c","b17f3bb7d8333479c7e45e5f3d876761b9bca58f97594eca3f6a944fd825e632","3c1f1236cce6d6e0c4e2c1b4371e6f72d7c14842ecd76a98ed0748ee5730c8f3","6d7f58d5ea72d7834946fd7104a734dc7d40661be8b2e1eaced1ddce3268ebaf","4c26222991e6c97d5a8f541d4f2c67585eda9e8b33cf9f52931b098045236e88","277983d414aa99d78655186c3ee1e1c38c302e336aff1d77b47fcdc39d8273fe","47383b45796d525a4039cd22d2840ac55a1ff03a43d027f7f867ba7314a9cf53","6548773b3abbc18de29176c2141f766d4e437e40596ee480447abf83575445ad","6ddd27af0436ce59dd4c1896e2bfdb2bdb2529847d078b83ce67a144dff05491","816264799aef3fd5a09a3b6c25217d5ec26a9dfc7465eac7d6073bcdc7d88f3f","9f9e5bae412fa5909fae636d6733aee27a108cc2ed5b13980611016336774d3c","662fe197bba64bd3f17ee118058cd2d0d2dbe33d7c0c865fd6365d90bfc44e1e","030519c351f800551cac2658038804969ca4584d2c0175a710602ac234ca1340","0278a6939ca83cd040b08ff8c5fc7838b6693ddc52f22526bf158e6b10e0246c","c2d6206e5ba4fd3063b01218c2b3b997afc1cfbeb49fcee991fa8595842ce53d","75b22c74010ba649de1a1676a4c4b8b5bb4294fecd05089e2094429b16d7840c","4df0891b133884cd9ed752d31c7d0ec0a09234e9ed5394abffd3c660761598db","b603b62d3dcd31ef757dc7339b4fa8acdbca318b0fb9ac485f9a1351955615f9","e642bd47b75ad6b53cbf0dfd7ddfa0f120bd10193f0c58ec37d87b59bf604aca","be90b24d2ee6f875ce3aaa482e7c41a54278856b03d04212681c4032df62baf9","78f5ff400b3cb37e7b90eef1ff311253ed31c8cb66505e9828fad099bffde021","372c47090e1131305d163469a895ff2938f33fa73aad988df31cd31743f9efb6","71c67dc6987bdbd5599353f90009ff825dd7db0450ef9a0aee5bb0c574d18512","6f12403b5eca6ae7ca8e3efe3eeb9c683b06ce3e3844ccfd04098d83cd7e4957","282c535df88175d64d9df4550d2fd1176fd940c1c6822f1e7584003237f179d3","c3a4752cf103e4c6034d5bd449c8f9d5e7b352d22a5f8f9a41a8efb11646f9c2","11a9e38611ac3c77c74240c58b6bd64a0032128b29354e999650f1de1e034b1c","4ed103ca6fff9cb244f7c4b86d1eb28ce8069c32db720784329946731badb5bb","d738f282842970e058672663311c6875482ee36607c88b98ffb6604fba99cb2a","ec859cd8226aa623e41bbb47c249a55ee16dc1b8647359585244d57d3a5ed0c7","8891c6e959d253a66434ff5dc9ae46058fb3493e84b4ca39f710ef2d350656b1","c4463cf02535444dcbc3e67ecd29f1972490f74e49957d6fd4282a1013796ba6","0cb0a957ff02de0b25fd0f3f37130ca7f22d1e0dea256569c714c1f73c6791f8","2f5075dc512d51786b1ba3b1696565641dfaae3ac854f5f13d61fa12ef81a47e","ca3353cc82b1981f0d25d71d7432d583a6ef882ccdea82d65fbe49af37be51cb","50679a8e27aacf72f8c40bcab15d7ef5e83494089b4726b83eec4554344d5cdc","45351e0d51780b6f4088277a4457b9879506ee2720a887de232df0f1efcb33d8","5d697a4b315cc5bb3042ae869abffd10c3b0d7b182cda0e4c45d8819937e5796","563fa27fdaec8f195b84f71a7af0ef48d30d5cc830575db86da86a63a470c8e6","6ee58aa536dabb19b09bc036f1abe83feb51e13d63b23d30b2d0631a2de99b8f","8aceb205dcc6f814ad99635baf1e40b6e01d06d3fe27b72fd766c6d0b8c0c600","299567f84bfedd1468dca2755a829cb19e607a6811673788807dc8921e211bc9","795d9fb85aad92221504db74dd179b506bd189bba0c104426f7e7bb8a66ffee5","1311bc194e0a69fe61031e852c1c0b439e2a2a3d1d5e2d8ff795499b9f283459","4b7ce19369d7e7fae76720c2c6c7f671bf3fa0f7093edb864f1ac358ca7c456c","c972ef44deca1fa8fab465915ffa00f82e126aacf3dfc8979c03b1b066ce5bb6","30285a1011c6d6b52f3ba3abb0a984be8148c05cdefb8eb6eb562335a3991f35","a45ee7555d019a67fbe092898d1aef0b1d02a9f6679ab84461ff515b4460d706","29c188a2c660f99f1b4835022e011c4268d7af989d4b7dda33c0a69ca1a777f8","1ed0bf138e87912d741e28333b58cbf814ae863783b3b404d2454cbabb9c5fc0","3452ee7d8ef0b1bbd47b2a56924a1dc3c79dc84a19d212e9dc496f92e4943aa0","9990f9e566bc3c2c6e38df81294fb756e7f5b7b0e5bb17ab75384e190548b4b6","fcc8beef29f39f09b1d9c9f99c42f9fed605ab1c28d2a630185f732b9ba53763","d6e6620a30d582182acc3f0a992a0c311adc589f111096aea11ab83fc09a5ccc","6213b8f686f56beab22b59a0f468590fd3a4c5fa931236a017efeca91d7c9584","c451cec9a588b1f105a5ea2c6063d4fca112b9d70105cacdadda0e1ef67e9379","cb047832dc68f5a2c41c62c5e95ddcacbae3a8b034d40cd15319a8cb7f25104a","980336ccdfc3c08f3c3b201aa6662e6016e20f15847f8465b68f3e8e67b4665c","5a3493939995f46ff3d9073cd534fb8961c3bf4e08c71db27066ff03d906dea8","bb5a2ac327605ebebf831c469b05bd34a33a6a46ee8c1edd9f3310aad32cf6a1",{"version":"1a7cee6cce12f69f55f8fc7a55093a26a6618596399e25ccb7b29d86bc5df45f","signature":"df20a7f284efb17924fa263990d4443a3a35be7d1cea4255d701d65e10c83a6b"},{"version":"a39c32b055d2e6103e5c49b9aed2d7bb5b06571c98fc31105264d280431bdbd7","signature":"4c7d408179ccde48a64425fb7607edb0bffbeb163db2136e40bafbaad23920d8"},{"version":"618ebb93311695a13844118cdc9a7314dd3a2c6f35092d87f76828cac555ddc9","signature":"205a924bcf3ae2b0a0457e673b398a657727657c556af44a9c5b3e50d9a78e6f"},{"version":"d36c3d116ce59a3f072c0014f0c020c76e916ba906066ddc4f193f546a43bceb","signature":"bae07ae012cf5aa934367104c08dbc9e51868c6a55ca01ca469bc4c0a5adb124"},{"version":"9bed8447acaa89be63540ec500b165442fcb0de020015175b5a5c66d42a61c4a","signature":"20db0d7358c66f3377bb7efbd9e35e64a0cc63497032d6f15c59a9b38a9ea86a"},{"version":"ae2fbee237555ff41daf5275bcc337870886f673b2f029815a8cb6802dfaf2ff","signature":"d59edc34940226cdbaabb618711d4d4320f7843eccc65304907ac5e01d81d87c"},"0df1434fa41979b81c7872ffdf6bb4890de5d3f1deddec785330ccfbd20928e5",{"version":"6fe7571c8a80808224648046008d1366ba4e29206ac79ce4c56d6fab3350492b","signature":"486a89a6c9476f07c0773e7eb952b1b583bf8f642f36db4f5024b5630047907e"},{"version":"bfd04369e2e4fca719f3744a16d50f254ba40b15fc2e5bd47e4a4a8b4a2b6a7b","signature":"d2e83cf885ffa1c0bbf9a9946b1c417d9c1f4595fd220d78664f78a7603f8c9f"},{"version":"a64568c16a5821575de4f6280ba1ea4686a1ceecd649fa90ba957c8b1b007013","signature":"b2951644f0ad9e64f9707362b3999bdcb506ffc705815ff35ae493ab9cb7d940"},{"version":"a6fba87fb6b1341d41a144f2b9034ab8e814e4c959c6e3807fe99f1f1068ab02","signature":"761ed14549be69c0cf6ccbfcdb2c8b94a3a852c23d47e2ebf52783e74b37f2ec"},{"version":"fd9e6d285b92b7068bb33981aee1c1bb4d0623ea93a224009443dd911c9ba607","signature":"fa12c3272544550de3bd088f098cf14462cfcaec9c7376903a9aa9e5ebecde10"},"a5aaeca001d2f69093d04aac4db321e4c338fd9b20cbc4f0b0af3dc6ae0f235b","cc957354aa3c94c9961ebf46282cfde1e81d107fc5785a61f62c67f1dd3ac2eb","8041cfce439ff29d339742389de04c136e3029d6b1817f07b2d7fcbfb7534990","93de1c6dab503f053efe8d304cb522bb3a89feab8c98f307a674a4fae04773e9","29a46d003ca3c721e6405f00dee7e3de91b14e09701eba5d887bf76fb2d47d38","069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"ee7d8894904b465b072be0d2e4b45cf6b887cdba16a467645c4e200982ece7ea","f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","df95e00612c1faa5e0e7ef0dba589b18665bbeb3221db2b6cee1fe4d0e61921f","afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","8b06ac3faeacb8484d84ddb44571d8f410697f98d7bfa86c0fda60373a9f5215","7eb06594824ada538b1d8b48c3925a83e7db792f47a081a62cf3e5c4e23cf0ee","f5638f7c2f12a9a1a57b5c41b3c1ea7db3876c003bab68e6a57afd6bcc169af0","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","d8aab31ba8e618cc3eea10b0945de81cb93b7e8150a013a482332263b9305322","462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","7adecb2c3238794c378d336a8182d4c3dd2c4fa6fa1785e2797a3db550edea62","dc12dc0e5aa06f4e1a7692149b78f89116af823b9e1f1e4eae140cd3e0e674e6","1bfc6565b90c8771615cd8cfcf9b36efc0275e5e83ac7d9181307e96eb495161","8a8a96898906f065f296665e411f51010b51372fa260d5373bf9f64356703190","7f82ef88bdb67d9a850dd1c7cd2d690f33e0f0acd208e3c9eba086f3670d4f73",{"version":"ccfd8774cd9b929f63ff7dcf657977eb0652e3547f1fcac1b3a1dc5db22d4d58","affectsGlobalScope":true},"d92dc90fecd2552db74d8dc3c6fb4db9145b2aa0efe2c127236ba035969068d4","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","675e702f2032766a91eeadee64f51014c64688525da99dccd8178f0c599f13a8","458111fc89d11d2151277c822dfdc1a28fa5b6b2493cf942e37d4cd0a6ee5f22","19c816167e076e7c24f074389c6cf3ed87bdbb917d1ea439ca281f9d26db2439","187119ff4f9553676a884e296089e131e8cc01691c546273b1d0089c3533ce42","febf0b2de54781102b00f61653b21377390a048fbf5262718c91860d11ff34a6","98f9d826db9cd99d27a01a59ee5f22863df00ccf1aaf43e1d7db80ebf716f7c3","0aaef8cded245bf5036a7a40b65622dd6c4da71f7a35343112edbe112b348a1e","00baffbe8a2f2e4875367479489b5d43b5fc1429ecb4a4cc98cfc3009095f52a","dcd91d3b697cb650b95db5471189b99815af5db2a1cd28760f91e0b12ede8ed5","3c92b6dfd43cc1c2485d9eba5ff0b74a19bb8725b692773ef1d66dac48cda4bd","3cf0d343c2276842a5b617f22ba82af6322c7cfe8bb52238ffc0c491a3c21019","df996e25faa505f85aeb294d15ebe61b399cf1d1e49959cdfaf2cc0815c203f9",{"version":"f2eff8704452659641164876c1ef0df4174659ce7311b0665798ea3f556fa9ad","affectsGlobalScope":true},"8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","2b8264b2fefd7367e0f20e2c04eed5d3038831fe00f5efbc110ff0131aab899b","a73a445c1e0a6d0f8b48e8eb22dc9d647896783a7f8991cbbc31c0d94bf1f5a2","d88a5e779faf033be3d52142a04fbe1cb96009868e3bbdd296b2bc6c59e06c0e","cd1d2f103b79002cd94b85a640a103f094227a2c4c53bc8af1fdbf4e13d9729e","5e379df3d61561c2ed7789b5995b9ba2143bbba21a905e2381e16efe7d1fa424","f07a137bbe2de7a122c37bfea00e761975fb264c49f18003d398d71b3fb35a5f","3dce33e7eb25594863b8e615f14a45ab98190d85953436750644212d8a18c066","2b93035328f7778d200252681c1d86285d501ed424825a18f81e4c3028aa51d9","2ac9c8332c5f8510b8bdd571f8271e0f39b0577714d5e95c1e79a12b2616f069","42c21aa963e7b86fa00801d96e88b36803188018d5ad91db2a9101bccd40b3ff","d31eb848cdebb4c55b4893b335a7c0cca95ad66dee13cbb7d0893810c0a9c301","b9f96255e1048ed2ea33ec553122716f0e57fc1c3ad778e9aa15f5b46547bd23","7a9e0a564fee396cacf706523b5aeed96e04c6b871a8bebefad78499fbffc5bc","906c751ef5822ec0dadcea2f0e9db64a33fb4ee926cc9f7efa38afe5d5371b2a","5387c049e9702f2d2d7ece1a74836a14b47fbebe9bbeb19f94c580a37c855351","c68391fb9efad5d99ff332c65b1606248c4e4a9f1dd9a087204242b56c7126d6","e9cf02252d3a0ced987d24845dcb1f11c1be5541f17e5daa44c6de2d18138d0c","e8b02b879754d85f48489294f99147aeccc352c760d95a6fe2b6e49cd400b2fe","9f6908ab3d8a86c68b86e38578afc7095114e66b2fc36a2a96e9252aac3998e0","0eedb2344442b143ddcd788f87096961cd8572b64f10b4afc3356aa0460171c6","71405cc70f183d029cc5018375f6c35117ffdaf11846c35ebf85ee3956b1b2a6","c68baff4d8ba346130e9753cefe2e487a16731bf17e05fdacc81e8c9a26aae9d","2cd15528d8bb5d0453aa339b4b52e0696e8b07e790c153831c642c3dea5ac8af","479d622e66283ffa9883fbc33e441f7fc928b2277ff30aacbec7b7761b4e9579","ade307876dc5ca267ca308d09e737b611505e015c535863f22420a11fffc1c54","f8cdefa3e0dee639eccbe9794b46f90291e5fd3989fcba60d2f08fde56179fb9","86c5a62f99aac7053976e317dbe9acb2eaf903aaf3d2e5bb1cafe5c2df7b37a8","2b300954ce01a8343866f737656e13243e86e5baef51bd0631b21dcef1f6e954","a2d409a9ffd872d6b9d78ead00baa116bbc73cfa959fce9a2f29d3227876b2a1","b288936f560cd71f4a6002953290de9ff8dfbfbf37f5a9391be5c83322324898","61178a781ef82e0ff54f9430397e71e8f365fc1e3725e0e5346f2de7b0d50dfa","6a6ccb37feb3aad32d9be026a3337db195979cd5727a616fc0f557e974101a54","c649ea79205c029a02272ef55b7ab14ada0903db26144d2205021f24727ac7a3","38e2b02897c6357bbcff729ef84c736727b45cc152abe95a7567caccdfad2a1d","d6610ea7e0b1a7686dba062a1e5544dd7d34140f4545305b7c6afaebfb348341","3dee35db743bdba2c8d19aece7ac049bde6fa587e195d86547c882784e6ba34c","b15e55c5fa977c2f25ca0b1db52cfa2d1fd4bf0baf90a8b90d4a7678ca462ff1","f41d30972724714763a2698ae949fbc463afb203b5fa7c4ad7e4de0871129a17","843dd7b6a7c6269fd43827303f5cbe65c1fecabc30b4670a50d5a15d57daeeb9","f06d8b8567ee9fd799bf7f806efe93b67683ef24f4dea5b23ef12edff4434d9d","6017384f697ff38bc3ef6a546df5b230c3c31329db84cbfe686c83bec011e2b2","e1a5b30d9248549ca0c0bb1d653bafae20c64c4aa5928cc4cd3017b55c2177b0","a593632d5878f17295bd53e1c77f27bf4c15212822f764a2bfc1702f4b413fa0","a868a534ba1c2ca9060b8a13b0ffbbbf78b4be7b0ff80d8c75b02773f7192c29","da7545aba8f54a50fde23e2ede00158dc8112560d934cee58098dfb03aae9b9d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","a1a261624efb3a00ff346b13580f70f3463b8cdcc58b60f5793ff11785d52cab","f83b320cceccfc48457a818d18fc9a006ab18d0bdd727aa2c2e73dc1b4a45e98","9d92b037978bb9525bc4b673ebddd443277542e010c0aef019c03a170ccdaa73","b0d10e46cfe3f6c476b69af02eaa38e4ccc7430221ce3109ae84bb9fb8282298","fab58e600970e66547644a44bc9918e3223aa2cbd9e8763cec004b2cfb48827e","70e9a18da08294f75bf23e46c7d69e67634c0765d355887b9b41f0d959e1426e","ed44ba6b95f08b758748be7902e0cc54178b1337c56d0e2469c77b03f63ac73b"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":true,"esModuleInterop":true,"inlineSources":true,"module":1,"outDir":"./types","rootDir":"../src","sourceMap":true,"strict":true,"target":7},"fileIdsList":[[119,228],[119],[90,119,126,127,128,143],[119,127,128,144,145],[119,126,127],[119,126,143,146,149],[119,126,146,149,150],[119,147,148,149,151,152],[119,126,149],[119,126,143,146,147,148,151],[119,126,134],[119,126],[90,119,126],[79,119,126],[119,130,131,132,133,134,135,136,137,138,139,140,141,142],[119,126,132,133],[119,126,132,134],[119,165,166],[119,166,167],[119,166,167,168,169],[119,165],[63,119],[66,119],[63,66,119],[64,65,66,67,68,69,70,71,72,73,74,119,154,157,158,159,160,161,162,163,164],[57,63,64,119],[66,72,74,119,153],[119,156],[66,67,119],[63,119,160],[119,198,199],[119,228,229,230,231,232],[119,228,230],[119,155],[119,234,235,236],[91,119,126],[119,239],[119,240],[119,251],[119,245,250],[119,254,256,257,258,259,260,261,262,263,264,265,266],[119,254,255,257,258,259,260,261,262,263,264,265,266],[119,255,256,257,258,259,260,261,262,263,264,265,266],[119,254,255,256,258,259,260,261,262,263,264,265,266],[119,254,255,256,257,259,260,261,262,263,264,265,266],[119,254,255,256,257,258,260,261,262,263,264,265,266],[119,254,255,256,257,258,259,261,262,263,264,265,266],[119,254,255,256,257,258,259,260,262,263,264,265,266],[119,254,255,256,257,258,259,260,261,263,264,265,266],[119,254,255,256,257,258,259,260,261,262,264,265,266],[119,254,255,256,257,258,259,260,261,262,263,265,266],[119,254,255,256,257,258,259,260,261,262,263,264,266],[119,254,255,256,257,258,259,260,261,262,263,264,265],[75,119],[78,119],[79,84,110,119],[80,90,91,98,107,118,119],[80,81,90,98,119],[82,119],[83,84,91,99,119],[84,107,115,119],[85,87,90,98,119],[86,119],[87,88,119],[89,90,119],[90,119],[90,91,92,107,118,119],[90,91,92,107,119],[90,93,98,107,118,119],[90,91,93,94,98,107,115,118,119],[93,95,107,115,118,119],[75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],[90,96,119],[97,118,119,123],[87,90,98,107,119],[99,119],[100,119],[78,101,119],[102,117,119,123],[103,119],[104,119],[90,105,119],[105,106,119,121],[79,90,107,108,109,119],[79,107,109,119],[107,108,119],[110,119],[111,119],[90,113,114,119],[113,114,119],[84,98,115,119],[116,119],[98,117,119],[79,93,104,118,119],[84,119],[107,119,120],[119,121],[119,122],[79,84,90,92,101,107,118,119,121,123],[107,119,124],[119,126,272],[119,275,314],[119,275,299,314],[119,314],[119,275],[119,275,300,314],[119,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313],[119,300,314],[119,315],[119,319],[119,183],[119,183,184,185,186,187],[119,172,173,174,175,176,177,178,179,180,181,182],[119,243,246],[119,243,246,247,248],[119,245],[119,242,249],[119,244],[56,58,59,60,61,62,119],[56,57,119],[58,119],[57,58,119],[56,58,119],[119,165,170,192],[119,204,205],[119,165,188,189,190],[119,189],[119,171,189,190,191],[119,190],[119,193],[119,193,194,197,201],[119,200],[119,165,195,196],[119,165,209],[119,209,210,211,212,213,214],[119,165,208],[119,165,224,225,226],[119,170,224,225],[119,216,220,221,224,225,226,227],[119,165,215,222,224,226],[119,165,192,202,203,221,224,227],[119,165,170,188,192,202,203,206,207,216,221,223,225,226,227],[119,165,215,216,224,225],[119,217,218,219],[119,165,202,215,216,225,226],[119,165,215,216,225,226],[119,165,192,224],[119,165,215,225,227],[165,225],[165,170,224,225],[165,215,222],[165,192,202,221,224,227],[165,188,192,202,206,221,223,225,227],[216,224,225],[217,218,219,222],[216,225],[165,216,225],[165,192,224],[165,215,225,227]],"referencedMap":[[230,1],[228,2],[144,3],[127,2],[146,4],[128,5],[145,2],[150,6],[151,7],[147,7],[153,8],[148,7],[152,9],[149,10],[135,11],[132,12],[139,13],[133,11],[130,14],[138,2],[143,15],[140,2],[141,2],[142,2],[137,12],[134,16],[131,2],[136,17],[195,2],[167,18],[169,2],[168,19],[170,20],[166,21],[208,13],[64,22],[65,22],[67,23],[68,22],[69,22],[70,24],[71,2],[72,2],[73,2],[66,22],[165,25],[74,26],[154,27],[157,28],[158,2],[159,2],[160,2],[161,2],[162,2],[163,29],[164,30],[198,2],[200,31],[199,2],[233,32],[229,1],[231,33],[232,1],[196,12],[156,34],[207,2],[234,2],[237,35],[235,2],[238,36],[239,2],[240,37],[241,38],[252,39],[251,40],[236,2],[253,2],[255,41],[256,42],[254,43],[257,44],[258,45],[259,46],[260,47],[261,48],[262,49],[263,50],[264,51],[265,52],[266,53],[267,2],[155,2],[75,54],[76,54],[78,55],[79,56],[80,57],[81,58],[82,59],[83,60],[84,61],[85,62],[86,63],[87,64],[88,64],[89,65],[90,66],[91,67],[92,68],[77,2],[125,2],[93,69],[94,70],[95,71],[126,72],[96,73],[97,74],[98,75],[99,76],[100,77],[101,78],[102,79],[103,80],[104,81],[105,82],[106,83],[107,84],[109,85],[108,86],[110,87],[111,88],[112,2],[113,89],[114,90],[115,91],[116,92],[117,93],[118,94],[119,95],[120,96],[121,97],[122,98],[123,99],[124,100],[268,2],[269,12],[270,2],[271,2],[273,101],[272,2],[274,12],[299,102],[300,103],[275,104],[278,104],[297,102],[298,102],[288,102],[287,105],[285,102],[280,102],[293,102],[291,102],[295,102],[279,102],[292,102],[296,102],[281,102],[282,102],[294,102],[276,102],[283,102],[284,102],[286,102],[290,102],[301,106],[289,102],[277,102],[314,107],[313,2],[308,106],[310,108],[309,106],[302,106],[303,106],[305,106],[307,106],[311,108],[312,108],[304,108],[306,108],[316,109],[315,2],[317,2],[318,2],[319,2],[320,110],[129,2],[242,2],[182,2],[179,111],[181,111],[180,111],[178,111],[188,112],[183,113],[187,2],[184,2],[186,2],[185,2],[174,111],[175,111],[176,111],[172,2],[173,2],[177,111],[243,2],[247,114],[249,115],[248,114],[246,116],[250,117],[203,2],[245,118],[244,2],[56,2],[63,119],[58,120],[59,121],[60,121],[61,122],[62,122],[57,123],[8,2],[10,2],[9,2],[2,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[3,2],[4,2],[22,2],[19,2],[20,2],[21,2],[23,2],[24,2],[25,2],[5,2],[26,2],[27,2],[28,2],[29,2],[6,2],[33,2],[30,2],[31,2],[32,2],[34,2],[7,2],[35,2],[40,2],[41,2],[36,2],[37,2],[38,2],[39,2],[1,2],[42,2],[204,124],[205,2],[206,125],[171,2],[191,126],[190,127],[192,128],[189,129],[194,130],[202,131],[201,132],[193,2],[197,133],[210,134],[211,134],[212,2],[213,134],[215,135],[209,136],[214,134],[227,137],[226,138],[222,139],[223,140],[225,141],[224,142],[217,143],[220,144],[218,145],[219,146],[221,147],[216,148],[47,2],[48,2],[49,2],[50,2],[51,2],[52,2],[43,2],[53,2],[54,2],[55,2],[44,2],[45,2],[46,2]],"exportedModulesMap":[[230,1],[228,2],[144,3],[127,2],[146,4],[128,5],[145,2],[150,6],[151,7],[147,7],[153,8],[148,7],[152,9],[149,10],[135,11],[132,12],[139,13],[133,11],[130,14],[138,2],[143,15],[140,2],[141,2],[142,2],[137,12],[134,16],[131,2],[136,17],[195,2],[167,18],[169,2],[168,19],[170,20],[166,21],[208,13],[64,22],[65,22],[67,23],[68,22],[69,22],[70,24],[71,2],[72,2],[73,2],[66,22],[165,25],[74,26],[154,27],[157,28],[158,2],[159,2],[160,2],[161,2],[162,2],[163,29],[164,30],[198,2],[200,31],[199,2],[233,32],[229,1],[231,33],[232,1],[196,12],[156,34],[207,2],[234,2],[237,35],[235,2],[238,36],[239,2],[240,37],[241,38],[252,39],[251,40],[236,2],[253,2],[255,41],[256,42],[254,43],[257,44],[258,45],[259,46],[260,47],[261,48],[262,49],[263,50],[264,51],[265,52],[266,53],[267,2],[155,2],[75,54],[76,54],[78,55],[79,56],[80,57],[81,58],[82,59],[83,60],[84,61],[85,62],[86,63],[87,64],[88,64],[89,65],[90,66],[91,67],[92,68],[77,2],[125,2],[93,69],[94,70],[95,71],[126,72],[96,73],[97,74],[98,75],[99,76],[100,77],[101,78],[102,79],[103,80],[104,81],[105,82],[106,83],[107,84],[109,85],[108,86],[110,87],[111,88],[112,2],[113,89],[114,90],[115,91],[116,92],[117,93],[118,94],[119,95],[120,96],[121,97],[122,98],[123,99],[124,100],[268,2],[269,12],[270,2],[271,2],[273,101],[272,2],[274,12],[299,102],[300,103],[275,104],[278,104],[297,102],[298,102],[288,102],[287,105],[285,102],[280,102],[293,102],[291,102],[295,102],[279,102],[292,102],[296,102],[281,102],[282,102],[294,102],[276,102],[283,102],[284,102],[286,102],[290,102],[301,106],[289,102],[277,102],[314,107],[313,2],[308,106],[310,108],[309,106],[302,106],[303,106],[305,106],[307,106],[311,108],[312,108],[304,108],[306,108],[316,109],[315,2],[317,2],[318,2],[319,2],[320,110],[129,2],[242,2],[182,2],[179,111],[181,111],[180,111],[178,111],[188,112],[183,113],[187,2],[184,2],[186,2],[185,2],[174,111],[175,111],[176,111],[172,2],[173,2],[177,111],[243,2],[247,114],[249,115],[248,114],[246,116],[250,117],[203,2],[245,118],[244,2],[56,2],[63,119],[58,120],[59,121],[60,121],[61,122],[62,122],[57,123],[8,2],[10,2],[9,2],[2,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[3,2],[4,2],[22,2],[19,2],[20,2],[21,2],[23,2],[24,2],[25,2],[5,2],[26,2],[27,2],[28,2],[29,2],[6,2],[33,2],[30,2],[31,2],[32,2],[34,2],[7,2],[35,2],[40,2],[41,2],[36,2],[37,2],[38,2],[39,2],[1,2],[42,2],[204,124],[205,2],[206,125],[171,2],[191,126],[190,127],[192,128],[189,129],[194,130],[202,131],[201,132],[193,2],[197,133],[210,134],[211,134],[212,2],[213,134],[215,135],[209,136],[214,134],[227,149],[226,150],[222,139],[223,151],[225,152],[224,153],[217,154],[220,155],[218,156],[219,157],[221,158],[216,159],[47,2],[48,2],[49,2],[50,2],[51,2],[52,2],[43,2],[53,2],[54,2],[55,2],[44,2],[45,2],[46,2]],"semanticDiagnosticsPerFile":[230,228,144,127,146,128,145,150,151,147,153,148,152,149,135,132,139,133,130,138,143,140,141,142,137,134,131,136,195,167,169,168,170,166,208,64,65,67,68,69,70,71,72,73,66,165,74,154,157,158,159,160,161,162,163,164,198,200,199,233,229,231,232,196,156,207,234,237,235,238,239,240,241,252,251,236,253,255,256,254,257,258,259,260,261,262,263,264,265,266,267,155,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,77,125,93,94,95,126,96,97,98,99,100,101,102,103,104,105,106,107,109,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,268,269,270,271,273,272,274,299,300,275,278,297,298,288,287,285,280,293,291,295,279,292,296,281,282,294,276,283,284,286,290,301,289,277,314,313,308,310,309,302,303,305,307,311,312,304,306,316,315,317,318,319,320,129,242,182,179,181,180,178,188,183,187,184,186,185,174,175,176,172,173,177,243,247,249,248,246,250,203,245,244,56,63,58,59,60,61,62,57,8,10,9,2,11,12,13,14,15,16,17,18,3,4,22,19,20,21,23,24,25,5,26,27,28,29,6,33,30,31,32,34,7,35,40,41,36,37,38,39,1,42,204,205,206,171,191,190,192,189,194,202,201,193,197,210,211,212,213,215,209,214,227,226,222,223,225,224,217,220,218,219,221,216,47,48,49,50,51,52,43,53,54,55,44,45,46],"latestChangedDtsFile":"./types/Caveat.d.ts"},"version":"4.9.5"}
\ No newline at end of file
diff --git a/dist/types/Caveat.d.ts b/dist/types/Caveat.d.ts
index f9baf53671295eb67afeb97c5fba4c3561cef653..8babeadf00fd958966388322f335059d2a804bd5 100644
--- a/dist/types/Caveat.d.ts
+++ b/dist/types/Caveat.d.ts
@@ -1,6 +1,6 @@
 import type { Json } from '@metamask/utils';
 import type { AsyncRestrictedMethod, RestrictedMethod, PermissionConstraint, RestrictedMethodParameters } from './Permission';
-export declare type CaveatConstraint = {
+export type CaveatConstraint = {
     /**
      * The type of the caveat. The type is presumed to be meaningful in the
      * context of the capability it is associated with.
@@ -23,7 +23,7 @@ export declare type CaveatConstraint = {
  * @template Type - The type of the caveat.
  * @template Value - The value associated with the caveat.
  */
-export declare type Caveat<Type extends string, Value extends Json> = {
+export type Caveat<Type extends string, Value extends Json> = {
     /**
      * The type of the caveat. The type is presumed to be meaningful in the
      * context of the capability it is associated with.
@@ -45,27 +45,58 @@ export declare type Caveat<Type extends string, Value extends Json> = {
  * @param caveat - The caveat object.
  * @returns The decorated restricted method implementation.
  */
-export declare type CaveatDecorator<ParentCaveat extends CaveatConstraint> = (decorated: AsyncRestrictedMethod<RestrictedMethodParameters, Json>, caveat: ParentCaveat) => AsyncRestrictedMethod<RestrictedMethodParameters, Json>;
+export type CaveatDecorator<ParentCaveat extends CaveatConstraint> = (decorated: AsyncRestrictedMethod<RestrictedMethodParameters, Json>, caveat: ParentCaveat) => AsyncRestrictedMethod<RestrictedMethodParameters, Json>;
 /**
  * Extracts a caveat value type from a caveat decorator.
  *
  * @template Decorator - The {@link CaveatDecorator} to extract a caveat value
  * type from.
  */
-declare type ExtractCaveatValueFromDecorator<Decorator extends CaveatDecorator<any>> = Decorator extends (decorated: any, caveat: infer ParentCaveat) => AsyncRestrictedMethod<any, any> ? ParentCaveat extends CaveatConstraint ? ParentCaveat['value'] : never : never;
+type ExtractCaveatValueFromDecorator<Decorator extends CaveatDecorator<CaveatConstraint>> = Decorator extends (decorated: AsyncRestrictedMethod<RestrictedMethodParameters, Json>, caveat: infer ParentCaveat) => AsyncRestrictedMethod<RestrictedMethodParameters, Json> ? ParentCaveat extends CaveatConstraint ? ParentCaveat['value'] : never : never;
 /**
  * A function for validating caveats of a particular type.
  *
+ * @see `validator` in {@link CaveatSpecificationBase} for more details.
  * @template ParentCaveat - The caveat type associated with this validator.
  * @param caveat - The caveat object to validate.
  * @param origin - The origin associated with the parent permission.
  * @param target - The target of the parent permission.
  */
-export declare type CaveatValidator<ParentCaveat extends CaveatConstraint> = (caveat: {
+export type CaveatValidator<ParentCaveat extends CaveatConstraint> = (caveat: {
     type: ParentCaveat['type'];
     value: unknown;
 }, origin?: string, target?: string) => void;
-export declare type CaveatSpecificationBase = {
+/**
+ * A function that merges two caveats of the same type. The values
+ * must be merged in the fashion of a right-biased union.
+ *
+ * @see `ARCHITECTURE.md` for more details.
+ * @template ParentCaveat - The caveat type associated with this merger.
+ * @param leftCaveat - The left-hand caveat.
+ * @param rightCaveat - The right-hand caveat.
+ * @returns The merged caveat.
+ */
+export type CaveatMerger<ParentCaveat extends CaveatConstraint> = (leftCaveat: ParentCaveat, rightCaveat: ParentCaveat) => ParentCaveat;
+/**
+ * A function that merges two caveat values of the same type. The values
+ * must be merged in the fashion of a right-biased union.
+ *
+ * @see `ARCHITECTURE.md` for more details.
+ * @template Value - The type of the values to merge.
+ * @param leftValue - The left-hand value.
+ * @param rightValue - The right-hand value.
+ * @returns The merged value.
+ */
+export type CaveatValueMerger<Value extends Json> = (leftValue: Value, rightValue: Value) => Value;
+/**
+ * Makes a {@link CaveatMerger} function for a specific caveat type.
+ *
+ * @see `ARCHITECTURE.md` for more details.
+ * @param mergeValues - The function to merge the values of two caveats.
+ * @returns The {@link CaveatMerger} function.
+ */
+export declare function makeCaveatMerger<ParentCaveat extends CaveatConstraint>(mergeValues: CaveatValueMerger<ParentCaveat['value']>): CaveatMerger<ParentCaveat>;
+export type CaveatSpecificationBase = {
     /**
      * The string type of the caveat.
      */
@@ -82,15 +113,23 @@ export declare type CaveatSpecificationBase = {
      * validating caveat values separately is strongly recommended.
      */
     validator?: CaveatValidator<any>;
+    /**
+     * The merger function used to merge caveats of the associated type during
+     * incremental permission requests. The values must be merged in the fashion
+     * of a right-biased union.
+     *
+     * @see `ARCHITECTURE.md` for more details.
+     */
+    merger?: CaveatMerger<any>;
 };
-export declare type RestrictedMethodCaveatSpecificationConstraint = CaveatSpecificationBase & {
+export type RestrictedMethodCaveatSpecificationConstraint = CaveatSpecificationBase & {
     /**
      * The decorator function used to apply the caveat to restricted method
      * requests.
      */
-    decorator: CaveatDecorator<any>;
+    decorator: CaveatDecorator<CaveatConstraint>;
 };
-export declare type EndowmentCaveatSpecificationConstraint = CaveatSpecificationBase;
+export type EndowmentCaveatSpecificationConstraint = CaveatSpecificationBase;
 /**
  * The constraint for caveat specification objects. Every {@link Caveat}
  * supported by a {@link PermissionController} must have an associated
@@ -101,11 +140,11 @@ export declare type EndowmentCaveatSpecificationConstraint = CaveatSpecification
  *
  * See the README for more details.
  */
-export declare type CaveatSpecificationConstraint = RestrictedMethodCaveatSpecificationConstraint | EndowmentCaveatSpecificationConstraint;
+export type CaveatSpecificationConstraint = RestrictedMethodCaveatSpecificationConstraint | EndowmentCaveatSpecificationConstraint;
 /**
  * Options for {@link CaveatSpecificationBuilder} functions.
  */
-declare type CaveatSpecificationBuilderOptions<DecoratorHooks extends Record<string, unknown>, ValidatorHooks extends Record<string, unknown>> = {
+type CaveatSpecificationBuilderOptions<DecoratorHooks extends Record<string, unknown>, ValidatorHooks extends Record<string, unknown>> = {
     type?: string;
     decoratorHooks?: DecoratorHooks;
     validatorHooks?: ValidatorHooks;
@@ -116,13 +155,13 @@ declare type CaveatSpecificationBuilderOptions<DecoratorHooks extends Record<str
  * that host applications can use them to generate concrete specifications
  * tailored to their requirements.
  */
-export declare type CaveatSpecificationBuilder<Options extends CaveatSpecificationBuilderOptions<any, any>, Specification extends CaveatSpecificationConstraint> = (options: Options) => Specification;
+export type CaveatSpecificationBuilder<Options extends CaveatSpecificationBuilderOptions<Record<string, unknown>, Record<string, unknown>>, Specification extends CaveatSpecificationConstraint> = (options: Options) => Specification;
 /**
  * A caveat specification export object, containing the
  * {@link CaveatSpecificationBuilder} function and "hook name" objects.
  */
-export declare type CaveatSpecificationBuilderExportConstraint = {
-    specificationBuilder: CaveatSpecificationBuilder<CaveatSpecificationBuilderOptions<any, any>, CaveatSpecificationConstraint>;
+export type CaveatSpecificationBuilderExportConstraint = {
+    specificationBuilder: CaveatSpecificationBuilder<CaveatSpecificationBuilderOptions<Record<string, unknown>, Record<string, unknown>>, CaveatSpecificationConstraint>;
     decoratorHookNames?: Record<string, true>;
     validatorHookNames?: Record<string, true>;
 };
@@ -132,7 +171,7 @@ export declare type CaveatSpecificationBuilderExportConstraint = {
  *
  * @template Specifications - The union of all {@link CaveatSpecificationConstraint} types.
  */
-export declare type CaveatSpecificationMap<CaveatSpecification extends CaveatSpecificationConstraint> = Record<CaveatSpecification['type'], CaveatSpecification>;
+export type CaveatSpecificationMap<CaveatSpecification extends CaveatSpecificationConstraint> = Record<CaveatSpecification['type'], CaveatSpecification>;
 /**
  * Extracts the union of all caveat types specified by the given
  * {@link CaveatSpecificationConstraint} type.
@@ -140,7 +179,7 @@ export declare type CaveatSpecificationMap<CaveatSpecification extends CaveatSpe
  * @template CaveatSpecification - The {@link CaveatSpecificationConstraint} to extract a
  * caveat type union from.
  */
-export declare type ExtractCaveats<CaveatSpecification extends CaveatSpecificationConstraint> = CaveatSpecification extends any ? CaveatSpecification extends RestrictedMethodCaveatSpecificationConstraint ? Caveat<CaveatSpecification['type'], ExtractCaveatValueFromDecorator<RestrictedMethodCaveatSpecificationConstraint['decorator']>> : Caveat<CaveatSpecification['type'], Json> : never;
+export type ExtractCaveats<CaveatSpecification extends CaveatSpecificationConstraint> = CaveatSpecification extends RestrictedMethodCaveatSpecificationConstraint ? Caveat<CaveatSpecification['type'], ExtractCaveatValueFromDecorator<RestrictedMethodCaveatSpecificationConstraint['decorator']>> : Caveat<CaveatSpecification['type'], Json>;
 /**
  * Extracts the type of a specific {@link Caveat} from a union of caveat
  * specifications.
@@ -148,7 +187,7 @@ export declare type ExtractCaveats<CaveatSpecification extends CaveatSpecificati
  * @template CaveatSpecifications - The union of all caveat specifications.
  * @template CaveatType - The type of the caveat to extract.
  */
-export declare type ExtractCaveat<CaveatSpecifications extends CaveatSpecificationConstraint, CaveatType extends string> = Extract<ExtractCaveats<CaveatSpecifications>, {
+export type ExtractCaveat<CaveatSpecifications extends CaveatSpecificationConstraint, CaveatType extends string> = Extract<ExtractCaveats<CaveatSpecifications>, {
     type: CaveatType;
 }>;
 /**
@@ -158,7 +197,7 @@ export declare type ExtractCaveat<CaveatSpecifications extends CaveatSpecificati
  * @template CaveatSpecifications - The union of all caveat specifications.
  * @template CaveatType - The type of the caveat whose value to extract.
  */
-export declare type ExtractCaveatValue<CaveatSpecifications extends CaveatSpecificationConstraint, CaveatType extends string> = ExtractCaveat<CaveatSpecifications, CaveatType>['value'];
+export type ExtractCaveatValue<CaveatSpecifications extends CaveatSpecificationConstraint, CaveatType extends string> = ExtractCaveat<CaveatSpecifications, CaveatType>['value'];
 /**
  * Determines whether a caveat specification is a restricted method caveat specification.
  *
diff --git a/dist/types/Caveat.d.ts.map b/dist/types/Caveat.d.ts.map
index ec5db0d93c09071a0c5e9272443ae54d0627cac3..0322874ef94153c59d71887f9f743ca1815fe736 100644
--- a/dist/types/Caveat.d.ts.map
+++ b/dist/types/Caveat.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Caveat.d.ts","sourceRoot":"","sources":["../../src/Caveat.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"Caveat.d.ts","sourceRoot":"","sources":["../../src/Caveat.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types/Permission.d.ts b/dist/types/Permission.d.ts
index dc3d017c8b2a66711d10486b0aff1c212c39039b..35e1041681cb717f98531a6f9ea7794f5d491a4c 100644
--- a/dist/types/Permission.d.ts
+++ b/dist/types/Permission.d.ts
@@ -8,11 +8,11 @@ import type { SubjectType } from './SubjectMetadataController';
  * The origin of a subject.
  * Effectively the GUID of an entity that can have permissions.
  */
-export declare type OriginString = string;
+export type OriginString = string;
 /**
  * The name of a permission target.
  */
-declare type TargetName = string;
+type TargetName = string;
 /**
  * A `ZCAP-LD`-like permission object. A permission is associated with a
  * particular `invoker`, which is the holder of the permission. Possessing the
@@ -22,7 +22,7 @@ declare type TargetName = string;
  *
  * See the README for details.
  */
-export declare type PermissionConstraint = {
+export type PermissionConstraint = {
     /**
      * The context(s) in which this capability is meaningful.
      *
@@ -67,7 +67,7 @@ export declare type PermissionConstraint = {
  * @template AllowedCaveat - A union of the allowed {@link Caveat} types
  * for the permission.
  */
-export declare type ValidPermission<Name extends TargetName, AllowedCaveat extends CaveatConstraint> = PermissionConstraint & {
+export type ValidPermission<Name extends TargetName, AllowedCaveat extends CaveatConstraint> = PermissionConstraint & {
     /**
      * The caveats of the permission.
      *
@@ -87,7 +87,7 @@ export declare type ValidPermission<Name extends TargetName, AllowedCaveat exten
  *
  * @template ArrayType - The array type whose members to extract.
  */
-declare type ExtractArrayMembers<ArrayType> = ArrayType extends [] ? never : ArrayType extends any[] | readonly any[] ? ArrayType[number] : never;
+type ExtractArrayMembers<ArrayType> = ArrayType extends [] ? never : ArrayType extends unknown[] | readonly unknown[] ? ArrayType[number] : never;
 /**
  * A utility type for extracting the allowed caveat types for a particular
  * permission from a permission specification type.
@@ -95,13 +95,13 @@ declare type ExtractArrayMembers<ArrayType> = ArrayType extends [] ? never : Arr
  * @template PermissionSpecification - The permission specification type to
  * extract valid caveat types from.
  */
-export declare type ExtractAllowedCaveatTypes<PermissionSpecification extends PermissionSpecificationConstraint> = ExtractArrayMembers<PermissionSpecification['allowedCaveats']>;
+export type ExtractAllowedCaveatTypes<PermissionSpecification extends PermissionSpecificationConstraint> = ExtractArrayMembers<PermissionSpecification['allowedCaveats']>;
 /**
  * The options object of {@link constructPermission}.
  *
  * @template TargetPermission - The {@link Permission} that will be constructed.
  */
-export declare type PermissionOptions<TargetPermission extends PermissionConstraint> = {
+export type PermissionOptions<TargetPermission extends PermissionConstraint> = {
     target: TargetPermission['parentCapability'];
     /**
      * The origin string of the subject that has the permission.
@@ -135,27 +135,27 @@ export declare function findCaveat(permission: PermissionConstraint, caveatType:
  * A requested permission object. Just an object with any of the properties
  * of a {@link PermissionConstraint} object.
  */
-declare type RequestedPermission = Partial<PermissionConstraint>;
+type RequestedPermission = Partial<PermissionConstraint>;
 /**
  * A record of target names and their {@link RequestedPermission} objects.
  */
-export declare type RequestedPermissions = Record<TargetName, RequestedPermission>;
+export type RequestedPermissions = Record<TargetName, RequestedPermission>;
 /**
  * The restricted method context object. Essentially a way to pass internal
  * arguments to restricted methods and caveat functions, most importantly the
  * requesting origin.
  */
-declare type RestrictedMethodContext = Readonly<{
+type RestrictedMethodContext = Readonly<{
     origin: OriginString;
-    [key: string]: any;
+    [key: string]: unknown;
 }>;
-export declare type RestrictedMethodParameters = Json[] | Record<string, Json>;
+export type RestrictedMethodParameters = Json[] | Record<string, Json>;
 /**
  * The arguments passed to a restricted method implementation.
  *
  * @template Params - The JSON-RPC parameters of the restricted method.
  */
-export declare type RestrictedMethodOptions<Params extends RestrictedMethodParameters | null> = {
+export type RestrictedMethodOptions<Params extends RestrictedMethodParameters | null> = {
     method: TargetName;
     params?: Params;
     context: RestrictedMethodContext;
@@ -166,26 +166,26 @@ export declare type RestrictedMethodOptions<Params extends RestrictedMethodParam
  * @template Params - The JSON-RPC parameters of the restricted method.
  * @template Result - The JSON-RPC result of the restricted method.
  */
-export declare type SyncRestrictedMethod<Params extends RestrictedMethodParameters, Result extends Json> = (args: RestrictedMethodOptions<Params>) => Result;
+export type SyncRestrictedMethod<Params extends RestrictedMethodParameters, Result extends Json> = (args: RestrictedMethodOptions<Params>) => Result;
 /**
  * An asynchronous restricted method implementation.
  *
  * @template Params - The JSON-RPC parameters of the restricted method.
  * @template Result - The JSON-RPC result of the restricted method.
  */
-export declare type AsyncRestrictedMethod<Params extends RestrictedMethodParameters, Result extends Json> = (args: RestrictedMethodOptions<Params>) => Promise<Result>;
+export type AsyncRestrictedMethod<Params extends RestrictedMethodParameters, Result extends Json> = (args: RestrictedMethodOptions<Params>) => Promise<Result>;
 /**
  * A synchronous or asynchronous restricted method implementation.
  *
  * @template Params - The JSON-RPC parameters of the restricted method.
  * @template Result - The JSON-RPC result of the restricted method.
  */
-export declare type RestrictedMethod<Params extends RestrictedMethodParameters, Result extends Json> = SyncRestrictedMethod<Params, Result> | AsyncRestrictedMethod<Params, Result>;
-export declare type ValidRestrictedMethod<MethodImplementation extends RestrictedMethod<any, any>> = MethodImplementation extends (args: infer Options) => Json | Promise<Json> ? Options extends RestrictedMethodOptions<RestrictedMethodParameters> ? MethodImplementation : never : never;
+export type RestrictedMethod<Params extends RestrictedMethodParameters, Result extends Json> = SyncRestrictedMethod<Params, Result> | AsyncRestrictedMethod<Params, Result>;
+export type ValidRestrictedMethod<MethodImplementation extends RestrictedMethod<RestrictedMethodParameters, Json>> = MethodImplementation extends (args: infer Options) => Json | Promise<Json> ? Options extends RestrictedMethodOptions<RestrictedMethodParameters> ? MethodImplementation : never : never;
 /**
  * {@link EndowmentGetter} parameter object.
  */
-export declare type EndowmentGetterParams = {
+export type EndowmentGetterParams = {
     /**
      * The origin of the requesting subject.
      */
@@ -201,24 +201,24 @@ export declare type EndowmentGetterParams = {
  * particular endowment permission. The getter receives the origin of the
  * requesting subject and, optionally, additional request metadata.
  */
-export declare type EndowmentGetter<Endowments extends Json> = (options: EndowmentGetterParams) => Endowments | Promise<Endowments>;
-export declare type PermissionFactory<TargetPermission extends PermissionConstraint, RequestData extends Record<string, unknown>> = (options: PermissionOptions<TargetPermission>, requestData?: RequestData) => TargetPermission;
-export declare type PermissionValidatorConstraint = (permission: PermissionConstraint, origin?: OriginString, target?: string) => void;
+export type EndowmentGetter<Endowments extends Json> = (options: EndowmentGetterParams) => Endowments | Promise<Endowments>;
+export type PermissionFactory<TargetPermission extends PermissionConstraint, RequestData extends Record<string, unknown>> = (options: PermissionOptions<TargetPermission>, requestData?: RequestData) => TargetPermission;
+export type PermissionValidatorConstraint = (permission: PermissionConstraint, origin?: OriginString, target?: string) => void;
 /**
  * The parameters passed to the side-effect function.
  */
-export declare type SideEffectParams<Actions extends ActionConstraint, Events extends EventConstraint> = {
+export type SideEffectParams<Actions extends ActionConstraint, Events extends EventConstraint> = {
     requestData: PermissionsRequest;
     messagingSystem: SideEffectMessenger<Actions, Events>;
 };
 /**
  * A function that will execute actions as a permission side-effect.
  */
-export declare type SideEffectHandler<Actions extends ActionConstraint, Events extends EventConstraint> = (params: SideEffectParams<Actions, Events>) => Promise<unknown>;
+export type SideEffectHandler<Actions extends ActionConstraint, Events extends EventConstraint> = (params: SideEffectParams<Actions, Events>) => Promise<unknown>;
 /**
  * The permissions side effects.
  */
-export declare type PermissionSideEffect<Actions extends ActionConstraint, Events extends EventConstraint> = {
+export type PermissionSideEffect<Actions extends ActionConstraint, Events extends EventConstraint> = {
     /**
      * A method triggered when the permission is accepted by the user
      */
@@ -253,7 +253,7 @@ export declare enum PermissionType {
  *
  * See the README for more details.
  */
-declare type PermissionSpecificationBase<Type extends PermissionType> = {
+type PermissionSpecificationBase<Type extends PermissionType> = {
     /**
      * The type of the specified permission.
      */
@@ -292,7 +292,7 @@ declare type PermissionSpecificationBase<Type extends PermissionType> = {
      *
      * If the side-effect action fails, the permission that triggered it is revoked.
      */
-    sideEffect?: PermissionSideEffect<any, any>;
+    sideEffect?: PermissionSideEffect<ActionConstraint, EventConstraint>;
     /**
      * The Permission may be available to only a subset of the subject types. If so, specify the subject types as an array.
      * If a subject with a type not in this array tries to request the permission, the call will fail.
@@ -308,12 +308,12 @@ declare type PermissionSpecificationBase<Type extends PermissionType> = {
  *
  * See the README for more details.
  */
-export declare type RestrictedMethodSpecificationConstraint = PermissionSpecificationBase<PermissionType.RestrictedMethod> & {
+export type RestrictedMethodSpecificationConstraint = PermissionSpecificationBase<PermissionType.RestrictedMethod> & {
     /**
      * The implementation of the restricted method that the permission
      * corresponds to.
      */
-    methodImplementation: RestrictedMethod<any, any>;
+    methodImplementation: RestrictedMethod<any, Json>;
 };
 /**
  * The constraint for endowment permission specification objects. Permissions
@@ -322,14 +322,14 @@ export declare type RestrictedMethodSpecificationConstraint = PermissionSpecific
  *
  * See the README for more details.
  */
-export declare type EndowmentSpecificationConstraint = PermissionSpecificationBase<PermissionType.Endowment> & {
+export type EndowmentSpecificationConstraint = PermissionSpecificationBase<PermissionType.Endowment> & {
     /**
      * The {@link EndowmentGetter} function for the permission. This function
      * will be called by the {@link PermissionController} whenever the
      * permission is invoked, after which the host can apply the endowments to
      * the requesting subject in the intended manner.
      */
-    endowmentGetter: EndowmentGetter<any>;
+    endowmentGetter: EndowmentGetter<Json>;
 };
 /**
  * The constraint for permission specification objects. Every {@link Permission}
@@ -341,11 +341,11 @@ export declare type EndowmentSpecificationConstraint = PermissionSpecificationBa
  *
  * See the README for more details.
  */
-export declare type PermissionSpecificationConstraint = EndowmentSpecificationConstraint | RestrictedMethodSpecificationConstraint;
+export type PermissionSpecificationConstraint = EndowmentSpecificationConstraint | RestrictedMethodSpecificationConstraint;
 /**
  * Options for {@link PermissionSpecificationBuilder} functions.
  */
-declare type PermissionSpecificationBuilderOptions<FactoryHooks extends Record<string, unknown>, MethodHooks extends Record<string, unknown>, ValidatorHooks extends Record<string, unknown>> = {
+type PermissionSpecificationBuilderOptions<FactoryHooks extends Record<string, unknown>, MethodHooks extends Record<string, unknown>, ValidatorHooks extends Record<string, unknown>> = {
     targetName?: string;
     allowedCaveats?: Readonly<NonEmptyArray<string>> | null;
     factoryHooks?: FactoryHooks;
@@ -358,28 +358,28 @@ declare type PermissionSpecificationBuilderOptions<FactoryHooks extends Record<s
  * default export so that host applications can use them to generate concrete
  * specifications tailored to their requirements.
  */
-export declare type PermissionSpecificationBuilder<Type extends PermissionType, Options extends PermissionSpecificationBuilderOptions<any, any, any>, Specification extends PermissionSpecificationConstraint & {
+export type PermissionSpecificationBuilder<Type extends PermissionType, Options extends PermissionSpecificationBuilderOptions<Record<string, unknown>, Record<string, unknown>, Record<string, unknown>>, Specification extends PermissionSpecificationConstraint & {
     permissionType: Type;
 }> = (options: Options) => Specification;
 /**
  * A restricted method permission export object, containing the
  * {@link PermissionSpecificationBuilder} function and "hook name" objects.
  */
-export declare type PermissionSpecificationBuilderExportConstraint = {
+export type PermissionSpecificationBuilderExportConstraint = {
     targetName: string;
-    specificationBuilder: PermissionSpecificationBuilder<PermissionType, PermissionSpecificationBuilderOptions<any, any, any>, PermissionSpecificationConstraint>;
+    specificationBuilder: PermissionSpecificationBuilder<PermissionType, PermissionSpecificationBuilderOptions<Record<string, unknown>, Record<string, unknown>, Record<string, unknown>>, PermissionSpecificationConstraint>;
     factoryHookNames?: Record<string, true>;
     methodHookNames?: Record<string, true>;
     validatorHookNames?: Record<string, true>;
 };
-declare type ValidRestrictedMethodSpecification<Specification extends RestrictedMethodSpecificationConstraint> = Specification['methodImplementation'] extends ValidRestrictedMethod<Specification['methodImplementation']> ? Specification : never;
+type ValidRestrictedMethodSpecification<Specification extends RestrictedMethodSpecificationConstraint> = Specification['methodImplementation'] extends ValidRestrictedMethod<Specification['methodImplementation']> ? Specification : never;
 /**
  * Constraint for {@link PermissionSpecificationConstraint} objects that
  * evaluates to `never` if the specification contains any invalid fields.
  *
  * @template Specification - The permission specification to validate.
  */
-export declare type ValidPermissionSpecification<Specification extends PermissionSpecificationConstraint> = Specification['targetName'] extends TargetName ? Specification['permissionType'] extends PermissionType.Endowment ? Specification : Specification['permissionType'] extends PermissionType.RestrictedMethod ? ValidRestrictedMethodSpecification<Extract<Specification, RestrictedMethodSpecificationConstraint>> : never : never;
+export type ValidPermissionSpecification<Specification extends PermissionSpecificationConstraint> = Specification['targetName'] extends TargetName ? Specification['permissionType'] extends PermissionType.Endowment ? Specification : Specification['permissionType'] extends PermissionType.RestrictedMethod ? ValidRestrictedMethodSpecification<Extract<Specification, RestrictedMethodSpecificationConstraint>> : never : never;
 /**
  * Checks that the specification has the expected permission type.
  *
@@ -398,7 +398,7 @@ export declare function hasSpecificationType<Specification extends PermissionSpe
  *
  * @template Specifications - The union of all {@link PermissionSpecificationConstraint} types.
  */
-export declare type PermissionSpecificationMap<Specification extends PermissionSpecificationConstraint> = {
+export type PermissionSpecificationMap<Specification extends PermissionSpecificationConstraint> = {
     [Name in Specification['targetName']]: Specification extends {
         targetName: Name;
     } ? Specification : never;
@@ -410,7 +410,7 @@ export declare type PermissionSpecificationMap<Specification extends PermissionS
  * @template Specification - The specification union type to extract from.
  * @template Name - The `targetName` of the specification to extract.
  */
-export declare type ExtractPermissionSpecification<Specification extends PermissionSpecificationConstraint, Name extends Specification['targetName']> = Specification extends {
+export type ExtractPermissionSpecification<Specification extends PermissionSpecificationConstraint, Name extends Specification['targetName']> = Specification extends {
     targetName: Name;
 } ? Specification : never;
 export {};
diff --git a/dist/types/Permission.d.ts.map b/dist/types/Permission.d.ts.map
index a4e8332a1e6929ae889c1e4bb65483c0fb585b41..44641c27a22c7c4a5637074e9001621c9b5d1374 100644
--- a/dist/types/Permission.d.ts.map
+++ b/dist/types/Permission.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Permission.d.ts","sourceRoot":"","sources":["../../src/Permission.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"Permission.d.ts","sourceRoot":"","sources":["../../src/Permission.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types/PermissionController.d.ts b/dist/types/PermissionController.d.ts
index 26eac21da2c35172fd21cc380595bdb1dbdfe3b9..a284d41b1eb4e8a38c583ee3446ee91191e9b6b5 100644
--- a/dist/types/PermissionController.d.ts
+++ b/dist/types/PermissionController.d.ts
@@ -3,6 +3,7 @@ import type { RestrictedControllerMessenger, ActionConstraint, EventConstraint,
 import { BaseController } from '@metamask/base-controller';
 import type { NonEmptyArray } from '@metamask/controller-utils';
 import type { Json } from '@metamask/utils';
+import type { Patch } from 'immer';
 import type { CaveatConstraint, CaveatSpecificationConstraint, CaveatSpecificationMap, ExtractCaveat, ExtractCaveats, ExtractCaveatValue } from './Caveat';
 import type { EndowmentSpecificationConstraint, ExtractAllowedCaveatTypes, OriginString, PermissionConstraint, PermissionSpecificationConstraint, PermissionSpecificationMap, RequestedPermissions, RestrictedMethod, RestrictedMethodParameters, RestrictedMethodSpecificationConstraint, SideEffectHandler, ValidPermission, ValidPermissionSpecification } from './Permission';
 import { getPermissionMiddlewareFactory } from './permission-middleware';
@@ -10,15 +11,22 @@ import type { GetSubjectMetadata } from './SubjectMetadataController';
 /**
  * Metadata associated with {@link PermissionController} subjects.
  */
-export declare type PermissionSubjectMetadata = {
+export type PermissionSubjectMetadata = {
     origin: OriginString;
 };
 /**
  * Metadata associated with permission requests.
  */
-export declare type PermissionsRequestMetadata = PermissionSubjectMetadata & {
+export type PermissionsRequestMetadata = PermissionSubjectMetadata & {
     id: string;
+    [key: string]: Json;
 };
+/**
+ * A diff produced by an incremental permissions request.
+ */
+export type PermissionsDiff = (Omit<Patch, 'value'> & {
+    value: Json;
+})[];
 /**
  * Used for prompting the user about a proposed new permission.
  * Includes information about the grantee subject, requested permissions, and
@@ -27,14 +35,24 @@ export declare type PermissionsRequestMetadata = PermissionSubjectMetadata & {
  * All properties except `permissions` are passed to any factories found for
  * the requested permissions.
  */
-export declare type PermissionsRequest = {
+export type PermissionsRequest = {
     metadata: PermissionsRequestMetadata;
     permissions: RequestedPermissions;
     [key: string]: Json;
+} & {
+    diff?: PermissionsDiff;
+};
+/**
+ * Metadata associated with an approved permission request.
+ */
+type ApprovedPermissionsMetadata = {
+    data?: Record<string, unknown>;
+    id: string;
+    origin: OriginString;
 };
-export declare type SideEffects = {
-    permittedHandlers: Record<string, SideEffectHandler<any, any>>;
-    failureHandlers: Record<string, SideEffectHandler<any, any>>;
+export type SideEffects = {
+    permittedHandlers: Record<string, SideEffectHandler<ActionConstraint, EventConstraint>>;
+    failureHandlers: Record<string, SideEffectHandler<ActionConstraint, EventConstraint>>;
 };
 /**
  * The name of the {@link PermissionController}.
@@ -43,12 +61,12 @@ declare const controllerName = "PermissionController";
 /**
  * Permissions associated with a {@link PermissionController} subject.
  */
-export declare type SubjectPermissions<Permission extends PermissionConstraint> = Record<Permission['parentCapability'], Permission>;
+export type SubjectPermissions<Permission extends PermissionConstraint> = Record<Permission['parentCapability'], Permission>;
 /**
  * Permissions and metadata associated with a {@link PermissionController}
  * subject.
  */
-export declare type PermissionSubjectEntry<SubjectPermission extends PermissionConstraint> = {
+export type PermissionSubjectEntry<SubjectPermission extends PermissionConstraint> = {
     origin: SubjectPermission['invoker'];
     permissions: SubjectPermissions<SubjectPermission>;
 };
@@ -57,72 +75,72 @@ export declare type PermissionSubjectEntry<SubjectPermission extends PermissionC
  *
  * @template SubjectPermission - The permissions of the subject.
  */
-export declare type PermissionControllerSubjects<SubjectPermission extends PermissionConstraint> = Record<SubjectPermission['invoker'], PermissionSubjectEntry<SubjectPermission>>;
+export type PermissionControllerSubjects<SubjectPermission extends PermissionConstraint> = Record<SubjectPermission['invoker'], PermissionSubjectEntry<SubjectPermission>>;
 /**
  * The state of a {@link PermissionController}.
  *
  * @template Permission - The controller's permission type union.
  */
-export declare type PermissionControllerState<Permission> = Permission extends PermissionConstraint ? {
+export type PermissionControllerState<Permission> = Permission extends PermissionConstraint ? {
     subjects: PermissionControllerSubjects<Permission>;
 } : never;
 /**
  * Gets the state of the {@link PermissionController}.
  */
-export declare type GetPermissionControllerState = ControllerGetStateAction<typeof controllerName, PermissionControllerState<PermissionConstraint>>;
+export type GetPermissionControllerState = ControllerGetStateAction<typeof controllerName, PermissionControllerState<PermissionConstraint>>;
 /**
  * Gets the names of all subjects from the {@link PermissionController}.
  */
-export declare type GetSubjects = {
+export type GetSubjects = {
     type: `${typeof controllerName}:getSubjectNames`;
     handler: () => (keyof PermissionControllerSubjects<PermissionConstraint>)[];
 };
 /**
  * Gets the permissions for specified subject
  */
-export declare type GetPermissions = {
+export type GetPermissions = {
     type: `${typeof controllerName}:getPermissions`;
     handler: GenericPermissionController['getPermissions'];
 };
 /**
  * Checks whether the specified subject has any permissions.
  */
-export declare type HasPermissions = {
+export type HasPermissions = {
     type: `${typeof controllerName}:hasPermissions`;
     handler: GenericPermissionController['hasPermissions'];
 };
 /**
  * Checks whether the specified subject has a specific permission.
  */
-export declare type HasPermission = {
+export type HasPermission = {
     type: `${typeof controllerName}:hasPermission`;
     handler: GenericPermissionController['hasPermission'];
 };
 /**
  * Directly grants given permissions for a specificed origin without requesting user approval
  */
-export declare type GrantPermissions = {
+export type GrantPermissions = {
     type: `${typeof controllerName}:grantPermissions`;
     handler: GenericPermissionController['grantPermissions'];
 };
 /**
  * Requests given permissions for a specified origin
  */
-export declare type RequestPermissions = {
+export type RequestPermissions = {
     type: `${typeof controllerName}:requestPermissions`;
     handler: GenericPermissionController['requestPermissions'];
 };
 /**
  * Removes the specified permissions for each origin.
  */
-export declare type RevokePermissions = {
+export type RevokePermissions = {
     type: `${typeof controllerName}:revokePermissions`;
     handler: GenericPermissionController['revokePermissions'];
 };
 /**
  * Removes all permissions for a given origin
  */
-export declare type RevokeAllPermissions = {
+export type RevokeAllPermissions = {
     type: `${typeof controllerName}:revokeAllPermissions`;
     handler: GenericPermissionController['revokeAllPermissions'];
 };
@@ -130,39 +148,47 @@ export declare type RevokeAllPermissions = {
  * Revokes all permissions corresponding to the specified target for all subjects.
  * Does nothing if no subjects or no such permission exists.
  */
-export declare type RevokePermissionForAllSubjects = {
+export type RevokePermissionForAllSubjects = {
     type: `${typeof controllerName}:revokePermissionForAllSubjects`;
     handler: GenericPermissionController['revokePermissionForAllSubjects'];
 };
 /**
  * Updates a caveat value for a specified caveat type belonging to a specific target and origin.
  */
-export declare type UpdateCaveat = {
+export type UpdateCaveat = {
     type: `${typeof controllerName}:updateCaveat`;
     handler: GenericPermissionController['updateCaveat'];
 };
+/**
+ * TODO:cm
+ * Updates a caveat value for a specified caveat type belonging to a specific target and origin.
+ */
+export type UpdateCaveatIncremental = {
+    type: `${typeof controllerName}:updateCaveatIncremental`;
+    handler: GenericPermissionController['updateCaveatIncremental'];
+};
 /**
  * Clears all permissions from the {@link PermissionController}.
  */
-export declare type ClearPermissions = {
+export type ClearPermissions = {
     type: `${typeof controllerName}:clearPermissions`;
     handler: () => void;
 };
 /**
  * Gets the endowments for the given subject and permission.
  */
-export declare type GetEndowments = {
+export type GetEndowments = {
     type: `${typeof controllerName}:getEndowments`;
     handler: GenericPermissionController['getEndowments'];
 };
 /**
  * The {@link ControllerMessenger} actions of the {@link PermissionController}.
  */
-export declare type PermissionControllerActions = ClearPermissions | GetEndowments | GetPermissionControllerState | GetSubjects | GetPermissions | HasPermission | HasPermissions | GrantPermissions | RequestPermissions | RevokeAllPermissions | RevokePermissionForAllSubjects | RevokePermissions | UpdateCaveat;
+export type PermissionControllerActions = ClearPermissions | GetEndowments | GetPermissionControllerState | GetSubjects | GetPermissions | HasPermission | HasPermissions | GrantPermissions | RequestPermissions | RevokeAllPermissions | RevokePermissionForAllSubjects | RevokePermissions | UpdateCaveat | UpdateCaveatIncremental;
 /**
  * The generic state change event of the {@link PermissionController}.
  */
-export declare type PermissionControllerStateChange = ControllerStateChangeEvent<typeof controllerName, PermissionControllerState<PermissionConstraint>>;
+export type PermissionControllerStateChange = ControllerStateChangeEvent<typeof controllerName, PermissionControllerState<PermissionConstraint>>;
 /**
  * The {@link ControllerMessenger} events of the {@link PermissionController}.
  *
@@ -170,21 +196,21 @@ export declare type PermissionControllerStateChange = ControllerStateChangeEvent
  * Consumers should use selector subscriptions to subscribe to relevant
  * substate.
  */
-export declare type PermissionControllerEvents = PermissionControllerStateChange;
+export type PermissionControllerEvents = PermissionControllerStateChange;
 /**
  * The external {@link ControllerMessenger} actions available to the
  * {@link PermissionController}.
  */
-declare type AllowedActions = AddApprovalRequest | HasApprovalRequest | AcceptApprovalRequest | RejectApprovalRequest | GetSubjectMetadata;
+type AllowedActions = AddApprovalRequest | HasApprovalRequest | AcceptApprovalRequest | RejectApprovalRequest | GetSubjectMetadata;
 /**
  * The messenger of the {@link PermissionController}.
  */
-export declare type PermissionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, PermissionControllerActions | AllowedActions, PermissionControllerEvents, AllowedActions['type'], never>;
-export declare type SideEffectMessenger<Actions extends ActionConstraint, Events extends EventConstraint> = RestrictedControllerMessenger<typeof controllerName, Actions | AllowedActions, Events, AllowedActions['type'] | Actions['type'], Events['type']>;
+export type PermissionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, PermissionControllerActions | AllowedActions, PermissionControllerEvents, AllowedActions['type'], never>;
+export type SideEffectMessenger<Actions extends ActionConstraint, Events extends EventConstraint> = RestrictedControllerMessenger<typeof controllerName, Actions | AllowedActions, Events, AllowedActions['type'] | Actions['type'], Events['type']>;
 /**
  * A generic {@link PermissionController}.
  */
-export declare type GenericPermissionController = PermissionController<PermissionSpecificationConstraint, CaveatSpecificationConstraint>;
+export type GenericPermissionController = PermissionController<PermissionSpecificationConstraint, CaveatSpecificationConstraint>;
 /**
  * Describes the possible results of a {@link CaveatMutator} function.
  */
@@ -204,8 +230,8 @@ export declare enum CaveatMutatorOperation {
  * @returns A tuple of the mutation result and, optionally, the new caveat
  * value.
  */
-export declare type CaveatMutator<TargetCaveat extends CaveatConstraint> = (caveatValue: TargetCaveat['value']) => CaveatMutatorResult;
-declare type CaveatMutatorResult = Readonly<{
+export type CaveatMutator<TargetCaveat extends CaveatConstraint> = (caveatValue: TargetCaveat['value']) => CaveatMutatorResult;
+type CaveatMutatorResult = Readonly<{
     operation: CaveatMutatorOperation.updateValue;
     value: CaveatConstraint['value'];
 }> | Readonly<{
@@ -221,7 +247,7 @@ declare type CaveatMutatorResult = Readonly<{
  * extract from. Necessary because {@link Permission} has a generic parameter
  * that describes the allowed caveats for the permission.
  */
-export declare type ExtractPermission<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> = ControllerPermissionSpecification extends ValidPermissionSpecification<ControllerPermissionSpecification> ? ValidPermission<ControllerPermissionSpecification['targetName'], ExtractCaveats<ControllerCaveatSpecification>> : never;
+export type ExtractPermission<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> = ControllerPermissionSpecification extends ValidPermissionSpecification<ControllerPermissionSpecification> ? ValidPermission<ControllerPermissionSpecification['targetName'], ExtractCaveats<ControllerCaveatSpecification>> : never;
 /**
  * Extracts the restricted method permission(s) specified by the given
  * permission and caveat specifications.
@@ -232,7 +258,7 @@ export declare type ExtractPermission<ControllerPermissionSpecification extends
  * extract from. Necessary because {@link Permission} has a generic parameter
  * that describes the allowed caveats for the permission.
  */
-export declare type ExtractRestrictedMethodPermission<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> = ExtractPermission<Extract<ControllerPermissionSpecification, RestrictedMethodSpecificationConstraint>, ControllerCaveatSpecification>;
+export type ExtractRestrictedMethodPermission<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> = ExtractPermission<Extract<ControllerPermissionSpecification, RestrictedMethodSpecificationConstraint>, ControllerCaveatSpecification>;
 /**
  * Extracts the endowment permission(s) specified by the given permission and
  * caveat specifications.
@@ -243,7 +269,7 @@ export declare type ExtractRestrictedMethodPermission<ControllerPermissionSpecif
  * extract from. Necessary because {@link Permission} has a generic parameter
  * that describes the allowed caveats for the permission.
  */
-export declare type ExtractEndowmentPermission<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> = ExtractPermission<Extract<ControllerPermissionSpecification, EndowmentSpecificationConstraint>, ControllerCaveatSpecification>;
+export type ExtractEndowmentPermission<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> = ExtractPermission<Extract<ControllerPermissionSpecification, EndowmentSpecificationConstraint>, ControllerCaveatSpecification>;
 /**
  * Options for the {@link PermissionController} constructor.
  *
@@ -253,7 +279,7 @@ export declare type ExtractEndowmentPermission<ControllerPermissionSpecification
  * @template ControllerCaveatSpecification - A union of the types of all
  * caveat specifications available to the controller.
  */
-export declare type PermissionControllerOptions<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> = {
+export type PermissionControllerOptions<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> = {
     messenger: PermissionControllerMessenger;
     caveatSpecifications: CaveatSpecificationMap<ControllerCaveatSpecification>;
     permissionSpecifications: PermissionSpecificationMap<ControllerPermissionSpecification>;
@@ -274,6 +300,7 @@ export declare type PermissionControllerOptions<ControllerPermissionSpecificatio
  * caveat specifications available to the controller.
  */
 export declare class PermissionController<ControllerPermissionSpecification extends PermissionSpecificationConstraint, ControllerCaveatSpecification extends CaveatSpecificationConstraint> extends BaseController<typeof controllerName, PermissionControllerState<ExtractPermission<ControllerPermissionSpecification, ControllerCaveatSpecification>>, PermissionControllerMessenger> {
+    #private;
     private readonly _caveatSpecifications;
     private readonly _permissionSpecifications;
     private readonly _unrestrictedMethods;
@@ -528,6 +555,26 @@ export declare class PermissionController<ControllerPermissionSpecification exte
      * @param caveatValue - The new value of the caveat.
      */
     updateCaveat<TargetName extends ExtractPermission<ControllerPermissionSpecification, ControllerCaveatSpecification>['parentCapability'], CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>, CaveatValue extends ExtractCaveatValue<ControllerCaveatSpecification, CaveatType>>(origin: OriginString, target: TargetName, caveatType: CaveatType, caveatValue: CaveatValue): void;
+    /**
+     * TODO:cm
+     * Updates the value of the caveat of the specified type belonging to the
+     * permission corresponding to the given subject origin and permission
+     * target.
+     *
+     * For adding new caveats, use
+     * {@link PermissionController.addCaveat}.
+     *
+     * Throws an error if no such permission or caveat exists.
+     *
+     * @template TargetName - The permission target name. Should be inferred.
+     * @template CaveatType - The valid caveat types for the permission. Should
+     * be inferred.
+     * @param origin - The origin of the subject.
+     * @param target - The target name of the permission.
+     * @param caveatType - The type of the caveat to update.
+     * @param addedCaveatValue - The value to merge with the existing caveat's value.
+     */
+    updateCaveatIncremental<TargetName extends ExtractPermission<ControllerPermissionSpecification, ControllerCaveatSpecification>['parentCapability'], CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>, CaveatValue extends ExtractCaveatValue<ControllerCaveatSpecification, CaveatType>>(origin: OriginString, target: TargetName, caveatType: CaveatType, addedCaveatValue: CaveatValue): void;
     /**
      * Sets the specified caveat on the specified permission. Overwrites existing
      * caveats of the same type in-place (preserving array order), and adds the
@@ -584,7 +631,7 @@ export declare class PermissionController<ControllerPermissionSpecification exte
      * @param target - The target name of the permission.
      * @param caveatType - The type of the caveat to remove.
      */
-    removeCaveat<TargetName extends ExtractPermission<ControllerPermissionSpecification, ControllerCaveatSpecification>['parentCapability'], CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>>(origin: OriginString, target: TargetName, caveatType: CaveatType): void;
+    removeCaveat<TargetName extends ControllerPermissionSpecification['targetName'], CaveatType extends ExtractAllowedCaveatTypes<ControllerPermissionSpecification>>(origin: OriginString, target: TargetName, caveatType: CaveatType): void;
     /**
      * Deletes the specified caveat from the specified permission. If no caveats
      * remain after deletion, the permission's caveat property is set to `null`.
@@ -623,7 +670,8 @@ export declare class PermissionController<ControllerPermissionSpecification exte
      * caveat is stringently validated – including by calling every specification
      * validator – and an error is thrown if any validation fails.
      *
-     * ATTN: This method does **not** prompt the user for approval.
+     * ATTN: This method does **not** prompt the user for approval. Use consent must
+     * first be obtained through some other means.
      *
      * @see {@link PermissionController.requestPermissions} For initiating a
      * permissions request requiring user approval.
@@ -703,9 +751,11 @@ export declare class PermissionController<ControllerPermissionSpecification exte
      */
     private validateCaveat;
     /**
-     * Initiates a permission request that requires user approval. This should
-     * always be used to grant additional permissions to a subject, unless user
-     * approval has been obtained through some other means.
+     * Initiates a permission request that requires user approval.
+     *
+     * Either this or {@link PermissionController.requestPermissionsIncremental}
+     * should always be used to grant additional permissions to a subject,
+     * unless user approval has been obtained through some other means.
      *
      * Permissions are validated at every step of the approval process, and this
      * method will reject if validation fails.
@@ -722,19 +772,52 @@ export declare class PermissionController<ControllerPermissionSpecification exte
      * id.
      * @param options.preserveExistingPermissions - Whether to preserve the
      * subject's existing permissions. Defaults to `true`.
+     * @param options.metadata - Additional metadata about the permission request.
      * @returns The granted permissions and request metadata.
      */
     requestPermissions(subject: PermissionSubjectMetadata, requestedPermissions: RequestedPermissions, options?: {
         id?: string;
         preserveExistingPermissions?: boolean;
+        metadata?: Record<string, Json>;
     }): Promise<[
         SubjectPermissions<ExtractPermission<ControllerPermissionSpecification, ControllerCaveatSpecification>>,
-        {
-            data?: Record<string, unknown>;
-            id: string;
-            origin: OriginString;
-        }
+        ApprovedPermissionsMetadata
     ]>;
+    /**
+     * Initiates an incremental permission request that prompts for user approval.
+     * Incremental permission requests allow the caller to replace existing and/or
+     * add brand new permissions and caveats for the specified subject.
+     *
+     * Incremental permission request are merged with the subject's existing permissions
+     * through a right-biased union, where the incremental permission are the right-hand
+     * side of the merger. If both sides of the merger specify the same caveats for a
+     * given permission, the caveats are merged using their specification's caveat merger
+     * property.
+     *
+     * Either this or {@link PermissionController.requestPermissions} should
+     * always be used to grant additional permissions to a subject, unless user
+     * approval has been obtained through some other means.
+     *
+     * Permissions are validated at every step of the approval process, and this
+     * method will reject if validation fails.
+     *
+     * @see {@link ApprovalController} For the user approval logic.
+     * @see {@link PermissionController.acceptPermissionsRequest} For the method
+     * that _accepts_ the request and resolves the user approval promise.
+     * @see {@link PermissionController.rejectPermissionsRequest} For the method
+     * that _rejects_ the request and the user approval promise.
+     * @param subject - The grantee subject.
+     * @param requestedPermissions - The requested permissions.
+     * @param options - Additional options.
+     * @param options.id - The id of the permissions request. Defaults to a unique
+     * id.
+     * @param options.metadata - Additional metadata about the permission request.
+     * @returns The granted permissions and request metadata.
+     */
+    requestPermissionsIncremental(subject: PermissionSubjectMetadata, requestedPermissions: RequestedPermissions, options?: {
+        id?: string;
+        metadata?: Record<string, Json>;
+    }): Promise<[SubjectPermissions<ExtractPermission<ControllerPermissionSpecification, ControllerCaveatSpecification>>, ApprovedPermissionsMetadata]>;
     /**
      * Validates requested permissions. Throws if validation fails.
      *
diff --git a/dist/types/PermissionController.d.ts.map b/dist/types/PermissionController.d.ts.map
index 889e3ebbfe8f58adbe922eebcb5b4205707a7afe..d00d5ae8586822d9553455c898c6e41c994180f5 100644
--- a/dist/types/PermissionController.d.ts.map
+++ b/dist/types/PermissionController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"PermissionController.d.ts","sourceRoot":"","sources":["../../src/PermissionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"PermissionController.d.ts","sourceRoot":"","sources":["../../src/PermissionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types/SubjectMetadataController.d.ts b/dist/types/SubjectMetadataController.d.ts
index 3563dd73ca69bb83b4d4dc15b6bdaf4d629090ee..33599daa7cef921d441c8312cf24f9f3da17d333 100644
--- a/dist/types/SubjectMetadataController.d.ts
+++ b/dist/types/SubjectMetadataController.d.ts
@@ -3,7 +3,7 @@ import { BaseController } from '@metamask/base-controller';
 import type { Json } from '@metamask/utils';
 import type { HasPermissions, PermissionSubjectMetadata } from './PermissionController';
 declare const controllerName = "SubjectMetadataController";
-declare type SubjectOrigin = string;
+type SubjectOrigin = string;
 /**
  * The different kinds of subjects that MetaMask may interact with, including
  * third parties and itself (e.g., when the background communicated with the UI).
@@ -15,37 +15,37 @@ export declare enum SubjectType {
     Website = "website",
     Snap = "snap"
 }
-export declare type SubjectMetadata = PermissionSubjectMetadata & {
+export type SubjectMetadata = PermissionSubjectMetadata & {
     [key: string]: Json;
     name: string | null;
     subjectType: SubjectType | null;
     extensionId: string | null;
     iconUrl: string | null;
 };
-declare type SubjectMetadataToAdd = PermissionSubjectMetadata & {
+type SubjectMetadataToAdd = PermissionSubjectMetadata & {
     name?: string | null;
     subjectType?: SubjectType | null;
     extensionId?: string | null;
     iconUrl?: string | null;
 } & Record<string, Json>;
-export declare type SubjectMetadataControllerState = {
+export type SubjectMetadataControllerState = {
     subjectMetadata: Record<SubjectOrigin, SubjectMetadata>;
 };
-export declare type GetSubjectMetadataState = ControllerGetStateAction<typeof controllerName, SubjectMetadataControllerState>;
-export declare type GetSubjectMetadata = {
+export type GetSubjectMetadataState = ControllerGetStateAction<typeof controllerName, SubjectMetadataControllerState>;
+export type GetSubjectMetadata = {
     type: `${typeof controllerName}:getSubjectMetadata`;
     handler: (origin: SubjectOrigin) => SubjectMetadata | undefined;
 };
-export declare type AddSubjectMetadata = {
+export type AddSubjectMetadata = {
     type: `${typeof controllerName}:addSubjectMetadata`;
     handler: (metadata: SubjectMetadataToAdd) => void;
 };
-export declare type SubjectMetadataControllerActions = GetSubjectMetadataState | GetSubjectMetadata | AddSubjectMetadata;
-export declare type SubjectMetadataStateChange = ControllerStateChangeEvent<typeof controllerName, SubjectMetadataControllerState>;
-export declare type SubjectMetadataControllerEvents = SubjectMetadataStateChange;
-declare type AllowedActions = HasPermissions;
-export declare type SubjectMetadataControllerMessenger = RestrictedControllerMessenger<typeof controllerName, SubjectMetadataControllerActions | AllowedActions, SubjectMetadataControllerEvents, AllowedActions['type'], never>;
-declare type SubjectMetadataControllerOptions = {
+export type SubjectMetadataControllerActions = GetSubjectMetadataState | GetSubjectMetadata | AddSubjectMetadata;
+export type SubjectMetadataStateChange = ControllerStateChangeEvent<typeof controllerName, SubjectMetadataControllerState>;
+export type SubjectMetadataControllerEvents = SubjectMetadataStateChange;
+type AllowedActions = HasPermissions;
+export type SubjectMetadataControllerMessenger = RestrictedControllerMessenger<typeof controllerName, SubjectMetadataControllerActions | AllowedActions, SubjectMetadataControllerEvents, AllowedActions['type'], never>;
+type SubjectMetadataControllerOptions = {
     messenger: SubjectMetadataControllerMessenger;
     subjectCacheLimit: number;
     state?: Partial<SubjectMetadataControllerState>;
diff --git a/dist/types/SubjectMetadataController.d.ts.map b/dist/types/SubjectMetadataController.d.ts.map
index 68367033a772899eea0eb0c9d98631dbdff590b2..c706dedb252ed95667f6f9fafac0353300b51688 100644
--- a/dist/types/SubjectMetadataController.d.ts.map
+++ b/dist/types/SubjectMetadataController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"SubjectMetadataController.d.ts","sourceRoot":"","sources":["../../src/SubjectMetadataController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"SubjectMetadataController.d.ts","sourceRoot":"","sources":["../../src/SubjectMetadataController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,wBAAwB,EACxB,0BAA0B,EAC1B,6BAA6B,EAC9B,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAC3D,OAAO,KAAK,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,KAAK,EAEV,cAAc,EACd,yBAAyB,EAC1B,MAAM,wBAAwB,CAAC;AAEhC,QAAA,MAAM,cAAc,8BAA8B,CAAC;AAEnD,KAAK,aAAa,GAAG,MAAM,CAAC;AAE5B;;;GAGG;AACH,oBAAY,WAAW;IACrB,SAAS,cAAc;IACvB,QAAQ,aAAa;IACrB,OAAO,YAAY;IACnB,OAAO,YAAY;IACnB,IAAI,SAAS;CACd;AAED,MAAM,MAAM,eAAe,GAAG,yBAAyB,GAAG;IACxD,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC;IACpB,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IACpB,WAAW,EAAE,WAAW,GAAG,IAAI,CAAC;IAChC,WAAW,EAAE,MAAM,GAAG,IAAI,CAAC;IAC3B,OAAO,EAAE,MAAM,GAAG,IAAI,CAAC;CACxB,CAAC;AAEF,KAAK,oBAAoB,GAAG,yBAAyB,GAAG;IACtD,IAAI,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB,WAAW,CAAC,EAAE,WAAW,GAAG,IAAI,CAAC;IACjC,WAAW,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IAC5B,OAAO,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;CACzB,GAAG,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAEzB,MAAM,MAAM,8BAA8B,GAAG;IAC3C,eAAe,EAAE,MAAM,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;CACzD,CAAC;AAUF,MAAM,MAAM,uBAAuB,GAAG,wBAAwB,CAC5D,OAAO,cAAc,EACrB,8BAA8B,CAC/B,CAAC;AAEF,MAAM,MAAM,kBAAkB,GAAG;IAC/B,IAAI,EAAE,GAAG,OAAO,cAAc,qBAAqB,CAAC;IACpD,OAAO,EAAE,CAAC,MAAM,EAAE,aAAa,KAAK,eAAe,GAAG,SAAS,CAAC;CACjE,CAAC;AAEF,MAAM,MAAM,kBAAkB,GAAG;IAC/B,IAAI,EAAE,GAAG,OAAO,cAAc,qBAAqB,CAAC;IACpD,OAAO,EAAE,CAAC,QAAQ,EAAE,oBAAoB,KAAK,IAAI,CAAC;CACnD,CAAC;AAEF,MAAM,MAAM,gCAAgC,GACxC,uBAAuB,GACvB,kBAAkB,GAClB,kBAAkB,CAAC;AAEvB,MAAM,MAAM,0BAA0B,GAAG,0BAA0B,CACjE,OAAO,cAAc,EACrB,8BAA8B,CAC/B,CAAC;AAEF,MAAM,MAAM,+BAA+B,GAAG,0BAA0B,CAAC;AAEzE,KAAK,cAAc,GAAG,cAAc,CAAC;AAErC,MAAM,MAAM,kCAAkC,GAAG,6BAA6B,CAC5E,OAAO,cAAc,EACrB,gCAAgC,GAAG,cAAc,EACjD,+BAA+B,EAC/B,cAAc,CAAC,MAAM,CAAC,EACtB,KAAK,CACN,CAAC;AAEF,KAAK,gCAAgC,GAAG;IACtC,SAAS,EAAE,kCAAkC,CAAC;IAC9C,iBAAiB,EAAE,MAAM,CAAC;IAC1B,KAAK,CAAC,EAAE,OAAO,CAAC,8BAA8B,CAAC,CAAC;CACjD,CAAC;AAEF;;;GAGG;AACH,qBAAa,yBAA0B,SAAQ,cAAc,CAC3D,OAAO,cAAc,EACrB,8BAA8B,EAC9B,kCAAkC,CACnC;IACC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAS;IAE3C,OAAO,CAAC,QAAQ,CAAC,iDAAiD,CAAc;IAEhF,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAgD;gBAE1E,EACV,SAAS,EACT,iBAAiB,EACjB,KAAU,GACX,EAAE,gCAAgC;IAmCnC;;;OAGG;IACH,UAAU,IAAI,IAAI;IAOlB;;;;;;;;;;;OAWG;IACH,kBAAkB,CAAC,QAAQ,EAAE,oBAAoB,GAAG,IAAI;IAyCxD;;;;;OAKG;IACH,kBAAkB,CAAC,MAAM,EAAE,aAAa,GAAG,eAAe,GAAG,SAAS;IAItE;;OAEG;IACH,iBAAiB,IAAI,IAAI;IAUzB;;;;;;;;;;;;OAYG;IACH,OAAO,CAAC,MAAM,CAAC,eAAe;CAiB/B"}
\ No newline at end of file
diff --git a/dist/types/errors.d.ts b/dist/types/errors.d.ts
index d992791dc23b40bb73c2c48d6d16fbd27749e4b1..be7f6fc21274b20bb4a74668b6ddadc96146c788 100644
--- a/dist/types/errors.d.ts
+++ b/dist/types/errors.d.ts
@@ -1,7 +1,8 @@
 import type { DataWithOptionalCause } from '@metamask/rpc-errors';
 import { JsonRpcError } from '@metamask/rpc-errors';
 import type { PermissionType } from './Permission';
-declare type UnauthorizedArg = {
+import type { PermissionsDiff } from './PermissionController';
+type UnauthorizedArg = {
     data?: Record<string, unknown>;
     message?: string;
 };
@@ -20,7 +21,7 @@ export declare function unauthorized(opts: UnauthorizedArg): import("@metamask/r
  * @returns The built error
  */
 export declare function methodNotFound(method: string, data?: DataWithOptionalCause): JsonRpcError<import("@metamask/rpc-errors").OptionalDataWithOptionalCause>;
-declare type InvalidParamsArg = {
+type InvalidParamsArg = {
     message?: string;
     data?: DataWithOptionalCause;
 };
@@ -57,6 +58,16 @@ export declare class InvalidSubjectIdentifierError extends Error {
 export declare class UnrecognizedSubjectError extends Error {
     constructor(origin: string);
 }
+export declare class CaveatMergerDoesNotExistError extends Error {
+    constructor(caveatType: string);
+}
+export declare class InvalidMergedPermissionsError extends Error {
+    cause: Error;
+    data: {
+        diff: PermissionsDiff;
+    };
+    constructor(origin: string, cause: Error, diff: PermissionsDiff);
+}
 export declare class InvalidApprovedPermissionError extends Error {
     data: {
         origin: string;
@@ -152,6 +163,13 @@ export declare class DuplicateCaveatError extends Error {
     };
     constructor(caveatType: string, origin: string, targetName: string);
 }
+export declare class CaveatMergeTypeMismatchError extends Error {
+    data: {
+        leftCaveatType: string;
+        rightCaveatType: string;
+    };
+    constructor(leftCaveatType: string, rightCaveatType: string);
+}
 export declare class CaveatSpecificationMismatchError extends Error {
     data: {
         caveatSpec: Record<string, unknown>;
diff --git a/dist/types/errors.d.ts.map b/dist/types/errors.d.ts.map
index 568078772cfdfee834eac74a4802c13c20aa1493..3bc90f4a8d9f7b0c4285e1a7c3bbf3aade5dd927 100644
--- a/dist/types/errors.d.ts.map
+++ b/dist/types/errors.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"errors.d.ts","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,qBAAqB,EAAE,MAAM,sBAAsB,CAAC;AAClE,OAAO,EAIL,YAAY,EACb,MAAM,sBAAsB,CAAC;AAE9B,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAEnD,aAAK,eAAe,GAAG;IACrB,IAAI,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC/B,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB,CAAC;AAEF;;;;;GAKG;AACH,wBAAgB,YAAY,CAAC,IAAI,EAAE,eAAe,iFAMjD;AAED;;;;;;GAMG;AACH,wBAAgB,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,qBAAqB,8EAQ1E;AAED,aAAK,gBAAgB,GAAG;IACtB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,IAAI,CAAC,EAAE,qBAAqB,CAAC;CAC9B,CAAC;AAEF;;;;;GAKG;AACH,wBAAgB,aAAa,CAAC,IAAI,EAAE,gBAAgB;;;;;UAKnD;AAED;;;;;GAKG;AACH,wBAAgB,mBAAmB,CAAC,IAAI,SAAS,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EACtE,IAAI,CAAC,EAAE,IAAI,GACV,YAAY,CAAC,IAAI,CAAC,CAEpB;AAED;;;;;;GAMG;AACH,wBAAgB,aAAa,CAAC,IAAI,SAAS,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EAChE,OAAO,EAAE,MAAM,EACf,IAAI,CAAC,EAAE,IAAI,GACV,YAAY,CAAC,IAAI,CAAC,CAEpB;AAED,qBAAa,6BAA8B,SAAQ,KAAK;gBAC1C,MAAM,EAAE,OAAO;CAO5B;AAED,qBAAa,wBAAyB,SAAQ,KAAK;gBACrC,MAAM,EAAE,MAAM;CAG3B;AAED,qBAAa,8BAA+B,SAAQ,KAAK;IAChD,IAAI,EAAE;QACX,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;QACf,kBAAkB,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;KAC7C,CAAC;gBAGA,MAAM,EAAE,MAAM,EACd,MAAM,EAAE,MAAM,EACd,kBAAkB,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC;CAO9C;AACD,qBAAa,2BAA4B,SAAQ,KAAK;gBACxC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAG3C;AAED,qBAAa,oCAAqC,SAAQ,KAAK;IACtD,IAAI,CAAC,EAAE;QAAE,MAAM,EAAE,MAAM,CAAA;KAAE,CAAC;gBAErB,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM;CAM5C;AAED,qBAAa,2BAA4B,SAAQ,KAAK;IAC7C,IAAI,EAAE;QACX,UAAU,EAAE,MAAM,CAAC;QACnB,MAAM,CAAC,EAAE,MAAM,CAAC;QAChB,MAAM,CAAC,EAAE,MAAM,CAAC;KACjB,CAAC;gBAEU,UAAU,EAAE,MAAM;gBAElB,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAa/D;AAED,qBAAa,2BAA4B,SAAQ,KAAK;IAC7C,IAAI,EAAE;QAAE,MAAM,EAAE,MAAM,CAAC;QAAC,MAAM,EAAE,MAAM,CAAC;QAAC,eAAe,EAAE,OAAO,CAAA;KAAE,CAAC;gBAE9D,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,eAAe,EAAE,OAAO;CAMrE;AAED,qBAAa,uBAAwB,SAAQ,KAAK;gBACpC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM;CAK/D;AAED,qBAAa,wBAAyB,SAAQ,KAAK;gBACrC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM;CAK/D;AAED,qBAAa,kBAAmB,SAAQ,YAAY,CAClD,qBAAqB,GAAG,SAAS,CAClC;IACiB,IAAI,EAAE;QAAE,MAAM,EAAE,MAAM,CAAC;QAAC,MAAM,EAAE,MAAM,CAAA;KAAE,CAAC;gBAE7C,cAAc,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAQpE;AAED,qBAAa,sBAAuB,SAAQ,KAAK;IACxC,IAAI,EAAE;QACX,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAChC,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;KAChB,CAAC;gBAEU,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAI5E;AAED,qBAAa,uBAAwB,SAAQ,KAAK;IACzC,IAAI,EAAE;QACX,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAChC,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;KAChB,CAAC;gBAEU,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAI5E;AAED,qBAAa,sBAAuB,SAAQ,KAAK;IACxC,IAAI,EAAE;QACX,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAChC,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;KAChB,CAAC;gBAEU,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAI5E;AAED,qBAAa,wBAAyB,SAAQ,KAAK;IAC1C,IAAI,EAAE;QACX,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAChC,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;KAChB,CAAC;gBAEU,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAM5E;AAED,qBAAa,oBAAqB,SAAQ,KAAK;IACtC,IAAI,EAAE;QACX,UAAU,EAAE,MAAM,CAAC;QACnB,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;KAChB,CAAC;gBAEU,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM;CAMnE;AAED,qBAAa,oBAAqB,SAAQ,KAAK;IACtC,IAAI,EAAE;QACX,UAAU,EAAE,MAAM,CAAC;QACnB,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;KAChB,CAAC;gBAEU,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM;CAMnE;AAED,qBAAa,gCAAiC,SAAQ,KAAK;IAClD,IAAI,EAAE;QACX,UAAU,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACpC,cAAc,EAAE,cAAc,CAAC;KAChC,CAAC;gBAGA,UAAU,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EACnC,cAAc,EAAE,cAAc;CAOjC;AAED,qBAAa,+BAAgC,SAAQ,KAAK;gBAC5C,EAAE,EAAE,MAAM;CAGvB"}
\ No newline at end of file
+{"version":3,"file":"errors.d.ts","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types/permission-middleware.d.ts b/dist/types/permission-middleware.d.ts
index 68d26a3728c6cd88186d9619edbe822f23fb46a7..e131a7849cdc908425593514b2ce4033eb13c9cc 100644
--- a/dist/types/permission-middleware.d.ts
+++ b/dist/types/permission-middleware.d.ts
@@ -1,7 +1,7 @@
 import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';
 import type { Json } from '@metamask/utils';
 import type { GenericPermissionController, PermissionSubjectMetadata, RestrictedMethodParameters } from '.';
-declare type PermissionMiddlewareFactoryOptions = {
+type PermissionMiddlewareFactoryOptions = {
     executeRestrictedMethod: GenericPermissionController['_executeRestrictedMethod'];
     getRestrictedMethod: GenericPermissionController['getRestrictedMethod'];
     isUnrestrictedMethod: (method: string) => boolean;
diff --git a/dist/types/permission-middleware.d.ts.map b/dist/types/permission-middleware.d.ts.map
index 44322222fc3049dcbee8256c99fe84731f8464f7..d10fa6df86125a8b96a382925b76db942f7fed4d 100644
--- a/dist/types/permission-middleware.d.ts.map
+++ b/dist/types/permission-middleware.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"permission-middleware.d.ts","sourceRoot":"","sources":["../../src/permission-middleware.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAGV,iBAAiB,EAElB,MAAM,2BAA2B,CAAC;AACnC,OAAO,KAAK,EACV,IAAI,EAGL,MAAM,iBAAiB,CAAC;AAEzB,OAAO,KAAK,EACV,2BAA2B,EAC3B,yBAAyB,EACzB,0BAA0B,EAC3B,MAAM,GAAG,CAAC;AAKX,aAAK,kCAAkC,GAAG;IACxC,uBAAuB,EAAE,2BAA2B,CAAC,0BAA0B,CAAC,CAAC;IACjF,mBAAmB,EAAE,2BAA2B,CAAC,qBAAqB,CAAC,CAAC;IACxE,oBAAoB,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK,OAAO,CAAC;CACnD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,wBAAgB,8BAA8B,CAAC,EAC7C,uBAAuB,EACvB,mBAAmB,EACnB,oBAAoB,GACrB,EAAE,kCAAkC,aAExB,yBAAyB,KACjC,kBAAkB,0BAA0B,EAAE,IAAI,CAAC,CA2CvD"}
\ No newline at end of file
+{"version":3,"file":"permission-middleware.d.ts","sourceRoot":"","sources":["../../src/permission-middleware.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAGV,iBAAiB,EAElB,MAAM,2BAA2B,CAAC;AACnC,OAAO,KAAK,EACV,IAAI,EAGL,MAAM,iBAAiB,CAAC;AAEzB,OAAO,KAAK,EACV,2BAA2B,EAC3B,yBAAyB,EACzB,0BAA0B,EAC3B,MAAM,GAAG,CAAC;AAKX,KAAK,kCAAkC,GAAG;IACxC,uBAAuB,EAAE,2BAA2B,CAAC,0BAA0B,CAAC,CAAC;IACjF,mBAAmB,EAAE,2BAA2B,CAAC,qBAAqB,CAAC,CAAC;IACxE,oBAAoB,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK,OAAO,CAAC;CACnD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,wBAAgB,8BAA8B,CAAC,EAC7C,uBAAuB,EACvB,mBAAmB,EACnB,oBAAoB,GACrB,EAAE,kCAAkC,aAExB,yBAAyB,KACjC,kBAAkB,0BAA0B,EAAE,IAAI,CAAC,CA2CvD"}
\ No newline at end of file
diff --git a/dist/types/rpc-methods/getPermissions.d.ts b/dist/types/rpc-methods/getPermissions.d.ts
index 8bbfe6446ca2b8462efaf79639193c253a5bc76b..041e1515bb86ee02899c3b75680203476768d503 100644
--- a/dist/types/rpc-methods/getPermissions.d.ts
+++ b/dist/types/rpc-methods/getPermissions.d.ts
@@ -3,7 +3,7 @@ import type { SubjectPermissions } from '../PermissionController';
 import type { PermittedHandlerExport } from '../utils';
 export declare const getPermissionsHandler: PermittedHandlerExport<GetPermissionsHooks, [
 ], PermissionConstraint[]>;
-export declare type GetPermissionsHooks = {
+export type GetPermissionsHooks = {
     getPermissionsForOrigin: () => SubjectPermissions<PermissionConstraint>;
 };
 //# sourceMappingURL=getPermissions.d.ts.map
\ No newline at end of file
diff --git a/dist/types/rpc-methods/getPermissions.d.ts.map b/dist/types/rpc-methods/getPermissions.d.ts.map
index 1d3835e90d91fd2bb61b9eeaae31e92637309419..2825eff2578d9142e62fc5ff3c779f31c2daeca2 100644
--- a/dist/types/rpc-methods/getPermissions.d.ts.map
+++ b/dist/types/rpc-methods/getPermissions.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"getPermissions.d.ts","sourceRoot":"","sources":["../../../src/rpc-methods/getPermissions.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAClE,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,UAAU,CAAC;AAGvD,eAAO,MAAM,qBAAqB,EAAE,sBAAsB,CACxD,mBAAmB,EACnB;CAAE,EACF,oBAAoB,EAAE,CAOvB,CAAC;AAEF,oBAAY,mBAAmB,GAAG;IAEhC,uBAAuB,EAAE,MAAM,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;CACzE,CAAC"}
\ No newline at end of file
+{"version":3,"file":"getPermissions.d.ts","sourceRoot":"","sources":["../../../src/rpc-methods/getPermissions.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAClE,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,UAAU,CAAC;AAGvD,eAAO,MAAM,qBAAqB,EAAE,sBAAsB,CACxD,mBAAmB,EACnB;CAAE,EACF,oBAAoB,EAAE,CAOvB,CAAC;AAEF,MAAM,MAAM,mBAAmB,GAAG;IAEhC,uBAAuB,EAAE,MAAM,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;CACzE,CAAC"}
\ No newline at end of file
diff --git a/dist/types/rpc-methods/index.d.ts b/dist/types/rpc-methods/index.d.ts
index 876d6ddf2c675c8062bb752c86db29d690e0b9e6..586e861c83b9fe044a5a312ae94ba4039c0f18f2 100644
--- a/dist/types/rpc-methods/index.d.ts
+++ b/dist/types/rpc-methods/index.d.ts
@@ -1,8 +1,6 @@
 import type { GetPermissionsHooks } from './getPermissions';
 import type { RequestPermissionsHooks } from './requestPermissions';
 import type { RevokePermissionsHooks } from './revokePermissions';
-export declare type PermittedRpcMethodHooks = RequestPermissionsHooks & GetPermissionsHooks & RevokePermissionsHooks;
-export declare const handlers: readonly [import("..").PermittedHandlerExport<RequestPermissionsHooks, [import("..").RequestedPermissions], import("..").PermissionConstraint[]>, import("..").PermittedHandlerExport<GetPermissionsHooks, [], import("..").PermissionConstraint[]>, import("..").PermittedHandlerExport<RevokePermissionsHooks, {
-    [x: string]: import("@metamask/utils").Json;
-}, null>];
+export type PermittedRpcMethodHooks = RequestPermissionsHooks & GetPermissionsHooks & RevokePermissionsHooks;
+export declare const handlers: readonly [import("..").PermittedHandlerExport<RequestPermissionsHooks, [import("..").RequestedPermissions], import("..").PermissionConstraint[]>, import("..").PermittedHandlerExport<GetPermissionsHooks, [], import("..").PermissionConstraint[]>, import("..").PermittedHandlerExport<RevokePermissionsHooks, import("./revokePermissions").RevokePermissionArgs, null>];
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/dist/types/rpc-methods/index.d.ts.map b/dist/types/rpc-methods/index.d.ts.map
index 71db6a86d9dc2cbb6a45481324023de4d5a297b4..c7ec7d6e108efa446429ec847fe8fb0e55e046d4 100644
--- a/dist/types/rpc-methods/index.d.ts.map
+++ b/dist/types/rpc-methods/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/rpc-methods/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAE5D,OAAO,KAAK,EAAE,uBAAuB,EAAE,MAAM,sBAAsB,CAAC;AAEpE,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAGlE,oBAAY,uBAAuB,GAAG,uBAAuB,GAC3D,mBAAmB,GACnB,sBAAsB,CAAC;AAEzB,eAAO,MAAM,QAAQ;;SAIX,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/rpc-methods/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAE5D,OAAO,KAAK,EAAE,uBAAuB,EAAE,MAAM,sBAAsB,CAAC;AAEpE,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAGlE,MAAM,MAAM,uBAAuB,GAAG,uBAAuB,GAC3D,mBAAmB,GACnB,sBAAsB,CAAC;AAEzB,eAAO,MAAM,QAAQ,6WAIX,CAAC"}
\ No newline at end of file
diff --git a/dist/types/rpc-methods/requestPermissions.d.ts b/dist/types/rpc-methods/requestPermissions.d.ts
index fdac1bf547b5a433e3819ccd50d4b66e3e4763ad..fa24ca10534a67c6485f7e74f4645e63e5f6a22e 100644
--- a/dist/types/rpc-methods/requestPermissions.d.ts
+++ b/dist/types/rpc-methods/requestPermissions.d.ts
@@ -3,14 +3,14 @@ import type { PermittedHandlerExport } from '../utils';
 export declare const requestPermissionsHandler: PermittedHandlerExport<RequestPermissionsHooks, [
     RequestedPermissions
 ], PermissionConstraint[]>;
-declare type RequestPermissions = (requestedPermissions: RequestedPermissions) => Promise<[
+type RequestPermissions = (requestedPermissions: RequestedPermissions) => Promise<[
     Record<string, PermissionConstraint>,
     {
         id: string;
         origin: string;
     }
 ]>;
-export declare type RequestPermissionsHooks = {
+export type RequestPermissionsHooks = {
     requestPermissionsForOrigin: RequestPermissions;
 };
 export {};
diff --git a/dist/types/rpc-methods/requestPermissions.d.ts.map b/dist/types/rpc-methods/requestPermissions.d.ts.map
index 057969d3d23c8431f4113fa02d144b406ad075f4..d66b6b228f1150ca22670d8305f29919cbb64a74 100644
--- a/dist/types/rpc-methods/requestPermissions.d.ts.map
+++ b/dist/types/rpc-methods/requestPermissions.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"requestPermissions.d.ts","sourceRoot":"","sources":["../../../src/rpc-methods/requestPermissions.ts"],"names":[],"mappings":"AAKA,OAAO,KAAK,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAChF,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,UAAU,CAAC;AAGvD,eAAO,MAAM,yBAAyB,EAAE,sBAAsB,CAC5D,uBAAuB,EACvB;IAAC,oBAAoB;CAAC,EACtB,oBAAoB,EAAE,CAOvB,CAAC;AAEF,aAAK,kBAAkB,GAAG,CACxB,oBAAoB,EAAE,oBAAoB,KACvC,OAAO,CACV;IAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,CAAC;IAAE;QAAE,EAAE,EAAE,MAAM,CAAC;QAAC,MAAM,EAAE,MAAM,CAAA;KAAE;CAAC,CACvE,CAAC;AAEF,oBAAY,uBAAuB,GAAG;IACpC,2BAA2B,EAAE,kBAAkB,CAAC;CACjD,CAAC"}
\ No newline at end of file
+{"version":3,"file":"requestPermissions.d.ts","sourceRoot":"","sources":["../../../src/rpc-methods/requestPermissions.ts"],"names":[],"mappings":"AAKA,OAAO,KAAK,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAChF,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,UAAU,CAAC;AAGvD,eAAO,MAAM,yBAAyB,EAAE,sBAAsB,CAC5D,uBAAuB,EACvB;IAAC,oBAAoB;CAAC,EACtB,oBAAoB,EAAE,CAOvB,CAAC;AAEF,KAAK,kBAAkB,GAAG,CACxB,oBAAoB,EAAE,oBAAoB,KACvC,OAAO,CACV;IAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,CAAC;IAAE;QAAE,EAAE,EAAE,MAAM,CAAC;QAAC,MAAM,EAAE,MAAM,CAAA;KAAE;CAAC,CACvE,CAAC;AAEF,MAAM,MAAM,uBAAuB,GAAG;IACpC,2BAA2B,EAAE,kBAAkB,CAAC;CACjD,CAAC"}
\ No newline at end of file
diff --git a/dist/types/rpc-methods/revokePermissions.d.ts b/dist/types/rpc-methods/revokePermissions.d.ts
index 0cb51bcaec480d36b6c6e7d1e5ee3d2817cd1408..83c75d694d756d62782782238f7cdfc29155975d 100644
--- a/dist/types/rpc-methods/revokePermissions.d.ts
+++ b/dist/types/rpc-methods/revokePermissions.d.ts
@@ -2,9 +2,9 @@ import { type Json, type NonEmptyArray } from '@metamask/utils';
 import type { PermissionConstraint } from '../Permission';
 import type { PermittedHandlerExport } from '../utils';
 export declare const revokePermissionsHandler: PermittedHandlerExport<RevokePermissionsHooks, RevokePermissionArgs, null>;
-declare type RevokePermissionArgs = Record<PermissionConstraint['parentCapability'], Json>;
-declare type RevokePermissions = (permissions: NonEmptyArray<PermissionConstraint['parentCapability']>) => void;
-export declare type RevokePermissionsHooks = {
+export type RevokePermissionArgs = Record<PermissionConstraint['parentCapability'], Json>;
+type RevokePermissions = (permissions: NonEmptyArray<PermissionConstraint['parentCapability']>) => void;
+export type RevokePermissionsHooks = {
     revokePermissionsForOrigin: RevokePermissions;
 };
 export {};
diff --git a/dist/types/rpc-methods/revokePermissions.d.ts.map b/dist/types/rpc-methods/revokePermissions.d.ts.map
index 779d713b7f0770139048a0a163f74623416c1a03..8881982a9f60a57c79d88bc8cd053421193018ec 100644
--- a/dist/types/rpc-methods/revokePermissions.d.ts.map
+++ b/dist/types/rpc-methods/revokePermissions.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"revokePermissions.d.ts","sourceRoot":"","sources":["../../../src/rpc-methods/revokePermissions.ts"],"names":[],"mappings":"AACA,OAAO,EAEL,KAAK,IAAI,EAET,KAAK,aAAa,EAEnB,MAAM,iBAAiB,CAAC;AAGzB,OAAO,KAAK,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,UAAU,CAAC;AAGvD,eAAO,MAAM,wBAAwB,EAAE,sBAAsB,CAC3D,sBAAsB,EACtB,oBAAoB,EACpB,IAAI,CAOL,CAAC;AAEF,aAAK,oBAAoB,GAAG,MAAM,CAChC,oBAAoB,CAAC,kBAAkB,CAAC,EACxC,IAAI,CACL,CAAC;AAEF,aAAK,iBAAiB,GAAG,CACvB,WAAW,EAAE,aAAa,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC,KACjE,IAAI,CAAC;AAEV,oBAAY,sBAAsB,GAAG;IACnC,0BAA0B,EAAE,iBAAiB,CAAC;CAC/C,CAAC"}
\ No newline at end of file
+{"version":3,"file":"revokePermissions.d.ts","sourceRoot":"","sources":["../../../src/rpc-methods/revokePermissions.ts"],"names":[],"mappings":"AACA,OAAO,EAEL,KAAK,IAAI,EAET,KAAK,aAAa,EAEnB,MAAM,iBAAiB,CAAC;AAGzB,OAAO,KAAK,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,UAAU,CAAC;AAGvD,eAAO,MAAM,wBAAwB,EAAE,sBAAsB,CAC3D,sBAAsB,EACtB,oBAAoB,EACpB,IAAI,CAOL,CAAC;AAEF,MAAM,MAAM,oBAAoB,GAAG,MAAM,CACvC,oBAAoB,CAAC,kBAAkB,CAAC,EACxC,IAAI,CACL,CAAC;AAEF,KAAK,iBAAiB,GAAG,CACvB,WAAW,EAAE,aAAa,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC,KACjE,IAAI,CAAC;AAEV,MAAM,MAAM,sBAAsB,GAAG;IACnC,0BAA0B,EAAE,iBAAiB,CAAC;CAC/C,CAAC"}
\ No newline at end of file
diff --git a/dist/types/utils.d.ts b/dist/types/utils.d.ts
index 0240e340269122a1369e7e67b5886e3e1e5775a5..bba0e2524fe22d3f94af76d7aa1b70bca9e9b607 100644
--- a/dist/types/utils.d.ts
+++ b/dist/types/utils.d.ts
@@ -15,24 +15,24 @@ export declare enum MethodNames {
  * @template SpecificationsMap - The caveat or permission specifications map
  * whose specification type union to extract.
  */
-export declare type ExtractSpecifications<SpecificationsMap extends CaveatSpecificationMap<CaveatSpecificationConstraint> | PermissionSpecificationMap<PermissionSpecificationConstraint>> = SpecificationsMap[keyof SpecificationsMap];
+export type ExtractSpecifications<SpecificationsMap extends CaveatSpecificationMap<CaveatSpecificationConstraint> | PermissionSpecificationMap<PermissionSpecificationConstraint>> = SpecificationsMap[keyof SpecificationsMap];
 /**
  * A middleware function for handling a permitted method.
  */
-export declare type HandlerMiddlewareFunction<T, U extends JsonRpcParams, V extends Json> = (req: JsonRpcRequest<U>, res: PendingJsonRpcResponse<V>, next: JsonRpcEngineNextCallback, end: JsonRpcEngineEndCallback, hooks: T) => void | Promise<void>;
+export type HandlerMiddlewareFunction<T, U extends JsonRpcParams, V extends Json> = (req: JsonRpcRequest<U>, res: PendingJsonRpcResponse<V>, next: JsonRpcEngineNextCallback, end: JsonRpcEngineEndCallback, hooks: T) => void | Promise<void>;
 /**
  * We use a mapped object type in order to create a type that requires the
  * presence of the names of all hooks for the given handler.
  * This can then be used to select only the necessary hooks whenever a method
  * is called for purposes of POLA.
  */
-export declare type HookNames<T> = {
+export type HookNames<T> = {
     [Property in keyof T]: true;
 };
 /**
  * A handler for a permitted method.
  */
-export declare type PermittedHandlerExport<T, U extends JsonRpcParams, V extends Json> = {
+export type PermittedHandlerExport<T, U extends JsonRpcParams, V extends Json> = {
     implementation: HandlerMiddlewareFunction<T, U, V>;
     hookNames: HookNames<T>;
     methodNames: string[];
diff --git a/dist/types/utils.d.ts.map b/dist/types/utils.d.ts.map
index fe6a0de5eb2398f5a1c86a81d53bab99c9e1ac56..072c74932c75c2783cd6bd0308a2830af4913bbd 100644
--- a/dist/types/utils.d.ts.map
+++ b/dist/types/utils.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,wBAAwB,EACxB,yBAAyB,EAC1B,MAAM,2BAA2B,CAAC;AACnC,OAAO,KAAK,EACV,IAAI,EACJ,aAAa,EACb,cAAc,EACd,sBAAsB,EACvB,MAAM,iBAAiB,CAAC;AAEzB,OAAO,KAAK,EACV,6BAA6B,EAC7B,sBAAsB,EACvB,MAAM,UAAU,CAAC;AAClB,OAAO,KAAK,EACV,iCAAiC,EACjC,0BAA0B,EAC3B,MAAM,cAAc,CAAC;AAEtB,oBAAY,WAAW;IACrB,kBAAkB,8BAA8B;IAChD,cAAc,0BAA0B;IACxC,iBAAiB,6BAA6B;CAC/C;AAED;;;;;;;GAOG;AACH,oBAAY,qBAAqB,CAC/B,iBAAiB,SACb,sBAAsB,CAAC,6BAA6B,CAAC,GACrD,0BAA0B,CAAC,iCAAiC,CAAC,IAC/D,iBAAiB,CAAC,MAAM,iBAAiB,CAAC,CAAC;AAE/C;;GAEG;AACH,oBAAY,yBAAyB,CACnC,CAAC,EACD,CAAC,SAAS,aAAa,EACvB,CAAC,SAAS,IAAI,IACZ,CACF,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC,EACtB,GAAG,EAAE,sBAAsB,CAAC,CAAC,CAAC,EAC9B,IAAI,EAAE,yBAAyB,EAC/B,GAAG,EAAE,wBAAwB,EAC7B,KAAK,EAAE,CAAC,KACL,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAE1B;;;;;GAKG;AACH,oBAAY,SAAS,CAAC,CAAC,IAAI;KACxB,QAAQ,IAAI,MAAM,CAAC,GAAG,IAAI;CAC5B,CAAC;AAEF;;GAEG;AACH,oBAAY,sBAAsB,CAChC,CAAC,EACD,CAAC,SAAS,aAAa,EACvB,CAAC,SAAS,IAAI,IACZ;IACF,cAAc,EAAE,yBAAyB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;IACxB,WAAW,EAAE,MAAM,EAAE,CAAC;CACvB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,wBAAwB,EACxB,yBAAyB,EAC1B,MAAM,2BAA2B,CAAC;AACnC,OAAO,KAAK,EACV,IAAI,EACJ,aAAa,EACb,cAAc,EACd,sBAAsB,EACvB,MAAM,iBAAiB,CAAC;AAEzB,OAAO,KAAK,EACV,6BAA6B,EAC7B,sBAAsB,EACvB,MAAM,UAAU,CAAC;AAClB,OAAO,KAAK,EACV,iCAAiC,EACjC,0BAA0B,EAC3B,MAAM,cAAc,CAAC;AAEtB,oBAAY,WAAW;IACrB,kBAAkB,8BAA8B;IAChD,cAAc,0BAA0B;IACxC,iBAAiB,6BAA6B;CAC/C;AAED;;;;;;;GAOG;AACH,MAAM,MAAM,qBAAqB,CAC/B,iBAAiB,SACb,sBAAsB,CAAC,6BAA6B,CAAC,GACrD,0BAA0B,CAAC,iCAAiC,CAAC,IAC/D,iBAAiB,CAAC,MAAM,iBAAiB,CAAC,CAAC;AAE/C;;GAEG;AACH,MAAM,MAAM,yBAAyB,CACnC,CAAC,EACD,CAAC,SAAS,aAAa,EACvB,CAAC,SAAS,IAAI,IACZ,CACF,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC,EACtB,GAAG,EAAE,sBAAsB,CAAC,CAAC,CAAC,EAC9B,IAAI,EAAE,yBAAyB,EAC/B,GAAG,EAAE,wBAAwB,EAC7B,KAAK,EAAE,CAAC,KACL,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAE1B;;;;;GAKG;AACH,MAAM,MAAM,SAAS,CAAC,CAAC,IAAI;KACxB,QAAQ,IAAI,MAAM,CAAC,GAAG,IAAI;CAC5B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,sBAAsB,CAChC,CAAC,EACD,CAAC,SAAS,aAAa,EACvB,CAAC,SAAS,IAAI,IACZ;IACF,cAAc,EAAE,yBAAyB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;IACxB,WAAW,EAAE,MAAM,EAAE,CAAC;CACvB,CAAC"}
\ No newline at end of file
diff --git a/dist/utils.js b/dist/utils.js
index a454eb2f4b08fa70b5fad4cf4a92a7d22cb86b8e..c02c86ae8c86bfd2b0c9c885f246e8082a479d2a 100644
--- a/dist/utils.js
+++ b/dist/utils.js
@@ -1,7 +1,7 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
 var _chunkK5R57Y57js = require('./chunk-K5R57Y57.js');
-require('./chunk-CSAU5B4Q.js');
+require('./chunk-Z2XKIXLS.js');
 
 
 exports.MethodNames = _chunkK5R57Y57js.MethodNames;
diff --git a/dist/utils.mjs b/dist/utils.mjs
index 344e77fa065f1baa717d2826b9bbb03419c10fb9..1790c5312d8895175310e367c5dea778e00f26f9 100644
--- a/dist/utils.mjs
+++ b/dist/utils.mjs
@@ -1,7 +1,7 @@
 import {
   MethodNames
 } from "./chunk-KVKKNDYV.mjs";
-import "./chunk-ZSTKOCBT.mjs";
+import "./chunk-2L4QPE5A.mjs";
 export {
   MethodNames
 };
